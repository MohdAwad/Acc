@model Acc.ViewModels.St_ItemCardVM
@{
    ViewBag.Title = @Resources.Resource.Update;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .panel-body {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-footer {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-title {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .dt-button {
        display: none !important;
    }

    #SimilarItemGrid_DXHeadersRow0 {
        font-family: Verdana, Geneva, Tahoma, sans-serif !important;
        font-size: 10pt;
    }

    #SimilarItemGrid_col0 {
        width: 55px;
    }

    .hideColumn {
        display: none !important;
    }

    #AlternativeItemGrid_DXHeadersRow0 {
        font-family: Verdana, Geneva, Tahoma, sans-serif !important;
        font-size: 10pt;
    }

    #AlternativeItemGrid_col0 {
        width: 55px;
    }

    #Offer1ItemGrid_DXHeadersRow0 {
        font-family: Verdana, Geneva, Tahoma, sans-serif !important;
        font-size: 10pt;
    }

    #Offer1ItemGrid_col0 {
        width: 55px;
    }

    #Offer2ItemGrid_DXHeadersRow0 {
        font-family: Verdana, Geneva, Tahoma, sans-serif !important;
        font-size: 10pt;
    }

    #Offer2ItemGrid_col0 {
        width: 55px;
    }

    #OtherUnitItemGrid_DXHeadersRow0 {
        font-family: Verdana, Geneva, Tahoma, sans-serif !important;
        font-size: 10pt;
    }

    #OtherUnitItemGrid_col0 {
        width: 55px;
    }

    .dxgvBatchEditNewItem_iOS {
        font-family: Verdana, Geneva, Tahoma, sans-serif !important;
        font-size: 10pt;
    }

    .dxgvControl_iOS {
        width: 100% !important;
    }
</style>
<link href="~/Content/jquery-ui.css" rel="stylesheet" />
<script>
    var ImgPath='@Model.ItemLogo';
    //Start Similar Item Card-------------------------------------------
    var currentEditedValueSimilarItemCode;
    var lastVisibleIndexSimilarItemCode;
    var FocusedCellColumnIndexSimilarItemCode = 0;
    var FocusedCellRowIndexSimilarItemCode = 0;
    function ClearGridSimilarItem(s, e) {
        SimilarItemGrid.PerformCallback('clear');
    }
    function OnInitSimilarItem(s, e) {
            ASPxClientUtils.AttachEventToElement(
            s.GetMainElement(),
                "keydown",
                function (evt) {
                });
    };
    function Grid_BatchEditEndEditingSimilarItem(s, e) {
        var productNameColumn = s.GetColumnByField("SimilarItemCode");
        if (!e.rowValues.hasOwnProperty(productNameColumn.index))
            return;
        if (FocusedCellColumnIndexSimilarItemCode == 1) {
            var ItemCodeIndex = s.GetColumnByField("SimilarItemCode").index;
            var ItemCode = e.rowValues[ItemCodeIndex].value;
            if (!ItemCode) {
                SimilarItemGrid.batchEditApi.SetCellValue(lastVisibleIndexSimilarItemCode, "SimilarItemCode", "");
            }
            else {
                if (ItemCode != null && ItemCode != '') {
                    $.getJSON('@Url.Action("CheckIfItemCodeExistingInSimilar", "St_ItemCard")', { id: ItemCode }, function (Data) {
                        if (Data.trim() != '') {
                            var iCheck = 0;
                            var SimilarItemType = 0;
                            var OldSimilarItemRowNumber = 0;
                            var visibleRowIndicesSimilarItemCode = SimilarItemGridCheck.batchEditApi.GetRowVisibleIndices();
                            for (var i = 0; i < visibleRowIndicesSimilarItemCode.length; i++) {
                                var SimilarItemCode = SimilarItemGridCheck.batchEditApi.GetCellValue(visibleRowIndicesSimilarItemCode[i], "SimilarItemCode");
                                if (SimilarItemCode == Data) {
                                    OldSimilarItemRowNumber = SimilarItemGridCheck.batchEditApi.GetCellValue(visibleRowIndicesSimilarItemCode[i], "OldSimilarItemRowNumber");
                                    iCheck = 1;
                                    break;
                                }
                            }
                            if (iCheck == 1) {
                                SimilarItemGrid.batchEditApi.SetCellValue(lastVisibleIndexSimilarItemCode, "SimilarItemType", SimilarItemType);
                                SimilarItemGrid.batchEditApi.SetCellValue(lastVisibleIndexSimilarItemCode, "OldSimilarItemRowNumber", OldSimilarItemRowNumber);
                                SimilarItemGrid.AddNewRow();
                            }
                            else {
                                bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThisItemIsAlreadyEntered</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            SimilarItemGrid.batchEditApi.SetCellValue(lastVisibleIndexSimilarItemCode, "SimilarItemCode", "");
                            FocusedCellColumnIndexSimilarItemCode = 1;
                            }
                        }
                        else {
                            SimilarItemGrid.batchEditApi.SetCellValue(lastVisibleIndexSimilarItemCode, "OldSimilarItemRowNumber", 0);
                            SimilarItemGrid.AddNewRow();
                        }
                });
                }
            }
        }
        FocusedCellColumnIndexSimilarItemCode = 1;
        FocusedCellRowIndexSimilarItemCode = 1;
    }
    function Grid_BatchEditStartEditingSimilarItem(s, e) {
        FocusedCellColumnIndexSimilarItemCode = e.focusedColumn.index;
        FocusedCellRowIndexSimilarItemCode = e.visibleIndex;
        lastVisibleIndexSimilarItemCode= e.visibleIndex;
        currentEditedValueSimilarItemCode = s.GetRowKey(e.visibleIndex);
        currentKey = s.GetRowKey(e.visibleIndex);
    }
    function OnBeginCallbackSimilarItem(s, e) {
        e.customArgs["Reference"] = $("#Reference").val();
    }
    function OnEndCallbackSimilarItem(s, e) {
            if (s.cpSuccessFlag)
            {
                alert("All changes were saved");
                window.location = "@Url.Action("Success","Test1")";
            }
    }
    function Grid_DeleteRowEventSimilarItem(s, e) {
    }
    // End Similar Item Card--------------------------------------------
    //Start Alternative Item Card-------------------------------------------
    var currentEditedValueAlternativeItemCode;
    var lastVisibleIndexAlternativeItemCode;
    var FocusedCellColumnIndexAlternativeItemCode = 0;
    var FocusedCellRowIndexAlternativeItemCode = 0;
    function GetSelectedAlternativeItemCard(data) {
        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeItemCode", data.ItemCode);
        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeItemName", data.ItemName);
        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeSalePrice", data.SalePrice);
        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeQuantity", "0");
        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeCountryOfOrigin", data.CountryOfOriginName);
        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeUnit", data.ItemUnitName);
        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeManufacturerCompany", data.ManufacturerCompanyName);
        AlternativeItemGrid.batchEditApi.StartEdit(lastVisibleIndexAlternativeItemCode, 1);
    }
    var AlternativeItem = [];
     $.getJSON('@Url.Action("GetAllSt_ItemCard", "MultiUse")', { id: 0 }, function (Data) {
         AlternativeItem = [];
         for (var i = 0, len = Data.length; i < len; i++) {
             var r = {
                 label: Data[i].ItemName, value: Data[i].ItemCode, stop: Data[i].StopItem, unit: Data[i].ItemUnitName,
                 saleprice: Data[i].SalePrice, countryoforigin: Data[i].CountryOfOriginName, manufacruercompany: Data[i].ManufacturerCompanyName
             };
             AlternativeItem.push(r);
         }
     });
    function AutoCompleteAlternativeItem(s, e) {
        $(s.GetInputElement()).autocomplete({
          minLength: 0,
            source: AlternativeItem,
             select: function (event, ui) {
                 if (ui.item.stop == '0') {
                     s.SetValue(ui.item.value);
                     AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeItemName", ui.item.label);
                     AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeSalePrice", ui.item.saleprice);
                     AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeQuantity", "0");
                     AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeCountryOfOrigin", ui.item.countryoforigin);
                     AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeManufacturerCompany", ui.item.manufacruercompany);
                     AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeUnit", ui.item.unit);
                     AlternativeItemGrid.batchEditApi.GetCellValue()
                 }
                 else {
                     bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheItemCardIsSuspended</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                     FocusedCellColumnIndexAlternativeItemCode = 1;
                     s.SetValue('');
                     AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeItemName", "");
                     AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeSalePrice", "0.000");
                     AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeQuantity", "0");
                     AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeCountryOfOrigin", "");
                     AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeManufacturerCompany", "");
                     AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeUnit", "");
                 }
             return false;
             },
             position:
             {
                 my: "left top",
                 at: "left bottom",
                 of: s.GetMainElement()
             }

        });
    }
    function ClearGridAlternativeItem(s, e) {
        AlternativeItemGrid.PerformCallback('clear');
    }
    function OnInitAlternativeItem(s, e) {
            ASPxClientUtils.AttachEventToElement(
            s.GetMainElement(),
                "keydown",
                function (evt) {
                    if (evt.ctrlKey && FocusedCellColumnIndexAlternativeItemCode == 1) {
                        var dialog = bootbox.dialog({
                            title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                            message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                            closeButton: false
                        });
                        var url = '/MultiUse/SearchSt_ItemCard/AlternativeItemCard';
                        $.get(url, function (data) {
                            $('#modal-container').html(data);
                            $('#modal-container').modal('show');
                            dialog.modal('hide');
                        })
                    }
                });
    };
    function Grid_BatchEditEndEditingAlternativeItem(s, e) {
        var productNameColumn = s.GetColumnByField("AlternativeItemCode");
            if (!e.rowValues.hasOwnProperty(productNameColumn.index))
            return;
        if (FocusedCellColumnIndexAlternativeItemCode == 1) {
            var ItemCodeIndex = s.GetColumnByField("AlternativeItemCode").index;
                 var ItemCode = e.rowValues[ItemCodeIndex].value;
                 if (!ItemCode) {
                     AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeItemName", "");
                     AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeItemName", "");
                     AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeSalePrice", "0.000");
                     AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeQuantity", "0");
                     AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeCountryOfOrigin", "");
                     AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeManufacturerCompany", "");
                     AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeUnit", "");
                 }
                 else {
                     if (ItemCode != null && ItemCode != '') {
                         $.getJSON('@Url.Action("CheckItemCode", "St_ItemCard")', { id: ItemCode }, function (Data) {
                            if (Data == "") {
                                AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeItemCode", "");
                                AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeItemName", "");
                                AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeSalePrice", "0.000");
                                AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeQuantity", "0");
                                AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeCountryOfOrigin", "");
                                AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeManufacturerCompany", "");
                                AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeUnit", "");
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheItemCardDoesNotExist</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                FocusedCellColumnIndexAlternativeItemCode = 1;
                            }
                            else {
                                if (Data.StopItem) {
                                    AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeItemCode", "");
                                    AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeItemName", "");
                                    AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeSalePrice", "0.000");
                                    AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeQuantity", "0");
                                    AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeCountryOfOrigin", "");
                                    AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeManufacturerCompany", "");
                                    AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeUnit", "");
                                    bootbox.alert({
                                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheItemCardIsSuspended</h6>',
                                        className: 'rubberBand animated',
                                        buttons: {
                                            ok: {
                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                                className: 'btn-primary'
                                            }
                                        }
                                    });
                                    FocusedCellColumnIndexAlternativeItemCode = 1;
                                }
                                else {
                                    var ItemCode = document.getElementById("ItemCode").value;
                                    if (ItemCode == Data.ItemCode) {
                                        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeItemCode", "");
                                        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeItemName", "");
                                        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeSalePrice", "0.000");
                                        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeQuantity", "0");
                                        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeCountryOfOrigin", "");
                                        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeManufacturerCompany", "");
                                        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeUnit", "");
                                        bootbox.alert({
                                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAlternativeCodeIsTheSameItemCode</h6>',
                                            className: 'rubberBand animated',
                                            buttons: {
                                                ok: {
                                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                                    className: 'btn-primary'
                                                }
                                            }
                                        });
                                        FocusedCellColumnIndexAlternativeItemCode = 1;
                                    }
                                    else {
                                        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeItemCode", Data.ItemCode);
                                        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeItemName", Data.ItemName);
                                        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeSalePrice", Data.SalePrice);
                                        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeQuantity", "0");
                                        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeCountryOfOrigin", Data.CountryOfOriginName);
                                        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeManufacturerCompany", Data.ManufacturerCompanyName);
                                        AlternativeItemGrid.batchEditApi.SetCellValue(lastVisibleIndexAlternativeItemCode, "AlternativeUnit", Data.ItemUnitName);
                                        AlternativeItemGrid.AddNewRow();
                                    }
                                }
                            }
                        });
                    }
                }
            }
        FocusedCellColumnIndexAlternativeItemCode = 1;
        FocusedCellRowIndexAlternativeItemCode = 1;
    }
    function Grid_BatchEditStartEditingAlternativeItem(s, e) {
        FocusedCellColumnIndexAlternativeItemCode = e.focusedColumn.index;
        FocusedCellRowIndexAlternativeItemCode = e.visibleIndex;
        var productNameColumn = s.GetColumnByField("AlternativeItemCode");
        if (!e.rowValues.hasOwnProperty(productNameColumn.index))
            return;
        lastVisibleIndexAlternativeItemCode = e.visibleIndex;
        currentEditedValueAlternativeItemCode = s.GetRowKey(e.visibleIndex);
        currentKey = s.GetRowKey(e.visibleIndex);
    }
    function OnBeginCallbackAlternativeItem(s, e) {
        e.customArgs["Reference"] = $("#Reference").val();
    }
    function OnEndCallbackAlternativeItem(s, e) {
            if (s.cpSuccessFlag)
            {
                alert("All changes were saved");
                window.location = "@Url.Action("Success","Test1")";
            }
    }
    function Grid_DeleteRowEventAlternativeItem(s, e) {
    }
    // End Alternative Item Card--------------------------------------------
    //Start Other Unit Item -------------------------------------------
    var currentEditedValueOtherUnitItem;
    var lastVisibleIndexOtherUnitItem;
    var FocusedCellColumnIndexOtherUnitItem = 0;
    var FocusedCellRowIndexOtherUnitItem = 0;
    function GetSelectedOtherUnitItem(data) {
        OtherUnitItemGrid.batchEditApi.SetCellValue(lastVisibleIndexOtherUnitItem, "OtherUnitNumber", data.ItemUnitCode);
        OtherUnitItemGrid.batchEditApi.SetCellValue(lastVisibleIndexOtherUnitItem, "OtherUnitName", data.ItemUnitName);
        OtherUnitItemGrid.batchEditApi.StartEdit(lastVisibleIndexOtherUnitItem, 1);
    }
    var OtherUnit = [];
     $.getJSON('@Url.Action("GetSt_ItemUnit", "MultiUse")', { id: 0 }, function (Data) {
         OtherUnit = [];
         for (var i = 0, len = Data.length; i < len; i++) {
             var r = { label: Data[i].ItemUnitName, value: Data[i].ItemUnitCode };
             OtherUnit.push(r);
         }
     });
    function AutoCompleteOtherUnitItem(s, e) {
        $(s.GetInputElement()).autocomplete({
          minLength: 0,
            source: OtherUnit,
             select: function (event, ui) {
                 s.SetValue(ui.item.value);
                 OtherUnitItemGrid.batchEditApi.SetCellValue(lastVisibleIndexOtherUnitItem, "OtherUnitName", ui.item.label);
                 OtherUnitItemGrid.batchEditApi.GetCellValue()
             return false;
             },
             position:
             {
                 my: "left top",
                 at: "left bottom",
                 of: s.GetMainElement()
             }

        });
    }
    function ClearGridOtherUnitItem(s, e) {
        OtherUnitItemGrid.PerformCallback('clear');
    }
    function OnInitOtherUnitItem(s, e) {
            ASPxClientUtils.AttachEventToElement(
            s.GetMainElement(),
                "keydown",
                function (evt) {
                    if (evt.ctrlKey && FocusedCellColumnIndexOtherUnitItem == 1) {
                        var dialog = bootbox.dialog({
                            title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                            message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                            closeButton: false
                        });
                        var url = '/MultiUse/SearchSt_ItemUnit/ItemUnitCode';
                        $.get(url, function (data) {
                            $('#modal-container').html(data);
                            $('#modal-container').modal('show');
                            dialog.modal('hide');
                        })
                    }
                });
    };
    function Grid_BatchEditEndEditingOtherUnitItem(s, e) {
        var productNameColumn = s.GetColumnByField("OtherUnitNumber");
        if (!e.rowValues.hasOwnProperty(productNameColumn.index))
            return;
        if (FocusedCellColumnIndexOtherUnitItem == 1) {
            var ItemUnitIndex = s.GetColumnByField("OtherUnitNumber").index;
            var ItemUnit = e.rowValues[ItemUnitIndex].value;
            if (!ItemUnit) {
                OtherUnitItemGrid.batchEditApi.SetCellValue(lastVisibleIndexOtherUnitItem, "OtherUnitName", "");
            }
            else {
                if (ItemUnit != null && ItemUnit != '') {
                    $.getJSON('@Url.Action("CheckItemUnit", "St_ItemUnit")', { id: ItemUnit }, function (Data) {
                        if (Data == "") {
                            OtherUnitItemGrid.batchEditApi.SetCellValue(lastVisibleIndexOtherUnitItem, "OtherUnitNumber", "");
                            OtherUnitItemGrid.batchEditApi.SetCellValue(lastVisibleIndexOtherUnitItem, "OtherUnitName", "");
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheUnitDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            FocusedCellColumnIndexOtherUnitItem = 1;
                        }
                        else {
                            OtherUnitItemGrid.batchEditApi.SetCellValue(lastVisibleIndexOtherUnitItem, "OtherUnitNumber", Data.ItemUnitCode);
                            OtherUnitItemGrid.batchEditApi.SetCellValue(lastVisibleIndexOtherUnitItem, "OtherUnitName", Data.ItemUnitName);
                        }
                    });
                }
            }
        }
        else if (FocusedCellColumnIndexOtherUnitItem == 6) {
            var BarcodeIndex = s.GetColumnByField("OtherUnitBarcode").index;
            var Barcode = e.rowValues[BarcodeIndex].value;
            if (!Barcode) {
                OtherUnitItemGrid.batchEditApi.SetCellValue(lastVisibleIndexOtherUnitItem, "OtherUnitBarcode", "");
            }
            else {
                if (Barcode != null && Barcode != '') {
                    $.getJSON('@Url.Action("CheckIfItemCodeExistingInSimilar", "St_ItemCard")', { id: Barcode }, function (Data) {
                        if (Data.trim() != '') {
                            var iCheck = 0;
                            var OldOtherUnitRowNumber = 0;
                            var visibleRowIndicesOtherUnitItem = OtherUnitItemGridCheck.batchEditApi.GetRowVisibleIndices();
                            for (var i = 0; i < visibleRowIndicesOtherUnitItem.length; i++) {
                                var OtherUnitBarcode = OtherUnitItemGridCheck.batchEditApi.GetCellValue(visibleRowIndicesOtherUnitItem[i], "OtherUnitBarcode");
                                if (OtherUnitBarcode == Data) {
                                    OldOtherUnitRowNumber = OtherUnitItemGridCheck.batchEditApi.GetCellValue(visibleRowIndicesOtherUnitItem[i], "OldOtherUnitRowNumber");
                                    iCheck = 1;
                                    break;
                                }
                            }
                            if (iCheck == 1) {
                                OtherUnitItemGrid.batchEditApi.SetCellValue(lastVisibleIndexOtherUnitItem, "OldOtherUnitRowNumber", OldOtherUnitRowNumber);
                                OtherUnitItemGrid.AddNewRow();
                            }
                            else {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThisItemIsAlreadyEntered</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                OtherUnitItemGrid.batchEditApi.SetCellValue(lastVisibleIndexOtherUnitItem, "OtherUnitBarcode", "");
                                FocusedCellColumnIndexOtherUnitItem = 6;
                            }
                        }
                        else {
                            OtherUnitItemGrid.batchEditApi.SetCellValue(lastVisibleIndexOtherUnitItem, "OldOtherUnitRowNumber", 0);
                            OtherUnitItemGrid.AddNewRow();
                        }
                });
                }
            }
        }
        FocusedCellColumnIndexOtherUnitItem = 1;
        FocusedCellRowIndexOtherUnitItem = 1;
    }
    function Grid_BatchEditStartEditingOtherUnitItem(s, e) {
        FocusedCellColumnIndexOtherUnitItem = e.focusedColumn.index;
        FocusedCellRowIndexOtherUnitItem = e.visibleIndex;
        var productNameColumn = s.GetColumnByField("OtherUnitNumber");
        if (!e.rowValues.hasOwnProperty(productNameColumn.index))
            return;
        lastVisibleIndexOtherUnitItem = e.visibleIndex;
        currentEditedValueOtherUnitItem = s.GetRowKey(e.visibleIndex);
        currentKey = s.GetRowKey(e.visibleIndex);
    }
    function OnBeginCallbackOtherUnitItem(s, e) {
        e.customArgs["Reference"] = $("#Reference").val();
    }
    function OnEndCallbackOtherUnitItem(s, e) {
            if (s.cpSuccessFlag)
            {
                alert("All changes were saved");
                window.location = "@Url.Action("Success","Test1")";
            }
    }
    function Grid_DeleteRowEventOtherUnitItem(s, e) {
    }
    //End Other Unit Item-------------------------------------------
    //Start Offer 1 Item -------------------------------------------
    var currentEditedValueOffer1Item;
    var lastVisibleIndexOffer1Item;
    var FocusedCellColumnIndexOffer1Item = 0;
    var FocusedCellRowIndexOffer1Item = 0;
    function ClearGridOffer1Item(s, e) {
        Offer1ItemGrid.PerformCallback('clear');
    }
    function OnInitOffer1Item(s, e) {
            ASPxClientUtils.AttachEventToElement(
            s.GetMainElement(),
                "keydown",
                function (evt) {
                    switch (evt.keyCode) {
                        case 13:
                            if (FocusedCellColumnIndexOffer1Item == 2) {
                                s.AddNewRow();
                            }
                            break;
                    }
                });
    };
    function Grid_BatchEditEndEditingOffer1Item(s, e) {
        FocusedCellColumnIndexOffer1Item = 0;
        FocusedCellRowIndexOffer1Item = 0;
    }
    function Grid_BatchEditStartEditingOffer1Item(s, e) {
        FocusedCellColumnIndexOffer1Item = e.focusedColumn.index;
        FocusedCellRowIndexOffer1Item = e.visibleIndex;
        lastVisibleIndexOffer1Item = e.visibleIndex;
        currentEditedValueOffer1Item = s.GetRowKey(e.visibleIndex);
        currentKey = s.GetRowKey(e.visibleIndex);
    }
    function OnBeginCallbackOffer1Item(s, e) {
        e.customArgs["Reference"] = $("#Reference").val();
    }
    function OnEndCallbackOffer1Item(s, e) {
            if (s.cpSuccessFlag)
            {
                alert("All changes were saved");
                window.location = "@Url.Action("Success","Test1")";
            }
    }
    function Grid_DeleteRowEventOffer1Item(s, e) {
    }
    //End Offer 1 Item-------------------------------------------
    //Start Offer 2 Item -------------------------------------------
    var currentEditedValueOffer2Item;
    var lastVisibleIndexOffer2Item;
    var FocusedCellColumnIndexOffer2Item = 0;
    var FocusedCellRowIndexOffer2Item = 0;
    function ClearGridOffer2Item(s, e) {
        Offer2ItemGrid.PerformCallback('clear');
        setTimeout(function () {
            CalcSum(s, e);
        }, 1000);
    }
    function OnInitOffer2Item(s, e) {
            ASPxClientUtils.AttachEventToElement(
            s.GetMainElement(),
                "keydown",
                function (evt) {
                    switch (evt.keyCode) {
                        case 13:
                            if (FocusedCellColumnIndexOffer2Item == 2) {
                                s.AddNewRow();
                            }
                            break;
                    }
                });
    };
    function Grid_BatchEditEndEditingOffer2Item(s, e) {
        FocusedCellColumnIndexOffer2Item = 0;
        FocusedCellRowIndexOffer2Item = 0;
    }
    function Grid_BatchEditStartEditingOffer2Item(s, e) {
        FocusedCellColumnIndexOffer2Item = e.focusedColumn.index;
        FocusedCellRowIndexOffer2Item = e.visibleIndex;
        lastVisibleIndexOffer2Item = e.visibleIndex;
        currentEditedValueOffer2Item = s.GetRowKey(e.visibleIndex);
        currentKey = s.GetRowKey(e.visibleIndex);
        CalcSum(s, e);
    }
    function OnBeginCallbackOffer2Item(s, e) {
        e.customArgs["Reference"] = $("#Reference").val();
    }
    function OnEndCallbackOffer2Item(s, e) {
            if (s.cpSuccessFlag)
            {
                alert("All changes were saved");
                window.location = "@Url.Action("Success","Test1")";
            }
    }
    function Grid_DeleteRowEventOffer2Item(s, e) {
        setTimeout(function () {
            CalcSum(s, e);
        }, 1000);
    }
    function CalcSum(s, e) {
        var Quantity = 0;
        var Price = 0;
        var Total = 0;
        var visibleRowIndices = Offer2ItemGrid.batchEditApi.GetRowVisibleIndices();
        for (var i = 0; i < visibleRowIndices.length; i++) {
            Quantity = Offer2ItemGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ItemOfferQuantitySold");
            Price = Offer2ItemGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ItemOfferUnitPrice");
            Quantity = Number(Quantity);
            Price = Number(Price);
            Total = Number(Total);
            if (Quantity == "NaN") {
                Quantity = 0;
            }
            if (Price == "NaN") {
                Price = 0;
            }
            Total = Quantity * Price;
            if (Total == "NaN") {
                Total = 0;
            }
            Offer2ItemGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "ItemOfferTotalPrice", Total);
        }
    }
    //End Offer 2 Item-------------------------------------------
    // Start For All Grid--------------------------------------------
    function ClearGrid(s, e) {
        AlternativeItemGrid.PerformCallback('clear');
        SimilarItemGrid.PerformCallback('clear');
        OtherUnitItemGrid.PerformCallback('clear');
        Offer1ItemGrid.PerformCallback('clear');
        Offer2ItemGrid.PerformCallback('clear');
    }
    function LoopGrid(s, e) {
        var ItemCode = document.getElementById("ItemCode").value;
        var NotRelatedToTheUnitAbove = document.getElementById('NotRelatedToTheUnitAbove').checked;
        var iCheck = 0;
        var visibleRowIndicesSimilarItemCode = SimilarItemGrid.batchEditApi.GetRowVisibleIndices();
        var visibleRowIndicesSimilarItemCode2 = SimilarItemGrid.batchEditApi.GetRowVisibleIndices();
        var visibleRowIndicesOtherUnitItem = OtherUnitItemGrid.batchEditApi.GetRowVisibleIndices();
        var visibleRowIndicesOtherUnitItem2 = OtherUnitItemGrid.batchEditApi.GetRowVisibleIndices();
        var visibleRowIndicesAlternativeItemCode = AlternativeItemGrid.batchEditApi.GetRowVisibleIndices();
        var visibleRowIndicesAlternativeItemCode2 = AlternativeItemGrid.batchEditApi.GetRowVisibleIndices();
        for (var i = 0; i < visibleRowIndicesSimilarItemCode.length; i++) {
            var SimilarItemCode = SimilarItemGrid.batchEditApi.GetCellValue(visibleRowIndicesSimilarItemCode[i], "SimilarItemCode");
            for (var y = 0; y < visibleRowIndicesSimilarItemCode2.length; y++) {
                var SimilarItemCode2 = SimilarItemGrid.batchEditApi.GetCellValue(visibleRowIndicesSimilarItemCode2[y], "SimilarItemCode");
                if (i != y) {
                    if (SimilarItemCode == SimilarItemCode2) {
                        iCheck = 2;
                        break;
                    }
                }
            }
        }
        for (var i = 0; i < visibleRowIndicesOtherUnitItem.length; i++) {
            var OtherUnitBarcode = OtherUnitItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOtherUnitItem[i], "OtherUnitBarcode")
            for (var y = 0; y < visibleRowIndicesOtherUnitItem2.length; y++) {
                var OtherUnitBarcode2 = OtherUnitItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOtherUnitItem2[y], "OtherUnitBarcode")
                if (i != y) {
                    if (OtherUnitBarcode == OtherUnitBarcode2) {
                        iCheck = 3;
                        break;
                    }
                }
            }
        }
        for (var i = 0; i < visibleRowIndicesAlternativeItemCode.length; i++) {
            var AlternativeItemCode = AlternativeItemGrid.batchEditApi.GetCellValue(visibleRowIndicesAlternativeItemCode[i], "AlternativeItemCode")
            for (var y = 0; y < visibleRowIndicesAlternativeItemCode2.length; y++) {
                var AlternativeItemCode2 = AlternativeItemGrid.batchEditApi.GetCellValue(visibleRowIndicesAlternativeItemCode2[y], "AlternativeItemCode")
                if (i != y) {
                    if (AlternativeItemCode == AlternativeItemCode2) {
                        iCheck = 4;
                        break;
                    }
                }
            }
        }
        if (!NotRelatedToTheUnitAbove) {
            for (var i = 0; i < visibleRowIndicesOtherUnitItem.length; i++) {
                var OtherUnitNumber = OtherUnitItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOtherUnitItem[i], "OtherUnitNumber")
                for (var y = 0; y < visibleRowIndicesOtherUnitItem2.length; y++) {
                    var OtherUnitNumber2 = OtherUnitItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOtherUnitItem2[y], "OtherUnitNumber")
                    if (i != y) {
                        if (OtherUnitNumber == OtherUnitNumber2) {
                            iCheck = 5;
                            break;
                        }
                    }
                }
            }
        }
        if (visibleRowIndicesSimilarItemCode.length > 0 && visibleRowIndicesOtherUnitItem.length > 0) {
            for (var i = 0; i < visibleRowIndicesSimilarItemCode.length; i++) {
                var SimilarItemCode = SimilarItemGrid.batchEditApi.GetCellValue(visibleRowIndicesSimilarItemCode[i], "SimilarItemCode");
                for (var y = 0; y < visibleRowIndicesOtherUnitItem.length; y++) {
                    var OtherUnitBarcode = OtherUnitItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOtherUnitItem[y], "OtherUnitBarcode")
                    if (OtherUnitBarcode != null && SimilarItemCode != null) {
                        if (SimilarItemCode.trim() == OtherUnitBarcode.trim()) {
                            SimilarItemGrid.DeleteRow(visibleRowIndicesSimilarItemCode[i]);
                        }
                    }
                }
            }
        }
        if (iCheck == 2) {
            bootbox.alert({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThereIsARepeatItemCodeInSimilarItems</h6>',
                className: 'rubberBand animated',
                buttons: {
                    ok: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                        className: 'btn-primary'
                    }
                }
            });
        }
        else if (iCheck == 3) {
            bootbox.alert({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThereIsADuplicateBarcodeInOtherUnits</h6>',
                className: 'rubberBand animated',
                buttons: {
                    ok: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                        className: 'btn-primary'
                    }
                }
            });
        }
        else if (iCheck == 4) {
            bootbox.alert({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThereIsARepeatItemCodeInAlternateItems</h6>',
                className: 'rubberBand animated',
                buttons: {
                    ok: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                        className: 'btn-primary'
                    }
                }
            });
        }
        else if (iCheck == 5 && !NotRelatedToTheUnitAbove) {
            bootbox.alert({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThereIsARepetitionOfTheUnitNumberInOtherUnits</h6>',
                className: 'rubberBand animated',
                buttons: {
                    ok: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                        className: 'btn-primary'
                    }
                }
            });
        }
        else {
            var OfferChecked = $('input[name=OfferType]:checked').val();
            var iError = 0;
            var visibleRowIndicesSimilarItemCode = SimilarItemGrid.batchEditApi.GetRowVisibleIndices();
            for (var i = 0; i < visibleRowIndicesSimilarItemCode.length; i++) {
                if (SimilarItemGrid.batchEditApi.GetCellValue(visibleRowIndicesSimilarItemCode[i], "SimilarItemCode") == "" || SimilarItemGrid.batchEditApi.GetCellValue(visibleRowIndicesSimilarItemCode[i], "SimilarItemCode") == null) {
                    iError = 1;
                    break;
                }
            }
            var visibleRowIndicesAlternativeItem = AlternativeItemGrid.batchEditApi.GetRowVisibleIndices();
            for (var i = 0; i < visibleRowIndicesAlternativeItem.length; i++) {
                if (AlternativeItemGrid.batchEditApi.GetCellValue(visibleRowIndicesAlternativeItem[i], "AlternativeItemCode") == "" || AlternativeItemGrid.batchEditApi.GetCellValue(visibleRowIndicesAlternativeItem[i], "AlternativeItemCode") == null) {
                    iError = 2;
                    break;
                }
                else if (AlternativeItemGrid.batchEditApi.GetCellValue(visibleRowIndicesAlternativeItem[i], "AlternativeItemName") == "" || AlternativeItemGrid.batchEditApi.GetCellValue(visibleRowIndicesAlternativeItem[i], "AlternativeItemName") == null) {
                    iError = 2;
                    break;
                }
            }
            var visibleRowIndicesOtherUnitItem = OtherUnitItemGrid.batchEditApi.GetRowVisibleIndices();
            for (var i = 0; i < visibleRowIndicesOtherUnitItem.length; i++) {
                if (OtherUnitItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOtherUnitItem[i], "OtherUnitNumber") == "" || OtherUnitItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOtherUnitItem[i], "OtherUnitNumber") == null) {
                    iError = 3;
                    break;
                }
                else if (OtherUnitItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOtherUnitItem[i], "OtherUnitName") == "" || OtherUnitItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOtherUnitItem[i], "OtherUnitName") == null) {
                    iError = 3;
                    break;
                }
                else if (OtherUnitItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOtherUnitItem[i], "OtherUnitBarcode") == "" || OtherUnitItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOtherUnitItem[i], "OtherUnitBarcode") == null) {
                    iError = 3;
                    break;
                }
                if (OtherUnitItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOtherUnitItem[i], "OtherUnitQuantity") == "" ||
                    OtherUnitItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOtherUnitItem[i], "OtherUnitQuantity") == null ||
                    OtherUnitItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOtherUnitItem[i], "OtherUnitQuantity") == 0) {
                    iError = 3;
                    break;
                }
            }
            if (OfferChecked == 1) {
                var visibleRowIndicesOffer1 = Offer1ItemGrid.batchEditApi.GetRowVisibleIndices();
                for (var i = 0; i < visibleRowIndicesOffer1.length; i++) {
                    if (Offer1ItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOffer1[i], "ItemOfferQuantitySold") == "" ||
                        Offer1ItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOffer1[i], "ItemOfferQuantitySold") == null ||
                        Offer1ItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOffer1[i], "ItemOfferQuantitySold") == 0) {
                        iError = 4;
                        break;
                    }
                }
            }
            if (OfferChecked == 2) {
                var visibleRowIndicesOffer2 = Offer2ItemGrid.batchEditApi.GetRowVisibleIndices();
                for (var i = 0; i < visibleRowIndicesOffer2.length; i++) {
                    if (Offer2ItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOffer2[i], "ItemOfferQuantitySold") == "" ||
                        Offer2ItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOffer2[i], "ItemOfferQuantitySold") == null ||
                        Offer2ItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOffer2[i], "ItemOfferQuantitySold") == 0) {
                        iError = 5;
                        break;
                    }
                }
            }
            if (iError == 1) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillSimilarItem</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else if (iError == 2) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillAlternativeItem</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else if (iError == 3) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillOtherUnit</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else if (iError == 4 && OfferChecked == 1) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillOfferQuantity</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else if (iError == 5 && OfferChecked == 2) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillOfferQuantity</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else if ($("#ItemCode").val() == '') {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillItemCode</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else if ($("#ItemNameArabic").val() == '') {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillItemName</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                bootbox.confirm({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        confirm: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                            className: 'btn-success'
                        },
                        cancel: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            var dialog = bootbox.dialog({
                                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Updating...</p>',
                                closeButton: false
                            });
                            var visibleRowIndicesSimilarItemCode = SimilarItemGrid.batchEditApi.GetRowVisibleIndices();
                            var SimilarItemList = [];
                            for (var i = 0; i < visibleRowIndicesSimilarItemCode.length; i++) {
                                var St_SimilarItem = {
                                    SimilarItemCode: SimilarItemGrid.batchEditApi.GetCellValue(visibleRowIndicesSimilarItemCode[i], "SimilarItemCode"),
                                    SimilarItemType: SimilarItemGrid.batchEditApi.GetCellValue(visibleRowIndicesSimilarItemCode[i], "SimilarItemType"),
                                    RowNumber: i + 1
                                };
                                SimilarItemList.push(St_SimilarItem);

                            }
                            var visibleRowIndicesAlternativeItem = AlternativeItemGrid.batchEditApi.GetRowVisibleIndices();
                            var AlternativeItemList = [];
                            for (var i = 0; i < visibleRowIndicesAlternativeItem.length; i++) {
                                var St_AlternativeItem = {
                                    AlternativeItemCode: AlternativeItemGrid.batchEditApi.GetCellValue(visibleRowIndicesAlternativeItem[i], "AlternativeItemCode"),
                                    RowNumber: i + 1
                                };
                                AlternativeItemList.push(St_AlternativeItem);

                            }
                            var visibleRowIndicesItemOtherUnit = OtherUnitItemGrid.batchEditApi.GetRowVisibleIndices();
                            var ItemOtherUnitList = [];
                            for (var i = 0; i < visibleRowIndicesItemOtherUnit.length; i++) {
                                var St_ItemOtherUnit = {
                                    OtherUnitNumber: OtherUnitItemGrid.batchEditApi.GetCellValue(visibleRowIndicesItemOtherUnit[i], "OtherUnitNumber"),
                                    OtherUnitQuantity: OtherUnitItemGrid.batchEditApi.GetCellValue(visibleRowIndicesItemOtherUnit[i], "OtherUnitQuantity"),
                                    OtherUnitSalePrice: OtherUnitItemGrid.batchEditApi.GetCellValue(visibleRowIndicesItemOtherUnit[i], "OtherUnitSalePrice"),
                                    OtherUnitPurchasePrice: OtherUnitItemGrid.batchEditApi.GetCellValue(visibleRowIndicesItemOtherUnit[i], "OtherUnitPurchasePrice"),
                                    OtherUnitBarcode: OtherUnitItemGrid.batchEditApi.GetCellValue(visibleRowIndicesItemOtherUnit[i], "OtherUnitBarcode"),
                                    RowNumber: i + 1
                                };
                                ItemOtherUnitList.push(St_ItemOtherUnit);

                            }
                            if (OfferChecked == 1) {
                                var visibleRowIndicesOffer1Item = Offer1ItemGrid.batchEditApi.GetRowVisibleIndices();
                                var ItemOfferList = [];
                                for (var i = 0; i < visibleRowIndicesOffer1Item.length; i++) {
                                    var St_ItemOffer = {
                                        ItemOfferQuantitySold: Offer1ItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOffer1Item[i], "ItemOfferQuantitySold"),
                                        ItemOfferBonus: Offer1ItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOffer1Item[i], "ItemOfferBonus"),
                                        RowNumber: i + 1
                                    };
                                    ItemOfferList.push(St_ItemOffer);

                                }
                            }
                            if (OfferChecked == 2) {
                                var visibleRowIndicesOffer2Item = Offer2ItemGrid.batchEditApi.GetRowVisibleIndices();
                                var ItemOfferList = [];
                                for (var i = 0; i < visibleRowIndicesOffer2Item.length; i++) {
                                    var St_ItemOffer = {
                                        ItemOfferQuantitySold: Offer2ItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOffer2Item[i], "ItemOfferQuantitySold"),
                                        ItemOfferUnitPrice: Offer2ItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOffer2Item[i], "ItemOfferUnitPrice"),
                                        ItemOfferTotalPrice: Offer2ItemGrid.batchEditApi.GetCellValue(visibleRowIndicesOffer2Item[i], "ItemOfferTotalPrice"),
                                        RowNumber: i + 1
                                    };
                                    ItemOfferList.push(St_ItemOffer);

                                }
                            }
                            var dtabelMemRefWarehouse = $("#tdataTableWarehouse").DataTable();
                            var selectedIdsWarehouse = dtabelMemRefWarehouse.columns().checkboxes.selected()[0];
                            var rows_selectedWarehouse = [];
                            $.each(selectedIdsWarehouse, function (index, rowId) {
                                var data = dtabelMemRefWarehouse.row(rowId).data();
                                rows_selectedWarehouse.push(data);
                            });
                            var ComboManufacturerCompanyNo = "";
                            if ($("#ComboManufacturerCompanyNo").val() == "" || $("#ComboManufacturerCompanyNo").val() == "0" || $("#ComboManufacturerCompanyNo").val() == null) {
                                ComboManufacturerCompanyNo = 0;
                            }
                            else {
                                ComboManufacturerCompanyNo = $("#ComboManufacturerCompanyNo").val();
                            }
                            var ComboCountryOfOriginNo = "";
                            if ($("#ComboCountryOfOriginNo").val() == "" || $("#ComboCountryOfOriginNo").val() == "0" || $("#ComboCountryOfOriginNo").val() == null) {
                                ComboCountryOfOriginNo = 0;
                            }
                            else {
                                ComboCountryOfOriginNo = $("#ComboCountryOfOriginNo").val();
                            }
                            var ComboItemUnitNo = "";
                            if ($("#ComboItemUnitNo").val() == "" || $("#ComboItemUnitNo").val() == "0" || $("#ComboItemUnitNo").val() == null) {
                                ComboItemUnitNo = 0;
                            }
                            else {
                                ComboItemUnitNo = $("#ComboItemUnitNo").val();
                            }
                            var ComboCategorie_1 = "";
                            if ($("#ComboCategorie_1").val() == "" || $("#ComboCategorie_1").val() == "0" || $("#ComboCategorie_1").val() == null) {
                                ComboCategorie_1 = 0;
                            }
                            else {
                                ComboCategorie_1 = $("#ComboCategorie_1").val();
                            }
                            var ComboCategorie_2 = "";
                            if ($("#ComboCategorie_2").val() == "" || $("#ComboCategorie_2").val() == "0" || $("#ComboCategorie_2").val() == null) {
                                ComboCategorie_2 = 0;
                            }
                            else {
                                ComboCategorie_2 = $("#ComboCategorie_2").val();
                            }
                            var ComboCategorie_3 = "";
                            if ($("#ComboCategorie_3").val() == "" || $("#ComboCategorie_3").val() == "0" || $("#ComboCategorie_3").val() == null) {
                                ComboCategorie_3 = 0;
                            }
                            else {
                                ComboCategorie_3 = $("#ComboCategorie_3").val();
                            }
                            var ComboCategorie_4 = "";
                            if ($("#ComboCategorie_4").val() == "" || $("#ComboCategorie_4").val() == "0" || $("#ComboCategorie_4").val() == null) {
                                ComboCategorie_4 = 0;
                            }
                            else {
                                ComboCategorie_4 = $("#ComboCategorie_4").val();
                            }
                            var ComboCategorie_5 = "";
                            if ($("#ComboCategorie_5").val() == "" || $("#ComboCategorie_5").val() == "0" || $("#ComboCategorie_5").val() == null) {
                                ComboCategorie_5 = 0;
                            }
                            else {
                                ComboCategorie_5 = $("#ComboCategorie_5").val();
                            }
                            var ComboCategorie_6 = "";
                            if ($("#ComboCategorie_6").val() == "" || $("#ComboCategorie_6").val() == "0" || $("#ComboCategorie_6").val() == null) {
                                ComboCategorie_6 = 0;
                            }
                            else {
                                ComboCategorie_6 = $("#ComboCategorie_6").val();
                            }
                            var ComboCategorie_7 = "";
                            if ($("#ComboCategorie_7").val() == "" || $("#ComboCategorie_7").val() == "0" || $("#ComboCategorie_7").val() == null) {
                                ComboCategorie_7 = 0;
                            }
                            else {
                                ComboCategorie_7 = $("#ComboCategorie_7").val();
                            }
                            var ComboCategorie_8 = "";
                            if ($("#ComboCategorie_8").val() == "" || $("#ComboCategorie_8").val() == "0" || $("#ComboCategorie_8").val() == null) {
                                ComboCategorie_8 = 0;
                            }
                            else {
                                ComboCategorie_8 = $("#ComboCategorie_8").val();
                            }
                            var ComboCategorie_9 = "";
                            if ($("#ComboCategorie_9").val() == "" || $("#ComboCategorie_9").val() == "0" || $("#ComboCategorie_9").val() == null) {
                                ComboCategorie_9 = 0;
                            }
                            else {
                                ComboCategorie_9 = $("#ComboCategorie_9").val();
                            }
                            var ComboCategorie_10 = "";
                            if ($("#ComboCategorie_10").val() == "" || $("#ComboCategorie_10").val() == "0" || $("#ComboCategorie_10").val() == null) {
                                ComboCategorie_10 = 0;
                            }
                            else {
                                ComboCategorie_10 = $("#ComboCategorie_10").val();
                            }
                            var ComboCategorie_11 = "";
                            if ($("#ComboCategorie_11").val() == "" || $("#ComboCategorie_11").val() == "0" || $("#ComboCategorie_11").val() == null) {
                                ComboCategorie_11 = 0;
                            }
                            else {
                                ComboCategorie_11 = $("#ComboCategorie_11").val();
                            }
                            var ComboCategorie_12 = "";
                            if ($("#ComboCategorie_12").val() == "" || $("#ComboCategorie_12").val() == "0" || $("#ComboCategorie_12").val() == null) {
                                ComboCategorie_12 = 0;
                            }
                            else {
                                ComboCategorie_12 = $("#ComboCategorie_12").val();
                            }
                            var ComboCategorie_13 = "";
                            if ($("#ComboCategorie_13").val() == "" || $("#ComboCategorie_13").val() == "0" || $("#ComboCategorie_13").val() == null) {
                                ComboCategorie_13 = 0;
                            }
                            else {
                                ComboCategorie_13 = $("#ComboCategorie_13").val();
                            }
                            var ComboCategorie_14 = "";
                            if ($("#ComboCategorie_14").val() == "" || $("#ComboCategorie_14").val() == "0" || $("#ComboCategorie_14").val() == null) {
                                ComboCategorie_14 = 0;
                            }
                            else {
                                ComboCategorie_14 = $("#ComboCategorie_14").val();
                            }
                            var ComboCategorie_15 = "";
                            if ($("#ComboCategorie_15").val() == "" || $("#ComboCategorie_15").val() == "0" || $("#ComboCategorie_15").val() == null) {
                                ComboCategorie_15 = 0;
                            }
                            else {
                                ComboCategorie_15 = $("#ComboCategorie_15").val();
                            }
                            var ComboLengthNo = "";
                            if ($("#ComboLengthNo").val() == "" || $("#ComboLengthNo").val() == "0" || $("#ComboLengthNo").val() == null) {
                                ComboLengthNo = 0;
                            }
                            else {
                                ComboLengthNo = $("#ComboLengthNo").val();
                            }
                            var ComboWidthNo = "";
                            if ($("#ComboWidthNo").val() == "" || $("#ComboWidthNo").val() == "0" || $("#ComboWidthNo").val() == null) {
                                ComboWidthNo = 0;
                            }
                            else {
                                ComboWidthNo = $("#ComboWidthNo").val();
                            }
                            var ComboHeightNo = "";
                            if ($("#ComboHeightNo").val() == "" || $("#ComboHeightNo").val() == "0" || $("#ComboHeightNo").val() == null) {
                                ComboHeightNo = 0;
                            }
                            else {
                                ComboHeightNo = $("#ComboHeightNo").val();
                            }
                            var ComboSizeNo = "";
                            if ($("#ComboSizeNo").val() == "" || $("#ComboSizeNo").val() == "0" || $("#ComboSizeNo").val() == null) {
                                ComboSizeNo = 0;
                            }
                            else {
                                ComboSizeNo = $("#ComboSizeNo").val();
                            }
                            var ComboWeightNo = "";
                            if ($("#ComboWeightNo").val() == "" || $("#ComboWeightNo").val() == "0" || $("#ComboWeightNo").val() == null) {
                                ComboWeightNo = 0;
                            }
                            else {
                                ComboWeightNo = $("#ComboWeightNo").val();
                            }
                            var ComboUnitNo = "";
                            if ($("#ComboUnitNo").val() == "" || $("#ComboUnitNo").val() == "0" || $("#ComboUnitNo").val() == null) {
                                ComboUnitNo = 0;
                            }
                            else {
                                ComboUnitNo = $("#ComboUnitNo").val();
                            }
                            var StopItem = document.getElementById('StopItem').checked;
                            var StoppingItemFromSelling = document.getElementById('StoppingItemFromSelling').checked;
                            var StoppingItemFromBuying = document.getElementById('StoppingItemFromBuying').checked;
                            var StoppingItemFromPointOfSale = document.getElementById('StoppingItemFromPointOfSale').checked;
                            var ItemServicesWithoutAnInventory = document.getElementById('ItemServicesWithoutAnInventory').checked;
                            var TrackAnExpirationDate = document.getElementById('TrackAnExpirationDate').checked;
                            var TrackSequence = document.getElementById('TrackSequence').checked;
                            var TrackSequenceUponInput = document.getElementById('TrackSequenceUponInput').checked;
                            var TrackSequenceUponOutput = document.getElementById('TrackSequenceUponOutput').checked;
                            var TrackCustoms = document.getElementById('TrackCustoms').checked;
                            var Smoke = document.getElementById('Smoke').checked;
                            var NotRelatedToTheUnitAbove = document.getElementById('NotRelatedToTheUnitAbove').checked;
                            var TaxRate = document.getElementById("TaxRate");
                            var selectedTaxRate = parseFloat(TaxRate.options[TaxRate.selectedIndex].text);
                            var dataToSave = {
                                St_AlternativeItem: AlternativeItemList,
                                St_SimilarItem: SimilarItemList,
                                St_ItemOtherUnit: ItemOtherUnitList,
                                St_ItemOffer: ItemOfferList,
                                St_ItemWarehouse: rows_selectedWarehouse,
                                ItemCode: $("#ItemCode").val(),
                                ArabicName: $("#ItemNameArabic").val(),
                                EnglishName: $("#ItemNameEnglish").val(),
                                TaxRate: selectedTaxRate,
                                TaxRateNo: $("#TaxRate").val(),
                                TaxTypeNo: $("#TaxTypeNo").val(),
                                MinimumItemNo: $("#MinimumItemNo").val(),
                                MaximumItemNo: $("#MaximumItemNo").val(),
                                SupplierAccountNumber: $("#SupplierAccountNumber").val(),
                                ManufacturerCompanyNo: ComboManufacturerCompanyNo,
                                CountryOfOriginNo: ComboCountryOfOriginNo,
                                LocalCost: $("#LocalCost").val(),
                                SalePrice: $("#SalePrice").val(),
                                PointOfSalePrice: $("#PointOfSalePrice").val(),
                                ForeignCost: $("#ForeignCost").val(),
                                TheTargetMonthlyAmount: $("#TheTargetMonthlyAmount").val(),
                                MinimumSaleAmount: $("#MinimumSaleAmount").val(),
                                OpeningDate: $("#OpeningDate").val(),
                                StopItem: StopItem,
                                StoppingItemFromSelling: StoppingItemFromSelling,
                                StoppingItemFromBuying: StoppingItemFromBuying,
                                StoppingItemFromPointOfSale: StoppingItemFromPointOfSale,
                                ItemServicesWithoutAnInventory: ItemServicesWithoutAnInventory,
                                TrackAnExpirationDate: TrackAnExpirationDate,
                                TrackSequence: TrackSequence,
                                TrackSequenceUponInput: TrackSequenceUponInput,
                                TrackSequenceUponOutput: TrackSequenceUponOutput,
                                TrackCustoms: TrackCustoms,
                                Smoke: Smoke,
                                NotRelatedToTheUnitAbove: NotRelatedToTheUnitAbove,
                                ScaleItem: $('input[name=ScaleItem]:checked').val(),
                                ItemSalesAndPurchases: $('input[name=ItemSalesAndPurchases]:checked').val(),
                                OfferType: $('input[name=OfferType]:checked').val(),
                                ItemUnitNo: ComboItemUnitNo,
                                ItemNatureNo: $("#ItemNatureNo").val(),
                                Categorie_1: ComboCategorie_1,
                                Categorie_2: ComboCategorie_2,
                                Categorie_3: ComboCategorie_3,
                                Categorie_4: ComboCategorie_4,
                                Categorie_5: ComboCategorie_5,
                                Categorie_6: ComboCategorie_6,
                                Categorie_7: ComboCategorie_7,
                                Categorie_8: ComboCategorie_8,
                                Categorie_9: ComboCategorie_9,
                                Categorie_10: ComboCategorie_10,
                                Categorie_11: ComboCategorie_11,
                                Categorie_12: ComboCategorie_12,
                                Categorie_13: ComboCategorie_13,
                                Categorie_14: ComboCategorie_14,
                                Categorie_15: ComboCategorie_15,
                                LengthNo: ComboLengthNo,
                                WidthNo: ComboWidthNo,
                                HeightNo: ComboHeightNo,
                                SizeNo: ComboSizeNo,
                                WeightNo: ComboWeightNo,
                                UnitNo: ComboUnitNo,
                                CBM: $("#CBM").val(),
                                CategoriePrice_1: $("#CategoriePrice_1").val(),
                                CategoriePrice_2: $("#CategoriePrice_2").val(),
                                CategoriePrice_3: $("#CategoriePrice_3").val(),
                                CategoriePrice_4: $("#CategoriePrice_4").val(),
                                CategoriePrice_5: $("#CategoriePrice_5").val(),
                                CategoriePrice_6: $("#CategoriePrice_6").val(),
                                CategoriePrice_7: $("#CategoriePrice_7").val(),
                                CategoriePrice_8: $("#CategoriePrice_8").val(),
                                CategoriePrice_9: $("#CategoriePrice_9").val(),
                                CategoriePrice_10: $("#CategoriePrice_10").val(),
                                ItemLogo: ImgPath
                            }
                            $.ajax({
                                type: "POST",
                                url: "/St_ItemCard/UpdateSt_ItemCard",
                                data: JSON.stringify(dataToSave),
                                contentType: 'application/json',
                                success: function (data) {

                                    dialog.modal('hide');
                                    if (data.Code == 0) {
                                        toastr.error(data.Msg);
                                    }
                                    else if (data.Code == 1) {
                                    $('#modal-container').modal('hide');
                                        toastr.success(data.Msg);
                                        window.location = "/St_ItemCard/Index";
                                }
                            },
                                error: function (data) {
                                    dialog.modal('hide');
                                    toastr.error(data);
                                }
                            });
                        }
                    }
                });
            }
        }
    }
    function OnClickPostData(s, e) {
        if (AlternativeItemGrid.batchEditApi.HasChanges())
            AlternativeItemGrid.UpdateEdit();
        else
            AlternativeItemGrid.PerformCallback();
        if (SimilarItemGrid.batchEditApi.HasChanges())
            SimilarItemGrid.UpdateEdit();
        else
            SimilarItemGrid.PerformCallback();
        if (OtherUnitItemGrid.batchEditApi.HasChanges())
            OtherUnitItemGrid.UpdateEdit();
        else
            OtherUnitItemGrid.PerformCallback();
        if (Offer1ItemGrid.batchEditApi.HasChanges())
            Offer1ItemGrid.UpdateEdit();
        else
            Offer1ItemGrid.PerformCallback();
        if (Offer2ItemGrid.batchEditApi.HasChanges())
            Offer2ItemGrid.UpdateEdit();
        else
            Offer2ItemGrid.PerformCallback();
    }
    // End For All Grid-------------------------------------------
    function GetSelectedAccount(data) {
        if (data.AccountNumber != null && data.AccountNumber != '') {
            document.getElementById("SupplierAccountNumber").value = data.AccountNumber;
            document.getElementById("SupplierAccountName").value = data.AccountName;
        }
        else {
            document.getElementById("SupplierAccountNumber").value = '';
            document.getElementById("SupplierAccountName").value = '';
        }
    }
    var AccNumber = [];
    $.getJSON('@Url.Action("GetAcountAcc", "MultiUse")', { id: 0 }, function (Data) {
        AccNumber = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].AccountName, value: Data[i].AccountNumber, stop: Data[i].StoppedAccount};
                AccNumber.push(r);
            }
    });
    $(function () {
        $("#SupplierAccountNumber").autocomplete({
            source: AccNumber,
            select: function (event, ui) {
                document.getElementById("SupplierAccountNumber").value = ui.item.value;
                document.getElementById("SupplierAccountName").value = ui.item.label;
            }
        });
    });
</script>

@using (Html.BeginForm("Update", "St_ItemCard", FormMethod.Post, new { id = "myForm" }))
{
    <div style="padding-top: 20px;">
        <div class="panel card-view">
            <div class="panel-heading" style="background-color: #34495E">
                <div class="pull-left">
                    <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.Update - @Resources.Resource.ItemCard</h6>
                </div>
                <div class="clearfix"></div>
            </div>
            <div class="panel-body">
                <div class="pills-struct mt-40">
                    <ul role="tablist" class="nav nav-pills" id="myTabs_6">
                        <li class="active" id="sCardInformation" role="presentation"><a data-toggle="tab" role="tab" style="background: #34495E" href="#CardInformation" aria-expanded="true">@Resources.Resource.CardInformation</a></li>
                        <li role="presentation" id="sItemClassifications" class=""><a data-toggle="tab" id="profile_tab_6" role="tab" style="background: #34495E" href="#ItemClassifications" aria-expanded="false">@Resources.Resource.ItemClassifications</a></li>
                        <li role="presentation" id="sSimilarItem" class=""><a data-toggle="tab" id="profile_tab_6" role="tab" style="background: #34495E" href="#SimilarItem" aria-expanded="false">@Resources.Resource.SimilarItem</a></li>
                        <li role="presentation" id="sAlternativeItems" class=""><a data-toggle="tab" id="profile_tab_6" role="tab" style="background: #34495E" href="#AlternativeItems" aria-expanded="false">@Resources.Resource.AlternativeItems</a></li>
                        <li role="presentation" id="sOtherUnits" class=""><a data-toggle="tab" style="background: #34495E" id="profile_tab_6" role="tab" href="#OtherUnits" aria-expanded="false">@Resources.Resource.OtherUnits</a></li>
                        <li role="presentation" id="sOffers" class=""><a data-toggle="tab" style="background: #34495E" id="profile_tab_6" role="tab" href="#Offers" aria-expanded="false">@Resources.Resource.Offers</a></li>
                        <li role="presentation" id="sCategoriesPrices" class=""><a data-toggle="tab" style="background: #34495E" id="profile_tab_6" role="tab" href="#CategoriesPrices" aria-expanded="false">@Resources.Resource.CategoriesPrices</a></li>
                        <li role="presentation" id="sItemPicture" class=""><a data-toggle="tab" style="background: #34495E" id="profile_tab_6" role="tab" href="#ItemPicture" aria-expanded="false">@Resources.Resource.ItemPicture</a></li>
                        <li role="presentation" id="sItemGallary" class=""><a data-toggle="tab" role="tab" style="background: #34495E" href="#ItemGallary" aria-expanded="false">@Resources.Resource.ItemFiles</a></li>
                    </ul>
                    <div class="tab-content" id="myTabContent_6">
                        <div id="CardInformation" class="tab-pane fade active in" role="tabpanel">
                            <div class="col-lg-12">
                                <div class="col-lg-3">
                                    @Html.Label(Resources.Resource.ItemCode)
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.ItemCode, new { @id = "ItemCode", @class = "form-control input-sml", @readonly = "readonly" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="col-lg-6">
                                    @Html.Label(Resources.Resource.ArabicName) <span style="color:red">*</span>
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.ArabicName, new { @id = "ItemNameArabic", @class = "form-control input-sml" })
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    @Html.Label(Resources.Resource.EnglishName)
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.EnglishName, new { @id = "ItemNameEnglish", @class = "form-control input-sml" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        @Html.Label(Resources.Resource.TaxType)
                                        @Html.DropDownListFor(m => m.TaxTypeNo, new List<SelectListItem>
                                            {
                                            new SelectListItem{ Text=Resources.Resource.Taxable, Value = "1",Selected=true },
                                            new SelectListItem{ Text=Resources.Resource. TaxableByZero, Value = "2",Selected=false },
                                            new SelectListItem{ Text=Resources.Resource. TaxExempt, Value = "3",Selected=false }
                                        }, new { @id = "TaxTypeNo", @class = "form-control input-sml" })
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        @Html.Label(Resources.Resource.TaxRate)
                                        @Html.DropDownListFor(m => m.TaxRate, new List<SelectListItem>
                                            {
                                            new SelectListItem{ Text="0", Value = "1",Selected=false },
                                            new SelectListItem{ Text="0.5", Value = "2",Selected=false },
                                            new SelectListItem{ Text="4", Value = "3",Selected=false },
                                            new SelectListItem{ Text="5", Value = "4",Selected=false },
                                            new SelectListItem{ Text="6", Value = "5",Selected=false },
                                            new SelectListItem{ Text="7", Value = "6",Selected=false },
                                            new SelectListItem{ Text="8", Value = "7",Selected=false },
                                            new SelectListItem{ Text="10", Value = "8",Selected=false },
                                            new SelectListItem{ Text="13", Value = "9",Selected=false },
                                            new SelectListItem{ Text="14", Value = "10",Selected=false },
                                            new SelectListItem{ Text="15", Value = "11",Selected=false },
                                            new SelectListItem{ Text="16", Value = "12",Selected=true },
                                            new SelectListItem{ Text="16.5", Value = "13",Selected=false },
                                            new SelectListItem{ Text="17", Value = "14",Selected=false },
                                            new SelectListItem{ Text="20", Value = "15",Selected=false }
                                        }, new { @id = "TaxRate", @class = "form-control input-sml" })
                                    </div>
                                </div>
                                <div class="col-lg-2">
                                    @Html.Label(Resources.Resource.MinimumItem)
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.MinimumItemNo, new { @id = "MinimumItemNo", @class = "form-control input-sml", @type = "Number", @min = "0" })
                                    </div>
                                </div>
                                <div class="col-lg-2">
                                    @Html.Label(Resources.Resource.MaximumItem)
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.MaximumItemNo, new { @id = "MaximumItemNo", @class = "form-control input-sml", @type = "Number", @min = "0" })
                                    </div>
                                </div>
                                <div class="col-lg-2">
                                    @Html.Label(Resources.Resource.QuantityAvailable)
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.QuantityAvailable, new { @id = "QuantityAvailable", @class = "form-control input-sml", @readonly = "readonly" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        @Html.Label(Resources.Resource.SupplierAccountNo)
                                        <div class="form-group input-group">
                                            @Html.TextBoxFor(m => m.SupplierAccountNumber, new { @id = "SupplierAccountNumber", @class = "form-control input-sml" })
                                            <span class="input-group-btn">
                                                <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnSupplier">
                                                    <i class="fa fa-search"></i>
                                                </button>
                                            </span>
                                            @Html.ValidationMessageFor(m => m.SupplierAccountNumber)
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="form-group">
                                        @Html.Label(Resources.Resource.SupplierAccountName)
                                        <div class="form-group input-group">
                                            @Html.TextBoxFor(m => m.SupplierAccountName, new { @id = "SupplierAccountName", @class = "form-control input-sml", @readonly = "readonly" })
                                            <span class="input-group-btn">
                                                <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearSupplier">
                                                    <i class="fa fa-minus-square"></i>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        @Html.Label(Resources.Resource.ManufacturerCompany)
                                        <div class="form-group  input-group">
                                            @if (Resources.Resource.CurLang == "Arb")
                                            {
                                                @Html.DropDownListFor(m => m.ManufacturerCompanyNo, new SelectList(Model.St_ManufacturerCompany, "ManufacturerCompanyID", "ArabicName"), Resources.Resource.ManufacturerCompany, new { @id = "ComboManufacturerCompanyNo", @class = "form-control input-sml" })

                                            }
                                            else
                                            {
                                                @Html.DropDownListFor(m => m.ManufacturerCompanyNo, new SelectList(Model.St_ManufacturerCompany, "ManufacturerCompanyID", "EnglishName"), Resources.Resource.ManufacturerCompany, new { @id = "ComboManufacturerCompanyNo", @class = "form-control input-sml" })
                                            }
                                            <span class="input-group-btn">
                                                <a class="btn btn-primary btn-icon-anim btn-square js-Pop" id="Add" href="/St_ManufacturerCompany/AddNew">
                                                    <i class="fa fa-plus" style="margin-top : 12px"></i>
                                                </a>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-2">
                                    <div class="form-group">
                                        @Html.Label(Resources.Resource.CountryOfOrigin)
                                        <div class="form-group  input-group">
                                            @if (Resources.Resource.CurLang == "Arb")
                                            {
                                                @Html.DropDownListFor(m => m.CountryOfOriginNo, new SelectList(Model.St_CountryOfOrigin, "CountryOfOriginID", "ArabicName"), Resources.Resource.CountryOfOrigin, new { @id = "ComboCountryOfOriginNo", @class = "form-control input-sml" })

                                            }
                                            else
                                            {
                                                @Html.DropDownListFor(m => m.CountryOfOriginNo, new SelectList(Model.St_CountryOfOrigin, "CountryOfOriginID", "EnglishName"), Resources.Resource.CountryOfOrigin, new { @id = "ComboCountryOfOriginNo", @class = "form-control input-sml" })
                                            }
                                            <span class="input-group-btn">
                                                <a class="btn btn-primary btn-icon-anim btn-square js-Pop" id="Add" href="/St_CountryOfOrigin/AddNew">
                                                    <i class="fa fa-plus" style="margin-top : 12px"></i>
                                                </a>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="col-lg-2">
                                    @Html.Label(Resources.Resource.LocalCost)
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.LocalCost, new { @id = "LocalCost", @class = "form-control input-sml", @type = "Number", @min = "0", })
                                    </div>
                                </div>
                                <div class="col-lg-2">
                                    @Html.Label(Resources.Resource.SalePrice)
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.SalePrice, new { @id = "SalePrice", @class = "form-control input-sml", @type = "Number", @min = "0", })
                                    </div>
                                </div>
                                <div class="col-lg-2">
                                    @Html.Label(Resources.Resource.PointOfSalePrice)
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.PointOfSalePrice, new { @id = "PointOfSalePrice", @class = "form-control input-sml", @type = "Number", @min = "0", })
                                    </div>
                                </div>
                                <div class="col-lg-2">
                                    @Html.Label(Resources.Resource.LastLocalPurchasePrice)
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.LastLocalPurchasePrice, new { @id = "LastLocalPurchasePrice", @class = "form-control input-sml", @type = "Number", @min = "0", @readonly = "readonly" })
                                    </div>
                                </div>
                                <div class="col-lg-2">
                                    @Html.Label(Resources.Resource.ForeignCost)
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.ForeignCost, new { @id = "ForeignCost", @class = "form-control input-sml", @type = "Number", @min = "0" })
                                    </div>
                                </div>
                                <div class="col-lg-2">
                                    @Html.Label(Resources.Resource.LastForeignPurchasePrice)
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.LastForeignPurchasePrice, new { @id = "LastForeignPurchasePrice", @class = "form-control input-sml", @type = "Number", @min = "0", @readonly = "readonly" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="col-lg-2">
                                    @Html.Label(Resources.Resource.CostRate)
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.CostRate, new { @id = "CostRate", @class = "form-control input-sml", @type = "Number", @min = "0", @readonly = "readonly" })
                                    </div>
                                </div>
                                <div class="col-lg-2">
                                    @Html.Label(Resources.Resource.MinimumSaleAmount)
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.MinimumSaleAmount, new { @id = "MinimumSaleAmount", @class = "form-control input-sml", @type = "Number", @min = "0" })
                                    </div>
                                </div>
                                <div class="col-lg-2">
                                    @Html.Label(Resources.Resource.TotalQuantitySold)
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.TotalQuantitySold, new { @id = "TotalQuantitySold", @class = "form-control input-sml", @type = "Number", @min = "0", @readonly = "readonly" })
                                    </div>
                                </div>
                                <div class="col-lg-2">
                                    @Html.Label(Resources.Resource.TotalValueSold)
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.TotalValueSold, new { @id = "TotalValueSold", @class = "form-control input-sml", @type = "Number", @min = "0", @readonly = "readonly" })
                                    </div>
                                </div>
                                <div class="col-lg-2">
                                    @Html.Label(Resources.Resource.TheNumberOfDaysTheCardIsOpened)
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.TheNumberOfDaysTheCardIsOpened, new { @id = "TheNumberOfDaysTheCardIsOpened", @class = "form-control input-sml", @type = "Number", @min = "0", @readonly = "readonly" })
                                    </div>
                                </div>
                                <div class="col-lg-2">
                                    @Html.Label(Resources.Resource.TheTargetMonthlyAmount)
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.TheTargetMonthlyAmount, new { @id = "TheTargetMonthlyAmount", @class = "form-control input-sml", @type = "Number", @min = "0" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="col-lg-2 panel panel-default card-view">
                                    <div class="form-group mb-30">
                                        <div class="panel-heading" style="background-color: #34495E">
                                            <div class="pull-left">
                                                <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.ScaleItem</h6>
                                            </div>
                                            <div class="clearfix"></div>
                                        </div>
                                        <div class="radio radio-primary">
                                            <input type="radio" name="ScaleItem" id="ScaleItems" value="1">
                                            <label for="ScaleItems">
                                                @Resources.Resource.ScaleItem
                                            </label>
                                        </div>
                                        <div class="radio radio-primary">
                                            <input type="radio" name="ScaleItem" id="ScaleItemByPiece" value="2">
                                            <label for="ScaleItemByPiece">
                                                @Resources.Resource.ScaleItemByPiece
                                            </label>
                                        </div>
                                        <div class="radio radio-primary">
                                            <input type="radio" name="ScaleItem" id="Other" value="3" checked="">
                                            <label for="Other">
                                                @Resources.Resource.Other
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-xs-1" style="width: 10px;">
                                </div>
                                <div class="col-lg-2 panel panel-default card-view">
                                    <div class="form-group mb-30">
                                        <div class="panel-heading" style="background-color: #34495E">
                                            <div class="pull-left">
                                                <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.ItemSalesAndPurchases</h6>
                                            </div>
                                            <div class="clearfix"></div>
                                        </div>
                                        <div class="radio radio-primary">
                                            <input type="radio" name="ItemSalesAndPurchases" id="ItemSalesOnly" value="1">
                                            <label for="ItemSalesOnly">
                                                @Resources.Resource.ItemSalesOnly
                                            </label>
                                        </div>
                                        <div class="radio radio-primary">
                                            <input type="radio" name="ItemSalesAndPurchases" id="ItemPurchasesOnly" value="2">
                                            <label for="ItemPurchasesOnly">
                                                @Resources.Resource.ItemPurchasesOnly
                                            </label>
                                        </div>
                                        <div class="radio radio-primary">
                                            <input type="radio" name="ItemSalesAndPurchases" id="ItemSalesAndPurchasess" value="3" checked="">
                                            <label for="ItemSalesAndPurchasess">
                                                @Resources.Resource.ItemSalesAndPurchases
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-xs-1" style="width: 10px;">
                                </div>
                                <div class="col-lg-2 panel panel-default card-view">
                                    <div class="form-group mb-30">
                                        <div class="checkbox checkbox-primary">
                                            <input id="StopItem" type="checkbox">
                                            <label for="StopItem">
                                                @Resources.Resource.StopItem
                                            </label>
                                        </div>
                                        <div class="checkbox checkbox-primary">
                                            <input id="StoppingItemFromSelling" type="checkbox">
                                            <label for="StoppingItemFromSelling">
                                                @Resources.Resource.StoppingItemFromSelling
                                            </label>
                                        </div>
                                        <div class="checkbox checkbox-primary">
                                            <input id="StoppingItemFromBuying" type="checkbox">
                                            <label for="StoppingItemFromBuying">
                                                @Resources.Resource.StoppingItemFromBuying
                                            </label>
                                        </div>
                                        <div class="checkbox checkbox-primary">
                                            <input id="StoppingItemFromPointOfSale" type="checkbox">
                                            <label for="StoppingItemFromPointOfSale">
                                                @Resources.Resource.StoppingItemFromPointOfSale
                                            </label>
                                        </div>
                                        <div class="checkbox checkbox-primary">
                                            <input id="ItemServicesWithoutAnInventory" type="checkbox">
                                            <label for="ItemServicesWithoutAnInventory">
                                                @Resources.Resource.ItemServicesWithoutAnInventory
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-xs-1" style="width: 10px;">
                                </div>
                                <div class="col-lg-2 panel panel-default card-view">
                                    <div class="form-group mb-30">
                                        <div class="checkbox checkbox-primary">
                                            <input id="TrackAnExpirationDate" type="checkbox">
                                            <label for="TrackAnExpirationDate">
                                                @Resources.Resource.TrackAnExpirationDate
                                            </label>
                                        </div>
                                        <div class="checkbox checkbox-primary">
                                            <input id="TrackSequence" type="checkbox">
                                            <label for="TrackSequence">
                                                @Resources.Resource.TrackSequence
                                            </label>
                                        </div>
                                        <div class="checkbox checkbox-primary">
                                            <input id="TrackSequenceUponInput" type="checkbox">
                                            <label for="TrackSequenceUponInput">
                                                @Resources.Resource.TrackSequenceUponInput
                                            </label>
                                        </div>
                                        <div class="checkbox checkbox-primary">
                                            <input id="TrackSequenceUponOutput" type="checkbox">
                                            <label for="TrackSequenceUponOutput">
                                                @Resources.Resource.TrackSequenceUponOutput
                                            </label>
                                        </div>
                                        <div class="checkbox checkbox-primary">
                                            <input id="TrackCustoms" type="checkbox">
                                            <label for="TrackCustoms">
                                                @Resources.Resource.TrackCustoms
                                            </label>
                                        </div>
                                        <div class="checkbox checkbox-primary">
                                            <input id="Smoke" type="checkbox">
                                            <label for="Smoke">
                                                @Resources.Resource.Smoke
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-xs-1" style="width: 10px;">
                                </div>
                                <div class="col-lg-3">
                                    <table id="tdataTableWarehouse" class="table table-hover table-bordered mb-0" width="100%">
                                        <thead>
                                            <tr>
                                                <th></th>
                                                <th>@Resources.Resource.StockName</th>
                                                <th>@Resources.Resource.StockCode</th>
                                                <th>@Resources.Resource.Case</th>
                                                <th>@Resources.Resource.MinimumItem</th>
                                                <th>@Resources.Resource.MaximumItem</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div id="ItemClassifications" class="tab-pane fade" role="tabpanel">
                            <div class="col-lg-12">
                                <div class="col-lg-3">
                                    @Html.Label(Resources.Resource.ItemUnits)
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.ItemUnitNo, new SelectList(Model.St_ItemUnit, "ItemUnitCode", "ArabicName"), Resources.Resource.ItemUnits, new { @id = "ComboItemUnitNo", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.ItemUnitNo, new SelectList(Model.St_ItemUnit, "ItemUnitCode", "EnglishName"), Resources.Resource.ItemUnits, new { @id = "ComboItemUnitNo", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-PopDescription" id="Add" href="/St_ItemUnit/AddNew">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <a class="js-PopDescription" id="UpdateCategory3" href="/St_Description/Update/3" style="color :darkcyan">
                                        <span id="Categorie_3Name">@Model.Categorie_3Name</span>
                                    </a>
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_3, new SelectList(Model.St_DescriptionDetail3, "DescriptionDetailID", "ArabicName"), "", new { @id = "ComboCategorie_3", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_3, new SelectList(Model.St_DescriptionDetail3, "DescriptionDetailID", "EnglishName"), "", new { @id = "ComboCategorie_3", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-PopDescription" id="AddDescription3" href="/St_DescriptionDetail/AddToItemCard/3">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <a class="js-PopDescription" id="UpdateCategory7" href="/St_Description/Update/7" style="color :darkcyan">
                                        <span id="Categorie_7Name">@Model.Categorie_7Name</span>
                                    </a>
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_7, new SelectList(Model.St_DescriptionDetail7, "DescriptionDetailID", "ArabicName"), "", new { @id = "ComboCategorie_7", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_7, new SelectList(Model.St_DescriptionDetail7, "DescriptionDetailID", "EnglishName"), "", new { @id = "ComboCategorie_7", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-PopDescription" id="AddDescription7" href="/St_DescriptionDetail/AddToItemCard/7">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <a class="js-PopDescription" id="UpdateCategory11" href="/St_Description/Update/11" style="color :darkcyan">
                                        <span id="Categorie_11Name">@Model.Categorie_11Name</span>
                                    </a>
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_11, new SelectList(Model.St_DescriptionDetail11, "DescriptionDetailID", "ArabicName"), "", new { @id = "ComboCategorie_11", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_11, new SelectList(Model.St_DescriptionDetail11, "DescriptionDetailID", "EnglishName"), "", new { @id = "ComboCategorie_11", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-PopDescription" id="AddDescription11" href="/St_DescriptionDetail/AddToItemCard/11">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        @Html.Label(Resources.Resource.ItemNature)
                                        @Html.DropDownListFor(m => m.ItemNatureNo, new List<SelectListItem>
                                            {
                                            new SelectListItem{ Text=Resources.Resource.ForeignImport, Value = "1",Selected=false },
                                            new SelectListItem{ Text=Resources.Resource. LocalImport, Value = "2",Selected=true },
                                            new SelectListItem{ Text=Resources.Resource. Manufacturing, Value = "3",Selected=false }
                                        }, new { @id = "ItemNatureNo", @class = "form-control input-sml" })
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <a class="js-PopDescription" id="UpdateCategory4" href="/St_Description/Update/4" style="color :darkcyan">
                                        <span id="Categorie_4Name">@Model.Categorie_4Name</span>
                                    </a>
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_4, new SelectList(Model.St_DescriptionDetail4, "DescriptionDetailID", "ArabicName"), "", new { @id = "ComboCategorie_4", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_4, new SelectList(Model.St_DescriptionDetail4, "DescriptionDetailID", "EnglishName"), "", new { @id = "ComboCategorie_4", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-PopDescription" id="AddDescription4" href="/St_DescriptionDetail/AddToItemCard/4">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <a class="js-PopDescription" id="UpdateCategory8" href="/St_Description/Update/8" style="color :darkcyan">
                                        <span id="Categorie_8Name">@Model.Categorie_8Name</span>
                                    </a>
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_8, new SelectList(Model.St_DescriptionDetail8, "DescriptionDetailID", "ArabicName"), "", new { @id = "ComboCategorie_8", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_8, new SelectList(Model.St_DescriptionDetail8, "DescriptionDetailID", "EnglishName"), "", new { @id = "ComboCategorie_8", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-PopDescription" id="AddDescription8" href="/St_DescriptionDetail/AddToItemCard/8">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <a class="js-PopDescription" id="UpdateCategory12" href="/St_Description/Update/12" style="color :darkcyan">
                                        <span id="Categorie_12Name">@Model.Categorie_12Name</span>
                                    </a>
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_12, new SelectList(Model.St_DescriptionDetail12, "DescriptionDetailID", "ArabicName"), "", new { @id = "ComboCategorie_12", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_12, new SelectList(Model.St_DescriptionDetail12, "DescriptionDetailID", "EnglishName"), "", new { @id = "ComboCategorie_12", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-PopDescription" id="AddDescription12" href="/St_DescriptionDetail/AddToItemCard/12">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="col-lg-3">
                                    <a class="js-PopDescription" id="UpdateCategory1" href="/St_Description/Update/1" style="color :darkcyan">
                                        <span id="Categorie_1Name">@Model.Categorie_1Name</span>
                                    </a>
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_1, new SelectList(Model.St_DescriptionDetail1, "DescriptionDetailID", "ArabicName"), "", new { @id = "ComboCategorie_1", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_1, new SelectList(Model.St_DescriptionDetail1, "DescriptionDetailID", "EnglishName"), "", new { @id = "ComboCategorie_1", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-PopDescription" id="AddDescription1" href="/St_DescriptionDetail/AddToItemCard/1">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <a class="js-PopDescription" id="UpdateCategory5" href="/St_Description/Update/5" style="color :darkcyan">
                                        <span id="Categorie_5Name">@Model.Categorie_5Name</span>
                                    </a>
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_5, new SelectList(Model.St_DescriptionDetail5, "DescriptionDetailID", "ArabicName"), "", new { @id = "ComboCategorie_5", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_5, new SelectList(Model.St_DescriptionDetail5, "DescriptionDetailID", "EnglishName"), "", new { @id = "ComboCategorie_5", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-PopDescription" id="AddDescription5" href="/St_DescriptionDetail/AddToItemCard/5">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <a class="js-PopDescription" id="UpdateCategory9" href="/St_Description/Update/9" style="color :darkcyan">
                                        <span id="Categorie_9Name">@Model.Categorie_9Name</span>
                                    </a>
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_9, new SelectList(Model.St_DescriptionDetail9, "DescriptionDetailID", "ArabicName"), "", new { @id = "ComboCategorie_9", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_9, new SelectList(Model.St_DescriptionDetail9, "DescriptionDetailID", "EnglishName"), "", new { @id = "ComboCategorie_9", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-PopDescription" id="AddDescription9" href="/St_DescriptionDetail/AddToItemCard/9">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <a class="js-PopDescription" id="UpdateCategory13" href="/St_Description/Update/13" style="color :darkcyan">
                                        <span id="Categorie_13Name">@Model.Categorie_13Name</span>
                                    </a>
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_13, new SelectList(Model.St_DescriptionDetail13, "DescriptionDetailID", "ArabicName"), "", new { @id = "ComboCategorie_13", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_13, new SelectList(Model.St_DescriptionDetail13, "DescriptionDetailID", "EnglishName"), "", new { @id = "ComboCategorie_13", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-PopDescription" id="AddDescription13" href="/St_DescriptionDetail/AddToItemCard/13">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="col-lg-3">
                                    <a class="js-PopDescription" id="UpdateCategory2" href="/St_Description/Update/2" style="color :darkcyan">
                                        <span id="Categorie_2Name">@Model.Categorie_2Name</span>
                                    </a>
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_2, new SelectList(Model.St_DescriptionDetail2, "DescriptionDetailID", "ArabicName"), "", new { @id = "ComboCategorie_2", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_2, new SelectList(Model.St_DescriptionDetail2, "DescriptionDetailID", "EnglishName"), "", new { @id = "ComboCategorie_2", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-PopDescription" id="AddDescription2" href="/St_DescriptionDetail/AddToItemCard/2">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <a class="js-PopDescription" id="UpdateCategory6" href="/St_Description/Update/6" style="color :darkcyan">
                                        <span id="Categorie_6Name">@Model.Categorie_6Name</span>
                                    </a>
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_6, new SelectList(Model.St_DescriptionDetail6, "DescriptionDetailID", "ArabicName"), "", new { @id = "ComboCategorie_6", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_6, new SelectList(Model.St_DescriptionDetail6, "DescriptionDetailID", "EnglishName"), "", new { @id = "ComboCategorie_6", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-PopDescription" id="AddDescription6" href="/St_DescriptionDetail/AddToItemCard/6">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <a class="js-PopDescription" id="UpdateCategory10" href="/St_Description/Update/10" style="color :darkcyan">
                                        <span id="Categorie_10Name">@Model.Categorie_10Name</span>
                                    </a>
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_10, new SelectList(Model.St_DescriptionDetail10, "DescriptionDetailID", "ArabicName"), "", new { @id = "ComboCategorie_10", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_10, new SelectList(Model.St_DescriptionDetail10, "DescriptionDetailID", "EnglishName"), "", new { @id = "ComboCategorie_10", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-PopDescription" id="AddDescription10" href="/St_DescriptionDetail/AddToItemCard/10">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <a class="js-Pop" id="UpdateCategory14" href="/St_Description/Update/14" style="color :darkcyan">
                                        <span id="Categorie_14Name">@Model.Categorie_14Name</span>
                                    </a>
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_14, new SelectList(Model.St_DescriptionDetail14, "DescriptionDetailID", "ArabicName"), "", new { @id = "ComboCategorie_14", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_14, new SelectList(Model.St_DescriptionDetail14, "DescriptionDetailID", "EnglishName"), "", new { @id = "ComboCategorie_14", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-Pop" id="AddDescription14" href="/St_DescriptionDetail/AddToItemCard/14">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="col-lg-3">
                                    <a class="js-PopDescription" id="UpdateCategory15" href="/St_Description/Update/15" style="color :darkcyan">
                                        <span id="Categorie_15Name">@Model.Categorie_15Name</span>
                                    </a>
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_15, new SelectList(Model.St_DescriptionDetail15, "DescriptionDetailID", "ArabicName"), "", new { @id = "ComboCategorie_15", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.Categorie_15, new SelectList(Model.St_DescriptionDetail15, "DescriptionDetailID", "EnglishName"), "", new { @id = "ComboCategorie_15", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-PopDescription" id="AddDescription15" href="/St_DescriptionDetail/AddToItemCard/15">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="panel-heading" style="background-color: #34495E">
                                    <div class="pull-left" style="text-align : center">
                                        <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.Measurements</h6>
                                    </div>
                                    <div class="clearfix"></div>
                                </div>
                            </div>
                            <div class="col-lg-12" style="margin-top :10px">
                                <div class="col-lg-3">
                                    @Html.Label(Resources.Resource.CBM)
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.CBM, new { @id = "CBM", @class = "form-control input-sml", @type = "Number", @min = "0" })
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    @Html.Label(Resources.Resource.Length)
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.LengthNo, new SelectList(Model.St_MeasurementDetailLength, "MeasurementDetailID", "ArabicName"), "", new { @id = "ComboLengthNo", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.LengthNo, new SelectList(Model.St_MeasurementDetailLength, "MeasurementDetailID", "EnglishName"), "", new { @id = "ComboLengthNo", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-Pop" id="AddMeasurement1" href="/St_MeasurementDetail/AddToItemCard/1">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    @Html.Label(Resources.Resource.Width)
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.WidthNo, new SelectList(Model.St_MeasurementDetailWidth, "MeasurementDetailID", "ArabicName"), "", new { @id = "ComboWidthNo", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.WidthNo, new SelectList(Model.St_MeasurementDetailWidth, "MeasurementDetailID", "EnglishName"), "", new { @id = "ComboWidthNo", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-Pop" id="AddMeasurement2" href="/St_MeasurementDetail/AddToItemCard/2">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    @Html.Label(Resources.Resource.Height)
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.HeightNo, new SelectList(Model.St_MeasurementDetailHeight, "MeasurementDetailID", "ArabicName"), "", new { @id = "ComboHeightNo", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.HeightNo, new SelectList(Model.St_MeasurementDetailHeight, "MeasurementDetailID", "EnglishName"), "", new { @id = "ComboHeightNo", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-Pop" id="AddMeasurement3" href="/St_MeasurementDetail/AddToItemCard/3">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="col-lg-3">
                                    @Html.Label(Resources.Resource.Size)
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.SizeNo, new SelectList(Model.St_MeasurementDetailSize, "MeasurementDetailID", "ArabicName"), "", new { @id = "ComboSizeNo", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.SizeNo, new SelectList(Model.St_MeasurementDetailSize, "MeasurementDetailID", "EnglishName"), "", new { @id = "ComboSizeNo", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-Pop" id="AddMeasurement4" href="/St_MeasurementDetail/AddToItemCard/4">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    @Html.Label(Resources.Resource.Weight)
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.WeightNo, new SelectList(Model.St_MeasurementDetailWeight, "MeasurementDetailID", "ArabicName"), "", new { @id = "ComboWeightNo", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.WeightNo, new SelectList(Model.St_MeasurementDetailWeight, "MeasurementDetailID", "EnglishName"), "", new { @id = "ComboWeightNo", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-Pop" id="AddMeasurement5" href="/St_MeasurementDetail/AddToItemCard/5">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    @Html.Label(Resources.Resource.Unit)
                                    <div class="form-group  input-group">
                                        @if (Resources.Resource.CurLang == "Arb")
                                        {
                                            @Html.DropDownListFor(m => m.UnitNo, new SelectList(Model.St_MeasurementDetailUnit, "MeasurementDetailID", "ArabicName"), "", new { @id = "ComboUnitNo", @class = "form-control input-sml" })

                                        }
                                        else
                                        {
                                            @Html.DropDownListFor(m => m.UnitNo, new SelectList(Model.St_MeasurementDetailUnit, "MeasurementDetailID", "EnglishName"), "", new { @id = "ComboUnitNo", @class = "form-control input-sml" })
                                        }
                                        <span class="input-group-btn">
                                            <a class="btn btn-primary btn-icon-anim btn-square js-Pop" id="AddMeasurement6" href="/St_MeasurementDetail/AddToItemCard/6">
                                                <i class="fa fa-plus" style="margin-top : 12px"></i>
                                            </a>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="SimilarItem" class="tab-pane fade" role="tabpanel">
                            <div class="col-lg-5">
                                @Html.Action("GridViewSimilarItem", new { id = Model.ItemCode })
                            </div>
                            <div class="col-lg-5" style="display:none;">
                                @Html.Action("GridViewSimilarItemCheck", new { id = Model.ItemCode })
                            </div>
                        </div>
                        <div id="AlternativeItems" class="tab-pane fade" role="tabpanel">
                            <div class="col-lg-12">
                                @Html.Action("GridViewAlternativeItem", new { id = Model.ItemCode })
                            </div>
                        </div>
                        <div id="OtherUnits" class="tab-pane fade" role="tabpanel">
                            <div class="col-lg-12">
                                <div class="checkbox checkbox-primary">
                                    <input id="NotRelatedToTheUnitAbove" type="checkbox">
                                    <label for="NotRelatedToTheUnitAbove">
                                        @Resources.Resource.NotRelatedToTheUnitAbove
                                    </label>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                @Html.Action("GridViewOtherItemUnit", new { id = Model.ItemCode })
                            </div>
                            <div class="col-lg-12" style="display:none;">
                                @Html.Action("GridViewOtherItemUnitCheck", new { id = Model.ItemCode })
                            </div>
                        </div>
                        <div id="Offers" class="tab-pane fade" role="tabpanel">
                            <div class="col-lg-2 panel panel-default card-view">
                                <div class="form-group mb-30">
                                    <div class="panel-heading" style="background-color: #34495E">
                                        <div class="pull-left">
                                            <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.OfferType</h6>
                                        </div>
                                        <div class="clearfix"></div>
                                    </div>
                                    <div class="radio radio-primary">
                                        <input type="radio" name="OfferType" id="Offer1" value="1">
                                        <label for="Offer1">
                                            @Resources.Resource.Offer1
                                        </label>
                                    </div>
                                    <div class="radio radio-primary">
                                        <input type="radio" name="OfferType" id="Offer2" value="2">
                                        <label for="Offer2">
                                            @Resources.Resource.Offer2
                                        </label>
                                    </div>
                                    <div class="radio radio-primary">
                                        <input type="radio" name="OfferType" id="ThereIsNoOffer" value="3" checked="">
                                        <label for="ThereIsNoOffer">
                                            @Resources.Resource.ThereIsNoOffer
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xs-1" style="width: 10px;">
                            </div>
                            <div class="col-lg-5" id="sOffer1" style="display:none;">
                                @Html.Action("GridViewItemOffer1", new { id = Model.ItemCode })
                            </div>
                            <div class="col-lg-5" id="sOffer2" style="display:none;">
                                @Html.Action("GridViewItemOffer2", new { id = Model.ItemCode })
                            </div>
                        </div>
                        <div id="CategoriesPrices" class="tab-pane fade" role="tabpanel">
                            <div class="col-lg-12">
                                <div class="col-lg-3">
                                    <a class="js-PopCategoriePrice" id="UpdateCategoryPrice1" href="/St_CategoryPrice/Update/1" style="color :darkcyan">
                                        <span id="CategoriePrice_1Name">@Model.CategoriePrice_1Name</span>
                                    </a>
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.CategoriePrice_1, new { @id = "CategoriePrice_1", @class = "form-control input-sml", @type = "Number", @min = "0" })
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <a class="js-PopCategoriePrice" id="UpdateCategoryPrice4" href="/St_CategoryPrice/Update/4" style="color :darkcyan">
                                        <span id="CategoriePrice_4Name">@Model.CategoriePrice_4Name</span>
                                    </a>
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.CategoriePrice_4, new { @id = "CategoriePrice_4", @class = "form-control input-sml", @type = "Number", @min = "0" })
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <a class="js-PopCategoriePrice" id="UpdateCategoryPrice7" href="/St_CategoryPrice/Update/7" style="color :darkcyan">
                                        <span id="CategoriePrice_7Name">@Model.CategoriePrice_7Name</span>
                                    </a>
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.CategoriePrice_7, new { @id = "CategoriePrice_7", @class = "form-control input-sml", @type = "Number", @min = "0" })
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <a class="js-PopCategoriePrice" id="UpdateCategoryPrice10" href="/St_CategoryPrice/Update/10" style="color :darkcyan">
                                        <span id="CategoriePrice_10Name">@Model.CategoriePrice_10Name</span>
                                    </a>
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.CategoriePrice_10, new { @id = "CategoriePrice_10", @class = "form-control input-sml", @type = "Number", @min = "0" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="col-lg-3">
                                    <a class="js-PopCategoriePrice" id="UpdateCategoryPrice2" href="/St_CategoryPrice/Update/2" style="color :darkcyan">
                                        <span id="CategoriePrice_2Name">@Model.CategoriePrice_2Name</span>
                                    </a>
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.CategoriePrice_2, new { @id = "CategoriePrice_2", @class = "form-control input-sml", @type = "Number", @min = "0" })
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <a class="js-PopCategoriePrice" id="UpdateCategoryPrice5" href="/St_CategoryPrice/Update/5" style="color :darkcyan">
                                        <span id="CategoriePrice_5Name">@Model.CategoriePrice_5Name</span>
                                    </a>
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.CategoriePrice_5, new { @id = "CategoriePrice_5", @class = "form-control input-sml", @type = "Number", @min = "0" })
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <a class="js-PopCategoriePrice" id="UpdateCategoryPrice8" href="/St_CategoryPrice/Update/8" style="color :darkcyan">
                                        <span id="CategoriePrice_8Name">@Model.CategoriePrice_8Name</span>
                                    </a>
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.CategoriePrice_8, new { @id = "CategoriePrice_8", @class = "form-control input-sml", @type = "Number", @min = "0" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="col-lg-3">
                                    <a class="js-PopCategoriePrice" id="UpdateCategoryPrice3" href="/St_CategoryPrice/Update/3" style="color :darkcyan">
                                        <span id="CategoriePrice_3Name">@Model.CategoriePrice_3Name</span>
                                    </a>
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.CategoriePrice_3, new { @id = "CategoriePrice_3", @class = "form-control input-sml", @type = "Number", @min = "0" })
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <a class="js-PopCategoriePrice" id="UpdateCategoryPrice6" href="/St_CategoryPrice/Update/6" style="color :darkcyan">
                                        <span id="CategoriePrice_6Name">@Model.CategoriePrice_6Name</span>
                                    </a>
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.CategoriePrice_6, new { @id = "CategoriePrice_6", @class = "form-control input-sml", @type = "Number", @min = "0" })
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <a class="js-PopCategoriePrice" id="UpdateCategoryPrice9" href="/St_CategoryPrice/Update/9" style="color :darkcyan">
                                        <span id="CategoriePrice_9Name">@Model.CategoriePrice_9Name</span>
                                    </a>
                                    <div class="form-group">
                                        @Html.TextBoxFor(m => m.CategoriePrice_9, new { @id = "CategoriePrice_9", @class = "form-control input-sml", @type = "Number", @min = "0" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="ItemPicture" class="tab-pane fade" role="tabpanel">
                            <div class="col-lg-3">
                            </div>
                            <div class="col-lg-6">
                                <div class="form-group">
                                    <a href="~/ItemLogo/@Model.ItemLogo" target="_blank">
                                        <img style="width:500px;height:350px;object-fit:contain;" src="~/ItemLogo/@Model.ItemLogo" id="ItemLogo" class="img-responsive img-rounded" />
                                    </a>
                                    <input type="file" id="LogoImageUpload" style="visibility:hidden;" accept="image/*" />
                                </div>
                                <button type="button" class="btn btn-primary btn-anim" id="OpenDialog"><i class="fa  fa-file-image-o"></i><span class="btn-text">@Resources.Resource.ChoosePicture</span> </button>
                                <button type="button" class="btn btn-warning btn-anim" id="ClearPicture"><i class="fa fa-refresh"></i><span class="btn-text">@Resources.Resource.ClearPicture</span> </button>
                            </div>
                            <div class="col-lg-3">
                            </div>

                        </div>
                        <div id="ItemGallary" class="tab-pane fade" role="tabpanel">
                            <button type="button" class="btn btn-primary btn-anim" id="UploadFiles"><i class=" fa fa-cloud-upload"></i><span class="btn-text">@Resources.Resource.AddNewFiles</span></button>
                            <div class="col-lg-12" style="margin-top:10px;">
                                <table id="tdataTableItemGallary" class="table table-hover table-bordered mb-0" width="100%">
                                    <thead>
                                        <tr>
                                            <th></th>
                                            <th>@Resources.Resource.Name</th>
                                            <th>@Resources.Resource.Download</th>
                                            <th>@Resources.Resource.Delete</th>
                                        </tr>
                                    </thead>
                                    <tbody></tbody>
                                </table>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
            <div class="panel-footer">
                @Html.DevExpress().Button(settings =>
           {
               settings.Name = "buttonUpdate";
               settings.Text = Resources.Resource.Save;
               settings.UseSubmitBehavior = false;
               settings.ClientVisible = false;
               settings.ClientSideEvents.Click = "LoopGrid";
           }).GetHtml()
                @Html.DevExpress().Button(settings =>
           {
               settings.Name = "btnClearOffer1";
               settings.Text = Resources.Resource.Clear;
               settings.UseSubmitBehavior = false;
               settings.ClientVisible = false;
               settings.ClientSideEvents.Click = "ClearGridOffer1Item";
           }).GetHtml()
                @Html.DevExpress().Button(settings =>
           {
               settings.Name = "btnClearOffer2";
               settings.Text = Resources.Resource.Clear;
               settings.UseSubmitBehavior = false;
               settings.ClientVisible = false;
               settings.ClientSideEvents.Click = "ClearGridOffer2Item";
           }).GetHtml()
                <button type="button" class="btn btn-success btn-anim" id="Update"><i class="fa fa-edit"></i><span class="btn-text">@Resources.Resource.Update</span> </button>
                <button type="button" class="btn btn-default btn-anim" id="CloseForm"><i class="fa fa-times"></i><span class="btn-text">@Resources.Resource.Close</span></button>
            </div>
        </div>
    </div>
}
@Html.TextBoxFor(m => m.TheDecimalPointForTheLocalCurrency, new { @id = "TheDecimalPointForTheLocalCurrency", @style = "visibility : hidden;" })

<div id="modal-container" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-content">
    </div>
</div>
<div id="modal-containerDescription" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-content">
    </div>
</div>
<div id="modal-containerCategoriePrice" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-content">
    </div>
</div>
<div id="modal-containerAccount" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-content">
    </div>
</div>
@Html.TextBoxFor(m => m.OpeningDate, new { @id = "OpeningDate", @class = "form-control input-sml", @Value = Model.OpeningDate.ToString("dd/MM/yyyy"), data_val = "false", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.OfferType, new { @id = "OfferType", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.ItemSalesAndPurchases, new { @id = "ItemSalesAndPurchases", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.ScaleItem, new { @id = "ScaleItem", @style = "visibility : hidden;" })
@Html.CheckBoxFor(m => m.StopItem, new { @id = "bStopItem", @style = "visibility : hidden;" })
@Html.CheckBoxFor(m => m.StoppingItemFromSelling, new { @id = "bStoppingItemFromSelling", @style = "visibility : hidden;" })
@Html.CheckBoxFor(m => m.StoppingItemFromBuying, new { @id = "bStoppingItemFromBuying", @style = "visibility : hidden;" })
@Html.CheckBoxFor(m => m.StoppingItemFromPointOfSale, new { @id = "bStoppingItemFromPointOfSale", @style = "visibility : hidden;" })
@Html.CheckBoxFor(m => m.ItemServicesWithoutAnInventory, new { @id = "bItemServicesWithoutAnInventory", @style = "visibility : hidden;" })
@Html.CheckBoxFor(m => m.TrackAnExpirationDate, new { @id = "bTrackAnExpirationDate", @style = "visibility : hidden;" })
@Html.CheckBoxFor(m => m.TrackSequence, new { @id = "bTrackSequence", @style = "visibility : hidden;" })
@Html.CheckBoxFor(m => m.TrackSequenceUponInput, new { @id = "bTrackSequenceUponInput", @style = "visibility : hidden;" })
@Html.CheckBoxFor(m => m.TrackSequenceUponOutput, new { @id = "bTrackSequenceUponOutput", @style = "visibility : hidden;" })
@Html.CheckBoxFor(m => m.TrackCustoms, new { @id = "bTrackCustoms", @style = "visibility : hidden;" })
@Html.CheckBoxFor(m => m.Smoke, new { @id = "bSmoke", @style = "visibility : hidden;" })
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
    $(document).ready(function () {
        $(document).on('click', '#DeleteFile', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Delete...</p>',
                closeButton: false
            });
            var dataToSave = {
                Id: $("#IdDel").val()
            };

            $.ajax({
                type: "POST",
                url: "/Attach/DeleteItemAttachById",
                data: JSON.stringify(dataToSave),
                contentType: 'application/json',
                success: function (data) {

                    dialog.modal('hide');
                    if (data.Code == 0) {
                        toastr.error(data.Msg);
                    }
                    else if (data.Code == 1) {
                        $('#modal-container').modal('hide');
                        toastr.success(data.Msg);

                        tabelMemRef.ajax.reload();

                    }

                },
                error: function (data) {
                    dialog.modal('hide');
                    toastr.error(data);
                }

            });
        });
        var AddDescription = 0;
        var AddMeasurement = 0;
        var UpdateCategory = 0;
        var UpdateCategoryPriceNo = 0;
        $(document).on('click', '#UploadFiles', function () {
            window.open('/Attach/AddItemGallary/@Model.ItemCode', '_blank');

        });
        Dropzone.options.dropzoneForm = {
            init: function () {
                this.on("complete", function (data) {
                    //var res = eval('('+data.xhr.responseText+')');
                    var res = JSON.parse(data.xhr.responseText);
                    toastr.success("تم رفع الملفات بنجاح");
                    tabelMemRef.ajax.reload();
                });
            }
        };
        $("#LogoImageUpload").change(function () {
            if (window.FormData !== undefined) {
                var fileUpload = $("#LogoImageUpload").get(0);
                var files = fileUpload.files;
                var fileData = new FormData();
                for (var i = 0; i < files.length; i++) {
                    fileData.append(files[i].name, files[i]);
                }
                $.ajax({
                    url: '/Attach/UploadUpdateItemLogo/@Model.ItemCode',
                    type: "POST",
                    contentType: false,
                    processData: false,
                    data: fileData,
                    success: function (result) {
                        if (result == "0") {
                            toastr.warning('@Resources.Resource.PleasFillItemCodeFirst');
                        }
                        else {

                            $("#ItemLogo").attr("src", "/ItemLogo/" + result);

                            ImgPath = result;
                            toastr.success("تم التخزين بنجاح");
                        }
                    },
                    error: function (err) {
                        alert(err.statusText);
                    }
                });
            } else {

                toastr.warning("Error!");
            }
        });
        function getFileExtension(file) {
            var regexp = /\.([0-9a-z]+)(?:[\?#]|$)/i;
            var extension = file.match(regexp);
            return extension && extension[1];
        }
        var tabelMemRefItemGallary = $("#tdataTableItemGallary").DataTable({
            "language": {
                "emptyTable": '@Resources.Resource.EmptyTable',
                "search": '@Resources.Resource.Search',
                "loadingRecords": '@Resources.Resource.LoadingRecords',
                "processing": '@Resources.Resource.Processing',
                "zeroRecords": '@Resources.Resource.ZeroRecords',
                "info": '@Resources.Resource.Info',
                "infoEmpty": '@Resources.Resource.InfoEmpty',
                "lengthMenu": '@Resources.Resource.LengthMenu',
                "infoFiltered": '@Resources.Resource.InfoFiltered',
                "paginate": {
                    "previous": '@Resources.Resource.Previous',
                    "next": '@Resources.Resource.Next',
                    "first": '@Resources.Resource.First',
                    "last": '@Resources.Resource.Last',
                },
                "aria": {
                    "sortAscending": '@Resources.Resource.SortAscending',
                    "sortDescending": '@Resources.Resource.SortDescending'
                }
            },
            "scrollX": true,
            "ordering": false,
            "autoWidth": false,
            "paging": false,
            "columnDefs": [
                { "width": "100px", "targets": 0, "className": "dt-center" },
                { "targets": 1, "className": "dt-center" },
                { "width": "100px", "targets": 2, "className": "dt-center" },
                { "width": "50px", "targets": 3, "className": "dt-center" }
            ],

            dom: 'Bfrtip',
            buttons: [{
                messageTop: '@Resources.Resource.Attach',
                extend: 'excelHtml5'
            }
            ],

            ajax: {
                url: "/Attach/GetAllItemsFiles/@Model.ItemCode",
                dataSrc: ""
            },
            columns: [
                {

                    data: "FileName",
                    render: function (data, type, r) {
                        if (getFileExtension(data.toLowerCase()) == 'png' || getFileExtension(data.toLowerCase()) == 'jpg' || getFileExtension(data.toLowerCase()) == 'jpeg' ||
                            getFileExtension(data.toLowerCase()) == 'gif') {
                            var path = location.protocol + '//' + location.host + '/ItemGallary/' + r.ItemCode + '/' + data;
                            return '<a href=' + path + ' target = "_blank"> <img  width="100%" style="object-fit:contain;" src="' + path + '"/></a>'
                        }
                        else if (getFileExtension(data.toLowerCase()) == 'pdf') {
                            var path = location.protocol + '//' + location.host + '/ItemGallary/' + r.ItemCode + '/' + data;
                            var pathImage = location.protocol + '//' + location.host + '/images/pdf.png';
                            return '<a href=' + path + ' target = "_blank"><img width="100%"style="object-fit:contain;" src="' + pathImage + '"/></a>'
                        }
                        else if (getFileExtension(data.toLowerCase()) == 'xls' || getFileExtension(data.toLowerCase()) == 'xlsx') {
                            var path = location.protocol + '//' + location.host + '/images/xls.png';
                            return '<img width="100%"style="object-fit:contain;" src="' + path + '"/>'
                        }
                        else {
                            var path = location.protocol + '//' + location.host + '/images/File.png';
                            return '<img width="100%"style="object-fit:contain;"src="' + path + '"/>'
                        }
                    }
                },
                {

                    data: "FileName",
                    render: function (data, type, r) {
                        var path = location.protocol + '//' + location.host + '/ItemGallary/' + r.ItemCode + '/' + data;
                        if (getFileExtension(data.toLowerCase()) == 'png' || getFileExtension(data.toLowerCase()) == 'jpg' || getFileExtension(data.toLowerCase()) == 'jpeg' ||
                            getFileExtension(data.toLowerCase()) == 'gif' || getFileExtension(data.toLowerCase()) == 'pdf') {
                            return "<a href=" + path + " target = '_blank' style = 'color: #008CBA'>" + data + "' </a>"
                        }
                        else {
                            return data
                        }
                    }
                },
                {
                    data: "Id",
                    render: function (data, type, r) {
                        return "<a  class='btn btn-success btn-icon-anim btn-square  btn-sm' href='/Attach/DownloadItemGallaryDocument/" + r.Id + "/" + r.ItemCode + "'><i class='fa fa-cloud-download' style='margin-top: 4px;'></i> </a>";
                    }
                },
                {
                    data: "Id",
                    render: function (data) {
                        return "<a  class='btn btn-danger btn-icon-anim btn-square btnDelete btn-sm js-Pop' href='/Attach/DeleteItemAttach/" + data + " '><i class='fa fa-trash-o' style='margin-top: 4px;'></i> </a>";
                    }
                }
            ]
        });
        document.getElementById('StopItem').checked = document.getElementById("bStopItem").checked;
        document.getElementById('StoppingItemFromSelling').checked = document.getElementById("bStoppingItemFromSelling").checked;
        document.getElementById('StoppingItemFromBuying').checked = document.getElementById("bStoppingItemFromBuying").checked;
        document.getElementById('StoppingItemFromPointOfSale').checked = document.getElementById("bStoppingItemFromPointOfSale").checked;
        document.getElementById('ItemServicesWithoutAnInventory').checked = document.getElementById("bItemServicesWithoutAnInventory").checked;
        document.getElementById('TrackAnExpirationDate').checked = document.getElementById("bTrackAnExpirationDate").checked;
        document.getElementById('TrackSequence').checked = document.getElementById("bTrackSequence").checked;
        document.getElementById('TrackSequenceUponInput').checked = document.getElementById("bTrackSequenceUponInput").checked;
        document.getElementById('TrackSequenceUponOutput').checked = document.getElementById("bTrackSequenceUponOutput").checked;
        document.getElementById('TrackCustoms').checked = document.getElementById("bTrackCustoms").checked;
        document.getElementById('Smoke').checked = document.getElementById("bSmoke").checked;
        if (document.getElementById('StopItem').checked) {
            document.getElementById("StoppingItemFromSelling").disabled = true;
            document.getElementById("StoppingItemFromBuying").disabled = true;
            document.getElementById("StoppingItemFromPointOfSale").disabled = true;
        }
        else {
            document.getElementById("StoppingItemFromSelling").disabled = false;
            document.getElementById("StoppingItemFromBuying").disabled = false;
            document.getElementById("StoppingItemFromPointOfSale").disabled = false;
        }
        if (document.getElementById('TrackSequence').checked) {
            document.getElementById("TrackSequenceUponInput").disabled = false;
            document.getElementById("TrackSequenceUponOutput").disabled = false;
        }
        else {
            document.getElementById("TrackSequenceUponInput").disabled = true;
            document.getElementById("TrackSequenceUponOutput").disabled = true;
        }
        if (document.getElementById("OfferType").value == 1) {
            document.getElementById('Offer1').checked = true;
        }
        else if (document.getElementById("OfferType").value == 2) {
            document.getElementById('Offer2').checked = true;
        }
        else if (document.getElementById("OfferType").value == 3) {
            document.getElementById('ThereIsNoOffer').checked = true;
        }
        if (document.getElementById("ScaleItem").value == 1) {
            document.getElementById('ScaleItems').checked = true;
        }
        else if (document.getElementById("ScaleItem").value == 2) {
            document.getElementById('ScaleItemByPiece').checked = true;
        }
        else if (document.getElementById("ScaleItem").value == 3) {
            document.getElementById('Other').checked = true;
        }
        if (document.getElementById("ItemSalesAndPurchases").value == 1) {
            document.getElementById('ItemSalesOnly').checked = true;
        }
        else if (document.getElementById("ItemSalesAndPurchases").value == 2) {
            document.getElementById('ItemPurchasesOnly').checked = true;
        }
        else if (document.getElementById("ItemSalesAndPurchases").value == 3) {
            document.getElementById('ItemSalesAndPurchasess').checked = true;
        }
        if ($('input[name=OfferType]:checked').val() == 1) {
            document.getElementById("sOffer2").style.display = 'none';
            document.getElementById("sOffer1").style.display = 'block';
        }
        else if ($('input[name=OfferType]:checked').val() == 2) {
            document.getElementById("sOffer2").style.display = 'block';
            document.getElementById("sOffer1").style.display = 'none';
        }
        else {
            document.getElementById("sOffer2").style.display = 'none';
            document.getElementById("sOffer1").style.display = 'none';
        }
        $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
            $($.fn.dataTable.tables(true)).DataTable()
                .columns.adjust();
        });
        $(document).on('click', '#AddDescription1', function () {
            AddDescription = 1
        });
        $(document).on('click', '#AddDescription2', function () {
            AddDescription = 2
        });
        $(document).on('click', '#AddDescription3', function () {
            AddDescription = 3
        });
        $(document).on('click', '#AddDescription4', function () {
            AddDescription = 4
        });
        $(document).on('click', '#AddDescription5', function () {
            AddDescription = 5
        });
        $(document).on('click', '#AddDescription6', function () {
            AddDescription = 6
        });
        $(document).on('click', '#AddDescription7', function () {
            AddDescription = 7
        });
        $(document).on('click', '#AddDescription8', function () {
            AddDescription = 8
        });
        $(document).on('click', '#AddDescription9', function () {
            AddDescription = 9
        });
        $(document).on('click', '#AddDescription10', function () {
            AddDescription = 10
        });
        $(document).on('click', '#AddDescription11', function () {
            AddDescription = 11
        });
        $(document).on('click', '#AddDescription12', function () {
            AddDescription = 12
        });
        $(document).on('click', '#AddDescription13', function () {
            AddDescription = 13
        });
        $(document).on('click', '#AddDescription14', function () {
            AddDescription = 14
        });
        $(document).on('click', '#AddDescription15', function () {
            AddDescription = 15
        });
        $(document).on('click', '#AddMeasurement1', function () {
            AddMeasurement = 1
        });
        $(document).on('click', '#AddMeasurement2', function () {
            AddMeasurement = 2
        });
        $(document).on('click', '#AddMeasurement3', function () {
            AddMeasurement = 3
        });
        $(document).on('click', '#AddMeasurement4', function () {
            AddMeasurement = 4
        });
        $(document).on('click', '#AddMeasurement5', function () {
            AddMeasurement = 5
        });
        $(document).on('click', '#AddMeasurement6', function () {
            AddMeasurement = 6
        });
        $(document).on('click', '#UpdateCategory1', function () {
            UpdateCategory = 1
        });
        $(document).on('click', '#UpdateCategory2', function () {
            UpdateCategory = 2
        });
        $(document).on('click', '#UpdateCategory3', function () {
            UpdateCategory = 3
        });
        $(document).on('click', '#UpdateCategory4', function () {
            UpdateCategory = 4
        });
        $(document).on('click', '#UpdateCategory5', function () {
            UpdateCategory = 5
        });
        $(document).on('click', '#UpdateCategory6', function () {
            UpdateCategory = 6
        });
        $(document).on('click', '#UpdateCategory7', function () {
            UpdateCategory = 7
        });
        $(document).on('click', '#UpdateCategory8', function () {
            UpdateCategory = 8
        });
        $(document).on('click', '#UpdateCategory9', function () {
            UpdateCategory = 9
        });
        $(document).on('click', '#UpdateCategory10', function () {
            UpdateCategory = 10
        });
        $(document).on('click', '#UpdateCategory11', function () {
            UpdateCategory = 11
        });
        $(document).on('click', '#UpdateCategory12', function () {
            UpdateCategory = 12
        });
        $(document).on('click', '#UpdateCategory13', function () {
            UpdateCategory = 13
        });
        $(document).on('click', '#UpdateCategory14', function () {
            UpdateCategory = 14
        });
        $(document).on('click', '#UpdateCategory15', function () {
            UpdateCategory = 15
        });
        $(document).on('click', '#UpdateCategoryPrice1', function () {
            UpdateCategoryPriceNo = 1
        });
        $(document).on('click', '#UpdateCategoryPrice2', function () {
            UpdateCategoryPriceNo = 2
        });
        $(document).on('click', '#UpdateCategoryPrice3', function () {
            UpdateCategoryPriceNo = 3
        });
        $(document).on('click', '#UpdateCategoryPrice4', function () {
            UpdateCategoryPriceNo = 4
        });
        $(document).on('click', '#UpdateCategoryPrice5', function () {
            UpdateCategoryPriceNo = 5
        });
        $(document).on('click', '#UpdateCategoryPrice6', function () {
            UpdateCategoryPriceNo = 6
        });
        $(document).on('click', '#UpdateCategoryPrice7', function () {
            UpdateCategoryPriceNo = 7
        });
        $(document).on('click', '#UpdateCategoryPrice8', function () {
            UpdateCategoryPriceNo = 8
        });
        $(document).on('click', '#UpdateCategoryPrice9', function () {
            UpdateCategoryPriceNo = 9
        });
        $(document).on('click', '#UpdateCategoryPrice10', function () {
            UpdateCategoryPriceNo = 10
        });
        $(document).on('click', '#CloseForm', function () {
            window.location = "/St_ItemCard/Index";
        });
        $(document).on('click', '#ClearPicture', function () {
            $('#ItemLogo').attr('src', '~/ItemLogo/@Model.ItemLogo');
            $("#LogoImageUpload").replaceWith($("#LogoImageUpload").val('').clone(true));
        });
        $(document).on('click', '#OpenDialog', function () {
            document.getElementById('LogoImageUpload').click();
        });
        var tabelMemRefWarehouse = $("#tdataTableWarehouse").DataTable({
            "language": {
                "emptyTable": '@Resources.Resource.EmptyTable',
                "search": '@Resources.Resource.Search',
                "loadingRecords": '@Resources.Resource.LoadingRecords',
                "processing": '@Resources.Resource.Processing',
                "zeroRecords": '@Resources.Resource.ZeroRecords',
                "info": '@Resources.Resource.Info',
                "infoEmpty": '@Resources.Resource.InfoEmpty',
                "lengthMenu": '@Resources.Resource.LengthMenu',
                "infoFiltered": '@Resources.Resource.InfoFiltered',
                "paginate": {
                    "previous": '@Resources.Resource.Previous',
                    "next": '@Resources.Resource.Next',
                    "first": '@Resources.Resource.First',
                    "last": '@Resources.Resource.Last',
                },
                "aria": {
                    "sortAscending": '@Resources.Resource.SortAscending',
                    "sortDescending": '@Resources.Resource.SortDescending'
                }
            },
            "searching": false,
            "scrollX": true,
            "ordering": false,
            "autoWidth": false,
            "paging": false,
            "info": false,
            "infoEmpty": false,
            "scrollY": "200px",

            dom: 'Bfrtip',
            buttons: [

            ],

            "columnDefs": [
                {
                    "targets": [0],
                    "orderable": false,
                    'checkboxes': {
                        'selectRow': true
                    },
                    'createdCell': function (td, cellData, rowData, row, col) {
                        if (rowData.StockCase == 1) {
                            this.api().cell(td).checkboxes.select();
                        }
                    }
                },

                {
                    "targets": [1],
                    "className": "dt-center"
                },
                {
                    "targets": [2],
                    "visible": false,
                    "searchable": false
                },
                {
                    "targets": [3],
                    "visible": false,
                    "searchable": false
                },
                {
                    "targets": [4],
                    "visible": false,
                    "searchable": false
                },
                {
                    "targets": [5],
                    "visible": false,
                    "searchable": false
                }
            ],
            "select": {
                "style": "multi"
            },
            ajax: {
                "type": "GET",
                url: "/St_ItemCard/GetAllSt_WarehouseByItemCode/@Model.ItemCode",

                dataSrc: ""
            },

            columns: [
                {
                    data: "iRowTable"
                },
                {

                    data: "StockName"
                },
                {
                    data: "StockCode"

                },
                {
                    data: "StockCase"
                },
                {
                    data: "StockMinimumItemNo"

                },
                {
                    data: "StockMaximumItemNo"
                }
            ]


        });
        $('#BtnSupplier').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchAcc/SupplierAccountNo';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnClearSupplier').on('click', function () {
            document.getElementById("SupplierAccountNumber").value = '';
            document.getElementById("SupplierAccountName").value = '';
        });
        $('#tdataTable').on('click', '.modal-close-btn', function () {
            $('#modal-container').modal('hide');
        });
        $(document).on('click', '.js-Pop', function (e) {
            $('#modal-container').removeData('bs.modal');
            e.preventDefault();
            $(this).attr('data-target', '#modal-container');
            $(this).attr('data-toggle', 'modal');

        });
        $('#modal-container').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal');
        });
        $(document).on('click', '.js-PopDescription', function (e) {
            $('#modal-containerDescription').removeData('bs.modal');
            e.preventDefault();
            $(this).attr('data-target', '#modal-containerDescription');
            $(this).attr('data-toggle', 'modal');

        });
        $('#modal-containerDescription').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal');
        });
        $(document).on('click', '.js-PopCategoriePrice', function (e) {
            $('#modal-containerCategoriePrice').removeData('bs.modal');
            e.preventDefault();
            $(this).attr('data-target', '#modal-containerCategoriePrice');
            $(this).attr('data-toggle', 'modal');

        });
        $('#modal-containerCategoriePrice').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal');
        });
        $('#modal-containerAccount').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal');

        });
        $("#ItemNameArabic").focus().select();
        $("#ItemNameArabic").keyup(function (event) {
            if (event.keyCode == 13)
                $("#ItemNameEnglish").focus().select();

        });
        $("#ItemNameEnglish").keyup(function (event) {
            if (event.keyCode == 13)
                $("#MinimumItemNo").focus().select();

        });
        $("#MinimumItemNo").keyup(function (event) {
            if (event.keyCode == 13)
                $("#MaximumItemNo").focus().select();

        });
        $("#MaximumItemNo").keyup(function (event) {
            if (event.keyCode == 13)
                $("#SupplierAccountNumber").focus().select();

        });
        $("#SupplierAccountNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#LocalCost").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchAcc/SupplierAccountNo';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $("#SupplierAccountNumber").blur(function () {
            var AccountNumber = document.getElementById("SupplierAccountNumber").value;
            if (AccountNumber == '') {
                document.getElementById("SupplierAccountName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckAcountAcc", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("SupplierAccountNumber").value = '';
                            document.getElementById("SupplierAccountName").value = '';
                            $("#SupplierAccountNumber").focus();
                        }
                        else {
                            if (!Data.StoppedAccount) {
                                document.getElementById("SupplierAccountName").value = Data.AccountName;
                            }
                            else {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                document.getElementById("SupplierAccountNumber").value = "";
                                document.getElementById("SupplierAccountName").value = "";
                                $("#SupplierAccountNumber").focus().select();
                            }

                        }
                    });
                }
            }
        });
        $("#LocalCost").keyup(function (event) {
            if (event.keyCode == 13)
                $("#SalePrice").focus().select();

        });
        $("#SalePrice").keyup(function (event) {
            if (event.keyCode == 13)
                $("#PointOfSalePrice").focus().select();

        });
        $("#PointOfSalePrice").keyup(function (event) {
            if (event.keyCode == 13)
                $("#ForeignCost").focus().select();

        });
        $("#ForeignCost").keyup(function (event) {
            if (event.keyCode == 13)
                $("#MinimumSaleAmount").focus().select();

        });
        $("#MinimumSaleAmount").keyup(function (event) {
            if (event.keyCode == 13)
                $("#TheTargetMonthlyAmount").focus().select();

        });
        $("#TheTargetMonthlyAmount").keyup(function (event) {
            if (event.keyCode == 13)
                $("#ItemNameArabic").focus().select();

        });
        $("#CategoriePrice_1").keyup(function (event) {
            if (event.keyCode == 13)
                $("#CategoriePrice_2").focus().select();

        });
        $("#CategoriePrice_2").keyup(function (event) {
            if (event.keyCode == 13)
                $("#CategoriePrice_3").focus().select();

        });
        $("#CategoriePrice_3").keyup(function (event) {
            if (event.keyCode == 13)
                $("#CategoriePrice_4").focus().select();

        });
        $("#CategoriePrice_4").keyup(function (event) {
            if (event.keyCode == 13)
                $("#CategoriePrice_5").focus().select();

        });
        $("#CategoriePrice_5").keyup(function (event) {
            if (event.keyCode == 13)
                $("#CategoriePrice_6").focus().select();

        });
        $("#CategoriePrice_6").keyup(function (event) {
            if (event.keyCode == 13)
                $("#CategoriePrice_7").focus().select();

        });
        $("#CategoriePrice_7").keyup(function (event) {
            if (event.keyCode == 13)
                $("#CategoriePrice_8").focus().select();

        });
        $("#CategoriePrice_8").keyup(function (event) {
            if (event.keyCode == 13)
                $("#CategoriePrice_9").focus().select();

        });
        $("#CategoriePrice_9").keyup(function (event) {
            if (event.keyCode == 13)
                $("#CategoriePrice_10").focus().select();

        });
        $("#CategoriePrice_10").keyup(function (event) {
            if (event.keyCode == 13)
                $("#CategoriePrice_1").focus().select();

        });
        $('#TaxTypeNo').change(function () {
            var SelectedValue = $("#TaxTypeNo").val();
            if (SelectedValue == 1) {
                document.getElementById("TaxRate").disabled = false;
                document.getElementById("TaxRate").selectedIndex = "11";
            }
            else if (SelectedValue == 2) {
                document.getElementById("TaxRate").disabled = true;
                document.getElementById("TaxRate").selectedIndex = '0';

            }
            else if (SelectedValue == 3) {
                document.getElementById("TaxRate").disabled = true;
                document.getElementById("TaxRate").selectedIndex = '0';
            }
        });
        $('#TaxTypeNo').trigger('change');
        $(document).on('click', '#SaveNewItemUnit', function () {
            if ($("#ArabicName").val() == '') {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                bootbox.confirm({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        confirm: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                            className: 'btn-success'
                        },
                        cancel: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            var dialog = bootbox.dialog({
                                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Saving...</p>',
                                closeButton: false
                            });

                            var dataToSave = {

                                ItemUnitCode: $("#ItemUnitCode").val(),
                                ArabicName: $("#ArabicName").val(),
                                EnglishName: $("#EnglishName").val()

                            };
                            $.ajax({
                                type: "POST",
                                url: "/St_ItemUnit/SaveSt_ItemUnit",
                                data: JSON.stringify(dataToSave),
                                contentType: 'application/json',
                                success: function (data) {

                                    dialog.modal('hide');
                                    if (data.Code == 0) {
                                        toastr.error(data.Msg);
                                    }
                                    else if (data.Code == 1) {

                                        toastr.success(data.Msg);
                                        document.getElementById("ItemUnitCode").value = data.LastID;
                                        document.getElementById("ArabicName").value = '';
                                        document.getElementById("EnglishName").value = '';

                                        $("#ArabicName").focus().select();

                                        var ComboItemUnitNo = $('#ComboItemUnitNo');
                                        ComboItemUnitNo.empty();
                                        if ('@Resources.Resource.CurLang' == 'Arb') {
                                            $.ajax({
                                                method: "GET",
                                                url: "/St_ItemUnit/GetAllSt_ItemUnit",


                                                success: function (data) {
                                                    ComboItemUnitNo.append($('<option/>', {
                                                        value: 0,
                                                        text: '@Resources.Resource.ItemUnits'
                                                    }));


                                                    $.each(data, function (id, region) {
                                                        ComboItemUnitNo.append($('<option/>', {
                                                            value: region.ItemUnitCode,
                                                            text: region.ArabicName
                                                        }));
                                                    });

                                                    dialog.modal('hide');

                                                },
                                                error: function (xhr, AJAXOptions, thrownError) {
                                                    dialog.modal('hide');
                                                    alert('Failed to retrieve .');
                                                }
                                            });
                                        }
                                        else {
                                            $.ajax({
                                                method: "GET",
                                                url: "/St_ItemUnit/GetAllSt_ItemUnit",


                                                success: function (data) {
                                                    ComboItemUnitNo.append($('<option/>', {
                                                        value: 0,
                                                        text: '@Resources.Resource.ItemUnits'
                                                    }));


                                                    $.each(data, function (id, region) {
                                                        ComboItemUnitNo.append($('<option/>', {
                                                            value: region.ItemUnitCode,
                                                            text: region.EnglishName
                                                        }));
                                                    });

                                                    dialog.modal('hide');

                                                },
                                                error: function (xhr, AJAXOptions, thrownError) {
                                                    dialog.modal('hide');
                                                    alert('Failed to retrieve .');
                                                }
                                            });
                                        }

                                    }

                                },
                                error: function (data) {
                                    dialog.modal('hide');
                                    toastr.error(data);
                                }

                            });
                        }
                    }
                });
            }
        });
        $(document).on('click', '#SaveNewCountryOfOrigin', function () {
            if ($("#ArabicName").val() == '') {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                bootbox.confirm({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        confirm: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                            className: 'btn-success'
                        },
                        cancel: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            var dialog = bootbox.dialog({
                                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Saving...</p>',
                                closeButton: false
                            });
                            var dataToSave = {

                                CountryOfOriginID: $("#CountryOfOriginID").val(),
                                ArabicName: $("#ArabicName").val(),
                                EnglishName: $("#EnglishName").val()

                            };

                            $.ajax({
                                type: "POST",
                                url: "/St_CountryOfOrigin/SaveSt_CountryOfOrigin",
                                data: JSON.stringify(dataToSave),
                                contentType: 'application/json',
                                success: function (data) {

                                    dialog.modal('hide');
                                    if (data.Code == 0) {
                                        toastr.error(data.Msg);
                                    }
                                    else if (data.Code == 1) {
                                        $('#modal-container').modal('hide');
                                        toastr.success(data.Msg);

                                        document.getElementById("CountryOfOriginID").value = data.LastID;
                                        document.getElementById("ArabicName").value = '';
                                        document.getElementById("EnglishName").value = '';
                                        $("#ArabicName").focus().select();

                                        var ComboCountryOfOriginNo = $('#ComboCountryOfOriginNo');
                                        ComboCountryOfOriginNo.empty();
                                        if ('@Resources.Resource.CurLang' == 'Arb') {
                                            $.ajax({
                                                method: "GET",
                                                url: "/St_CountryOfOrigin/GetAllSt_CountryOfOrigin",


                                                success: function (data) {
                                                    ComboCountryOfOriginNo.append($('<option/>', {
                                                        value: 0,
                                                        text: '@Resources.Resource.CountryOfOrigin'
                                                    }));


                                                    $.each(data, function (id, region) {
                                                        ComboCountryOfOriginNo.append($('<option/>', {
                                                            value: region.CountryOfOriginID,
                                                            text: region.ArabicName
                                                        }));
                                                    });

                                                    dialog.modal('hide');

                                                },
                                                error: function (xhr, AJAXOptions, thrownError) {
                                                    dialog.modal('hide');
                                                    alert('Failed to retrieve .');
                                                }
                                            });
                                        }
                                        else {
                                            $.ajax({
                                                method: "GET",
                                                url: "/St_CountryOfOrigin/GetAllSt_CountryOfOrigin",


                                                success: function (data) {
                                                    ComboCountryOfOriginNo.append($('<option/>', {
                                                        value: 0,
                                                        text: '@Resources.Resource.CountryOfOrigin'
                                                    }));


                                                    $.each(data, function (id, region) {
                                                        ComboCountryOfOriginNo.append($('<option/>', {
                                                            value: region.CountryOfOriginID,
                                                            text: region.EnglishName
                                                        }));
                                                    });

                                                    dialog.modal('hide');

                                                },
                                                error: function (xhr, AJAXOptions, thrownError) {
                                                    dialog.modal('hide');
                                                    alert('Failed to retrieve .');
                                                }
                                            });
                                        }
                                    }

                                },
                                error: function (data) {
                                    dialog.modal('hide');
                                    toastr.error(data);
                                }

                            });
                        }
                    }
                });



            }


        });
        $(document).on('click', '#SaveNewManufacturerCompany', function () {
            if ($("#ArabicName").val() == '') {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                bootbox.confirm({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        confirm: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                            className: 'btn-success'
                        },
                        cancel: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            var dialog = bootbox.dialog({
                                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Saving...</p>',
                                closeButton: false
                            });
                            var dataToSave = {

                                ManufacturerCompanyID: $("#ManufacturerCompanyID").val(),
                                ArabicName: $("#ArabicName").val(),
                                EnglishName: $("#EnglishName").val()

                            };

                            $.ajax({
                                type: "POST",
                                url: "/St_ManufacturerCompany/SaveSt_ManufacturerCompany",
                                data: JSON.stringify(dataToSave),
                                contentType: 'application/json',
                                success: function (data) {

                                    dialog.modal('hide');
                                    if (data.Code == 0) {
                                        toastr.error(data.Msg);
                                    }
                                    else if (data.Code == 1) {
                                        $('#modal-container').modal('hide');
                                        toastr.success(data.Msg);

                                        document.getElementById("ManufacturerCompanyID").value = data.LastID;
                                        document.getElementById("ArabicName").value = '';
                                        document.getElementById("EnglishName").value = '';
                                        $("#ArabicName").focus().select();
                                        var ComboManufacturerCompanyNo = $('#ComboManufacturerCompanyNo');
                                        ComboManufacturerCompanyNo.empty();
                                        if ('@Resources.Resource.CurLang' == 'Arb') {
                                            $.ajax({
                                                method: "GET",
                                                url: "/St_ManufacturerCompany/GetAllSt_ManufacturerCompany",


                                                success: function (data) {
                                                    ComboManufacturerCompanyNo.append($('<option/>', {
                                                        value: 0,
                                                        text: '@Resources.Resource.ManufacturerCompany'
                                                    }));


                                                    $.each(data, function (id, region) {
                                                        ComboManufacturerCompanyNo.append($('<option/>', {
                                                            value: region.ManufacturerCompanyID,
                                                            text: region.ArabicName
                                                        }));
                                                    });

                                                    dialog.modal('hide');

                                                },
                                                error: function (xhr, AJAXOptions, thrownError) {
                                                    dialog.modal('hide');
                                                    alert('Failed to retrieve .');
                                                }
                                            });
                                        }
                                        else {
                                            $.ajax({
                                                method: "GET",
                                                url: "/St_ManufacturerCompany/GetAllSt_ManufacturerCompany",


                                                success: function (data) {
                                                    ComboManufacturerCompanyNo.append($('<option/>', {
                                                        value: 0,
                                                        text: '@Resources.Resource.ManufacturerCompany'
                                                    }));


                                                    $.each(data, function (id, region) {
                                                        ComboManufacturerCompanyNo.append($('<option/>', {
                                                            value: region.ManufacturerCompanyID,
                                                            text: region.EnglishName
                                                        }));
                                                    });

                                                    dialog.modal('hide');

                                                },
                                                error: function (xhr, AJAXOptions, thrownError) {
                                                    dialog.modal('hide');
                                                    alert('Failed to retrieve .');
                                                }
                                            });
                                        }
                                    }

                                },
                                error: function (data) {
                                    dialog.modal('hide');
                                    toastr.error(data);
                                }

                            });
                        }
                    }
                });



            }


        });
        $(document).on('click', '#SaveSt_DescriptionDetail', function () {
            if ($("#ArabicName").val() == '') {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                bootbox.confirm({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        confirm: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                            className: 'btn-success'
                        },
                        cancel: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            var dialog = bootbox.dialog({
                                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Saving...</p>',
                                closeButton: false
                            });

                            var dataToSave = {
                                DescriptionID: $("#DescriptionID").val(),
                                ArabicName: $("#ArabicName").val(),
                                EnglishName: $("#EnglishName").val()
                            };
                            $.ajax({
                                type: "POST",
                                url: "/St_DescriptionDetail/SaveSt_DescriptionDetail",
                                data: JSON.stringify(dataToSave),
                                contentType: 'application/json',
                                success: function (data) {

                                    dialog.modal('hide');
                                    if (data.Code == 0) {
                                        toastr.error(data.Msg);
                                    }
                                    else if (data.Code == 1) {
                                        toastr.success(data.Msg);
                                        document.getElementById("ArabicName").value = '';
                                        document.getElementById("EnglishName").value = '';
                                        var SelectedDescription = $("#DescriptionID").val();
                                        $.getJSON('@Url.Action("GetMax", "St_DescriptionDetail")', { id: SelectedDescription }, function (Data) {
                                            if (Data != null) {
                                                document.getElementById("DescriptionDetailID").value = Data;
                                            } else {
                                            };
                                        });
                                        $("#ArabicName").focus().select();
                                        if (AddDescription == 1) {
                                            var ComboCategorie = $('#ComboCategorie_1');
                                            ComboCategorie.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/1",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/1",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                        else if (AddDescription == 2) {
                                            var ComboCategorie = $('#ComboCategorie_2');
                                            ComboCategorie.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/2",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/2",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                        else if (AddDescription == 3) {
                                            var ComboCategorie = $('#ComboCategorie_3');
                                            ComboCategorie.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/3",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/3",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                        else if (AddDescription == 4) {
                                            var ComboCategorie = $('#ComboCategorie_4');
                                            ComboCategorie.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/4",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/4",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                        else if (AddDescription == 5) {
                                            var ComboCategorie = $('#ComboCategorie_5');
                                            ComboCategorie.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/5",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/5",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                        else if (AddDescription == 6) {
                                            var ComboCategorie = $('#ComboCategorie_6');
                                            ComboCategorie.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/6",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/6",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                        else if (AddDescription == 7) {
                                            var ComboCategorie = $('#ComboCategorie_7');
                                            ComboCategorie.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/7",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/7",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                        else if (AddDescription == 8) {
                                            var ComboCategorie = $('#ComboCategorie_8');
                                            ComboCategorie.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/8",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/8",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                        else if (AddDescription == 9) {
                                            var ComboCategorie = $('#ComboCategorie_9');
                                            ComboCategorie.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/9",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/9",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                        else if (AddDescription == 10) {
                                            var ComboCategorie = $('#ComboCategorie_10');
                                            ComboCategorie.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/10",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/10",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                        else if (AddDescription == 11) {
                                            var ComboCategorie = $('#ComboCategorie_11');
                                            ComboCategorie.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/11",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/11",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                        else if (AddDescription == 12) {
                                            var ComboCategorie = $('#ComboCategorie_12');
                                            ComboCategorie.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/12",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/12",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                        else if (AddDescription == 13) {
                                            var ComboCategorie = $('#ComboCategorie_13');
                                            ComboCategorie.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/13",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/13",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                        else if (AddDescription == 14) {
                                            var ComboCategorie = $('#ComboCategorie_14');
                                            ComboCategorie.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/14",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/14",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                        else if (AddDescription == 15) {
                                            var ComboCategorie = $('#ComboCategorie_15');
                                            ComboCategorie.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/15",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_DescriptionDetail/GetSt_DescriptionDetailByDescriptioID/15",


                                                    success: function (data) {
                                                        ComboCategorie.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboCategorie.append($('<option/>', {
                                                                value: region.DescriptionDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                    }
                                },
                                error: function (data) {
                                    dialog.modal('hide');
                                    toastr.error(data);
                                }
                            });
                        }
                    }
                });
            }
        });
        $(document).on('click', '#SaveSt_MeasurementDetail', function () {
            if ($("#ArabicName").val() == '') {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                bootbox.confirm({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        confirm: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                            className: 'btn-success'
                        },
                        cancel: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            var dialog = bootbox.dialog({
                                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Saving...</p>',
                                closeButton: false
                            });

                            var dataToSave = {
                                MeasurementID: $("#MeasurementID").val(),
                                ArabicName: $("#ArabicName").val(),
                                EnglishName: $("#EnglishName").val()
                            };
                            $.ajax({
                                type: "POST",
                                url: "/St_MeasurementDetail/SaveSt_MeasurementDetail",
                                data: JSON.stringify(dataToSave),
                                contentType: 'application/json',
                                success: function (data) {

                                    dialog.modal('hide');
                                    if (data.Code == 0) {
                                        toastr.error(data.Msg);
                                    }
                                    else if (data.Code == 1) {
                                        toastr.success(data.Msg);
                                        document.getElementById("ArabicName").value = '';
                                        document.getElementById("EnglishName").value = '';
                                        var SelectedMeasurement = $("#MeasurementID").val();
                                        $.getJSON('@Url.Action("GetMax", "St_MeasurementDetail")', { id: SelectedMeasurement }, function (Data) {
                                            if (Data != null) {
                                                document.getElementById("MeasurementDetailID").value = Data;
                                            } else {
                                            };
                                        });
                                        $("#ArabicName").focus().select();
                                        if (AddMeasurement == 1) {
                                            var ComboLengthNo = $('#ComboLengthNo');
                                            ComboLengthNo.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_MeasurementDetail/GetSt_MeasurementDetailByMeasurementID/1",


                                                    success: function (data) {
                                                        ComboLengthNo.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboLengthNo.append($('<option/>', {
                                                                value: region.MeasurementDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_MeasurementDetail/GetSt_MeasurementDetailByMeasurementID/1",


                                                    success: function (data) {
                                                        ComboLengthNo.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboLengthNo.append($('<option/>', {
                                                                value: region.MeasurementDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                        else if (AddMeasurement == 2) {
                                            var ComboWidthNo = $('#ComboWidthNo');
                                            ComboWidthNo.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_MeasurementDetail/GetSt_MeasurementDetailByMeasurementID/2",


                                                    success: function (data) {
                                                        ComboWidthNo.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboWidthNo.append($('<option/>', {
                                                                value: region.MeasurementDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_MeasurementDetail/GetSt_MeasurementDetailByMeasurementID/2",


                                                    success: function (data) {
                                                        ComboWidthNo.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboWidthNo.append($('<option/>', {
                                                                value: region.MeasurementDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                        else if (AddMeasurement == 3) {
                                            var ComboHeightNo = $('#ComboHeightNo');
                                            ComboHeightNo.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_MeasurementDetail/GetSt_MeasurementDetailByMeasurementID/3",


                                                    success: function (data) {
                                                        ComboHeightNo.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboHeightNo.append($('<option/>', {
                                                                value: region.MeasurementDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_MeasurementDetail/GetSt_MeasurementDetailByMeasurementID/3",


                                                    success: function (data) {
                                                        ComboHeightNo.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboHeightNo.append($('<option/>', {
                                                                value: region.MeasurementDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                        else if (AddMeasurement == 4) {
                                            var ComboSizeNo = $('#ComboSizeNo');
                                            ComboSizeNo.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_MeasurementDetail/GetSt_MeasurementDetailByMeasurementID/4",
                                                    success: function (data) {
                                                        ComboSizeNo.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboSizeNo.append($('<option/>', {
                                                                value: region.MeasurementDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_MeasurementDetail/GetSt_MeasurementDetailByMeasurementID/4",


                                                    success: function (data) {
                                                        ComboSizeNo.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboSizeNo.append($('<option/>', {
                                                                value: region.MeasurementDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                        else if (AddMeasurement == 5) {
                                            var ComboWeightNo = $('#ComboWeightNo');
                                            ComboWeightNo.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_MeasurementDetail/GetSt_MeasurementDetailByMeasurementID/5",
                                                    success: function (data) {
                                                        ComboWeightNo.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboWeightNo.append($('<option/>', {
                                                                value: region.MeasurementDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_MeasurementDetail/GetSt_MeasurementDetailByMeasurementID/5",


                                                    success: function (data) {
                                                        ComboWeightNo.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboWeightNo.append($('<option/>', {
                                                                value: region.MeasurementDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                        else if (AddMeasurement == 6) {
                                            var ComboUnitNo = $('#ComboUnitNo');
                                            ComboUnitNo.empty();
                                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_MeasurementDetail/GetSt_MeasurementDetailByMeasurementID/6",
                                                    success: function (data) {
                                                        ComboUnitNo.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboUnitNo.append($('<option/>', {
                                                                value: region.MeasurementDetailID,
                                                                text: region.ArabicName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                            else {
                                                $.ajax({
                                                    method: "GET",
                                                    url: "/St_MeasurementDetail/GetSt_MeasurementDetailByMeasurementID/6",


                                                    success: function (data) {
                                                        ComboUnitNo.append($('<option/>', {
                                                            value: 0,
                                                            text: ""
                                                        }));


                                                        $.each(data, function (id, region) {
                                                            ComboUnitNo.append($('<option/>', {
                                                                value: region.MeasurementDetailID,
                                                                text: region.EnglishName
                                                            }));
                                                        });

                                                        dialog.modal('hide');

                                                    },
                                                    error: function (xhr, AJAXOptions, thrownError) {
                                                        dialog.modal('hide');
                                                        alert('Failed to retrieve .');
                                                    }
                                                });
                                            }
                                        }
                                    }
                                },
                                error: function (data) {
                                    dialog.modal('hide');
                                    toastr.error(data);
                                }
                            });
                        }
                    }
                });
            }
        });
        $(document).on('click', '#UpdateDescription', function () {
            if ($("#ArabicName").val() == '') {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                bootbox.confirm({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        confirm: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                            className: 'btn-success'
                        },
                        cancel: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            var dialog = bootbox.dialog({
                                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Updating...</p>',
                                closeButton: false
                            });

                            var dataToSave = {

                                DescriptionID: $("#DescriptionID").val(),
                                ArabicName: $("#ArabicName").val(),
                                EnglishName: $("#EnglishName").val()
                            };
                            $.ajax({
                                type: "POST",
                                url: "/St_Description/UpdateDescription",
                                data: JSON.stringify(dataToSave),
                                contentType: 'application/json',
                                success: function (data) {

                                    dialog.modal('hide');
                                    if (data.Code == 0) {
                                        toastr.error(data.Msg);
                                    }
                                    else if (data.Code == 1) {

                                        toastr.success(data.Msg);
                                        $('#modal-container').modal('hide');
                                        document.getElementById("Close").click();
                                        $.getJSON('@Url.Action("GetCategoryName", "St_Description")', { id: UpdateCategory }, function (Data) {
                                            if (Data != null) {
                                                if (UpdateCategory == 1) {
                                                    var Categorie_1Name = $('#Categorie_1Name');
                                                    Categorie_1Name.html(Data);
                                                }
                                                else if (UpdateCategory == 2) {
                                                    var Categorie_2Name = $('#Categorie_2Name');
                                                    Categorie_2Name.html(Data);
                                                }
                                                else if (UpdateCategory == 3) {
                                                    var Categorie_3Name = $('#Categorie_3Name');
                                                    Categorie_3Name.html(Data);
                                                }
                                                else if (UpdateCategory == 4) {
                                                    var Categorie_4Name = $('#Categorie_4Name');
                                                    Categorie_4Name.html(Data);
                                                }
                                                else if (UpdateCategory == 5) {
                                                    var Categorie_5Name = $('#Categorie_5Name');
                                                    Categorie_5Name.html(Data);
                                                }
                                                else if (UpdateCategory == 6) {
                                                    var Categorie_6Name = $('#Categorie_6Name');
                                                    Categorie_6Name.html(Data);
                                                }
                                                else if (UpdateCategory == 7) {
                                                    var Categorie_7Name = $('#Categorie_7Name');
                                                    Categorie_7Name.html(Data);
                                                }
                                                else if (UpdateCategory == 8) {
                                                    var Categorie_8Name = $('#Categorie_8Name');
                                                    Categorie_8Name.html(Data);
                                                }
                                                else if (UpdateCategory == 9) {
                                                    var Categorie_9Name = $('#Categorie_9Name');
                                                    Categorie_9Name.html(Data);
                                                }
                                                else if (UpdateCategory == 10) {
                                                    var Categorie_10Name = $('#Categorie_10Name');
                                                    Categorie_10Name.html(Data);
                                                }
                                                else if (UpdateCategory == 11) {
                                                    var Categorie_11Name = $('#Categorie_11Name');
                                                    Categorie_11Name.html(Data);
                                                }
                                                else if (UpdateCategory == 12) {
                                                    var Categorie_12Name = $('#Categorie_12Name');
                                                    Categorie_12Name.html(Data);
                                                }
                                                else if (UpdateCategory == 13) {
                                                    var Categorie_13Name = $('#Categorie_13Name');
                                                    Categorie_13Name.html(Data);
                                                }
                                                else if (UpdateCategory == 14) {
                                                    var Categorie_14Name = $('#Categorie_14Name');
                                                    Categorie_14Name.html(Data);
                                                }
                                                else if (UpdateCategory == 15) {
                                                    var Categorie_15Name = $('#Categorie_15Name');
                                                    Categorie_15Name.html(Data);
                                                }
                                            } else {
                                            };
                                        });
                                    }
                                },
                                error: function (data) {
                                    dialog.modal('hide');
                                    toastr.error(data);
                                }

                            });

                        }
                    }
                });
            }
        });
        $(document).on('click', '#UpdateCategoryPrice', function () {
            if ($("#ArabicName").val() == '') {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                bootbox.confirm({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        confirm: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                            className: 'btn-success'
                        },
                        cancel: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            var dialog = bootbox.dialog({
                                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Updating...</p>',
                                closeButton: false
                            });

                            var dataToSave = {

                                CategoryPriceID: $("#CategoryPriceID").val(),
                                ArabicName: $("#ArabicName").val(),
                                EnglishName: $("#EnglishName").val()
                            };
                            $.ajax({
                                type: "POST",
                                url: "/St_CategoryPrice/UpdateSt_CategoryPrice",
                                data: JSON.stringify(dataToSave),
                                contentType: 'application/json',
                                success: function (data) {

                                    dialog.modal('hide');
                                    if (data.Code == 0) {
                                        toastr.error(data.Msg);
                                    }
                                    else if (data.Code == 1) {

                                        toastr.success(data.Msg);
                                        $('#modal-container').modal('hide');
                                        document.getElementById("Close").click();
                                        $.getJSON('@Url.Action("GetCategoryPriceName", "St_CategoryPrice")', { id: UpdateCategoryPriceNo }, function (Data) {
                                            if (Data != null) {
                                                if (UpdateCategoryPriceNo == 1) {
                                                    var CategoriePrice_1Name = $('#CategoriePrice_1Name');
                                                    CategoriePrice_1Name.html(Data);
                                                }
                                                else if (UpdateCategoryPriceNo == 2) {
                                                    var CategoriePrice_2Name = $('#CategoriePrice_2Name');
                                                    CategoriePrice_2Name.html(Data);
                                                }
                                                else if (UpdateCategoryPriceNo == 3) {
                                                    var CategoriePrice_3Name = $('#CategoriePrice_3Name');
                                                    CategoriePrice_3Name.html(Data);
                                                }
                                                else if (UpdateCategoryPriceNo == 4) {
                                                    var CategoriePrice_4Name = $('#CategoriePrice_4Name');
                                                    CategoriePrice_4Name.html(Data);
                                                }
                                                else if (UpdateCategoryPriceNo == 5) {
                                                    var CategoriePrice_5Name = $('#CategoriePrice_5Name');
                                                    CategoriePrice_5Name.html(Data);
                                                }
                                                else if (UpdateCategoryPriceNo == 6) {
                                                    var CategoriePrice_6Name = $('#CategoriePrice_6Name');
                                                    CategoriePrice_6Name.html(Data);
                                                }
                                                else if (UpdateCategoryPriceNo == 7) {
                                                    var CategoriePrice_7Name = $('#CategoriePrice_7Name');
                                                    CategoriePrice_7Name.html(Data);
                                                }
                                                else if (UpdateCategoryPriceNo == 8) {
                                                    var CategoriePrice_8Name = $('#CategoriePrice_8Name');
                                                    CategoriePrice_8Name.html(Data);
                                                }
                                                else if (UpdateCategoryPriceNo == 9) {
                                                    var CategoriePrice_9Name = $('#CategoriePrice_9Name');
                                                    CategoriePrice_9Name.html(Data);
                                                }
                                                else if (UpdateCategoryPriceNo == 10) {
                                                    var CategoriePrice_10Name = $('#CategoriePrice_10Name');
                                                    CategoriePrice_10Name.html(Data);
                                                }
                                            } else {
                                            };
                                        });
                                    }

                                },
                                error: function (data) {
                                    dialog.modal('hide');
                                    toastr.error(data);
                                }

                            });

                        }
                    }
                });
            }
        });
        $('#StopItem').click(function () {
            if (document.getElementById('StopItem').checked) {
                document.getElementById("StoppingItemFromSelling").checked = true;
                document.getElementById("StoppingItemFromBuying").checked = true;
                document.getElementById("StoppingItemFromPointOfSale").checked = true;
                document.getElementById("StoppingItemFromSelling").disabled = true;
                document.getElementById("StoppingItemFromBuying").disabled = true;
                document.getElementById("StoppingItemFromPointOfSale").disabled = true;
            }
            else {
                document.getElementById("StoppingItemFromSelling").checked = false;
                document.getElementById("StoppingItemFromBuying").checked = false;
                document.getElementById("StoppingItemFromPointOfSale").checked = false;
                document.getElementById("StoppingItemFromSelling").disabled = false;
                document.getElementById("StoppingItemFromBuying").disabled = false;
                document.getElementById("StoppingItemFromPointOfSale").disabled = false;
            }
        });
        $('#StopItem').trigger('change');
        $('#TrackSequence').click(function () {
            if (document.getElementById('TrackSequence').checked) {
                document.getElementById("TrackSequenceUponInput").disabled = false;
                document.getElementById("TrackSequenceUponOutput").disabled = false;
                document.getElementById("TrackSequenceUponInput").checked = true;
                document.getElementById("TrackSequenceUponOutput").checked = true;
            }
            else {
                document.getElementById("TrackSequenceUponInput").disabled = true;
                document.getElementById("TrackSequenceUponOutput").disabled = true;
                document.getElementById("TrackSequenceUponInput").checked = false;
                document.getElementById("TrackSequenceUponOutput").checked = false;
            }
        });
        $('#TrackSequence').trigger('change');
        $('#StoppingItemFromSelling').click(function () {
            var StoppingItemFromBuying = document.getElementById("StoppingItemFromBuying").checked;
            var StoppingItemFromPointOfSale = document.getElementById("StoppingItemFromPointOfSale").checked;
            if (StoppingItemFromBuying && StoppingItemFromPointOfSale && document.getElementById('StoppingItemFromSelling').checked) {
                document.getElementById("StoppingItemFromSelling").checked = true;
                document.getElementById("StoppingItemFromBuying").checked = true;
                document.getElementById("StoppingItemFromPointOfSale").checked = true;
                document.getElementById("StoppingItemFromSelling").disabled = true;
                document.getElementById("StoppingItemFromBuying").disabled = true;
                document.getElementById("StoppingItemFromPointOfSale").disabled = true;
                document.getElementById("StopItem").checked = true;
            }
        });
        $('#StoppingItemFromBuying').click(function () {
            var StoppingItemFromSelling = document.getElementById("StoppingItemFromSelling").checked;
            var StoppingItemFromPointOfSale = document.getElementById("StoppingItemFromPointOfSale").checked;
            if (StoppingItemFromSelling && StoppingItemFromPointOfSale && document.getElementById('StoppingItemFromBuying').checked) {
                document.getElementById("StoppingItemFromSelling").checked = true;
                document.getElementById("StoppingItemFromBuying").checked = true;
                document.getElementById("StoppingItemFromPointOfSale").checked = true;
                document.getElementById("StoppingItemFromSelling").disabled = true;
                document.getElementById("StoppingItemFromBuying").disabled = true;
                document.getElementById("StoppingItemFromPointOfSale").disabled = true;
                document.getElementById("StopItem").checked = true;
            }
        });
        $('#StoppingItemFromPointOfSale').click(function () {
            var StoppingItemFromSelling = document.getElementById("StoppingItemFromSelling").checked;
            var StoppingItemFromBuying = document.getElementById("StoppingItemFromBuying").checked;
            if (StoppingItemFromSelling && StoppingItemFromBuying && document.getElementById('StoppingItemFromPointOfSale').checked) {
                document.getElementById("StoppingItemFromSelling").checked = true;
                document.getElementById("StoppingItemFromBuying").checked = true;
                document.getElementById("StoppingItemFromPointOfSale").checked = true;
                document.getElementById("StoppingItemFromSelling").disabled = true;
                document.getElementById("StoppingItemFromBuying").disabled = true;
                document.getElementById("StoppingItemFromPointOfSale").disabled = true;
                document.getElementById("StopItem").checked = true;
            }
        });
        $('#TrackSequenceUponInput').click(function () {
            var TrackSequenceUponOutput = document.getElementById("TrackSequenceUponOutput").checked;
            if (!TrackSequenceUponOutput && !document.getElementById('TrackSequenceUponInput').checked) {
                document.getElementById("TrackSequenceUponInput").disabled = true;
                document.getElementById("TrackSequenceUponOutput").disabled = true;
                document.getElementById("TrackSequenceUponInput").checked = false;
                document.getElementById("TrackSequenceUponOutput").checked = false;
                document.getElementById("TrackSequence").checked = false;
            }
        });
        $('#TrackSequenceUponOutput').click(function () {
            var TrackSequenceUponInput = document.getElementById("TrackSequenceUponInput").checked;
            if (!TrackSequenceUponInput && !document.getElementById('TrackSequenceUponOutput').checked) {
                document.getElementById("TrackSequenceUponInput").disabled = true;
                document.getElementById("TrackSequenceUponOutput").disabled = true;
                document.getElementById("TrackSequenceUponInput").checked = false;
                document.getElementById("TrackSequenceUponOutput").checked = false;
                document.getElementById("TrackSequence").checked = false;
            }
        });
        $(document).on('click', '#Update', function () {
            document.getElementById("buttonUpdate").click();
        });
        $('#BtnSearchSupplier').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchClientAccount/SearchSupplierAccountNo';
            $.get(url, function (data) {
                $('#modal-containerAccount').html(data);
                $('#modal-containerAccount').modal('show');
                dialog.modal('hide');
            })
        });
        $('#ThereIsNoOffer').click(function () {
            document.getElementById("btnClearOffer1").click();
            document.getElementById("btnClearOffer2").click();
            document.getElementById("sOffer2").style.display = 'none';
            document.getElementById("sOffer1").style.display = 'none';
        });
        $('#Offer1').click(function () {
            document.getElementById("btnClearOffer2").click();
            document.getElementById("sOffer2").style.display = 'none';
            document.getElementById("sOffer1").style.display = 'block';
        });
        $('#Offer2').click(function () {
            document.getElementById("btnClearOffer1").click();
            document.getElementById("sOffer1").style.display = 'none';
            document.getElementById("sOffer2").style.display = 'block';
        });
        $("#SalePrice").blur(function () {
            document.getElementById("PointOfSalePrice").value = document.getElementById("SalePrice").value;
        });
    });
</script>
}

