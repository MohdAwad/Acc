using Acc.Models;
using Acc.Repositories;
using Acc.ViewModels;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;

namespace Acc.Persistence
{
    public class NativeSqlRepo : INativeSqlRepo
    {

        private readonly ApplicationDbContext _context; 

        public NativeSqlRepo(ApplicationDbContext context)
        {
            _context = context;
        }

        //public ResttingAccountVM GetAllAcountToRessttingByAccount(string AccountNo, int Year)
        //{
        //    string Sql = "";
            
        //        Sql = string.Format(" Select CA.AccountNumber,CA.ArabicName,ISNULL(Sum(T.Debit - T.Credit),0) As Total From ChartOfAccounts Ca,Transactions T Where  CA.AccountNumber Not In" +
        //         " ( " +
        //         " Select AccountFather From ChartOfAccounts C Where CA.AccountNumber = C.AccountFather And CA.CompanyID = C.CompanyID " +
        //         " ) " +
        //         " And T.AccountNumber = CA.AccountNumber and CA.CompanyID = T.CompanyID   and CA.AccountNumber ='{0}'  and  T.CompanyYear={1}    " +
        //         " Group By CA.AccountNumber,CA.ArabicName ", AccountNo, Year);

             

        //    try

        //    {
        //        return _context.Database.SqlQuery<ResttingAccountVM>(Sql).FirstOrDefault();


        //    }
        //    catch (Exception ex)
        //    {
        //        string s = ex.Message;
        //        return new ResttingAccountVM();
        //    }
        //}

        //public IEnumerable<ResttingAccountVM> GetAllAcountToResstting(string AccountType,int Type, int Year)
        //{
        //    string Sql = "";
        //    if (Type == 0)
        //    {
        //        //and CA.AccountTypeID in ({0})

        //        Sql = string.Format(" Select CA.AccountNumber,CA.ArabicName,ISNULL(Sum(T.Debit - T.Credit),0) As Total From ChartOfAccounts Ca,Transactions T Where  CA.AccountNumber Not In" +
        //                        " ( " +
        //                        " Select AccountFather From ChartOfAccounts C Where CA.AccountNumber = C.AccountFather And CA.CompanyID = C.CompanyID " +
        //                        " ) " +
        //                        " And T.AccountNumber = CA.AccountNumber and CA.CompanyID = T.CompanyID  and  T.CompanyYear={0}   " ,
        //                         Year);
        //        if (!String.IsNullOrEmpty(AccountType))
        //        {
        //            Sql = Sql + " and CA.AccountTypeID in ( " + AccountType + ") ";
        //        }
        //        Sql = Sql + " Group By CA.AccountNumber,CA.ArabicName  ";


        //    }
        //    else
        //    {
        //        //and CA.AccountTypeID not in ({0})
        //        Sql = string.Format(" Select CA.AccountNumber,CA.ArabicName,ISNULL(Sum(T.Debit - T.Credit),0) As Total From ChartOfAccounts Ca,Transactions T Where  CA.AccountNumber Not In" +
        //           " ( " +
        //           " Select AccountFather From ChartOfAccounts C Where CA.AccountNumber = C.AccountFather And CA.CompanyID = C.CompanyID " +
        //           " ) " +
        //           " And T.AccountNumber = CA.AccountNumber and CA.CompanyID = T.CompanyID and     T.CompanyYear={0}     " , Year);

        //        if (!String.IsNullOrEmpty(AccountType))
        //        {
        //            Sql = Sql + " and not CA.AccountTypeID in ( " + AccountType + ") ";
        //        }

        //        Sql = Sql + " Group By CA.AccountNumber,CA.ArabicName  ";


        //    }
            

        //    try

        //    {
        //        return _context.Database.SqlQuery<ResttingAccountVM>(Sql).ToList();


        //    }
        //    catch(Exception ex)
        //    {
        //        string s = ex.Message;
        //        return new List<ResttingAccountVM>();
        //    }
        //}

        public IEnumerable<AccYear> GetAllYear()
        {
            try

            {
                return _context.Database.SqlQuery<AccYear>(
                " Select * from AccYears "  
               

            ).ToList();
            }
            catch
            {
                return new List<AccYear>();
            }
        }
        public IEnumerable<AssetTransActionVM> GetAllAssetTRanAction(int CompanyId, int VouchrNo)
        {
            try

            {
                return _context.Database.SqlQuery<AssetTransActionVM>(
                " Select ATS.*, A.AssetName From AssetTransActions ATS, Assets A " +
                " Where " +
                " A.AssetID = ATS.AssetID " +
                " And " +
                " A.CompanyID = ATS.CompanyID " +
                " And " +
                " A.CompanyID = @CompanyId " +
                " And " +
                " ATS.VouchrNo = @VouchrNo "
                , new SqlParameter("@CompanyId", CompanyId)
                , new SqlParameter("@VouchrNo", VouchrNo)

            ).ToList();
            }
            catch
            {
                return new List<AssetTransActionVM>();
            }
        }
        public IEnumerable<CompanyTransationKindVM> GetAllCompanyTransactionKind(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<CompanyTransationKindVM>(
                    " Select T.ArabicName As TransactionKindName, CT.TransactionKindID, Ct.CompanyTransactionKindID, CT.ArabicName As CompanyTransactionKindName, " +
                    " ( " +
                         " Case When CT.AutoSerial = 1 " +
                         " Then " +
                         " N'تسلسل تلقائي' " +
                         " Else " +
                         " N'تسلسل شهري' " +
                         " End " +
                    " ) As CaseSerial " +
                    " From CompanyTransactionKinds CT, TransactionKinds T " +
                    " Where " +
                    " CT.TransactionKindID = T.TransactionKindID " +
                    " And " +
                    " CT.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<CompanyTransationKindVM>();
                }
            }
            else {
                try

                {
                    return _context.Database.SqlQuery<CompanyTransationKindVM>(
                    " Select T.EnglishName As TransactionKindName, CT.TransactionKindID, Ct.CompanyTransactionKindID, CT.EnglishName As CompanyTransactionKindName, " +
                    " ( " +
                         " Case When CT.AutoSerial = 1 " +
                         " Then " +
                         " 'Auto Serial' " +
                         " Else " +
                         " 'Monthly Serial' " +
                         " End " +
                    " ) As CaseSerial " +
                    " From CompanyTransactionKinds CT, TransactionKinds T " +
                    " Where " +
                    " CT.TransactionKindID = T.TransactionKindID " +
                    " And " +
                    " CT.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<CompanyTransationKindVM>();
                }
            }
        }
        public IEnumerable<St_CompanyTransationKindVM> GetAllSt_CompanyTransactionKind(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_CompanyTransationKindVM>(
                     " Select ST.ArabicName As TransactionKindName, SCT.St_TransactionKindID, SCT.St_CompanyTransactionKindID, SW.ArabicName As WarehouseName,SCT.StockCode, " +
                     " ( " +
                         " Case When SCT.AutoSerial = 1 " +
                         " Then " +
                         " N'تسلسل تلقائي' " +
                         " Else " +
                         " N'تسلسل برموز' " +
                         " End " +
                     " ) As CaseSerial " +
                     " From St_CompanyTransactionKind SCT, ST_TransactionKind ST, St_Warehouse SW " +
                     " Where " +
                     " SCT.St_TransactionKindID = ST.St_TransactionKindID " +
                     " And " +
                     " SCT.StockCode = SW.StockCode " +
                     " And " +
                     " SCT.CompanyID = SW.CompanyID " +
                     " And " +
                     " SCT.CompanyID = @CompanyID " +
                     " Union All " +
                     " Select ST.ArabicName As TransactionKindName, SCT.St_TransactionKindID, SCT.St_CompanyTransactionKindID, N'كل المستودعات' As WarehouseName,SCT.StockCode, " +
                     " ( " +
                         " Case When SCT.AutoSerial = 1 " +
                         " Then " +
                         " N'تسلسل تلقائي' " +
                         " Else " +
                         " N'تسلسل برموز' " +
                         " End " +
                     " ) As CaseSerial " +
                     " From St_CompanyTransactionKind SCT, ST_TransactionKind ST " +
                     " Where " +
                     " SCT.St_TransactionKindID = ST.St_TransactionKindID " +
                     " And " +
                     " SCT.CompanyID = @CompanyID " +
                     " And " +
                     " SCT.StockCode = '*' " +
                     " Order By SCT.St_CompanyTransactionKindID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_CompanyTransationKindVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_CompanyTransationKindVM>(
                    " Select ST.EnglishName As TransactionKindName, SCT.St_TransactionKindID, SCT.St_CompanyTransactionKindID, SW.EnglishName As WarehouseName,SCT.StockCode, " +
                    " ( " +
                         " Case When SCT.AutoSerial = 1 " +
                         " Then " +
                         " 'Auto Serial' " +
                         " Else " +
                         " 'SymbolSerial' " +
                         " End " +
                     " ) As CaseSerial " +
                    " From St_CompanyTransactionKind SCT, ST_TransactionKind ST, St_Warehouse SW " +
                    " Where " +
                    " SCT.St_TransactionKindID = ST.St_TransactionKindID " +
                    " And " +
                    " SCT.StockCode = SW.StockCode " +
                    " And " +
                    " SCT.CompanyID = SW.CompanyID " +
                    " And " +
                    " SCT.CompanyID = @CompanyID " +
                    " Union All " +
                    " Select ST.EnglishName As TransactionKindName, SCT.St_TransactionKindID, SCT.St_CompanyTransactionKindID, 'All Stores' As WarehouseName,SCT.StockCode, " +
                    " ( " +
                         " Case When SCT.AutoSerial = 1 " +
                         " Then " +
                         " 'Auto Serial' " +
                         " Else " +
                         " 'SymbolSerial' " +
                         " End " +
                     " ) As CaseSerial " +
                    " From St_CompanyTransactionKind SCT, ST_TransactionKind ST " +
                    " Where " +
                    " SCT.St_TransactionKindID = ST.St_TransactionKindID " +
                    " And " +
                    " SCT.CompanyID = @CompanyID " +
                    " And " +
                    " SCT.StockCode = '*' " +
                    " Order By SCT.St_CompanyTransactionKindID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_CompanyTransationKindVM>();
                }
            }
        }
        public IEnumerable<St_CompanyTransationKindHVM> GetAllSt_CompanyTransactionKindH(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_CompanyTransationKindHVM>(
                     " Select ST.ArabicName As TransactionKindName, SCT.St_TransactionKindID, SCT.St_CompanyTransactionKindID, SW.ArabicName As WarehouseName,SCT.StockCode, " +
                     " ( " +
                         " Case When SCT.AutoSerial = 1 " +
                         " Then " +
                         " N'تسلسل تلقائي' " +
                         " Else " +
                         " N'تسلسل برموز' " +
                         " End " +
                     " ) As CaseSerial " +
                     " From St_CompanyTransactionKindH SCT, ST_TransactionKindH ST, St_WarehouseH SW " +
                     " Where " +
                     " SCT.St_TransactionKindID = ST.St_TransactionKindID " +
                     " And " +
                     " SCT.StockCode = SW.StockCode " +
                     " And " +
                     " SCT.CompanyID = SW.CompanyID " +
                     " And " +
                     " SCT.CompanyID = @CompanyID " +
                     " Union All " +
                     " Select ST.ArabicName As TransactionKindName, SCT.St_TransactionKindID, SCT.St_CompanyTransactionKindID, N'كل المستودعات' As WarehouseName,SCT.StockCode, " +
                     " ( " +
                         " Case When SCT.AutoSerial = 1 " +
                         " Then " +
                         " N'تسلسل تلقائي' " +
                         " Else " +
                         " N'تسلسل برموز' " +
                         " End " +
                     " ) As CaseSerial " +
                     " From St_CompanyTransactionKindH SCT, ST_TransactionKindH ST " +
                     " Where " +
                     " SCT.St_TransactionKindID = ST.St_TransactionKindID " +
                     " And " +
                     " SCT.CompanyID = @CompanyID " +
                     " And " +
                     " SCT.StockCode = '*' " +
                     " Order By SCT.St_CompanyTransactionKindID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_CompanyTransationKindHVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_CompanyTransationKindHVM>(
                    " Select ST.EnglishName As TransactionKindName, SCT.St_TransactionKindID, SCT.St_CompanyTransactionKindID, SW.EnglishName As WarehouseName,SCT.StockCode, " +
                    " ( " +
                         " Case When SCT.AutoSerial = 1 " +
                         " Then " +
                         " 'Auto Serial' " +
                         " Else " +
                         " 'SymbolSerial' " +
                         " End " +
                     " ) As CaseSerial " +
                    " From St_CompanyTransactionKindH SCT, ST_TransactionKindH ST, St_WarehouseH SW " +
                    " Where " +
                    " SCT.St_TransactionKindID = ST.St_TransactionKindID " +
                    " And " +
                    " SCT.StockCode = SW.StockCode " +
                    " And " +
                    " SCT.CompanyID = SW.CompanyID " +
                    " And " +
                    " SCT.CompanyID = @CompanyID " +
                    " Union All " +
                    " Select ST.EnglishName As TransactionKindName, SCT.St_TransactionKindID, SCT.St_CompanyTransactionKindID, 'All Stores' As WarehouseName,SCT.StockCode, " +
                    " ( " +
                         " Case When SCT.AutoSerial = 1 " +
                         " Then " +
                         " 'Auto Serial' " +
                         " Else " +
                         " 'Symbol Serial' " +
                         " End " +
                     " ) As CaseSerial " +
                    " From St_CompanyTransactionKindH SCT, ST_TransactionKindH ST " +
                    " Where " +
                    " SCT.St_TransactionKindID = ST.St_TransactionKindID " +
                    " And " +
                    " SCT.CompanyID = @CompanyID " +
                    " And " +
                    " SCT.StockCode = '*' " +
                    " Order By SCT.St_CompanyTransactionKindID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_CompanyTransationKindHVM>();
                }
            }
        }
        public IEnumerable<CompanyTransactionKind> GetReceiptVoucherCashFromTransactionKind(int CompanyID)
        {
            try

            {
                return _context.Database.SqlQuery<CompanyTransactionKind>(
                " Select * From CompanyTransactionKinds " +
                " where TransactionKindID in (select TransactionKindID from TransactionKinds where TransactionKindID = 3)  " +
                "and CompanyID=@CompanyID "



                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<CompanyTransactionKind>();
            }
        }
        public IEnumerable<CompanyTransactionKind> GetReceiptVoucherCashMultiAccountFromTransactionKind(int CompanyID)
        {
            try

            {
                return _context.Database.SqlQuery<CompanyTransactionKind>(
                " Select * From CompanyTransactionKinds " +
                " where TransactionKindID in (select TransactionKindID from TransactionKinds where TransactionKindID = 23)  " +
                "and CompanyID=@CompanyID "



                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<CompanyTransactionKind>();
            }
        }
        public IEnumerable<CompanyTransactionKind> GetPaymentVoucherCashMultiAccountFromTransactionKind(int CompanyID)
        {
            try

            {
                return _context.Database.SqlQuery<CompanyTransactionKind>(
                " Select * From CompanyTransactionKinds " +
                " where TransactionKindID in (select TransactionKindID from TransactionKinds where TransactionKindID = 24)  " +
                "and CompanyID=@CompanyID "



                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<CompanyTransactionKind>();
            }
        }
        public IEnumerable<CompanyTransactionKind> GetReceiptVoucherBankFromTransactionKind(int CompanyID)
        {
            try

            {
                return _context.Database.SqlQuery<CompanyTransactionKind>(
                " Select * From CompanyTransactionKinds " +
                " where TransactionKindID in (select TransactionKindID from TransactionKinds where TransactionKindID = 2)  " +
                "and CompanyID=@CompanyID "



                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<CompanyTransactionKind>();
            }
        }
        public IEnumerable<CompanyTransactionKind> GetPaymentVoucherBankFromTransactionKind(int CompanyID)
        {
            try

            {
                return _context.Database.SqlQuery<CompanyTransactionKind>(
                " Select * From CompanyTransactionKinds " +
                " where TransactionKindID in (select TransactionKindID from TransactionKinds where TransactionKindID = 4)  " +
                "and CompanyID=@CompanyID "



                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<CompanyTransactionKind>();
            }
        }
        public IEnumerable<CompanyTransactionKind> GetAllTransactionKind(int CompanyID)
        {
            try

            {
                return _context.Database.SqlQuery<CompanyTransactionKind>(
                " Select * From CompanyTransactionKinds " +
                " Where CompanyID=@CompanyID "
                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<CompanyTransactionKind>();
            }
        }
        public IEnumerable<CompanyTransactionKind> GetDepositInTheBankFromTransactionKind(int CompanyID)
        {
            try

            {
                return _context.Database.SqlQuery<CompanyTransactionKind>(
                " Select * From CompanyTransactionKinds " +
                " where TransactionKindID in (select TransactionKindID from TransactionKinds where TransactionKindID = 16)  " +
                "and CompanyID=@CompanyID "



                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<CompanyTransactionKind>();
            }
        }
        public IEnumerable<CompanyTransactionKind> GetPrepaidFromTransactionKind(int CompanyID)
        {
            try

            {
                return _context.Database.SqlQuery<CompanyTransactionKind>(
                " Select * From CompanyTransactionKinds " +
                " where TransactionKindID in (select TransactionKindID from TransactionKinds where TransactionKindID = 17)  " +
                "and CompanyID=@CompanyID "



                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<CompanyTransactionKind>();
            }
        }
        public IEnumerable<CompanyTransactionKind> GetRevenueFromTransactionKind(int CompanyID)
        {
            try

            {
                return _context.Database.SqlQuery<CompanyTransactionKind>(
                " Select * From CompanyTransactionKinds " +
                " where TransactionKindID in (select TransactionKindID from TransactionKinds where TransactionKindID = 18)  " +
                "and CompanyID=@CompanyID "



                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<CompanyTransactionKind>();
            }
        }
        public int GetMaxChartNumberFather(int CoId)
        {
            int Count = _context.Database.SqlQuery<int>("select ISNULL( Max(cast( OrignalAccount as int)),0) as MaxNum from ChartOfAccounts " +
                "where  CompanyID =@CONO  and  AccountFather=0 "
                 , new SqlParameter("@CONO", CoId)

                ).First();

            return Count + 1;
        }
        public int GetCountNumberOfPaymnetTempPrepaidAndRevenueReceived(int CompanyID, string VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear)
        {
            int Count = _context.Database.SqlQuery<int>(" Select Count(RowNumber) As Count From TempPrepaidAndRevenueReceivedDetails Where" +
                " Exported = 1 " +
                " And " +
                " CompanyID = @CompanyID " +
                " And " +
                " TransactionKindNo = @TransactionKindNo " +
                " And " +
                " VoucherNumber = @VoucherNumber " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindNo "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                 , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                ).First();

            return Count;
        }
        public double GetSumTotalTempPrepaidAndRevenueReceived(int CompanyID, string VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear)
        {
            double Total = _context.Database.SqlQuery<double>(" Select Sum(Amount) As Total From TempPrepaidAndRevenueReceivedDetails Where" +
                " Exported = 1 " +
                " And " +
                " CompanyID = @CompanyID " +
                " And " +
                " TransactionKindNo = @TransactionKindNo " +
                " And " +
                " VoucherNumber = @VoucherNumber " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindNo "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                 , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                ).First();

            return Total;
        }
        public int GetMaxChartNumberChild(int CoId, string AccountNumber)
        {
            int Count = _context.Database.SqlQuery<int>("select ISNULL( Max(cast( OrignalAccount as int)),0) as MaxNum from ChartOfAccounts " +
                "where  CompanyID =@CONO  and  AccountFather=@AccountNumber   "
                 , new SqlParameter("@CONO", CoId)
                 , new SqlParameter("@AccountNumber", AccountNumber)
                ).First();

            return Count + 1;
        }
        public int GetMaxCostNumberFather(int CoId)
        {
            int Count = _context.Database.SqlQuery<int>("select ISNULL( Max(cast( OrignalCost as int)),0) as MaxNum from CostCenters " +
                 "where  CompanyID =@CONO  and  CostFather=0 "
                  , new SqlParameter("@CONO", CoId)

                 ).First();

            return Count + 1;
        }
        public int GetMaxCostNumberChild(int CoId, string AccountNumber)
        {
            int Count = _context.Database.SqlQuery<int>("select ISNULL( Max(cast( OrignalCost as int)),0) as MaxNum from CostCenters " +
              "where  CompanyID =@CONO  and  CostFather=@AccountNumber   "
               , new SqlParameter("@CONO", CoId)
               , new SqlParameter("@AccountNumber", AccountNumber)
              ).First();

            return Count + 1;
        }
        public int CheckCostChartExist(int CompanyID)
        {
            int Count = _context.Database.SqlQuery<int>(
                " Select Count(*) As ChartCount From CostCenters " +
                " Where " +
                " CompanyID = @CompanyID "
               , new SqlParameter("@CompanyID", CompanyID)
              ).First();

            return Count;
        }
        public int AccountChartExist(int CompanyID)
        {
            int Count = _context.Database.SqlQuery<int>(
                " Select Count(*) As ChartAccount From ChartOfAccounts " +
                " Where " +
                " CompanyID = @CompanyID "
               , new SqlParameter("@CompanyID", CompanyID)
              ).First();

            return Count;
        }
        public ChartOfAccountClientVM GetAccountClientInfo(int CompanyID, string AccountNumber)
        {
            try
            {
                return _context.Database.SqlQuery<ChartOfAccountClientVM>(
                "  select * from  (  " +
                "  select * from ChartOfAccounts    where CompanyID=@CompanyID  and AccountNumber=@AccountNumber" +
                "  )C " +
                "  Left join" +
                " ( " +
                "  select * from CustomerInformations where CompanyID=@CompanyID  " +
                "  )CI " +
                "  on C.AccountNumber=CI.AccountNumber "



                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@AccountNumber", AccountNumber)

            ).FirstOrDefault();
            }
            catch
            {
                return new ChartOfAccountClientVM();
            }


        }
        public TempPrepaidAndRevenueReceived GetTempPrepaidAndRevenueReceivedData(string VoucherNumber, int CompanyID, int CompanyTransactionKindNo, int TransactionKindNo)
        {
            try
            {
                return _context.Database.SqlQuery<TempPrepaidAndRevenueReceived>(
                 " Select T.VoucherNumber, T.VoucherDate, T.DateFirstPayment, T.Note,T.CompanyYear,T.CompanyID,T.TransactionKindNo, " +
                 " T.CompanyTransactionKindNo,T.VHI,T.[RowCount],T.InsDateTime,T.InsUserID,  " +
                 " (T.NumberOfPayments - (Select COUNT(*) From TempPrepaidAndRevenueReceivedDetails TD Where TD.Exported = 1 " +
                 " And TD.CompanyID = T.CompanyID And TD.VoucherNumber = T.VoucherNumber And " +
                 " TD.TransactionKindNo = T.TransactionKindNo And TD.CompanyID = @CompanyID And " +
                 " TD.CompanyTransactionKindNo = T.CompanyTransactionKindNo And TD.TransactionKindNo = @TransactionKindNo)) As NumberOfPayments, " +
                 " (T.Total - (Select ISNULL(Sum(Amount), 0) From TempPrepaidAndRevenueReceivedDetails TD Where TD.Exported = 1 " +
                 " And TD.CompanyID = T.CompanyID And TD.VoucherNumber = T.VoucherNumber And " +
                 " TD.TransactionKindNo = T.TransactionKindNo And TD.CompanyID = @CompanyID And " +
                 " TD.CompanyTransactionKindNo = T.CompanyTransactionKindNo And TD.TransactionKindNo = @TransactionKindNo )) As Total " +
                 " From TempPrepaidAndRevenueReceiveds T " +
                 " Where " +
                 " T.CompanyID = @CompanyID " +
                 " And " +
                 " T.TransactionKindNo = @TransactionKindNo " +
                 " And " +
                 " T.VoucherNumber = @VoucherNumber " +
                 " And " +
                 " T.CompanyTransactionKindNo = @CompanyTransactionKindNo "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@VoucherNumber", VoucherNumber)
                , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                , new SqlParameter("@TransactionKindNo", TransactionKindNo)

            ).FirstOrDefault();
            }
            catch
            {
                return new TempPrepaidAndRevenueReceived();
            }


        }
        public ChartOfAccountSupplierVM GetAccountSupplierInfo(int CompanyID, string AccountNumber)
        {
            try
            {
                return _context.Database.SqlQuery<ChartOfAccountSupplierVM>(
                "  select * from  (  " +
                "  select * from ChartOfAccounts    where CompanyID=@CompanyID  and AccountNumber=@AccountNumber" +
                "  )C " +
                "  Left join" +
                " ( " +
                "  select * from SupplierInformations where CompanyID=@CompanyID  " +
                "  )CI " +
                "  on C.AccountNumber=CI.AccountNumber "



                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@AccountNumber", AccountNumber)

            ).FirstOrDefault();
            }
            catch
            {
                return new ChartOfAccountSupplierVM();
            }


        }
        public ChartOfAccountAccreditationVM GetAccountAccreditation(int CompanyID, string AccountNumber)
        {
            try
            {
                return _context.Database.SqlQuery<ChartOfAccountAccreditationVM>(
                "  select * from  (  " +
                "  select * from ChartOfAccounts    where CompanyID=@CompanyID  and AccountNumber=@AccountNumber" +
                "  )C " +
                "  Left join" +
                " ( " +
                "  select * from AccreditationInformations where CompanyID=@CompanyID  " +
                "  )CI " +
                "  on C.AccountNumber=CI.AccountNumber "



                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@AccountNumber", AccountNumber)

            ).FirstOrDefault();
            }
            catch
            {
                return new ChartOfAccountAccreditationVM();
            }
        }

        public IEnumerable<CompanyTransactionKind> GetCompanyTransactionKind(int CompanyID)
        {
            try

            {
                return _context.Database.SqlQuery<CompanyTransactionKind>(
                " Select * From CompanyTransactionKinds " +
                "  where TransactionKindID in (select TransactionKindID from TransactionKinds where TransactionKindID in (1,14) )    " +
                " and CompanyID=@CompanyID "



                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<CompanyTransactionKind>();
            }
        }

        public IEnumerable<CompanyTransactionKind> GetPrepaidAndRevenuCompanyTransactionKind(int CompanyID)
        {
            try

            {
                return _context.Database.SqlQuery<CompanyTransactionKind>(
                " Select * From CompanyTransactionKinds " +
                "  where TransactionKindID in (select TransactionKindID from TransactionKinds where TransactionKindID = 1 )    " +
                " and CompanyID=@CompanyID "
                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<CompanyTransactionKind>();
            }
        }
        public IEnumerable<CompanyTransactionKind> GetReceiptBankTransactionCompanyTransactionKind(int CompanyID)
        {
            try

            {
                return _context.Database.SqlQuery<CompanyTransactionKind>(
                " Select * From CompanyTransactionKinds " +
                "  where TransactionKindID in (select TransactionKindID from TransactionKinds where TransactionKindID = 1 )    " +
                " and CompanyID=@CompanyID "
                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<CompanyTransactionKind>();
            }
        }
        public IEnumerable<CompanyTransactionKind> GetPaymentBankTransactionCompanyTransactionKind(int CompanyID)
        {
            try

            {
                return _context.Database.SqlQuery<CompanyTransactionKind>(
                " Select * From CompanyTransactionKinds " +
                "  where TransactionKindID in (select TransactionKindID from TransactionKinds where TransactionKindID = 1 )    " +
                " and CompanyID=@CompanyID "
                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<CompanyTransactionKind>();
            }
        }
        public IEnumerable<CompanyTransactionKind> GetCompanyTransactionKindAll(int CompanyID)
        {
            try

            {
                return _context.Database.SqlQuery<CompanyTransactionKind>(
                " Select * From CompanyTransactionKinds " +
                "  where TransactionKindID in (select TransactionKindID from TransactionKinds   )    " +
                " and CompanyID=@CompanyID "



                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<CompanyTransactionKind>();
            }
        }
        public IEnumerable<SupplierType> GetAllSupplierType()
        {
            try

            {
                return _context.Database.SqlQuery<SupplierType>(
                " Select * From SupplierTypes " +
                 " Order By SupplierTypeID "

            ).ToList();
            }
            catch
            {
                return new List<SupplierType>();
            }
        }
        public IEnumerable<CurrencyValueVM> GetAllCurrencyValue(int CompanyID)
        {
            try

            {
                return _context.Database.SqlQuery<CurrencyValueVM>(
                " Select C.*, CV.ConversionFactor, CN.ArabicName, CN.EnglishName, ISNull(convert(varchar(50), CAST(CV.ConversionFactor as NUMERIC(10,6)), -1), 0) As SConversionFactor From " +
                 " ( " +
                   " Select Max(CVA.InsDateTime) As InsDateTime, CVA.CurrencyID, CVA.CompanyID " +
                   " From CurrencyValues CVA " +
                   " Where " +
                   " CVA.CompanyID =@CompanyID " +
                   " Group By CVA.CurrencyID, CVA.CompanyID " +
                 " )  C, CurrencyValues CV, Currencies CN " +
                 " Where " +
                 " C.InsDateTime = CV.InsDateTime " +
                 " And " +
                 " C.CurrencyID = CV.CurrencyID " +
                 " And " +
                 " CN.CurrencyID = C.CurrencyID " +
                 " And " +
                 " CV.CompanyID = CN.CompanyID " +
                 " And " +
                 " CV.CompanyID = C.CompanyID " +
                 " And " +
                 " CV.CompanyID =@CompanyID " +
                 " Order By C.CurrencyID "

                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<CurrencyValueVM>();
            }
        }
        public IEnumerable<CustomerAreaVM> GetAllCustomerArea(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<CustomerAreaVM>(
                    " Select CC.ArabicName As CustomerCityName, CA.CustomerAreaID, CA.CustomerCityID, CA.ArabicName As CustomerAreaName " +
                    " From CustomerCities CC, CustomerAreas CA " +
                    " Where " +
                    " CC.CompanyID = CA.CompanyID " +
                    " And " +
                    " CC.CustomerCityID = CA.CustomerCityID " +
                    " And " +
                    " CC.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<CustomerAreaVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<CustomerAreaVM>(
                    " Select CC.EnglishName As CustomerCityName, CA.CustomerAreaID, CA.CustomerCityID, CA.EnglishName As CustomerAreaName " +
                    " From CustomerCities CC, CustomerAreas CA " +
                    " Where " +
                    " CC.CompanyID = CA.CompanyID " +
                    " And " +
                    " CC.CustomerCityID = CA.CustomerCityID " +
                    " And " +
                    " CC.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<CustomerAreaVM>();
                }
            }
        }
        public IEnumerable<SupplierBranchBankVM> GetAllSupplierBranchBank(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<SupplierBranchBankVM>(
                     " Select SB.ArabicName As SupplierBankName, SBB.SupplierBranchBankID, SBB.SupplierBankID, SBB.ArabicName As SupplierBranchBankName " +
                     " From SupplierBanks SB, SupplierBranchBanks SBB " +
                     " Where " +
                     " SB.CompanyID = SBB.CompanyID " +
                     " And " +
                     " SB.SupplierBankID = SBB.SupplierBankID " +
                     " And " +
                     " SB.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<SupplierBranchBankVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<SupplierBranchBankVM>(
                    " Select SB.EnglishName As SupplierBankName, SBB.SupplierBranchBankID, SBB.SupplierBankID, SBB.EnglishName As SupplierBranchBankName " +
                     " From SupplierBanks SB, SupplierBranchBanks SBB " +
                     " Where " +
                     " SB.CompanyID = SBB.CompanyID " +
                     " And " +
                     " SB.SupplierBankID = SBB.SupplierBankID " +
                     " And " +
                     " SB.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<SupplierBranchBankVM>();
                }
            }
        }
        public IEnumerable<SupplierCityVM> GetAllSupplierCity(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<SupplierCityVM>(
                     " Select SC.ArabicName As SupplierCountryName, SCS.SupplierCityID, SCS.SupplierCountryID, SCS.ArabicName As SupplierCityName " +
                     " From SupplierCountries SC, SupplierCities SCS " +
                     " Where " +
                     " SC.CompanyID = SCS.CompanyID " +
                     " And " +
                     " SC.SupplierCountryID = SCS.SupplierCountryID " +
                     " And " +
                     " SC.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<SupplierCityVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<SupplierCityVM>(
                    " Select SC.EnglishName As SupplierCountryName, SCS.SupplierCityID, SCS.SupplierCountryID, SCS.EnglishName As SupplierCityName " +
                     " From SupplierCountries SC, SupplierCities SCS " +
                     " Where " +
                     " SC.CompanyID = SCS.CompanyID " +
                     " And " +
                     " SC.SupplierCountryID = SCS.SupplierCountryID " +
                     " And " +
                     " SC.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<SupplierCityVM>();
                }
            }
        }
        public IEnumerable<SupplierCityBankVM> GetAllSupplierCityBank(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<SupplierCityBankVM>(
                     " Select SC.ArabicName As SupplierCountryBankName, SCS.SupplierCityBankID, SCS.SupplierCountryBankID, SCS.ArabicName As SupplierCityBankName " +
                     " From SupplierCountryBanks SC, SupplierCityBanks SCS " +
                     " Where " +
                     " SC.CompanyID = SCS.CompanyID " +
                     " And " +
                     " SC.SupplierCountryBankID = SCS.SupplierCountryBankID " +
                     " And " +
                     " SC.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<SupplierCityBankVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<SupplierCityBankVM>(
                    " Select SC.EnglishName As SupplierCountryBankName, SCS.SupplierCityBankID, SCS.SupplierCountryBankID, SCS.EnglishName As SupplierCityBankName " +
                     " From SupplierCountryBanks SC, SupplierCityBanks SCS " +
                     " Where " +
                     " SC.CompanyID = SCS.CompanyID " +
                     " And " +
                     " SC.SupplierCountryBankID = SCS.SupplierCountryBankID " +
                     " And " +
                     " SC.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<SupplierCityBankVM>();
                }
            }
        }
        public CustomerAreaVM GetCustomerAreaByID(int CompanyID, int CustomerAreaID)
        {
            try
            {
                return _context.Database.SqlQuery<CustomerAreaVM>(
                " Select * " +
                " From CustomerAreas " +
                " Where " +
                " CustomerAreaID = @CustomerAreaID " +
                " And " +
                " CompanyID = @CompanyID "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@CustomerAreaID", CustomerAreaID)
            ).FirstOrDefault();
            }
            catch
            {
                return new CustomerAreaVM();
            }
        }
        public SupplierCityVM GetCountryIDByCityID(int CompanyID, int SuuplierCityID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<SupplierCityVM>(
                    " Select SC.ArabicName As SupplierCountryName,SCS.SupplierCountryID " +
                     " From SupplierCountries SC, SupplierCities SCS " +
                     " Where " +
                     " SC.CompanyID = SCS.CompanyID " +
                     " And " +
                     " SC.SupplierCountryID = SCS.SupplierCountryID " +
                     " And " +
                     " SC.CompanyID = @CompanyID " +
                     " And " +
                     " SCS.SupplierCityID = @SuuplierCityID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@SuuplierCityID", SuuplierCityID)
                ).FirstOrDefault();
                }
                catch
                {
                    return new SupplierCityVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<SupplierCityVM>(
                    " Select SC.EnglishName As SupplierCountryName,SCS.SupplierCountryID " +
                     " From SupplierCountries SC, SupplierCities SCS " +
                     " Where " +
                     " SC.CompanyID = SCS.CompanyID " +
                     " And " +
                     " SC.SupplierCountryID = SCS.SupplierCountryID " +
                     " And " +
                     " SC.CompanyID = @CompanyID " +
                     " And " +
                     " SCS.SupplierCityID = @SuuplierCityID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@SuuplierCityID", SuuplierCityID)
                ).FirstOrDefault();
                }
                catch
                {
                    return new SupplierCityVM();
                }

            }
        }
        public SupplierCityBankVM GetBankCountryIDByBankCityID(int CompanyID, int SuuplierCityBankID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<SupplierCityBankVM>(
                      " Select SCB.ArabicName As SupplierCountryBankName, SCBS.SupplierCountryBankID " +
                      " From SupplierCountryBanks SCB, SupplierCityBanks SCBS " +
                      " Where " +
                      " SCB.CompanyID = SCBS.CompanyID " +
                      " And " +
                      " SCB.SupplierCountryBankID = SCBS.SupplierCountryBankID " +
                      " And " +
                      " SCB.CompanyID = @CompanyID " +
                      " And " +
                      " SCBS.SupplierCityBankID = @SuuplierCityBankID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@SuuplierCityBankID", SuuplierCityBankID)
                ).FirstOrDefault();
                }
                catch
                {
                    return new SupplierCityBankVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<SupplierCityBankVM>(
                    " Select SCB.EnglishName As SupplierCountryBankName, SCBS.SupplierCountryBankID " +
                      " From SupplierCountryBanks SCB, SupplierCityBanks SCBS " +
                      " Where " +
                      " SCB.CompanyID = SCBS.CompanyID " +
                      " And " +
                      " SCB.SupplierCountryBankID = SCBS.SupplierCountryBankID " +
                      " And " +
                      " SCB.CompanyID = @CompanyID " +
                      " And " +
                      " SCBS.SupplierCityBankID = @SuuplierCityBankID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@SuuplierCityBankID", SuuplierCityBankID)
                ).FirstOrDefault();
                }
                catch
                {
                    return new SupplierCityBankVM();
                }

            }
        }
        public SupplierBranchBankVM GetBankIDByBranchBankID(int CompanyID, int SupplierBranchBankID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<SupplierBranchBankVM>(
                      " Select SB.ArabicName As SupplierBankName, SBB.SupplierBankID " +
                      " From SupplierBanks SB, SupplierBranchBanks SBB " +
                      " Where " +
                      " SB.CompanyID = SBB.CompanyID " +
                      " And " +
                      " SB.SupplierBankID = SBB.SupplierBankID " +
                      " And " +
                      " SB.CompanyID = @CompanyID " +
                      " And " +
                      " SBB.SupplierBranchBankID = @SupplierBranchBankID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@SupplierBranchBankID", SupplierBranchBankID)
                ).FirstOrDefault();
                }
                catch
                {
                    return new SupplierBranchBankVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<SupplierBranchBankVM>(
                    " Select SB.EnglishName As SupplierBankName, SBB.SupplierBankID " +
                      " From SupplierBanks SB, SupplierBranchBanks SBB " +
                      " Where " +
                      " SB.CompanyID = SBB.CompanyID " +
                      " And " +
                      " SB.SupplierBankID = SBB.SupplierBankID " +
                      " And " +
                      " SB.CompanyID = @CompanyID " +
                      " And " +
                      " SBB.SupplierBranchBankID = @SupplierBranchBankID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@SupplierBranchBankID", SupplierBranchBankID)
                ).FirstOrDefault();
                }
                catch
                {
                    return new SupplierBranchBankVM();
                }

            }
        }
        public SupplierBranchBankVM GetSupplierBranchBankByID(int CompanyID, int SupplierBranchBankID)
        {
            try
            {
                return _context.Database.SqlQuery<SupplierBranchBankVM>(
                " Select * " +
                " From SupplierBranchBanks " +
                " Where " +
                " SupplierBranchBankID = @SupplierBranchBankID " +
                " And " +
                " CompanyID = @CompanyID "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@SupplierBranchBankID", SupplierBranchBankID)
            ).FirstOrDefault();
            }
            catch
            {
                return new SupplierBranchBankVM();
            }
        }
        public SupplierCityVM GetSupplierCityByID(int CompanyID, int SupplierCityID)
        {
            try
            {
                return _context.Database.SqlQuery<SupplierCityVM>(
                " Select * " +
                " From SupplierCities " +
                " Where " +
                " SupplierCityID = @SupplierCityID " +
                " And " +
                " CompanyID = @CompanyID "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@SupplierCityID", SupplierCityID)
            ).FirstOrDefault();
            }
            catch
            {
                return new SupplierCityVM();
            }
        }
        public SupplierCityBankVM GetSupplierCityBankByID(int CompanyID, int SupplierCityBankID)
        {
            try
            {
                return _context.Database.SqlQuery<SupplierCityBankVM>(
                " Select * " +
                " From SupplierCityBanks " +
                " Where " +
                " SupplierCityBankID = @SupplierCityBankID " +
                " And " +
                " CompanyID = @CompanyID "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@SupplierCityBankID", SupplierCityBankID)
            ).FirstOrDefault();
            }
            catch
            {
                return new SupplierCityBankVM();
            }
        }
        public CurrencyValueVM GetCurrencyValueByID(int CompanyID, int CurrencyID)
        {
            try

            {
                return _context.Database.SqlQuery<CurrencyValueVM>(
                 " Select Max(CVA.InsDateTime) As InsDateTime, CVA.CurrencyID, CVA.CompanyID,ConversionFactor" +
                   " From CurrencyValues CVA " +
                   " Where " +
                   " CVA.CompanyID =@CompanyID and  CurrencyID=@CurrencyID " +
                   "   group by CVA.CurrencyID, CVA.CompanyID ,ConversionFactor " +
                   " order by InsDateTime desc "

                , new SqlParameter("@CompanyID", CompanyID)
                  , new SqlParameter("@CurrencyID", CurrencyID)

            ).FirstOrDefault();
            }
            catch
            {
                return new CurrencyValueVM();
            }
        }
        public IEnumerable<MutilUseSearchVM> GetTransActionAccount(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,ArabicName As AccountName,StoppedAccount From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID=@CompanyID " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID=@CompanyID " +
                    " ) " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,EnglishName As AccountName,StoppedAccount From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID=@CompanyID " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID=@CompanyID " +
                    " ) " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }

            }
        }
        public MutilUseSearchVM CheckTransActionAccount(int CompanyID, string AccountNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,ArabicName As AccountName,StoppedAccount From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountNumber = @AccountNumber " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID=@CompanyID " +
                    " ) " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,EnglishName As AccountName,StoppedAccount From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountNumber = @AccountNumber " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID=@CompanyID " +
                    " ) " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)
                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }

            }
        }
        public St_WarehouseSearchVM CheckSt_ItemCard(int CompanyID, string ItemCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseSearchVM>(
                     " Select IC.ItemCode, IC.ArabicName As ItemName, IC.StopItem " +
                     " From St_ItemCard IC " +
                     " Where " +
                     " IC.CompanyID = @CompanyID " +
                     " And " +
                     " IC.ItemCode = (Select SI.ItemCode from St_SimilarItem SI where SI.SimilarItemCode = @ItemCode) " +
                     " Order By IC.ItemCode "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)

                ).FirstOrDefault();
                }
                catch
                {
                    return new St_WarehouseSearchVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseSearchVM>(
                     " Select IC.ItemCode, IC.EnglishName As ItemName, IC.StopItem " +
                     " From St_ItemCard IC " +
                     " Where " +
                     " IC.CompanyID = @CompanyID " +
                     " And " +
                     " IC.ItemCode = (Select SI.ItemCode from St_SimilarItem SI where SI.SimilarItemCode = @ItemCode) " +
                     " Order By IC.ItemCode "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)

                ).FirstOrDefault();
                }
                catch
                {
                    return new St_WarehouseSearchVM();
                }
            }
        }
        public MutilUseSearchVM CheckFatherTransActionAccount(int CompanyID, string AccountNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,ArabicName As AccountName,StoppedAccount From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountNumber = @AccountNumber " +
                    " And " +
                    " AccountNumber In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID=@CompanyID " +
                    " ) " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,EnglishName As AccountName,StoppedAccount From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountNumber = @AccountNumber " +
                    " And " +
                    " AccountNumber In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID=@CompanyID " +
                    " ) " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)
                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }

            }
        }
        public DrawnBanksFilterVM CheckDrawnBank(int CompanyID, int BankID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<DrawnBanksFilterVM>(
                    " Select BankID, ArabicName As BankName From DrawnBanks " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " BankID = @BankID " +
                    " Order By BankID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@BankID", BankID)

                ).FirstOrDefault();
                }
                catch
                {
                    return new DrawnBanksFilterVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<DrawnBanksFilterVM>(
                    " Select BankID, EnglishName As BankName From DrawnBanks " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " BankID = @BankID " +
                    " Order By BankID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@BankID", BankID)
                ).FirstOrDefault();
                }
                catch
                {
                    return new DrawnBanksFilterVM();
                }

            }
        }
        public IEnumerable<MutilUseSearchVM> GetAllDefinitionExpense(int CompanyID, string Expense)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.ArabicName As AccountName,C.StoppedAccount " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber like @Expense " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@Expense", Expense)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.EnglishName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber like @Expense " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@Expense", Expense)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }

            }
        }
        public MutilUseSearchVM CheckAllDefinitionExpense(int CompanyID, string Expense , string AccountNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.ArabicName As AccountName,C.StoppedAccount " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber like @AccountNumber " + 
                    " And " +
                    " C.AccountNumber like @Expense " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@Expense", Expense)
                    , new SqlParameter("@AccountNumber", AccountNumber)


                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.EnglishName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber like @AccountNumber " +
                    " And " +
                    " C.AccountNumber like @Expense " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@Expense", Expense)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }

            }
        }
        public IEnumerable<MutilUseSearchVM> GetAllDefinitionPaidExpense(int CompanyID, string PaidExpense)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                     " Select C.AccountNumber, C.ArabicName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber like @PaidExpense " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@PaidExpense", PaidExpense)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.EnglsihName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber like @PaidExpense " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@PaidExpense", PaidExpense)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }

            }
        }
        public MutilUseSearchVM  CheckAllDefinitionPaidExpense(int CompanyID, string PaidExpense , string AccountNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                     " Select C.AccountNumber, C.ArabicName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                      " And " +
                    " C.AccountNumber like @AccountNumber " +
                    " And " +
                    " C.AccountNumber like @PaidExpense " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@PaidExpense", PaidExpense)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.EnglsihName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber like @AccountNumber " +     
                    " And " +
                    " C.AccountNumber like @PaidExpense " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@PaidExpense", PaidExpense)
                    , new SqlParameter("@AccountNumber", AccountNumber)


                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }

            }
        }
        public IEnumerable<MutilUseSearchVM> GetAllDefinitionFund(int CompanyID, string CashFund)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.ArabicName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber like @CashFund " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CashFund", CashFund)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.EnglishName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber like @CashFund " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CashFund", CashFund)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }

            }
        }
        public MutilUseSearchVM CheckAllDefinitionFund(int CompanyID, string CashFund , string AccountNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.ArabicName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber =@AccountNumber " +
                    " And " +
                    " C.AccountNumber like @CashFund " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CashFund", CashFund)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.EnglishName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                      " And " +
                    " C.AccountNumber =@AccountNumber " +
                    " And " +
                    " C.AccountNumber like @CashFund " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CashFund", CashFund)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }

            }
        }
        public IEnumerable<MutilUseSearchVM> GetAllDefinitionRevenue(int CompanyID, string Revenues)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.ArabicName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber like @Revenues " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@Revenues", Revenues)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.EnglishName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber like @Revenues " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@Revenues", Revenues)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }

            }
        }
       public MutilUseSearchVM CheckAllDefinitionRevenue(int CompanyID, string Revenues , string AccountNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.ArabicName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber =@AccountNumber " +
                    " And " +
                    " C.AccountNumber like @Revenues " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@Revenues", Revenues)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.EnglishName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber =@AccountNumber " +
                    " And " +
                    " C.AccountNumber like @Revenues " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@Revenues", Revenues)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }

            }
        }
        public IEnumerable<MutilUseSearchVM> GetAllDefinitionRevenueReceived(int CompanyID, string RevenuesReceived)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.ArabicName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber like @RevenuesReceived " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@RevenuesReceived", RevenuesReceived)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.EnglishName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber like @RevenuesReceived " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@RevenuesReceived", RevenuesReceived)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }

            }
        }
        public MutilUseSearchVM CheckAllDefinitionRevenueReceived(int CompanyID, string RevenuesReceived,string AccountNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.ArabicName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber =@AccountNumber " +
                    " And " +
                    " C.AccountNumber like @RevenuesReceived " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@RevenuesReceived", RevenuesReceived)
                    , new SqlParameter("@AccountNumber", AccountNumber)
                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.EnglishName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber =@AccountNumber " +
                    " And " +
                    " C.AccountNumber like @RevenuesReceived " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@RevenuesReceived", RevenuesReceived)
                    , new SqlParameter("@AccountNumber", AccountNumber)
                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }

            }
        }
        public IEnumerable<MutilUseSearchVM> GetAllDefinitionTax(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                     " Select Distinct AccountNumber,AccountName,StoppedAccount From " +
                     " ( " +
                         " Select O.SalesTaxAccountNumber As AccountNumber, " +
                         " ( " +
                            " Select C.ArabicName " +
                            " From ChartOfAccounts C " +
                            " Where " +
                            " O.CompanyID = C.CompanyID " +
                            " And " +
                            " O.SalesTaxAccountNumber = C.AccountNumber " +
                         " ) As AccountName, " +
                     " ( " +
                       " Select C.StoppedAccount " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.SalesTaxAccountNumber = C.AccountNumber " +
                     " ) As StoppedAccount " +
                     " From OtherAccounts O " +
                     " Where " +
                     " O.CompanyID = @CompanyID " +
                     " Union All " +
                     " Select O.PurchasesTaxAccountNumber As AccountNumber, " +
                     " ( " +
                       " Select C.ArabicName " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.PurchasesTaxAccountNumber = C.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select C.StoppedAccount " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.PurchasesTaxAccountNumber = C.AccountNumber " +
                     " ) As StoppedAccount " +
                     " From OtherAccounts O " +
                     " Where " +
                     " O.CompanyID = @CompanyID " +
                     " Union All " +
                     " Select O.ReturnSalesTaxAccountNumber As AccountNumber, " +
                     " ( " +
                       " Select C.ArabicName " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.ReturnSalesTaxAccountNumber = C.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select C.StoppedAccount " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.ReturnSalesTaxAccountNumber = C.AccountNumber " +
                     " ) As StoppedAccount " +
                     " From OtherAccounts O " +
                     " Where " +
                     " O.CompanyID = @CompanyID " +
                     " Union All " +
                     " Select O.ReturnPurchasesTaxAccountNumber As AccountNumber, " +
                     " ( " +
                       " Select C.ArabicName " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.ReturnPurchasesTaxAccountNumber = C.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select C.StoppedAccount " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.ReturnPurchasesTaxAccountNumber = C.AccountNumber " +
                     " ) As StoppedAccount " +
                     " From OtherAccounts O " +
                     " Where " +
                     " O.CompanyID = @CompanyID " +
                     " ) As TaxAccount " +
                     " Where " +
                     " AccountNumber is not null " +
                     " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                     " Select Distinct AccountNumber,AccountName,StoppedAccount From " +
                     " ( " +
                         " Select O.SalesTaxAccountNumber As AccountNumber, " +
                         " ( " +
                            " Select C.EnglishName " +
                            " From ChartOfAccounts C " +
                            " Where " +
                            " O.CompanyID = C.CompanyID " +
                            " And " +
                            " O.SalesTaxAccountNumber = C.AccountNumber " +
                         " ) As AccountName, " +
                     " ( " +
                       " Select C.StoppedAccount " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.SalesTaxAccountNumber = C.AccountNumber " +
                     " ) As StoppedAccount " +
                     " From OtherAccounts O " +
                     " Where " +
                     " O.CompanyID = @CompanyID " +
                     " Union All " +
                     " Select O.PurchasesTaxAccountNumber As AccountNumber, " +
                     " ( " +
                       " Select C.EnglishName " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.PurchasesTaxAccountNumber = C.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select C.StoppedAccount " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.PurchasesTaxAccountNumber = C.AccountNumber " +
                     " ) As StoppedAccount " +
                     " From OtherAccounts O " +
                     " Where " +
                     " O.CompanyID = @CompanyID " +
                     " Union All " +
                     " Select O.ReturnSalesTaxAccountNumber As AccountNumber, " +
                     " ( " +
                       " Select C.EnglishName " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.ReturnSalesTaxAccountNumber = C.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select C.StoppedAccount " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.ReturnSalesTaxAccountNumber = C.AccountNumber " +
                     " ) As StoppedAccount " +
                     " From OtherAccounts O " +
                     " Where " +
                     " O.CompanyID = @CompanyID " +
                     " Union All " +
                     " Select O.ReturnPurchasesTaxAccountNumber As AccountNumber, " +
                     " ( " +
                       " Select C.EnglishName " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.ReturnPurchasesTaxAccountNumber = C.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select C.StoppedAccount " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.ReturnPurchasesTaxAccountNumber = C.AccountNumber " +
                     " ) As StoppedAccount " +
                     " From OtherAccounts O " +
                     " Where " +
                     " O.CompanyID = @CompanyID " +
                     " ) As TaxAccount " +
                     " Where " +
                     " AccountNumber is not null " +
                     " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }

            }
        }
        public MutilUseSearchVM CheckAllDefinitionTax(int CompanyID , string AccountNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                     " Select Distinct AccountNumber,AccountName,StoppedAccount From " +
                     " ( " +
                         " Select O.SalesTaxAccountNumber As AccountNumber, " +
                         " ( " +
                            " Select C.ArabicName " +
                            " From ChartOfAccounts C " +
                            " Where " +
                            " O.CompanyID = C.CompanyID " +
                            " And " +
                            " O.SalesTaxAccountNumber = C.AccountNumber " +
                         " ) As AccountName, " +
                     " ( " +
                       " Select C.StoppedAccount " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " + 
                       " And " +
                       " O.SalesTaxAccountNumber = C.AccountNumber " +
                     " ) As StoppedAccount " +
                     " From OtherAccounts O " +
                     " Where " +
                     " O.CompanyID = @CompanyID " + 
                     " Union All " +
                     " Select O.PurchasesTaxAccountNumber As AccountNumber, " +
                     " ( " +
                       " Select C.ArabicName " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.PurchasesTaxAccountNumber = C.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select C.StoppedAccount " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.PurchasesTaxAccountNumber = C.AccountNumber " +
                     " ) As StoppedAccount " +
                     " From OtherAccounts O " +
                     " Where " +
                     " O.CompanyID = @CompanyID " +
                     " Union All " +
                     " Select O.ReturnSalesTaxAccountNumber As AccountNumber, " +
                     " ( " +
                       " Select C.ArabicName " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.ReturnSalesTaxAccountNumber = C.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select C.StoppedAccount " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.ReturnSalesTaxAccountNumber = C.AccountNumber " +
                     " ) As StoppedAccount " +
                     " From OtherAccounts O " +
                     " Where " +
                     " O.CompanyID = @CompanyID " +
                     " Union All " +
                     " Select O.ReturnPurchasesTaxAccountNumber As AccountNumber, " +
                     " ( " +
                       " Select C.ArabicName " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.ReturnPurchasesTaxAccountNumber = C.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select C.StoppedAccount " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.ReturnPurchasesTaxAccountNumber = C.AccountNumber " +
                     " ) As StoppedAccount " +
                     " From OtherAccounts O " +
                     " Where " +
                     " O.CompanyID = @CompanyID " + 
                     " ) As TaxAccount " +
                     " Where " +
                     " O.SalesTaxAccountNumber = @AccountNumber " + 
                     " OR " +
                    " O.PurchasesTaxAccountNumber = @AccountNumber " +
                    " OR " +
                    " O.ReturnPurchasesTaxAccountNumber = @AccountNumber " +        
                    " OR " +
                    " O.ReturnSalesTaxAccountNumber = @AccountNumber " +
                     " AccountNumber is not null " +
                     " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                     " Select Distinct AccountNumber,AccountName,StoppedAccount From " +
                     " ( " +
                         " Select O.SalesTaxAccountNumber As AccountNumber, " +
                         " ( " +
                            " Select C.EnglishName " +
                            " From ChartOfAccounts C " +
                            " Where " +
                            " O.CompanyID = C.CompanyID " +
                            " And " +
                            " O.SalesTaxAccountNumber = C.AccountNumber " +
                         " ) As AccountName, " +
                     " ( " +
                       " Select C.StoppedAccount " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.SalesTaxAccountNumber = C.AccountNumber " +
                     " ) As StoppedAccount " +
                     " From OtherAccounts O " +
                     " Where " +
                     " O.CompanyID = @CompanyID " + 
                     " Union All " +
                     " Select O.PurchasesTaxAccountNumber As AccountNumber, " +
                     " ( " +
                       " Select C.EnglishName " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.PurchasesTaxAccountNumber = C.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select C.StoppedAccount " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.PurchasesTaxAccountNumber = C.AccountNumber " +
                     " ) As StoppedAccount " +
                     " From OtherAccounts O " +
                     " Where " +
                     " O.CompanyID = @CompanyID " +
                     " Union All " +
                     " Select O.ReturnSalesTaxAccountNumber As AccountNumber, " +
                     " ( " +
                       " Select C.EnglishName " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.ReturnSalesTaxAccountNumber = C.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select C.StoppedAccount " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.ReturnSalesTaxAccountNumber = C.AccountNumber " +
                     " ) As StoppedAccount " +
                     " From OtherAccounts O " +
                     " Where " +
                     " O.CompanyID = @CompanyID " + 
                     " Union All " +
                     " Select O.ReturnPurchasesTaxAccountNumber As AccountNumber, " +
                     " ( " +
                       " Select C.EnglishName " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.ReturnPurchasesTaxAccountNumber = C.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select C.StoppedAccount " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " O.CompanyID = C.CompanyID " +
                       " And " +
                       " O.ReturnPurchasesTaxAccountNumber = C.AccountNumber " +
                     " ) As StoppedAccount " +
                     " From OtherAccounts O " +
                     " Where " +
                     " O.CompanyID = @CompanyID " +
                     " ) As TaxAccount " +
                     " Where " +
                    " O.SalesTaxAccountNumber = @AccountNumber " +
                     " OR " +
                    " O.PurchasesTaxAccountNumber = @AccountNumber " +
                    " OR " +
                    " O.ReturnPurchasesTaxAccountNumber = @AccountNumber " +
                    " OR " +
                    " O.ReturnSalesTaxAccountNumber = @AccountNumber " + " AccountNumber is not null " +
                     " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }

            }
        }
        public IEnumerable<MutilUseSearchVM> GetAllDefinitionChequeFund(int CompanyID, string ChequeFund)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.ArabicName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber like @ChequeFund " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ChequeFund", ChequeFund)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.EnglishName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber like @ChequeFund " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ChequeFund", ChequeFund)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }

            }
        }
        public MutilUseSearchVM CheckAllDefinitionChequeFund(int CompanyID, string ChequeFund , string AccountNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.ArabicName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber =@AccountNumber " +
                    " And " +
                    " C.AccountNumber like @ChequeFund " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ChequeFund", ChequeFund)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select C.AccountNumber, C.EnglishName As AccountName,C.StoppedAccount  " +
                    " From  ChartOfAccounts C " +
                    " Where " +
                    " C.CompanyID =@CompanyID " +
                    " And " +
                    " C.AccountNumber =@AccountNumber " +
                    " And " +
                    " C.AccountNumber like @ChequeFund " +
                    " And " +
                    " C.AccountNumber Not In " +
                    " ( " +
                      " Select CC.AccountFather From ChartOfAccounts CC " +
                      " Where " +
                      " CC.CompanyID =@CompanyID " +
                     " ) " +
                     " Order By C.AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ChequeFund", ChequeFund)
                    , new SqlParameter("@AccountNumber", AccountNumber)
                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }

            }
        }
        public IEnumerable<MutilUseSearchVM> GetAllTransActionAccount(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,ArabicName As AccountName,StoppedAccount From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID=@CompanyID " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,EnglishName As AccountName,StoppedAccount From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID=@CompanyID " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }

            }
        }
        public MutilUseSearchVM CheckAllAccountNumber(int CompanyID, string AccountNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,ArabicName As AccountName,StoppedAccount From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountNumber = @AccountNumber " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,EnglishName As AccountName,StoppedAccount From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountNumber = @AccountNumber " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)
                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }

            }
        }
        public IEnumerable<MutilUseSearchVM> GetCustomerAccount(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,ArabicName As AccountName,StoppedAccount  From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountKind = 1 " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID = @CompanyID " +
                      " And " +
                      " AccountKind = 1 " +
                    " ) " +
                   " Order By Cast(AccountNumber As bigint) "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,EnglishName As AccountName,StoppedAccount  From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountKind = 1 " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID = @CompanyID " +
                      " And " +
                      " AccountKind = 1 " +
                    " ) " +
                    " Order By Cast(AccountNumber As bigint) "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }

            }
        }
        public MutilUseSearchVM CheckCustomerAccount(int CompanyID , string AccountNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,ArabicName As AccountName,StoppedAccount   From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountNumber = @AccountNumber " +
                    " And " +
                    " AccountKind = 1 " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID = @CompanyID " +
                      " And " +
                      " AccountKind = 1 " +
                    " ) " +
                   " Order By Cast(AccountNumber As bigint) "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)
                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,EnglishName As AccountName,StoppedAccount  From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountNumber = @AccountNumber " +
                    " And " +
                    " AccountKind = 1 " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID = @CompanyID " +
                      " And " +
                      " AccountKind = 1 " +
                    " ) " +
                    " Order By Cast(AccountNumber As bigint) "
                    , new SqlParameter("@CompanyID", CompanyID)
                    ,  new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                 {
                    return new MutilUseSearchVM();
                }

            }
        }
        public IEnumerable<MutilUseSearchVM> GetCustomerFatherAccount(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select CFI.AccountNumber, " +
                    " ( " +
                      " Select COA.ArabicName " +
                      " From " +
                      " ChartOfAccounts COA " +
                      " Where " +
                      " CFI.CompanyID = COA.CompanyID " +
                      " And " +
                      " CFI.AccountNumber = COA.AccountNumber " +
                    " ) As AccountName " +
                    " From " +
                    " ( " +
                      " Select " +
                      " ( " +
                        " Case When " +
                        " (AccountNumberA is null or AccountNumberA = '') " +
                        " Then AccountNumber " +
                        " Else AccountNumberA " +
                        " End " +
                        " ) As AccountNumber, CompanyID" +
                        " From " +
                        " ( " +
                          " Select C.AccountNumber, C.CompanyID, " +
                          " ( " +
                            " Select Distinct CA.AccountNumber " +
                            " From  ChartOfAccounts CA " +
                            " Where " +
                            " CA.AccountKind = 1 " +
                            " And " +
                            " CA.CompanyID = @CompanyID " +
                            " And " +
                            " CA.AccountFather = C.AccountNumber " +
                            " And " +
                            " CA.AccountNumber In " +
                            " (" +
                              " Select CAA.AccountFather From ChartOfAccounts CAA " +
                              " Where " +
                              " CAA.AccountKind = 1 " +
                              " And " +
                              " CAA.CompanyID = @CompanyID " +
                            " )" +
                          " ) As AccountNumberA " +
                          " From  OtherAccounts O, ChartOfAccounts C " +
                          " Where " +
                          " C.AccountKind = 1 " +
                          " And " +
                          " C.CompanyID = O.CompanyID " +
                          " And " +
                          " C.CompanyID = @CompanyID " +
                          " And " +
                          " O.CustomerAccountNumber = C.AccountFather " +
                        " ) As CFA " +
                    " ) As CFI " +
                    " Order By Cast(CFI.AccountNumber As bigint) "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select CFI.AccountNumber, " +
                    " ( " +
                      " Select COA.EnglishName " +
                      " From " +
                      " ChartOfAccounts COA " +
                      " Where " +
                      " CFI.CompanyID = COA.CompanyID " +
                      " And " +
                      " CFI.AccountNumber = COA.AccountNumber " +
                    " ) As AccountName " +
                    " From " +
                    " ( " +
                      " Select " +
                      " ( " +
                        " Case When " +
                        " (AccountNumberA is null or AccountNumberA = '') " +
                        " Then AccountNumber " +
                        " Else AccountNumberA " +
                        " End " +
                        " ) As AccountNumber, CompanyID" +
                        " From " +
                        " ( " +
                          " Select C.AccountNumber, C.CompanyID, " +
                          " ( " +
                            " Select Distinct CA.AccountNumber " +
                            " From  ChartOfAccounts CA " +
                            " Where " +
                            " CA.AccountKind = 1 " +
                            " And " +
                            " CA.CompanyID = @CompanyID " +
                            " And " +
                            " CA.AccountFather = C.AccountNumber " +
                            " And " +
                            " CA.AccountNumber In " +
                            " (" +
                              " Select CAA.AccountFather From ChartOfAccounts CAA " +
                              " Where " +
                              " CAA.AccountKind = 1 " +
                              " And " +
                              " CAA.CompanyID = @CompanyID " +
                            " )" +
                          " ) As AccountNumberA " +
                          " From  OtherAccounts O, ChartOfAccounts C " +
                          " Where " +
                          " C.AccountKind = 1 " +
                          " And " +
                          " C.CompanyID = O.CompanyID " +
                          " And " +
                          " C.CompanyID = @CompanyID " +
                          " And " +
                          " O.CustomerAccountNumber = C.AccountFather " +
                        " ) As CFA " +
                    " ) As CFI " +
                    " Order By Cast(CFI.AccountNumber As bigint) "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }

            }
        }
        public IEnumerable<MutilUseSearchVM> GetClientAccount(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,ArabicName As AccountName,StoppedAccount  From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountKind = 2 " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID = @CompanyID " +
                      " And " +
                      " AccountKind = 2 " +
                    " ) " +
                    " Order By Cast(AccountNumber As bigint) "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,EnglishName As AccountName,StoppedAccount  From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountKind = 2 " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID = @CompanyID " +
                      " And " +
                      " AccountKind = 2 " +
                    " ) " +
                    " Order By Cast(AccountNumber As bigint) "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
        }
        public MutilUseSearchVM CheckClientAccount(int CompanyID,string AccountNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,ArabicName As AccountName,StoppedAccount  From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountNumber = @AccountNumber " +
                    " And " +
                    " AccountKind = 2 " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID = @CompanyID " +
                      " And " +
                      " AccountKind = 2 " +
                    " ) " +
                    " Order By Cast(AccountNumber As bigint) "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)
                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,EnglishName As AccountName,StoppedAccount  From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountNumber = @AccountNumber " +
                    " And " +
                    " AccountKind = 2 " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID = @CompanyID " +
                      " And " +
                      " AccountKind = 2 " +
                    " ) " +
                    " Order By Cast(AccountNumber As bigint) "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)
                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }
            }
        }
        public IEnumerable<MutilUseSearchVM> GetClientFatherAccount(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select SFI.AccountNumber, " +
                    " ( " +
                      " Select COA.ArabicName " +
                      " From " +
                      " ChartOfAccounts COA " +
                      " Where " +
                      " SFI.CompanyID = COA.CompanyID " +
                      " And " +
                      " SFI.AccountNumber = COA.AccountNumber " +
                    " ) As AccountName " +
                    " From " +
                    " ( " +
                      " Select " +
                      " ( " +
                        " Case When " +
                        " (AccountNumberA is null or AccountNumberA = '') " +
                        " Then AccountNumber " +
                        " Else AccountNumberA " +
                        " End " +
                        " ) As AccountNumber, CompanyID" +
                        " From " +
                        " ( " +
                          " Select C.AccountNumber, C.CompanyID, " +
                          " ( " +
                            " Select Distinct CA.AccountNumber " +
                            " From  ChartOfAccounts CA " +
                            " Where " +
                            " CA.AccountKind = 2 " +
                            " And " +
                            " CA.CompanyID = @CompanyID " +
                            " And " +
                            " CA.AccountFather = C.AccountNumber " +
                            " And " +
                            " CA.AccountNumber In " +
                            " (" +
                              " Select CAA.AccountFather From ChartOfAccounts CAA " +
                              " Where " +
                              " CAA.AccountKind = 2 " +
                              " And " +
                              " CAA.CompanyID = @CompanyID " +
                            " )" +
                          " ) As AccountNumberA " +
                          " From  OtherAccounts O, ChartOfAccounts C " +
                          " Where " +
                          " C.AccountKind = 2 " +
                          " And " +
                          " C.CompanyID = O.CompanyID " +
                          " And " +
                          " C.CompanyID = @CompanyID " +
                          " And " +
                          " O.SupplierAccountNumber = C.AccountFather " +
                        " ) As SFA " +
                    " ) As SFI " +
                    " Order By Cast(SFI.AccountNumber As bigint) "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select SFI.AccountNumber, " +
                    " ( " +
                      " Select COA.EnglishName " +
                      " From " +
                      " ChartOfAccounts COA " +
                      " Where " +
                      " SFI.CompanyID = COA.CompanyID " +
                      " And " +
                      " SFI.AccountNumber = COA.AccountNumber " +
                    " ) As AccountName " +
                    " From " +
                    " ( " +
                      " Select " +
                      " ( " +
                        " Case When " +
                        " (AccountNumberA is null or AccountNumberA = '') " +
                        " Then AccountNumber " +
                        " Else AccountNumberA " +
                        " End " +
                        " ) As AccountNumber, CompanyID" +
                        " From " +
                        " ( " +
                          " Select C.AccountNumber, C.CompanyID, " +
                          " ( " +
                            " Select Distinct CA.AccountNumber " +
                            " From  ChartOfAccounts CA " +
                            " Where " +
                            " CA.AccountKind = 2 " +
                            " And " +
                            " CA.CompanyID = @CompanyID " +
                            " And " +
                            " CA.AccountFather = C.AccountNumber " +
                            " And " +
                            " CA.AccountNumber In " +
                            " (" +
                              " Select CAA.AccountFather From ChartOfAccounts CAA " +
                              " Where " +
                              " CAA.AccountKind = 2 " +
                              " And " +
                              " CAA.CompanyID = @CompanyID " +
                            " )" +
                          " ) As AccountNumberA " +
                          " From  OtherAccounts O, ChartOfAccounts C " +
                          " Where " +
                          " C.AccountKind = 2 " +
                          " And " +
                          " C.CompanyID = O.CompanyID " +
                          " And " +
                          " C.CompanyID = @CompanyID " +
                          " And " +
                          " O.SupplierAccountNumber = C.AccountFather " +
                        " ) As SFA " +
                    " ) As SFI " +
                    " Order By Cast(SFI.AccountNumber As bigint) "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }

            }
        }
        public IEnumerable<MutilUseSearchVM> GetCustomerAndClientAccount(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,ArabicName As AccountName,StoppedAccount  From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountKind in(1,2) " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID = @CompanyID " +
                      " And " +
                      " AccountKind in(1,2) " +
                    " ) " +
                    " Order By Cast(AccountNumber As bigint) "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,EnglishName As AccountName,StoppedAccount  From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountKind in(1,2) " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID = @CompanyID " +
                      " And " +
                      " AccountKind in(1,2) " +
                    " ) " +
                    " Order By Cast(AccountNumber As bigint) "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
        }
        public MutilUseSearchVM CheckCustomerAndClientAccount(int CompanyID , string AccountNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,ArabicName As AccountName,StoppedAccount  From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountNumber = @AccountNumber " +
                    " And " +
                    " AccountKind in(1,2) " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID = @CompanyID " +
                      " And " +
                      " AccountKind in(1,2) " +
                    " ) " +
                    " Order By Cast(AccountNumber As bigint) "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,EnglishName As AccountName,StoppedAccount  From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountNumber = @AccountNumber " +
                    " And " +
                    " AccountKind in(1,2) " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID = @CompanyID " +
                      " And " +
                      " AccountKind in(1,2) " +
                    " ) " +
                    " Order By Cast(AccountNumber As bigint) "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }
            }
        }
        public IEnumerable<MutilUseSearchVM> GetTransActionCostCenter(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select CostNumber,ArabicName As CostName,StoppedCost From  CostCenters " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " CostNumber Not In " +
                    " ( " +
                      " Select CostFather From CostCenters " +
                      " Where " +
                      " CompanyID = @CompanyID " +
                    " ) "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select CostNumber,EnglishName As CostName,StoppedCost From  CostCenters " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " CostNumber Not In " +
                    " ( " +
                      " Select CostFather From CostCenters " +
                      " Where " +
                      " CompanyID = @CompanyID " +
                    " ) "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }

            }
        }
        public MutilUseSearchVM CheckTransActionCostCenter(int CompanyID, string CostCenter)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select CostNumber,ArabicName As CostName,StoppedCost From  CostCenters " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " CostNumber = @CostCenter " +
                    " And " +
                    " CostNumber Not In " +
                    " ( " +
                      " Select CostFather From CostCenters " +
                      " Where " +
                      " CompanyID = @CompanyID " +
                    " ) "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CostCenter", CostCenter)
                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select CostNumber,EnglishName As CostName,StoppedCost From  CostCenters " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " CostNumber = @CostCenter " +
                    " And " +
                    " CostNumber Not In " +
                    " ( " +
                      " Select CostFather From CostCenters " +
                      " Where " +
                      " CompanyID = @CompanyID " +
                    " ) "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CostCenter", CostCenter)

                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }

            }
        }
        public IEnumerable<MutilUseSearchVM> GetFatherAccount(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,ArabicName As AccountName From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountNumber   In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID = @CompanyID " +
                    " ) "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,EnglishName As AccountName From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " AccountNumber   In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID = @CompanyID " +

                    " ) "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
        }
        public IEnumerable<MutilUseSearchVM> GetAllTransActionAccountSalesGain(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,ArabicName As AccountName,StoppedAccount  From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID=@CompanyID  and AccountTypeID in (7,11) " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID=@CompanyID " +
                    " ) " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,EnglishName As AccountName,StoppedAccount  From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID=@CompanyID   and AccountTypeID in (7,11) " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID=@CompanyID " +
                    " ) " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }

            }
        }
        public MutilUseSearchVM CheckAllTransActionAccountSalesGain(int CompanyID , string AccountNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,ArabicName As AccountName,StoppedAccount  From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID=@CompanyID  and AccountTypeID in (7,11) " +
                     " And " +
                   "  AccountNumber = @AccountNumber " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID=@CompanyID " +
                    " ) " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,EnglishName As AccountName,StoppedAccount  From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID=@CompanyID   and AccountTypeID in (7,11) " +
                    " And " +
                   "  AccountNumber = @AccountNumber " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID=@CompanyID " +
                    " ) " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }

            }
        }
        public IEnumerable<St_WarehouseSearchHVM> GetAllSt_ItemGroupH(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseSearchHVM>(
                    " Select GroupCode, ArabicName As GroupName " +
                    " From St_ItemGroup " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " Order By GroupCode "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_WarehouseSearchHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseSearchHVM>(
                    " Select GroupCode, EnglishName As GroupName " +
                    " From St_ItemGroup " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " Order By GroupCode "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_WarehouseSearchHVM>();
                }

            }
        }

        public IEnumerable<St_WarehouseSearchHVM> GetAllSt_ItemCardH(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseSearchHVM>(
                    " Select IC.ItemCode As SearchItemCode, IC.ArabicName As SearchItemName, IC.SalePrice SearchSalePrice, IC.TaxRate," +
                    " IG.ArabicName As SearchGroupName,IC.StopItem As SearchStopItem,IC.CostRate As SearchCostRate, IC.GroupCode As SearchGroupCode, " +
                    " ( " +
                        " CASE " +
                        " WHEN(Select ISNULL(Max(T.PricePieceLocalBeforDiscount), 0) From St_TransactionH T Where T.CompanyID = IC.CompanyID And T.ItemCode = IC.ItemCode And T.TransactionKindNo = 501) != 0 " +
                        " Then(Select ISNULL(Max(T.PricePieceLocalBeforDiscount), 0) From St_TransactionH T Where T.CompanyID = IC.CompanyID And T.ItemCode = IC.ItemCode And T.TransactionKindNo = 501) " +
                        " Else IC.LocalCost " +
                        " End " +
                    " ) As SearchLocalCost " +
                    " From St_ItemCardH IC, St_ItemGroupH IG " +
                    " Where " +
                    " IC.GroupCode = IG.GroupCode " +
                    " And " +
                    " IC.CompanyID = IG.CompanyID " +
                    " And " +
                    " IC.CompanyID = @CompanyID " +
                    " Order By IC.ItemCode "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_WarehouseSearchHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseSearchHVM>(
                    " Select IC.ItemCode As SearchItemCode, IC.EnglishName As SearchItemName, IC.SalePrice SearchSalePrice,IC.TaxRate, " +
                    " IG.EnglishName As SearchGroupName,IC.StopItem As SearchStopItem,IC.CostRate As SearchCostRate, IC.GroupCode As SearchGroupCode, " +
                    " ( " +
                        " CASE " +
                        " WHEN(Select ISNULL(Max(T.PricePieceLocalBeforDiscount), 0) From St_TransactionH T Where T.CompanyID = IC.CompanyID And T.ItemCode = IC.ItemCode And T.TransactionKindNo = 501) != 0 " +
                        " Then(Select ISNULL(Max(T.PricePieceLocalBeforDiscount), 0) From St_TransactionH T Where T.CompanyID = IC.CompanyID And T.ItemCode = IC.ItemCode And T.TransactionKindNo = 501) " +
                        " Else IC.LocalCost " +
                        " End " +
                    " ) As SearchLocalCost " +
                    " From St_ItemCardH IC, St_ItemGroupH IG " +
                    " Where " +
                    " IC.GroupCode = IG.GroupCode " +
                    " And " +
                    " IC.CompanyID = IG.CompanyID " +
                    " And " +
                    " IC.CompanyID = @CompanyID " +
                    " Order By IC.ItemCode "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_WarehouseSearchHVM>();
                }

            }
        }
        public IEnumerable<St_ItemCardHVM> GetAllSt_ItemCardHFilter(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                    " Select IC.ItemCode, IC.ArabicName As ItemName, IC.SalePrice, IG.ArabicName As GroupName,IC.StopItem,A.UserName,IC.GroupCode,IC.ItemTypeNo,IC.SupplierAccountNumber, " +
                    " ( " +
                      " CASE " +
                      " WHEN IC.StopItem = 1 THEN N'موقوفة' " +
                      " ELSE N'فغالة' " +
                      " END " +
                    " ) As ItemCase, " +
                    " ( " +
                       " CASE " +
                       " WHEN IC.ItemTypeNo = 1 THEN N'استيراد اجنبي' " +
                       " WHEN IC.ItemTypeNo = 2 THEN N'استيراد محلي' " +
                       " WHEN IC.ItemTypeNo = 3 THEN N'تصنيع' " +
                       " ELSE N'استثمار' " +
                       " END " +
                    " ) As ItemTypeName, " +
                    " ( " +
                        " Select CA.ArabicName " +
                        " From ChartOfAccounts CA " +
                        " Where " +
                        " IC.SupplierAccountNumber = CA.AccountNumber " +
                        " And " +
                        " IC.CompanyID = CA.CompanyID " +
                     " ) As SupplierAccountName " +
                    " From St_ItemCardH IC, St_ItemGroupH IG,AspNetUsers A  " +
                    " Where " +
                    " IC.GroupCode = IG.GroupCode " +
                    " And " +
                    " IC.CompanyID = IG.CompanyID " +
                    " And " +
                    " IC.CompanyID = A.fCompanyId " +
                    " And " +
                    " IC.InsUserID = A.Id " +
                    " And " +
                    " IC.CompanyID = @CompanyID " +
                    " Order By IC.ItemCode "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                    " Select IC.ItemCode, IC.EnglishName As ItemName, IC.SalePrice, IG.EnglishName As GroupName,IC.StopItem,A.UserName,IC.GroupCode,IC.ItemTypeNo,IC.SupplierAccountNumber, " +
                    " ( " +
                      " CASE " +
                      " WHEN IC.StopItem = 1 THEN 'Stopped' " +
                      " ELSE 'Active' " +
                      " END " +
                    " ) As ItemCase, " +
                    " ( " +
                       " CASE " +
                       " WHEN IC.ItemTypeNo = 1 THEN 'Foreign Import' " +
                       " WHEN IC.ItemTypeNo = 2 THEN 'Local Import' " +
                       " WHEN IC.ItemTypeNo = 3 THEN 'Manufacturing' " +
                       " ELSE 'Investment' " +
                       " END " +
                    " ) As ItemTypeName, " +
                    " ( " +
                        " Select CA.EnglishName " +
                        " From ChartOfAccounts CA " +
                        " Where " +
                        " IC.SupplierAccountNumber = CA.AccountNumber " +
                        " And " +
                        " IC.CompanyID = CA.CompanyID " +
                     " ) As SupplierAccountName " +
                    " From St_ItemCardH IC, St_ItemGroupH IG,AspNetUsers A  " +
                    " Where " +
                    " IC.GroupCode = IG.GroupCode " +
                    " And " +
                    " IC.CompanyID = IG.CompanyID " +
                    " And " +
                    " IC.CompanyID = A.fCompanyId " +
                    " And " +
                    " IC.InsUserID = A.Id " +
                    " And " +
                    " IC.CompanyID = @CompanyID " +
                    " Order By IC.ItemCode "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardHVM>();
                }

            }
        }
        public IEnumerable<St_WarehouseSearchVM> GetAllSt_ItemCard(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseSearchVM>(
                     " Select IC.ItemCode, IC.ArabicName As ItemName, IC.SalePrice, IC.StopItem,  IC.ItemUnitNo, IC.ItemNatureNo,IC.CountryOfOriginNo,IC.ManufacturerCompanyNo, " +
                     " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                     " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15,IC.SupplierAccountNumber As SearchSupplierAccountNumber,IC.CostRate,IC.TaxRate, " +
                     " ( " +
                        " CASE " +
                        " WHEN(Select ISNULL(Max(T.PricePieceLocalBeforDiscount), 0) From St_Transaction T Where T.CompanyID = IC.CompanyID And T.ItemCode = IC.ItemCode And T.TransactionKindNo = 501) != 0 " +
                        " Then(Select ISNULL(Max(T.PricePieceLocalBeforDiscount), 0) From St_Transaction T Where T.CompanyID = IC.CompanyID And T.ItemCode = IC.ItemCode And T.TransactionKindNo = 501) " +
                        " Else IC.LocalCost " +
                        " End " +
                      " ) As PurchasePrice, " +
                     " ( " +
                       " CASE " +
                       " WHEN IC.StopItem = 1 THEN N'موقوفة' " +
                       " ELSE N'فغالة' " +
                       " END " +
                     " ) As ItemCase, " +
                     " ( " +
                        " CASE " +
                        " WHEN IC.ItemNatureNo = 1 THEN N'استيراد اجنبي' " +
                        " WHEN IC.ItemNatureNo = 2 THEN N'استيراد محلي' " +
                        " Else N'تصنيع' " +
                        " END " +
                     " ) As ItemNatureName, " +
                     " ( " +
                        " Select CA.ArabicName " +
                        " From ChartOfAccounts CA " +
                        " Where " +
                        " IC.SupplierAccountNumber = CA.AccountNumber " +
                        " And " +
                        " IC.CompanyID = CA.CompanyID " +
                     " ) As SearchSupplierAccountName, " +
                     " ( " +
                         " Select IU.ArabicName " +
                         " From St_ItemUnit IU " +
                         " Where " +
                         " IC.ItemUnitNo = IU.ItemUnitCode " +
                         " And " +
                         " IC.CompanyID = IU.CompanyID " +
                      " ) As ItemUnitName, " +
                      " ( " +
                         " Select CO.ArabicName " +
                         " From St_CountryOfOrigin CO " +
                         " Where " +
                         " IC.CountryOfOriginNo = CO.CountryOfOriginID " +
                         " And " +
                         " IC.CompanyID = CO.CompanyID " +
                      " ) As CountryOfOriginName, " +
                      " ( " +
                         " Select MC.ArabicName " +
                         " From St_ManufacturerCompany MC " +
                         " Where " +
                         " IC.ManufacturerCompanyNo = MC.ManufacturerCompanyID " +
                         " And " +
                         " IC.CompanyID = MC.CompanyID " +
                      " ) As ManufacturerCompanyName " +
                     " From St_ItemCard IC " +
                     " Where " +
                     " IC.CompanyID = @CompanyID " +
                     " Order By IC.ItemCode "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_WarehouseSearchVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseSearchVM>(
                     " Select IC.ItemCode, IC.EnglishName As ItemName, IC.SalePrice, IC.StopItem,  IC.ItemUnitNo, IC.ItemNatureNo,IC.CountryOfOriginNo,IC.ManufacturerCompanyNo, " +
                     " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                     " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15,IC.SupplierAccountNumber As SearchSupplierAccountNumber,IC.CostRate,IC.TaxRate, " +
                     " ( " +
                        " CASE " +
                        " WHEN(Select ISNULL(Max(T.PricePieceLocalBeforDiscount), 0) From St_Transaction T Where T.CompanyID = IC.CompanyID And T.ItemCode = IC.ItemCode And T.TransactionKindNo = 501) != 0 " +
                        " Then(Select ISNULL(Max(T.PricePieceLocalBeforDiscount), 0) From St_Transaction T Where T.CompanyID = IC.CompanyID And T.ItemCode = IC.ItemCode And T.TransactionKindNo = 501) " +
                        " Else IC.LocalCost " +
                        " End " +
                      " ) As PurchasePrice, " +
                     " ( " +
                       " CASE " +
                       " WHEN IC.StopItem = 1 THEN 'Stopped' " +
                       " ELSE 'Active' " +
                       " END " +
                     " ) As ItemCase, " +
                     " ( " +
                        " CASE " +
                        " WHEN IC.ItemNatureNo = 1 THEN 'Foreign Import' " +
                        " WHEN IC.ItemNatureNo = 2 THEN 'Local Import' " +
                        " Else 'Manufacturing' " +
                        " END " +
                     " ) As ItemNatureName, " +
                     " ( " +
                        " Select CA.ArabicName " +
                        " From ChartOfAccounts CA " +
                        " Where " +
                        " IC.SupplierAccountNumber = CA.AccountNumber " +
                        " And " +
                        " IC.CompanyID = CA.CompanyID " +
                     " ) As SearchSupplierAccountName, " +
                     " ( " +
                         " Select IU.EnglishName " +
                         " From St_ItemUnit IU " +
                         " Where " +
                         " IC.ItemUnitNo = IU.ItemUnitCode " +
                         " And " +
                         " IC.CompanyID = IU.CompanyID " +
                      " ) As ItemUnitName, " +
                      " ( " +
                         " Select CO.EnglishName " +
                         " From St_CountryOfOrigin CO " +
                         " Where " +
                         " IC.CountryOfOriginNo = CO.CountryOfOriginID " +
                         " And " +
                         " IC.CompanyID = CO.CompanyID " +
                      " ) As CountryOfOriginName, " +
                      " ( " +
                         " Select MC.EnglishName " +
                         " From St_ManufacturerCompany MC " +
                         " Where " +
                         " IC.ManufacturerCompanyNo = MC.ManufacturerCompanyID " +
                         " And " +
                         " IC.CompanyID = MC.CompanyID " +
                      " ) As ManufacturerCompanyName " +
                     " From St_ItemCard IC " +
                     " Where " +
                     " IC.CompanyID = @CompanyID " +
                     " Order By IC.ItemCode "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_WarehouseSearchVM>();
                }
            }
        }
        public IEnumerable<St_WarehouseSearchVM> GetSt_ItemCard(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseSearchVM>(
                     " Select IC.ItemCode, IC.ArabicName As ItemName,  IC.StopItem " +
                     " From St_ItemCard IC " +
                     " Where " +
                     " IC.CompanyID = @CompanyID " +
                     " Order By IC.ItemCode "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_WarehouseSearchVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseSearchVM>(
                     " Select IC.ItemCode, IC.EnglishName As ItemName, IC.StopItem " +
                     " From St_ItemCard IC " +
                     " Where " +
                     " IC.CompanyID = @CompanyID " +
                     " Order By IC.ItemCode "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_WarehouseSearchVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardVM> GetAllSt_ItemCardFilter(int CompanyID,string ItemCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                if (ItemCode != "" && ItemCode != null)
                {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                         " Select IC.ItemCode, IC.ArabicName As ItemName, IC.SalePrice,IC.StopItem, A.UserName, IC.ItemUnitNo, IC.ItemNatureNo,IC.CountryOfOriginNo,IC.ManufacturerCompanyNo, " +
                         " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                         " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15,IC.SupplierAccountNumber, " +
                         " ( " +
                           " CASE " +
                           " WHEN IC.StopItem = 1 THEN N'موقوفة' " +
                           " ELSE N'فغالة' " +
                           " END " +
                         " ) As ItemCase, " +
                         " ( " +
                            " CASE " +
                            " WHEN IC.ItemNatureNo = 1 THEN N'استيراد اجنبي' " +
                            " WHEN IC.ItemNatureNo = 2 THEN N'استيراد محلي' " +
                            " Else N'تصنيع' " +
                            " END " +
                         " ) As ItemNatureName, " +
                         " ( " +
                            " Select CA.ArabicName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " IC.SupplierAccountNumber = CA.AccountNumber " +
                            " And " +
                            " IC.CompanyID = CA.CompanyID " +
                         " ) As SupplierAccountName, " +
                         " ( " +
                             " Select IU.ArabicName " +
                             " From St_ItemUnit IU " +
                             " Where " +
                             " IC.ItemUnitNo = IU.ItemUnitCode " +
                             " And " +
                             " IC.CompanyID = IU.CompanyID " +
                          " ) As ItemUnitName, " +
                          " ( " +
                             " Select CO.ArabicName " +
                             " From St_CountryOfOrigin CO " +
                             " Where " +
                             " IC.CountryOfOriginNo = CO.CountryOfOriginID " +
                             " And " +
                             " IC.CompanyID = CO.CompanyID " +
                          " ) As CountryOfOriginName, " +
                          " ( " +
                             " Select MC.ArabicName " +
                             " From St_ManufacturerCompany MC " +
                             " Where " +
                             " IC.ManufacturerCompanyNo = MC.ManufacturerCompanyID " +
                             " And " +
                             " IC.CompanyID = MC.CompanyID " +
                          " ) As ManufacturerCompanyName " +
                         " From St_ItemCard IC, AspNetUsers A " +
                         " Where " +
                         " IC.CompanyID = A.fCompanyId " +
                         " And " +
                         " IC.InsUserID = A.Id " +
                         " And " +
                         " IC.CompanyID = @CompanyID " +
                         " And " +
                         " IC.ItemCode = (Select SI.ItemCode from St_SimilarItem SI where SI.SimilarItemCode = @ItemCode) " +
                         " Order By IC.ItemCode "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@ItemCode", ItemCode)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
                else {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                         " Select IC.ItemCode, IC.ArabicName As ItemName, IC.SalePrice,IC.StopItem, A.UserName, IC.ItemUnitNo, IC.ItemNatureNo,IC.CountryOfOriginNo,IC.ManufacturerCompanyNo, " +
                         " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                         " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15,IC.SupplierAccountNumber, " +
                         " ( " +
                           " CASE " +
                           " WHEN IC.StopItem = 1 THEN N'موقوفة' " +
                           " ELSE N'فغالة' " +
                           " END " +
                         " ) As ItemCase, " +
                         " ( " +
                            " CASE " +
                            " WHEN IC.ItemNatureNo = 1 THEN N'استيراد اجنبي' " +
                            " WHEN IC.ItemNatureNo = 2 THEN N'استيراد محلي' " +
                            " Else N'تصنيع' " +
                            " END " +
                         " ) As ItemNatureName, " +
                         " ( " +
                            " Select CA.ArabicName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " IC.SupplierAccountNumber = CA.AccountNumber " +
                            " And " +
                            " IC.CompanyID = CA.CompanyID " +
                         " ) As SupplierAccountName, " +
                         " ( " +
                             " Select IU.ArabicName " +
                             " From St_ItemUnit IU " +
                             " Where " +
                             " IC.ItemUnitNo = IU.ItemUnitCode " +
                             " And " +
                             " IC.CompanyID = IU.CompanyID " +
                          " ) As ItemUnitName, " +
                          " ( " +
                             " Select CO.ArabicName " +
                             " From St_CountryOfOrigin CO " +
                             " Where " +
                             " IC.CountryOfOriginNo = CO.CountryOfOriginID " +
                             " And " +
                             " IC.CompanyID = CO.CompanyID " +
                          " ) As CountryOfOriginName, " +
                          " ( " +
                             " Select MC.ArabicName " +
                             " From St_ManufacturerCompany MC " +
                             " Where " +
                             " IC.ManufacturerCompanyNo = MC.ManufacturerCompanyID " +
                             " And " +
                             " IC.CompanyID = MC.CompanyID " +
                          " ) As ManufacturerCompanyName " +
                         " From St_ItemCard IC, AspNetUsers A " +
                         " Where " +
                         " IC.CompanyID = A.fCompanyId " +
                         " And " +
                         " IC.InsUserID = A.Id " +
                         " And " +
                         " IC.CompanyID = @CompanyID " +
                         " Order By IC.ItemCode "
                        , new SqlParameter("@CompanyID", CompanyID)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
            }
            else
            {
                if (ItemCode != "" && ItemCode != null)
                {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                         " Select IC.ItemCode, IC.ArabicName As ItemName, IC.SalePrice, IC.StopItem, A.UserName, IC.ItemUnitNo, IC.ItemNatureNo,IC.CountryOfOriginNo,IC.ManufacturerCompanyNo, " +
                         " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                         " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15,IC.SupplierAccountNumber, " +
                         " ( " +
                           " CASE " +
                           " WHEN IC.StopItem = 1 THEN 'Stopped' " +
                           " ELSE 'Active' " +
                           " END " +
                         " ) As ItemCase, " +
                         " ( " +
                            " CASE " +
                            " WHEN IC.ItemNatureNo = 1 THEN 'Foreign Import' " +
                            " WHEN IC.ItemNatureNo = 2 THEN 'Local Import' " +
                            " Else 'Manufacturing' " +
                            " END " +
                         " ) As ItemNatureName, " +
                         " ( " +
                            " Select CA.ArabicName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " IC.SupplierAccountNumber = CA.AccountNumber " +
                            " And " +
                            " IC.CompanyID = CA.CompanyID " +
                         " ) As SupplierAccountName, " +
                         " ( " +
                             " Select IU.EnglishName " +
                             " From St_ItemUnit IU " +
                             " Where " +
                             " IC.ItemUnitNo = IU.ItemUnitCode " +
                             " And " +
                             " IC.CompanyID = IU.CompanyID " +
                          " ) As ItemUnitName, " +
                          " ( " +
                             " Select CO.EnglishName " +
                             " From St_CountryOfOrigin CO " +
                             " Where " +
                             " IC.CountryOfOriginNo = CO.CountryOfOriginID " +
                             " And " +
                             " IC.CompanyID = CO.CompanyID " +
                          " ) As CountryOfOriginName, " +
                          " ( " +
                             " Select MC.EnglishName " +
                             " From St_ManufacturerCompany MC " +
                             " Where " +
                             " IC.ManufacturerCompanyNo = MC.ManufacturerCompanyID " +
                             " And " +
                             " IC.CompanyID = MC.CompanyID " +
                          " ) As ManufacturerCompanyName " +
                         " From St_ItemCard IC, AspNetUsers A " +
                         " Where " +
                         " IC.CompanyID = A.fCompanyId " +
                         " And " +
                         " IC.InsUserID = A.Id " +
                         " And " +
                         " IC.CompanyID = @CompanyID " +
                         " And " +
                         " IC.ItemCode = (Select SI.ItemCode from St_SimilarItem SI where SI.SimilarItemCode = @ItemCode) " +
                         " Order By IC.ItemCode "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@ItemCode", ItemCode)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                         " Select IC.ItemCode, IC.ArabicName As ItemName, IC.SalePrice, IC.StopItem, A.UserName, IC.ItemUnitNo, IC.ItemNatureNo,IC.CountryOfOriginNo,IC.ManufacturerCompanyNo, " +
                         " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                         " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15,IC.SupplierAccountNumber, " +
                         " ( " +
                           " CASE " +
                           " WHEN IC.StopItem = 1 THEN 'Stopped' " +
                           " ELSE 'Active' " +
                           " END " +
                         " ) As ItemCase, " +
                         " ( " +
                            " CASE " +
                            " WHEN IC.ItemNatureNo = 1 THEN 'Foreign Import' " +
                            " WHEN IC.ItemNatureNo = 2 THEN 'Local Import' " +
                            " Else 'Manufacturing' " +
                            " END " +
                         " ) As ItemNatureName, " +
                         " ( " +
                            " Select CA.ArabicName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " IC.SupplierAccountNumber = CA.AccountNumber " +
                            " And " +
                            " IC.CompanyID = CA.CompanyID " +
                         " ) As SupplierAccountName, " +
                         " ( " +
                             " Select IU.EnglishName " +
                             " From St_ItemUnit IU " +
                             " Where " +
                             " IC.ItemUnitNo = IU.ItemUnitCode " +
                             " And " +
                             " IC.CompanyID = IU.CompanyID " +
                          " ) As ItemUnitName, " +
                          " ( " +
                             " Select CO.EnglishName " +
                             " From St_CountryOfOrigin CO " +
                             " Where " +
                             " IC.CountryOfOriginNo = CO.CountryOfOriginID " +
                             " And " +
                             " IC.CompanyID = CO.CompanyID " +
                          " ) As CountryOfOriginName, " +
                          " ( " +
                             " Select MC.EnglishName " +
                             " From St_ManufacturerCompany MC " +
                             " Where " +
                             " IC.ManufacturerCompanyNo = MC.ManufacturerCompanyID " +
                             " And " +
                             " IC.CompanyID = MC.CompanyID " +
                          " ) As ManufacturerCompanyName " +
                         " From St_ItemCard IC, AspNetUsers A " +
                         " Where " +
                         " IC.CompanyID = A.fCompanyId " +
                         " And " +
                         " IC.InsUserID = A.Id " +
                         " And " +
                         " IC.CompanyID = @CompanyID " +
                         " Order By IC.ItemCode "
                        , new SqlParameter("@CompanyID", CompanyID)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
                    
            }
        }
        public IEnumerable<St_ItemCardVM> GetAllSt_ItemCardFilterByWarehouse(int CompanyID, string ItemCode,string StockCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                if (ItemCode != "" && ItemCode != null)
                {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                         " Select IC.ItemCode, IC.ArabicName As ItemName, IC.SalePrice, IC.StopItem, IC.ItemUnitNo, IC.ItemNatureNo, IC.CountryOfOriginNo, IC.ManufacturerCompanyNo, " +
                         " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                         " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15, IC.SupplierAccountNumber, " +
                         " IW.StockCode As SearchStockCode,ISNULL(IW.StockMinimumItemNo,0) As StockMinimumItemNo,ISNULL(IW.StockMaximumItemNo,0) As StockMaximumItemNo " +
                         " From  St_ItemCard IC " +
                         " Left Join St_ItemWarehouse IW " +
                         " On " +
                         " IC.CompanyID = IW.CompanyID " +
                         " And " +
                         " IW.StockCode = @StockCode " +
                         " And " +
                         " IC.ItemCode = IW.ItemCode " +
                         " Where " +
                         " IC.CompanyID = @CompanyID " +
                         " And " +
                         " IC.ItemCode = (Select SI.ItemCode from St_SimilarItem SI where SI.SimilarItemCode = @ItemCode) " +
                         " And " +
                         " IC.ItemCode not in (Select T.ItemCode From St_Transaction T Where T.ItemCode = IC.ItemCode And T.StockCode = IW.StockCode) " +
                         " Order By IC.ItemCode "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@ItemCode", ItemCode)
                        , new SqlParameter("@StockCode", StockCode)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                         " Select IC.ItemCode, IC.ArabicName As ItemName, IC.SalePrice, IC.StopItem, IC.ItemUnitNo, IC.ItemNatureNo, IC.CountryOfOriginNo, IC.ManufacturerCompanyNo, " +
                         " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                         " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15, IC.SupplierAccountNumber, " +
                         " IW.StockCode As SearchStockCode,ISNULL(IW.StockMinimumItemNo,0) As StockMinimumItemNo,ISNULL(IW.StockMaximumItemNo,0) As StockMaximumItemNo " +
                         " From  St_ItemCard IC " +
                         " Left Join St_ItemWarehouse IW " +
                         " On " +
                         " IC.CompanyID = IW.CompanyID " +
                         " And " +
                         " IW.StockCode = @StockCode " +
                         " And " +
                         " IC.ItemCode = IW.ItemCode " +
                         " Where " +
                         " IC.CompanyID = @CompanyID " +
                         " And " +
                         " IC.ItemCode not in (Select T.ItemCode From St_Transaction T Where T.ItemCode = IC.ItemCode And T.StockCode = IW.StockCode) " +
                         " Order By IC.ItemCode "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@StockCode", StockCode)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
            }
            else
            {
                if (ItemCode != "" && ItemCode != null)
                {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                         " Select IC.ItemCode, IC.EnglishName As ItemName, IC.SalePrice, IC.StopItem, IC.ItemUnitNo, IC.ItemNatureNo, IC.CountryOfOriginNo, IC.ManufacturerCompanyNo, " +
                         " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                         " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15, IC.SupplierAccountNumber, " +
                         " IW.StockCode As SearchStockCode,ISNULL(IW.StockMinimumItemNo,0) As StockMinimumItemNo,ISNULL(IW.StockMaximumItemNo,0) As StockMaximumItemNo " +
                         " From  St_ItemCard IC " +
                         " Left Join St_ItemWarehouse IW " +
                         " On " +
                         " IC.CompanyID = IW.CompanyID " +
                         " And " +
                         " IW.StockCode = @StockCode " +
                         " And " +
                         " IC.ItemCode = IW.ItemCode " +
                         " Where " +
                         " IC.CompanyID = @CompanyID " +
                         " And " +
                         " IC.ItemCode = (Select SI.ItemCode from St_SimilarItem SI where SI.SimilarItemCode = @ItemCode) " +
                         " Order By IC.ItemCode "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@ItemCode", ItemCode)
                        , new SqlParameter("@StockCode", StockCode)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                         " Select IC.ItemCode, IC.EnglishName As ItemName, IC.SalePrice, IC.StopItem, IC.ItemUnitNo, IC.ItemNatureNo, IC.CountryOfOriginNo, IC.ManufacturerCompanyNo, " +
                         " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                         " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15, IC.SupplierAccountNumber, " +
                         " IW.StockCode As SearchStockCode,ISNULL(IW.StockMinimumItemNo,0) As StockMinimumItemNo,ISNULL(IW.StockMaximumItemNo,0) As StockMaximumItemNo " +
                         " From  St_ItemCard IC " +
                         " Left Join St_ItemWarehouse IW " +
                         " On " +
                         " IC.CompanyID = IW.CompanyID " +
                         " And " +
                         " IW.StockCode = @StockCode " +
                         " And " +
                         " IC.ItemCode = IW.ItemCode " +
                         " Where " +
                         " IC.CompanyID = @CompanyID " +
                         " Order By IC.ItemCode "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@StockCode", StockCode)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
            }
        }
        public IEnumerable<St_ItemCardVM> GetAllSt_ItemCardFilterByAdvertisingRepresentative(int CompanyID, string ItemCode, int AdvertisingRepresentativeID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                if (ItemCode != "" && ItemCode != null)
                {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                        " Select IC.ItemCode, IC.ArabicName As ItemName, IC.SalePrice, IC.StopItem, IC.ItemUnitNo, IC.ItemNatureNo, IC.CountryOfOriginNo, IC.ManufacturerCompanyNo, " +
                        " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                        " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15, IC.SupplierAccountNumber, " +
                        " ISNull(IAR.AdvertisingRepresentativeID, 0) As SearchAdvertisingRepresentativeID " +
                        " From  St_ItemCard IC " +
                        " Left Join St_ItemAdvertisingRepresentative IAR " +
                        " On " +
                        " IC.CompanyID = IAR.CompanyID " +
                        " And " +
                        " IAR.AdvertisingRepresentativeID = @AdvertisingRepresentativeID " +
                        " And " +
                        " IC.ItemCode = IAR.ItemCode " +
                        " Where " +
                        " IC.CompanyID = @CompanyID " +
                        " And " +
                        " IC.ItemCode = (Select SI.ItemCode from St_SimilarItem SI where SI.SimilarItemCode = @ItemCode) " +
                        " Order By IC.ItemCode "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@ItemCode", ItemCode)
                        , new SqlParameter("@AdvertisingRepresentativeID", AdvertisingRepresentativeID)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                        " Select IC.ItemCode, IC.ArabicName As ItemName, IC.SalePrice, IC.StopItem, IC.ItemUnitNo, IC.ItemNatureNo, IC.CountryOfOriginNo, IC.ManufacturerCompanyNo, " +
                        " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                        " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15, IC.SupplierAccountNumber, " +
                        " ISNull(IAR.AdvertisingRepresentativeID, 0) As SearchAdvertisingRepresentativeID " +
                        " From  St_ItemCard IC " +
                        " Left Join St_ItemAdvertisingRepresentative IAR " +
                        " On " +
                        " IC.CompanyID = IAR.CompanyID " +
                        " And " +
                        " IAR.AdvertisingRepresentativeID = @AdvertisingRepresentativeID " +
                        " And " +
                        " IC.ItemCode = IAR.ItemCode " +
                        " Where " +
                        " IC.CompanyID = @CompanyID " +
                        " Order By IC.ItemCode "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@AdvertisingRepresentativeID", AdvertisingRepresentativeID)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
            }
            else
            {
                if (ItemCode != "" && ItemCode != null)
                {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                        " Select IC.ItemCode, IC.EnglishName As ItemName, IC.SalePrice, IC.StopItem, IC.ItemUnitNo, IC.ItemNatureNo, IC.CountryOfOriginNo, IC.ManufacturerCompanyNo, " +
                        " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                        " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15, IC.SupplierAccountNumber, " +
                        " ISNull(IAR.AdvertisingRepresentativeID, 0) As SearchAdvertisingRepresentativeID " +
                        " From  St_ItemCard IC " +
                        " Left Join St_ItemAdvertisingRepresentative IAR " +
                        " On " +
                        " IC.CompanyID = IAR.CompanyID " +
                        " And " +
                        " IAR.AdvertisingRepresentativeID = @AdvertisingRepresentativeID " +
                        " And " +
                        " IC.ItemCode = IAR.ItemCode " +
                        " Where " +
                        " IC.CompanyID = @CompanyID " +
                        " And " +
                        " IC.ItemCode = (Select SI.ItemCode from St_SimilarItem SI where SI.SimilarItemCode = @ItemCode) " +
                        " Order By IC.ItemCode "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@ItemCode", ItemCode)
                        , new SqlParameter("@AdvertisingRepresentativeID", AdvertisingRepresentativeID)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                        " Select IC.ItemCode, IC.EnglishName As ItemName, IC.SalePrice, IC.StopItem, IC.ItemUnitNo, IC.ItemNatureNo, IC.CountryOfOriginNo, IC.ManufacturerCompanyNo, " +
                        " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                        " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15, IC.SupplierAccountNumber, " +
                        " ISNull(IAR.AdvertisingRepresentativeID, 0) As SearchAdvertisingRepresentativeID " +
                        " From  St_ItemCard IC " +
                        " Left Join St_ItemAdvertisingRepresentative IAR " +
                        " On " +
                        " IC.CompanyID = IAR.CompanyID " +
                        " And " +
                        " IAR.AdvertisingRepresentativeID = @AdvertisingRepresentativeID " +
                        " And " +
                        " IC.ItemCode = IAR.ItemCode " +
                        " Where " +
                        " IC.CompanyID = @CompanyID " +
                        " Order By IC.ItemCode "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@AdvertisingRepresentativeID", AdvertisingRepresentativeID)
                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
            }
        }
        public IEnumerable<St_ItemCardVM> GetAllSt_ItemCardFilterByWarehouseToDetermineQuantity(int CompanyID, string ItemCode, string StockCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                if (ItemCode != "" && ItemCode != null)
                {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                        " Select IW.ItemCode, IC.ArabicName As ItemName, IW.StockCode As SearchStockCode, ISNULL(IW.StockMinimumItemNo, 0) As StockMinimumItemNo, " +
                        " ISNULL(IW.StockMaximumItemNo, 0) As StockMaximumItemNo, IW.RowNumber As ItemWarehouseRowNumber, " +
                        " IC.SalePrice, IC.StopItem, IC.ItemUnitNo, IC.ItemNatureNo, IC.CountryOfOriginNo, IC.ManufacturerCompanyNo, " +
                        " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                        " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15, IC.SupplierAccountNumber " +
                        " From St_ItemWarehouse IW, St_ItemCard IC " +
                        " Where " +
                        " IC.CompanyID = IW.CompanyID " +
                        " And " +
                        " IC.ItemCode = IW.ItemCode " +
                        " And " +
                        " IW.STockCode = @StockCode " +
                        " And " +
                        " IC.ItemCode = (Select SI.ItemCode from St_SimilarItem SI where SI.SimilarItemCode = @ItemCode) " +
                        " And " +
                        " IC.CompanyID = @CompanyID " +
                        " Order By IC.ItemCode "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@ItemCode", ItemCode)
                        , new SqlParameter("@StockCode", StockCode)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                        " Select IW.ItemCode, IC.ArabicName As ItemName, IW.StockCode As SearchStockCode, ISNULL(IW.StockMinimumItemNo, 0) As StockMinimumItemNo, " +
                        " ISNULL(IW.StockMaximumItemNo, 0) As StockMaximumItemNo, IW.RowNumber As ItemWarehouseRowNumber, " +
                        " IC.SalePrice, IC.StopItem, IC.ItemUnitNo, IC.ItemNatureNo, IC.CountryOfOriginNo, IC.ManufacturerCompanyNo, " +
                        " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                        " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15, IC.SupplierAccountNumber " +
                        " From St_ItemWarehouse IW, St_ItemCard IC " +
                        " Where " +
                        " IC.CompanyID = IW.CompanyID " +
                        " And " +
                        " IC.ItemCode = IW.ItemCode " +
                        " And " +
                        " IW.STockCode = @StockCode " +
                        " And " +
                        " IC.CompanyID = @CompanyID " +
                        " Order By IC.ItemCode "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@StockCode", StockCode)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
            }
            else
            {
                if (ItemCode != "" && ItemCode != null)
                {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                        " Select IW.ItemCode, IC.EnglishName As ItemName, IW.StockCode As SearchStockCode, ISNULL(IW.StockMinimumItemNo, 0) As StockMinimumItemNo, " +
                        " ISNULL(IW.StockMaximumItemNo, 0) As StockMaximumItemNo, IW.RowNumber As ItemWarehouseRowNumber, " +
                        " IC.SalePrice, IC.StopItem, IC.ItemUnitNo, IC.ItemNatureNo, IC.CountryOfOriginNo, IC.ManufacturerCompanyNo, " +
                        " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                        " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15, IC.SupplierAccountNumber " +
                        " From St_ItemWarehouse IW, St_ItemCard IC " +
                        " Where " +
                        " IC.CompanyID = IW.CompanyID " +
                        " And " +
                        " IC.ItemCode = IW.ItemCode " +
                        " And " +
                        " IW.STockCode = @StockCode " +
                        " And " +
                        " IC.ItemCode = (Select SI.ItemCode from St_SimilarItem SI where SI.SimilarItemCode = @ItemCode) " +
                        " And " +
                        " IC.CompanyID = @CompanyID " +
                        " Order By IC.ItemCode "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@ItemCode", ItemCode)
                        , new SqlParameter("@StockCode", StockCode)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                        " Select IW.ItemCode, IC.EnglishName As ItemName, IW.StockCode As SearchStockCode, ISNULL(IW.StockMinimumItemNo, 0) As StockMinimumItemNo, " +
                        " ISNULL(IW.StockMaximumItemNo, 0) As StockMaximumItemNo, IW.RowNumber As ItemWarehouseRowNumber, " +
                        " IC.SalePrice, IC.StopItem, IC.ItemUnitNo, IC.ItemNatureNo, IC.CountryOfOriginNo, IC.ManufacturerCompanyNo, " +
                        " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                        " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15, IC.SupplierAccountNumber " +
                        " From St_ItemWarehouse IW, St_ItemCard IC " +
                        " Where " +
                        " IC.CompanyID = IW.CompanyID " +
                        " And " +
                        " IC.ItemCode = IW.ItemCode " +
                        " And " +
                        " IW.STockCode = @StockCode " +
                        " And " +
                        " IC.CompanyID = @CompanyID " +
                        " Order By IC.ItemCode "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@StockCode", StockCode)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
            }
        }
        public IEnumerable<St_ItemCardVM> GetAllSt_ItemCardFilterByWarehouseToInitialInventory(int CompanyID, string ItemCode, string StockCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                if (ItemCode != "" && ItemCode != null)
                {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                         " Select IW.ItemCode, IC.ArabicName As ItemName, IW.StockCode As SearchStockCode, " +
                         " IC.SalePrice, IC.StopItem, IC.ItemUnitNo, IC.ItemNatureNo, IC.CountryOfOriginNo, IC.ManufacturerCompanyNo, " +
                         " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                         " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15, IC.SupplierAccountNumber, " +
                         " ISNULL(ST.Quantity, 0) As Quantity, ISNULL(ST.TotalLocal, 0) As TotalLocal, ISNULL(ST.PricePieceTotalLocal, 0) As PricePieceTotalLocal, " +
                         " ( " +
                           " Case When ISNULL(ST.CostPieceLocal, 0) = 0 " +
                           " Then IC.LocalCost " +
                           " Else ST.CostPieceLocal " +
                           " End " +
                         " ) As CostRate " +
                         " From St_ItemCard IC,St_ItemWarehouse IW " +
                         " left Join St_Transaction ST " +
                         " On " +
                         " IW.StockCode = ST.StockCode " +
                         " And " +
                         " IW.ItemCode = ST.ItemCode " +
                         " And " +
                         " IW.CompanyID = ST.CompanyID " +
                         " And " +
                         " ST.TransactionKindNo = 517 " +
                         " Where " +
                         " IC.CompanyID = IW.CompanyID " +
                         " And " +
                         " IC.ItemCode = IW.ItemCode " +
                         " And " +
                         " IW.STockCode = @StockCode " +
                         " And " +
                         " IC.CompanyID = @CompanyID " +
                         " And " +
                         " IC.ItemCode = (Select SI.ItemCode from St_SimilarItem SI where SI.SimilarItemCode = @ItemCode) " +
                         " Order By IC.ItemCode " 
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@ItemCode", ItemCode)
                        , new SqlParameter("@StockCode", StockCode)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                        " Select IW.ItemCode, IC.ArabicName As ItemName, IW.StockCode As SearchStockCode, " +
                         " IC.SalePrice, IC.StopItem, IC.ItemUnitNo, IC.ItemNatureNo, IC.CountryOfOriginNo, IC.ManufacturerCompanyNo, " +
                         " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                         " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15, IC.SupplierAccountNumber, " +
                         " ISNULL(ST.Quantity, 0) As Quantity, ISNULL(ST.TotalLocal, 0) As TotalLocal, ISNULL(ST.PricePieceTotalLocal, 0) As PricePieceTotalLocal, " +
                         " ( " +
                           " Case When ISNULL(ST.CostPieceLocal, 0) = 0 " +
                           " Then IC.LocalCost " +
                           " Else ST.CostPieceLocal " +
                           " End " +
                         " ) As CostRate " +
                         " From St_ItemCard IC,St_ItemWarehouse IW " +
                         " left Join St_Transaction ST " +
                         " On " +
                         " IW.StockCode = ST.StockCode " +
                         " And " +
                         " IW.ItemCode = ST.ItemCode " +
                         " And " +
                         " IW.CompanyID = ST.CompanyID " +
                         " And " +
                         " ST.TransactionKindNo = 517 " +
                         " Where " +
                         " IC.CompanyID = IW.CompanyID " +
                         " And " +
                         " IC.ItemCode = IW.ItemCode " +
                         " And " +
                         " IW.STockCode = @StockCode " +
                         " And " +
                         " IC.CompanyID = @CompanyID " +
                         " Order By IC.ItemCode "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@StockCode", StockCode)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
            }
            else
            {
                if (ItemCode != "" && ItemCode != null)
                {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                        " Select IW.ItemCode, IC.EnglishName As ItemName, IW.StockCode As SearchStockCode, " +
                         " IC.SalePrice, IC.StopItem, IC.ItemUnitNo, IC.ItemNatureNo, IC.CountryOfOriginNo, IC.ManufacturerCompanyNo, " +
                         " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                         " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15, IC.SupplierAccountNumber, " +
                         " ISNULL(ST.Quantity, 0) As Quantity, ISNULL(ST.TotalLocal, 0) As TotalLocal, ISNULL(ST.PricePieceTotalLocal, 0) As PricePieceTotalLocal, " +
                         " ( " +
                           " Case When ISNULL(ST.CostPieceLocal, 0) = 0 " +
                           " Then IC.LocalCost " +
                           " Else ST.CostPieceLocal " +
                           " End " +
                         " ) As CostRate " +
                         " From St_ItemCard IC,St_ItemWarehouse IW " +
                         " left Join St_Transaction ST " +
                         " On " +
                         " IW.StockCode = ST.StockCode " +
                         " And " +
                         " IW.ItemCode = ST.ItemCode " +
                         " And " +
                         " IW.CompanyID = ST.CompanyID " +
                         " And " +
                         " ST.TransactionKindNo = 517 " +
                         " Where " +
                         " IC.CompanyID = IW.CompanyID " +
                         " And " +
                         " IC.ItemCode = IW.ItemCode " +
                         " And " +
                         " IW.STockCode = @StockCode " +
                         " And " +
                         " IC.CompanyID = @CompanyID " +
                         " And " +
                         " IC.ItemCode = (Select SI.ItemCode from St_SimilarItem SI where SI.SimilarItemCode = @ItemCode) " +
                         " Order By IC.ItemCode "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@ItemCode", ItemCode)
                        , new SqlParameter("@StockCode", StockCode)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<St_ItemCardVM>(
                        " Select IW.ItemCode, IC.EnglishName As ItemName, IW.StockCode As SearchStockCode, " +
                         " IC.SalePrice, IC.StopItem, IC.ItemUnitNo, IC.ItemNatureNo, IC.CountryOfOriginNo, IC.ManufacturerCompanyNo, " +
                         " IC.Categorie_1, IC.Categorie_2, IC.Categorie_3, IC.Categorie_4, IC.Categorie_5, IC.Categorie_6, IC.Categorie_7, IC.Categorie_8, IC.Categorie_9, " +
                         " IC.Categorie_10, IC.Categorie_11, IC.Categorie_12, IC.Categorie_13, IC.Categorie_14, IC.Categorie_15, IC.SupplierAccountNumber, " +
                         " ISNULL(ST.Quantity, 0) As Quantity, ISNULL(ST.TotalLocal, 0) As TotalLocal, ISNULL(ST.PricePieceTotalLocal, 0) As PricePieceTotalLocal, " +
                         " ( " +
                           " Case When ISNULL(ST.CostPieceLocal, 0) = 0 " +
                           " Then IC.LocalCost " +
                           " Else ST.CostPieceLocal " +
                           " End " +
                         " ) As CostRate " +
                         " From St_ItemCard IC,St_ItemWarehouse IW " +
                         " left Join St_Transaction ST " +
                         " On " +
                         " IW.StockCode = ST.StockCode " +
                         " And " +
                         " IW.ItemCode = ST.ItemCode " +
                         " And " +
                         " IW.CompanyID = ST.CompanyID " +
                         " And " +
                         " ST.TransactionKindNo = 517 " +
                         " Where " +
                         " IC.CompanyID = IW.CompanyID " +
                         " And " +
                         " IC.ItemCode = IW.ItemCode " +
                         " And " +
                         " IW.STockCode = @StockCode " +
                         " And " +
                         " IC.CompanyID = @CompanyID " +
                         " Order By IC.ItemCode "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@StockCode", StockCode)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<St_ItemCardVM>();
                    }
                }
            }
        }
        public IEnumerable<MutilUseSearchVM> GetAllTransActionAccountPurchase(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,ArabicName As AccountName,StoppedAccount  From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID=@CompanyID  and AccountTypeID in (10) " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID=@CompanyID " +
                    " ) " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,EnglishName As AccountName,StoppedAccount  From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID=@CompanyID   and AccountTypeID in (10) " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID=@CompanyID " +
                    " ) " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<MutilUseSearchVM>();
                }

            }
        }
        public IEnumerable<ServiceVM> GetAllService(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<ServiceVM>(
                    " Select S.ServiceID, S.ArabicName As ServiceName, ISNull(convert(varchar(50), CAST(S.CostPrice as money), -1), 0) As SCostPrice, " +
                    " ISNull(convert(varchar(50), CAST(S.SalePrice as money), -1), 0) As SSalePrice, " +
                    " ISNull(convert(varchar(50), CAST( " +
                    " ( " +
                      " Case When S.TaxPercentage = 0 Then 0 " +
                      " Else S.TaxPercentage / 100 " +
                      " End " +
                    " ) as NUMERIC(10,2)), -1), 0)  As STaxPercentage, " +
                    " S.ServiceGroupID, SG.ArabicName As ServiceGroupName,S.CostPrice,S.SalePrice,S.TaxPercentage,S.Note " +
                    " From[Services] S, ServiceGroups SG " +
                    " Where " +
                    " S.ServiceGroupID = SG.ServiceGroupID " +
                    " And " +
                    " S.CompanyID = SG.CompanyID " +
                    " And " +
                    " S.CompanyID = @CompanyID " +
                    " Order By ServiceID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ServiceVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<ServiceVM>(
                    " Select S.ServiceID, S.EnglishName As ServiceName, ISNull(convert(varchar(50), CAST(S.CostPrice as money), -1), 0) As SCostPrice, " +
                    " ISNull(convert(varchar(50), CAST(S.SalePrice as money), -1), 0) As SSalePrice, " +
                    " ISNull(convert(varchar(50), CAST( " +
                    " ( " +
                      " Case When S.TaxPercentage = 0 Then 0 " +
                      " Else S.TaxPercentage / 100 " +
                      " End " +
                    " ) as NUMERIC(10,2)), -1), 0)  As STaxPercentage, " +
                    " S.ServiceGroupID, SG.EnglishName As ServiceGroupName,S.CostPrice,S.SalePrice,S.TaxPercentage,S.Note " +
                    " From[Services] S, ServiceGroups SG " +
                    " Where " +
                    " S.ServiceGroupID = SG.ServiceGroupID " +
                    " And " +
                    " S.CompanyID = SG.CompanyID " +
                    " And " +
                    " S.CompanyID = @CompanyID " +
                    " Order By ServiceID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ServiceVM>();
                }
            }
        }
        public ServiceVM CheckAllService(int CompanyID , string AccountNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<ServiceVM>(
                    " Select S.ServiceID, S.ArabicName As ServiceName, ISNull(convert(varchar(50), CAST(S.CostPrice as money), -1), 0) As SCostPrice, " +
                    " ISNull(convert(varchar(50), CAST(S.SalePrice as money), -1), 0) As SSalePrice, " +
                    " ISNull(convert(varchar(50), CAST( " +
                    " ( " +
                      " Case When S.TaxPercentage = 0 Then 0 " +
                      " Else S.TaxPercentage / 100 " +
                      " End " +
                    " ) as NUMERIC(10,2)), -1), 0)  As STaxPercentage, " +
                    " S.ServiceGroupID, SG.ArabicName As ServiceGroupName,S.CostPrice,S.SalePrice,S.TaxPercentage,S.Note " +
                    " From[Services] S, ServiceGroups SG " +
                    " Where " +
                    " S.ServiceGroupID = SG.ServiceGroupID " +
                    " And " +
                    " S.CompanyID = SG.CompanyID " +
                    " And " +
                    " S.CompanyID = @CompanyID " +
                     " And " +
                    " S.ServiceID = @AccountNumber " +
                    " Order By ServiceID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new ServiceVM();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<ServiceVM>(
                    " Select S.ServiceID, S.EnglishName As ServiceName, ISNull(convert(varchar(50), CAST(S.CostPrice as money), -1), 0) As SCostPrice, " +
                    " ISNull(convert(varchar(50), CAST(S.SalePrice as money), -1), 0) As SSalePrice, " +
                    " ISNull(convert(varchar(50), CAST( " +
                    " ( " +
                      " Case When S.TaxPercentage = 0 Then 0 " +
                      " Else S.TaxPercentage / 100 " +
                      " End " +
                    " ) as NUMERIC(10,2)), -1), 0)  As STaxPercentage, " +
                    " S.ServiceGroupID, SG.EnglishName As ServiceGroupName,S.CostPrice,S.SalePrice,S.TaxPercentage,S.Note " +
                    " From[Services] S, ServiceGroups SG " +
                    " Where " +
                    " S.ServiceGroupID = SG.ServiceGroupID " +
                    " And " +
                    " S.CompanyID = SG.CompanyID " +
                    " And " +
                    " S.CompanyID = @CompanyID " +
                     " And " +
                    " S.ServiceID = @AccountNumber " +
                    " Order By ServiceID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new ServiceVM();
                }
            }
        }
        public IEnumerable<CompanyTransactionKind> GetPaymentVoucherCashFromTransactionKind(int CompanyID)
        {
            try

            {
                return _context.Database.SqlQuery<CompanyTransactionKind>(
                " Select * From CompanyTransactionKinds " +
                " where TransactionKindID in (select TransactionKindID from TransactionKinds where TransactionKindID = 5)  " +
                "and CompanyID=@CompanyID "



                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<CompanyTransactionKind>();
            }
        }
        public IEnumerable<CompanyTransactionKind> GetDebitNoteFromTransactionKind(int CompanyID)
        {
            try

            {
                return _context.Database.SqlQuery<CompanyTransactionKind>(
                " Select * From CompanyTransactionKinds " +
                " where TransactionKindID in (select TransactionKindID from TransactionKinds where TransactionKindID = 6)  " +
                "and CompanyID=@CompanyID "



                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<CompanyTransactionKind>();
            }
        }
        public IEnumerable<CompanyTransactionKind> GetCreditNoteFromTransactionKind(int CompanyID)
        {
            try

            {
                return _context.Database.SqlQuery<CompanyTransactionKind>(
                " Select * From CompanyTransactionKinds " +
                " where TransactionKindID in (select TransactionKindID from TransactionKinds where TransactionKindID = 7)  " +
                "and CompanyID=@CompanyID "



                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<CompanyTransactionKind>();
            }
        }


        public MutilUseSearchVM CheckAllTransActionAccountPurchase(int CompanyID, string AccountNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,ArabicName As AccountName,StoppedAccount  From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID=@CompanyID  and AccountTypeID in (10) " +
                    " And " +
                    "  AccountNumber=@AccountNumber  " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID=@CompanyID " +
                    " ) " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<MutilUseSearchVM>(
                    " Select AccountNumber,EnglishName As AccountName,StoppedAccount  From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID=@CompanyID   and AccountTypeID in (10) " +
                    " And " +
                    "  AccountNumber=@AccountNumber  " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID=@CompanyID " +
                    " ) " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new MutilUseSearchVM();
                }

            }
        }

        public void UpdateOpeiningBalance(int CompanyID, int Year, string AccountNo, double OpeningBalanceDebit, double OpeningBalanceCredit)
        {
            _context.Database.ExecuteSqlCommand(
                 "  Update   ChartOfAccounts " +
                 " set OpeningBalanceDebit=@OpeningBalanceDebit ,OpeningBalanceCredit=@OpeningBalanceCredit " +

                 " where CompanyID=@CompanyID and AccountNumber=@AccountNumber and  CompanyYear=@Year  "


                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@AccountNumber", AccountNo)
                    , new SqlParameter("@Year", Year)
                    , new SqlParameter("@OpeningBalanceDebit", OpeningBalanceDebit)
                    , new SqlParameter("@OpeningBalanceCredit", OpeningBalanceCredit)


                 );
        }

        public void DeleteTransActionTrans(int CompanyID, string VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear)
        {
            _context.Database.ExecuteSqlCommand(
                 " Delete  From Transactions " +
                 " where CompanyID=@CompanyID and VoucherNumber=@VoucherNumber and  CompanyTransactionKindNo=@CompanyTransactionKindNo  " +
                 "  And TransactionKindNo=@TransactionKindNo and CompanyYear=@CompanyYear "

                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)


                 );
        }
        public void DeleteSt_Transaction(int CompanyID, string VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear, string StockCode)
        {
            if (TransactionKindNo == 507)
            {
                _context.Database.ExecuteSqlCommand(
                                 " Delete  From St_Transaction " +
                                 " where CompanyID=@CompanyID and VoucherNumber=@VoucherNumber and  CompanyTransactionKindNo=@CompanyTransactionKindNo  " +
                                 "  And TransactionKindNo=@TransactionKindNo and CompanyYear=@CompanyYear "

                                 , new SqlParameter("@CompanyID", CompanyID)
                                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                                    , new SqlParameter("@CompanyYear", CompanyYear)
                                 );
            }
            else {
                _context.Database.ExecuteSqlCommand(
                 " Delete  From St_Transaction " +
                 " where CompanyID=@CompanyID and VoucherNumber=@VoucherNumber and  CompanyTransactionKindNo=@CompanyTransactionKindNo  " +
                 "  And TransactionKindNo=@TransactionKindNo and CompanyYear=@CompanyYear and StockCode=@StockCode "

                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)

                     , new SqlParameter("@StockCode", StockCode)
                 );
            }
        }
        public void DeletePaper(int CompanyID, string VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear)
        {
            _context.Database.ExecuteSqlCommand(
                 " Delete  From Papers " +
                 " where CompanyID=@CompanyID and OriginalVoucherNumber=@VoucherNumber and  OriginalCompanyTransactionKindNo=@CompanyTransactionKindNo  " +
                 "  And OriginalTransactionKindNo=@TransactionKindNo and CompanyYear=@CompanyYear "

                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)


                 );
        }
        public void DeletePaperNotUsed(int CompanyID, string VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear)
        {
            _context.Database.ExecuteSqlCommand(
                 " Delete  From Papers " +
                 " where CompanyID=@CompanyID and OriginalVoucherNumber=@VoucherNumber and  OriginalCompanyTransactionKindNo=@CompanyTransactionKindNo  " +
                 "  And OriginalTransactionKindNo=@TransactionKindNo and CompanyYear=@CompanyYear and ChequeCase = 1 "

                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)


                 );
        }
        public void DeletePaymentPaperNotUsed(int CompanyID, string VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear)
        {
            _context.Database.ExecuteSqlCommand(
                 " Delete  From Papers " +
                 " where CompanyID=@CompanyID and OriginalVoucherNumber=@VoucherNumber and  OriginalCompanyTransactionKindNo=@CompanyTransactionKindNo  " +
                 "  And OriginalTransactionKindNo=@TransactionKindNo and CompanyYear=@CompanyYear and ChequeCase = 14 "

                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)


                 );
        }
        public void DeletePaymentPaperNotUsedInTransaction(int CompanyID, string VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear)
        {
            _context.Database.ExecuteSqlCommand(
                 " Delete  From Transactions " +
                 " Where " +
                 " VoucherNumber in (Select P.OriginalVoucherNumber From Papers P " +
                 " Where  P.CompanyID = @CompanyID " +
                 " And P.ChequeCase = 14 " +
                 " And P.OriginalTransactionKindNo = @TransactionKindNo " +
                 " And P.CompanyYear = @CompanyYear " +
                 " And P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                 " And P.OriginalVoucherNumber = @VoucherNumber ) " +
                 " And " +
                 " TransactionKindNo in (Select P.OriginalTransactionKindNo From Papers P " +
                 " Where  P.CompanyID = @CompanyID " +
                 " And P.ChequeCase = 14 " +
                 " And P.OriginalTransactionKindNo = @TransactionKindNo " +
                 " And P.CompanyYear = @CompanyYear " +
                 " And P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                 " And P.OriginalVoucherNumber = @VoucherNumber ) " +
                 " And " +
                 " CompanyID in (Select P.CompanyID From Papers P " +
                 " Where  P.CompanyID = @CompanyID " +
                 " And P.ChequeCase = 14 " +
                 " And P.OriginalTransactionKindNo = @TransactionKindNo " +
                 " And P.CompanyYear = @CompanyYear " +
                 " And P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                 " And P.OriginalVoucherNumber = @VoucherNumber ) " +
                 " And " +
                 " CompanyYear in (Select P.CompanyYear From Papers P " +
                 " Where  P.CompanyID = @CompanyID " +
                 " And P.ChequeCase = 14 " +
                 " And P.OriginalTransactionKindNo = @TransactionKindNo " +
                 " And P.CompanyYear = @CompanyYear " +
                 " And P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                 " And P.OriginalVoucherNumber = @VoucherNumber ) " +
                 " And " +
                 " RowNumber - 1 in (Select P.RowNumber From Papers P " +
                 " Where  P.CompanyID = @CompanyID " +
                 " And P.ChequeCase = 14 " +
                 " And P.OriginalTransactionKindNo = @TransactionKindNo " +
                 " And P.CompanyYear = @CompanyYear " +
                 " And P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                 " And P.OriginalVoucherNumber = @VoucherNumber ) " +
                 " And " +
                 " CompanyTransactionKindNo in (Select P.OriginalCompanyTransactionKindNo From Papers P " +
                 " Where  P.CompanyID = @CompanyID " +
                 " And P.ChequeCase = 14 " +
                 " And P.OriginalTransactionKindNo = @TransactionKindNo " +
                 " And P.CompanyYear = @CompanyYear " +
                 " And P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                 " And P.OriginalVoucherNumber = @VoucherNumber ) " +
                 " And " +
                 " Credit > 0 "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                 , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                 , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                 );
        }
        public double GetSumPaperUsed(int CompanyID, string VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear)
        {
            double Total = _context.Database.SqlQuery<double>(" Select IsNull(Sum(ChequeAmount),0) As Total From Papers " +
                " where CompanyID=@CompanyID and OriginalVoucherNumber=@VoucherNumber and  OriginalCompanyTransactionKindNo=@CompanyTransactionKindNo  " +
                 "  And OriginalTransactionKindNo=@TransactionKindNo and CompanyYear=@CompanyYear and ChequeCase not in(1) "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                 , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                ).First();

            return Total;
        }
        public double GetSumPaymnetPaperUsed(int CompanyID, string VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear)
        {
            double Total = _context.Database.SqlQuery<double>(" Select IsNull(Sum(ChequeAmount),0) As Total From Papers " +
                " where CompanyID=@CompanyID and OriginalVoucherNumber=@VoucherNumber and  OriginalCompanyTransactionKindNo=@CompanyTransactionKindNo  " +
                 "  And OriginalTransactionKindNo=@TransactionKindNo and CompanyYear=@CompanyYear and ChequeCase not in(14) "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                 , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                ).First();

            return Total;
        }
        public int GetCountPaperUsed(int CompanyID, string VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear)
        {
            int Total = _context.Database.SqlQuery<int>(" Select IsNull(Count(*),0) As Total From Papers " +
                " where CompanyID=@CompanyID and OriginalVoucherNumber=@VoucherNumber and  OriginalCompanyTransactionKindNo=@CompanyTransactionKindNo  " +
                 "  And OriginalTransactionKindNo=@TransactionKindNo and CompanyYear=@CompanyYear and ChequeCase not in(1) "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                 , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                ).First();

            return Total;
        }
        public int GetCountPaymentPaperUsed(int CompanyID, string VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear)
        {
            int Total = _context.Database.SqlQuery<int>(" Select IsNull(Count(*),0) As Total From Papers " +
                " where CompanyID=@CompanyID and OriginalVoucherNumber=@VoucherNumber and  OriginalCompanyTransactionKindNo=@CompanyTransactionKindNo  " +
                 "  And OriginalTransactionKindNo=@TransactionKindNo and CompanyYear=@CompanyYear and ChequeCase not in(14) "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                 , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                ).First();

            return Total;
        }
        public IEnumerable<Paper> GetRowNumberPaperUsed(int CompanyID, string VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear)
        {
            try
            {
                return _context.Database.SqlQuery<Paper>(
                " Select * " +
                " From Papers " +
                " where CompanyID=@CompanyID and OriginalVoucherNumber=@VoucherNumber and  OriginalCompanyTransactionKindNo=@CompanyTransactionKindNo  " +
                "  And OriginalTransactionKindNo=@TransactionKindNo and CompanyYear=@CompanyYear and ChequeCase not in(1) " +
                " Order By RowNumber "
                , new SqlParameter("@VoucherNumber", VoucherNumber)
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                , new SqlParameter("@CompanyYear", CompanyYear)
                ).ToList();
            }
            catch
            {
                return new List<Paper>();
            }
        }
        public IEnumerable<Paper> GetRowNumberPaymentPaperUsed(int CompanyID, string VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear)
        {
            try
            {
                return _context.Database.SqlQuery<Paper>(
                " Select * " +
                " From Papers " +
                " where CompanyID=@CompanyID and OriginalVoucherNumber=@VoucherNumber and  OriginalCompanyTransactionKindNo=@CompanyTransactionKindNo  " +
                "  And OriginalTransactionKindNo=@TransactionKindNo and CompanyYear=@CompanyYear and ChequeCase not in(14) " +
                " Order By RowNumber "
                , new SqlParameter("@VoucherNumber", VoucherNumber)
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                , new SqlParameter("@CompanyYear", CompanyYear)
                ).ToList();
            }
            catch
            {
                return new List<Paper>();
            }
        }
        public IEnumerable<Transaction> GetRowNumberPaymentPaperUsedInTransaction(int CompanyID, string VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear)
        {
            try
            {
                return _context.Database.SqlQuery<Transaction>(
                " Select * " +
                " From Transactions T " +
                " Where " +
                 " T.VoucherNumber in (Select P.OriginalVoucherNumber From Papers P " +
                 " Where  P.CompanyID = @CompanyID " +
                 " And P.ChequeCase not in(14)  " +
                 " And P.OriginalTransactionKindNo = @TransactionKindNo " +
                 " And P.CompanyYear = @CompanyYear " +
                 " And P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                 " And P.OriginalVoucherNumber = @VoucherNumber ) " +
                 " And " +
                 " T.TransactionKindNo in (Select P.OriginalTransactionKindNo From Papers P " +
                 " Where  P.CompanyID = @CompanyID " +
                 " And P.ChequeCase not in(14)  " +
                 " And P.OriginalTransactionKindNo = @TransactionKindNo " +
                 " And P.CompanyYear = @CompanyYear " +
                 " And P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                 " And P.OriginalVoucherNumber = @VoucherNumber ) " +
                 " And " +
                 " T.CompanyID in (Select P.CompanyID From Papers P " +
                 " Where  P.CompanyID = @CompanyID " +
                 " And P.ChequeCase not in(14)  " +
                 " And P.OriginalTransactionKindNo = @TransactionKindNo " +
                 " And P.CompanyYear = @CompanyYear " +
                 " And P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                 " And P.OriginalVoucherNumber = @VoucherNumber ) " +
                 " And " +
                 " T.CompanyYear in (Select P.CompanyYear From Papers P " +
                 " Where  P.CompanyID = @CompanyID " +
                 " And P.ChequeCase not in(14)  " +
                 " And P.OriginalTransactionKindNo = @TransactionKindNo " +
                 " And P.CompanyYear = @CompanyYear " +
                 " And P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                 " And P.OriginalVoucherNumber = @VoucherNumber ) " +
                 " And " +
                 " T.RowNumber - 1 in (Select P.RowNumber From Papers P " +
                 " Where  P.CompanyID = @CompanyID " +
                 " And P.ChequeCase not in(14)  " +
                 " And P.OriginalTransactionKindNo = @TransactionKindNo " +
                 " And P.CompanyYear = @CompanyYear " +
                 " And P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                 " And P.OriginalVoucherNumber = @VoucherNumber ) " +
                 " And " +
                 " T.CompanyTransactionKindNo in (Select P.OriginalCompanyTransactionKindNo From Papers P " +
                 " Where  P.CompanyID = @CompanyID " +
                 " And P.ChequeCase not in(14)  " +
                 " And P.OriginalTransactionKindNo = @TransactionKindNo " +
                 " And P.CompanyYear = @CompanyYear " +
                 " And P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                 " And P.OriginalVoucherNumber = @VoucherNumber ) " +
                 " And " +
                 " T.Credit > 0 " +
                " Order By T.RowNumber "
                , new SqlParameter("@VoucherNumber", VoucherNumber)
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                , new SqlParameter("@CompanyYear", CompanyYear)
                ).ToList();
            }
            catch
            {
                return new List<Transaction>();
            }
        }
        public void DeleteTempPrepaidAndRevenueReceivedDetails(int CompanyID, string VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear)
        {
            _context.Database.ExecuteSqlCommand(
                 " Delete  From TempPrepaidAndRevenueReceivedDetails " +
                 " where CompanyID=@CompanyID and VoucherNumber=@VoucherNumber and  CompanyTransactionKindNo=@CompanyTransactionKindNo  " +
                 "  And TransactionKindNo=@TransactionKindNo and CompanyYear=@CompanyYear "

                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)


                 );
        }

        public void DeleteTempPrepaidAndRevenueReceivedDetailsWithoutExport(int CompanyID, string VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear)
        {
            _context.Database.ExecuteSqlCommand(
                 " Delete  From TempPrepaidAndRevenueReceivedDetails " +
                 " where CompanyID=@CompanyID and VoucherNumber=@VoucherNumber and  CompanyTransactionKindNo=@CompanyTransactionKindNo  " +
                 "  And TransactionKindNo=@TransactionKindNo and CompanyYear=@CompanyYear and Exported = 0 "

                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)


                 );
        }
        public void DeleteTransActionDebit(int CompanyID, string VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear)
        {
            _context.Database.ExecuteSqlCommand(
                 " Delete  From Transactions " +
                 " where CompanyID=@CompanyID and VoucherNumber=@VoucherNumber and  CompanyTransactionKindNo=@CompanyTransactionKindNo  " +
                 "  And TransactionKindNo=@TransactionKindNo and CompanyYear=@CompanyYear and Debit > 0 "

                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)


                 );
        }

        public void DeleteTransActionCredit(int CompanyID, string VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear)
        {
            _context.Database.ExecuteSqlCommand(
                 " Delete  From Transactions " +
                 " where CompanyID=@CompanyID and VoucherNumber=@VoucherNumber and  CompanyTransactionKindNo=@CompanyTransactionKindNo  " +
                 "  And TransactionKindNo=@TransactionKindNo and CompanyYear=@CompanyYear and Credit > 0 "

                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)


                 );
        }
        public IEnumerable<TransActionFilter> GetHeadersForReport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<TransActionFilter>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName,H.CompanyYear , " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN N'غير مرحل' " +
                      " ELSE N'مرحل' " +
                      " END " +
                    ") As Export, " +

                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID, " +
                    " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo in (1,14) " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<TransActionFilter>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<TransActionFilter>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName,H.CompanyYear , " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN 'UnExport' " +
                      " ELSE 'Export' " +
                      " END " +
                    ") As Export, " +

                    " C.EnglishName As CurrencyName,A.UserName, " +
                    " C.CurrencyID, " +
                    " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo in (1,14) " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<TransActionFilter>();
                }
            }
        }
        public string GetAccountName(int CompanyID, string AccountNumber)
        {

            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    string AccountName = _context.Database.SqlQuery<string>("select ArabicName from ChartOfAccounts " +
                    "where  CompanyID =@CompanyID  and  AccountNumber=@AccountNumber "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@AccountNumber", AccountNumber)

                    ).First();

                    return AccountName;
                }
                catch
                {
                    return "";
                }
            }
            else
            {
                try
                {
                    string AccountName = _context.Database.SqlQuery<string>("select EnglishName from ChartOfAccounts " +
                    "where  CompanyID =@CompanyID  and  AccountNumber=@AccountNumber "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@AccountNumber", AccountNumber)

                    ).First();

                    return AccountName;
                }
                catch
                {
                    return "";
                }
            }

        }
        public string GetCostCenterName(int CompanyID, string CostCenterNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    string CostCenterName = _context.Database.SqlQuery<string>("select ArabicName from CostCenters " +
                    "where  CompanyID =@CompanyID  and  CostNumber=@CostCenterNumber "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@CostCenterNumber", CostCenterNumber)

                    ).First();

                    return CostCenterName;
                }
                catch
                {
                    return "";
                }
            }
            else
            {
                try
                {
                    string CostCenterName = _context.Database.SqlQuery<string>("select EnglishName from CostCenters " +
                    "where  CompanyID =@CompanyID  and  CostNumber=@CostCenterNumber "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@CostCenterNumber", CostCenterNumber)

                    ).First();

                    return CostCenterName;
                }
                catch
                {
                    return "";
                }
            }

        }
        public string GetCustomerCityName(int CompanyID, int CustomerCityID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    string CustomerCityName = _context.Database.SqlQuery<string>("select ArabicName from CustomerCities " +
                    "where  CompanyID =@CompanyID  and  CustomerCityID=@CustomerCityID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@CustomerCityID", CustomerCityID)

                    ).First();

                    return CustomerCityName;
                }
                catch
                {
                    return "";
                }
            }
            else
            {
                try
                {
                    string CustomerCityName = _context.Database.SqlQuery<string>("select EnglishName from CustomerCities " +
                    "where  CompanyID =@CompanyID  and  CustomerCityID=@CustomerCityID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@CustomerCityID", CustomerCityID)

                    ).First();

                    return CustomerCityName;
                }
                catch
                {
                    return "";
                }
            }

        }
        public string GetSupplierBankName(int CompanyID, int SupplierBankID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    string SupplierBankName = _context.Database.SqlQuery<string>("select ArabicName from SupplierBanks " +
                    "where  CompanyID =@CompanyID  and  SupplierBankID=@SupplierBankID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@SupplierBankID", SupplierBankID)

                    ).First();

                    return SupplierBankName;
                }
                catch
                {
                    return "";
                }
            }
            else
            {
                try
                {
                    string SupplierBankName = _context.Database.SqlQuery<string>("select EnglishName from SupplierBanks " +
                    "where  CompanyID =@CompanyID  and  SupplierBankID=@SupplierBankID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@SupplierBankID", SupplierBankID)

                    ).First();

                    return SupplierBankName;
                }
                catch
                {
                    return "";
                }
            }

        }
        public string GetSupplierCountryName(int CompanyID, int SupplierCountryID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    string SupplierCountryName = _context.Database.SqlQuery<string>("select ArabicName from SupplierCountries " +
                    "where  CompanyID =@CompanyID  and  SupplierCountryID=@SupplierCountryID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@SupplierCountryID", SupplierCountryID)

                    ).First();

                    return SupplierCountryName;
                }
                catch
                {
                    return "";
                }
            }
            else
            {
                try
                {
                    string SupplierCountryName = _context.Database.SqlQuery<string>("select EnglishName from SupplierCountries " +
                    "where  CompanyID =@CompanyID  and  SupplierCountryID=@SupplierCountryID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@SupplierCountryID", SupplierCountryID)

                    ).First();

                    return SupplierCountryName;
                }
                catch
                {
                    return "";
                }
            }

        }
        public string GetSupplierCountryBankName(int CompanyID, int SupplierCountryBankID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    string SupplierCountryBankName = _context.Database.SqlQuery<string>("select ArabicName from SupplierCountryBanks " +
                    "where  CompanyID =@CompanyID  and  SupplierCountryBankID=@SupplierCountryBankID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@SupplierCountryBankID", SupplierCountryBankID)

                    ).First();

                    return SupplierCountryBankName;
                }
                catch
                {
                    return "";
                }
            }
            else
            {
                try
                {
                    string SupplierCountryBankName = _context.Database.SqlQuery<string>("select EnglishName from SupplierCountryBanks " +
                    "where  CompanyID =@CompanyID  and  SupplierCountryBankID=@SupplierCountryBankID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@SupplierCountryBankID", SupplierCountryBankID)

                    ).First();

                    return SupplierCountryBankName;
                }
                catch
                {
                    return "";
                }
            }

        }
        public IEnumerable<DebitNoteFilterVM> GetAllDebitNoteFromHeader(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<DebitNoteFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName,H.CompanyYear , " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo,H.SaleID, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " ( " +
                      " Select S.SalesName From Sales S " +
                      " Where " +
                      " H.CompanyID = S.CompanyID " +
                      " And " +
                      " H.SaleID = S.SalesID " +
                    " ) As SalesName, " +
                    " H.TotalDebit TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN N'غير مرحل' " +
                      " ELSE N'مرحل' " +
                      " END " +
                    ") As Export, " +
                    " C.ArabicName As CurrencyName,A.UserName,C.CurrencyID, " +
                    " ( " +
                      " Select C.ArabicName " +
                      " From ChartOfAccounts C, Transactions T " +
                      " Where " +
                      " C.AccountNumber = T.AccountNumber " +
                      " And " +
                      " H.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " T.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " T.Debit > 0 " +
                     " ) As PaidAccountName, " +
                     " ( " +
                       " Select T.AccountNumber " +
                       " From Transactions T " +
                       " Where " +
                       " H.CompanyID = C.CompanyID " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " T.Debit > 0 " +
                    " ) As PaidAccountNumber, " +
                     " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 6 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<DebitNoteFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<DebitNoteFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, H.CompanyYear , " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo,H.SaleID, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " ( " +
                      " Select S.SalesName From Sales S " +
                      " Where " +
                      " H.CompanyID = S.CompanyID " +
                      " And " +
                      " H.SaleID = S.SalesID " +
                    " ) As SalesName, " +
                    " H.TotalDebit As TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN 'UnExport' " +
                      " ELSE 'Export' " +
                      " END " +
                    ") As Export, " +
                    " C.EnglishName As CurrencyName,A.UserName,C.CurrencyID, " +
                    " ( " +
                      " Select C.EnglishName " +
                      " From ChartOfAccounts C, Transactions T " +
                      " Where " +
                      " C.AccountNumber = T.AccountNumber " +
                      " And " +
                      " H.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " T.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " T.Credit > 0 " +
                     " ) As PaidAccountName, " +
                     " ( " +
                       " Select T.AccountNumber " +
                       " From Transactions T " +
                       " Where " +
                       " H.CompanyID = C.CompanyID " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " T.Credit > 0 " +
                    " ) As PaidAccountNumber, " +
                     " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 6 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<DebitNoteFilterVM>();
                }
            }
        }
        public IEnumerable<DepositInTheBankFilter> GetAllDepositInTheBankFromHeader(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<DepositInTheBankFilter>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, H.CompanyTransactionKindNo,H.Exported, H.CompanyYear ," +
                    " H.VoucherNumber, H.VoucherDate,H.TransactionKindNo, " +
                    " H.TotalDebit TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN N'غير مرحل' " +
                      " ELSE N'مرحل' " +
                      " END " +
                    ") As Export, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID, " +
                    " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H,Currencies As C,AspNetUsers A ,CompanyTransactionKinds CT " +
                    " Where " +
                    " H.TransactionKindNo = 16 " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<DepositInTheBankFilter>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<DepositInTheBankFilter>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName,H.CompanyTransactionKindNo,H.Exported, H.CompanyYear ," +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN 'UnExport' " +
                      " ELSE 'Export' " +
                      " END " +
                    ") As Export, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID, " +
                    " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H,Currencies As C,AspNetUsers A,CompanyTransactionKinds CT " +
                    " Where " +
                    " H.TransactionKindNo = 16 " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<DepositInTheBankFilter>();
                }
            }
        }
        public IEnumerable<TempPrepaidAndRevenueReceivedFilterVM> GetAllTempPrepaid(int CompanyID, DateTime Fromdate, DateTime ToDate, DateTime FromDateFirstPayment, DateTime ToDateFirstPayment)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedFilterVM>(
                    " Select T.VoucherNumber, T.VoucherDate, T.Total, T.DateFirstPayment, T.NumberOfPayments, T.Note, A.UserName, T.CompanyTransactionKindNo, T.TransactionKindNo,  T.CompanyYear, " +
                    " (T.NumberOfPayments - (Select COUNT(*) From TempPrepaidAndRevenueReceivedDetails TD Where TD.Exported = 1 " +
                    " And TD.CompanyID = T.CompanyID And TD.VoucherNumber = T.VoucherNumber And " +
                    " TD.TransactionKindNo = T.TransactionKindNo And TD.CompanyID =@CompanyID And " +
                    " TD.CompanyTransactionKindNo = T.CompanyTransactionKindNo And TD.TransactionKindNo = 17)) As RemainingPayments, " +
                    " (T.Total - (Select ISNULL(Sum(Amount), 0) From TempPrepaidAndRevenueReceivedDetails TD Where TD.Exported = 1 " +
                    " And TD.CompanyID = T.CompanyID And TD.VoucherNumber = T.VoucherNumber And " +
                    " TD.TransactionKindNo = T.TransactionKindNo And TD.CompanyID = @CompanyID And " +
                    " TD.CompanyTransactionKindNo = T.CompanyTransactionKindNo And TD.TransactionKindNo = 17 )) As RemainingAmount, " +
                    " (T.NumberOfPAyments - (T.NumberOfPayments - (Select COUNT(*) From TempPrepaidAndRevenueReceivedDetails TD Where TD.Exported = 1 " +
                    " And TD.CompanyID = T.CompanyID And TD.VoucherNumber = T.VoucherNumber And " +
                    " TD.TransactionKindNo = T.TransactionKindNo And TD.CompanyID = @CompanyID And " +
                    " TD.CompanyTransactionKindNo = T.CompanyTransactionKindNo And TD.TransactionKindNo = 17))) As Differences, " +
                    " TD.FromAccountNumber As ExpenseAccountNumber,TD.ToAccountNumber As PrepaidExpenseAccountNumber, " +
                    " TD.FromCostCenter As ExpenseCostNumber,TD.ToCostCenter As PrepaidExpenseCostNumber, " +
                    " (Select C.ArabicName From ChartOfAccounts C Where TD.FromAccountNumber = C.AccountNumber And " +
                    " C.CompanyID = TD.CompanyID) As ExpenseAccountName, " +
                    " (Select C.ArabicName From ChartOfAccounts C Where TD.ToAccountNumber = C.AccountNumber And " +
                    " C.CompanyID = TD.CompanyID) As PrepaidExpenseAccountName, " +
                    " (Select CC.ArabicName From CostCenters CC Where TD.FromCostCenter = CC.CostNumber And " +
                    " CC.CompanyID = TD.CompanyID) As ExpenseCostName, " +
                    " (Select CC.ArabicName From CostCenters CC Where TD.ToCostCenter = CC.CostNumber And " +
                    " CC.CompanyID = TD.CompanyID) As PrepaidExpenseCostName, " +
                    " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = T.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= T.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= T.VoucherDate " +
                      " ) As CheckCase " +
                    " From TempPrepaidAndRevenueReceiveds T,AspNetUsers A, TempPrepaidAndRevenueReceivedDetails TD " +
                    " Where " +
                    " T.CompanyID =@CompanyID " +
                    " And " +
                    " T.TransactionKindNo = 17 " +
                    " And " +
                    " T.CompanyID = A.fCompanyId " +
                    " And " +
                    " T.InsUserID = A.Id " +
                    " And " +
                    " T.CompanyID = TD.CompanyID " +
                    " And " +
                    " T.TransactionKindNo = TD.TransactionKindNo " +
                    " And " +
                    " T.VoucherNumber = TD.VoucherNumber " +
                    " And " +
                    " TD.RowNumber = 1 " +
                    " And " +
                    " T.VoucherDate >= @FromDate " +
                    " And " +
                    " T.VoucherDate <= @ToDate " +
                    " And " +
                    " T.DateFirstPayment >= @FromDateFirstPayment " +
                    " And " +
                    " T.DateFirstPayment <= @ToDateFirstPayment " +
                    " Order By T.VoucherDate "
                     , new SqlParameter("@FromDate", Fromdate)
                     , new SqlParameter("@ToDate", ToDate)
                     , new SqlParameter("@FromDateFirstPayment", FromDateFirstPayment)
                     , new SqlParameter("@ToDateFirstPayment", ToDateFirstPayment)
                     , new SqlParameter("@CompanyID", CompanyID)

                 ).ToList();
                }
                catch
                {
                    return new List<TempPrepaidAndRevenueReceivedFilterVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedFilterVM>(
                    " Select T.VoucherNumber, T.VoucherDate, T.Total, T.DateFirstPayment, T.NumberOfPayments, T.Note, A.UserName, T.CompanyTransactionKindNo, T.TransactionKindNo,  T.CompanyYear,  " +
                    " (T.NumberOfPayments - (Select COUNT(*) From TempPrepaidAndRevenueReceivedDetails TD Where TD.Exported = 1 " +
                    " And TD.CompanyID = T.CompanyID And TD.VoucherNumber = T.VoucherNumber And " +
                    " TD.TransactionKindNo = T.TransactionKindNo And TD.CompanyID =@CompanyID And " +
                    " TD.CompanyTransactionKindNo = T.CompanyTransactionKindNo And TD.TransactionKindNo = 17)) As RemainingPayments, " +
                    " (T.Total - (Select ISNULL(Sum(Amount), 0) From TempPrepaidAndRevenueReceivedDetails TD Where TD.Exported = 1 " +
                    " And TD.CompanyID = T.CompanyID And TD.VoucherNumber = T.VoucherNumber And " +
                    " TD.TransactionKindNo = T.TransactionKindNo And TD.CompanyID = @CompanyID And " +
                    " TD.CompanyTransactionKindNo = T.CompanyTransactionKindNo And TD.TransactionKindNo = 17 )) As RemainingAmount, " +
                    " (T.NumberOfPAyments - (T.NumberOfPayments - (Select COUNT(*) From TempPrepaidAndRevenueReceivedDetails TD Where TD.Exported = 1 " +
                    " And TD.CompanyID = T.CompanyID And TD.VoucherNumber = T.VoucherNumber And " +
                    " TD.TransactionKindNo = T.TransactionKindNo And TD.CompanyID = @CompanyID And " +
                    " TD.CompanyTransactionKindNo = T.CompanyTransactionKindNo And TD.TransactionKindNo = 17))) As Differences, " +
                    " TD.FromAccountNumber As ExpenseAccountNumber,TD.ToAccountNumber As PrepaidExpenseAccountNumber, " +
                    " TD.FromCostCenter As ExpenseCostNumber,TD.ToCostCenter As PrepaidExpenseCostNumber, " +
                    " (Select C.EnglishName From ChartOfAccounts C Where TD.FromAccountNumber = C.AccountNumber And " +
                    " C.CompanyID = TD.CompanyID) As ExpenseAccountName, " +
                    " (Select C.EnglishName From ChartOfAccounts C Where TD.ToAccountNumber = C.AccountNumber And " +
                    " C.CompanyID = TD.CompanyID) As PrepaidExpenseAccountName, " +
                    " (Select CC.EnglishName From CostCenters CC Where TD.FromCostCenter = CC.CostNumber And " +
                    " CC.CompanyID = TD.CompanyID) As ExpenseCostName, " +
                    " (Select CC.EnglishName From CostCenters CC Where TD.ToCostCenter = CC.CostNumber And " +
                    " CC.CompanyID = TD.CompanyID) As PrepaidExpenseCostName, " +
                    " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = T.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= T.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= T.VoucherDate " +
                      " ) As CheckCase " +
                    " From TempPrepaidAndRevenueReceiveds T,AspNetUsers A, TempPrepaidAndRevenueReceivedDetails TD " +
                    " Where " +
                    " T.CompanyID =@CompanyID " +
                    " And " +
                    " T.TransactionKindNo = 17 " +
                    " And " +
                    " T.CompanyID = A.fCompanyId " +
                    " And " +
                    " T.InsUserID = A.Id " +
                    " And " +
                    " T.CompanyID = TD.CompanyID " +
                    " And " +
                    " T.TransactionKindNo = TD.TransactionKindNo " +
                    " And " +
                    " T.VoucherNumber = TD.VoucherNumber " +
                    " And " +
                    " TD.RowNumber = 1 " +
                    " And " +
                    " T.VoucherDate >= @FromDate " +
                    " And " +
                    " T.VoucherDate <= @ToDate " +
                    " And " +
                    " T.DateFirstPayment >= @FromDateFirstPayment " +
                    " And " +
                    " T.DateFirstPayment <= @ToDateFirstPayment " +
                    " Order By T.VoucherDate "
                     , new SqlParameter("@FromDate", Fromdate)
                     , new SqlParameter("@ToDate", ToDate)
                     , new SqlParameter("@FromDateFirstPayment", FromDateFirstPayment)
                     , new SqlParameter("@ToDateFirstPayment", ToDateFirstPayment)
                     , new SqlParameter("@CompanyID", CompanyID)

                 ).ToList();
                }
                catch
                {
                    return new List<TempPrepaidAndRevenueReceivedFilterVM>();
                }
            }
        }
        public IEnumerable<TempPrepaidAndRevenueReceivedFilterVM> GetAllTempRevenue(int CompanyID, DateTime Fromdate, DateTime ToDate, DateTime FromDateFirstPayment, DateTime ToDateFirstPayment)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedFilterVM>(
                    " Select T.VoucherNumber, T.VoucherDate, T.Total, T.DateFirstPayment, T.NumberOfPayments, T.Note, A.UserName, T.CompanyTransactionKindNo, T.TransactionKindNo, T.CompanyYear ," +
                    " (T.NumberOfPayments - (Select COUNT(*) From TempPrepaidAndRevenueReceivedDetails TD Where TD.Exported = 1 " +
                    " And TD.CompanyID = T.CompanyID And TD.VoucherNumber = T.VoucherNumber And " +
                    " TD.TransactionKindNo = T.TransactionKindNo And TD.CompanyID =@CompanyID And " +
                    " TD.CompanyTransactionKindNo = T.CompanyTransactionKindNo And TD.TransactionKindNo = 18)) As RemainingPayments, " +
                    " (T.Total - (Select ISNULL(Sum(Amount), 0) From TempPrepaidAndRevenueReceivedDetails TD Where TD.Exported = 1 " +
                    " And TD.CompanyID = T.CompanyID And TD.VoucherNumber = T.VoucherNumber And " +
                    " TD.TransactionKindNo = T.TransactionKindNo And TD.CompanyID = @CompanyID And " +
                    " TD.CompanyTransactionKindNo = T.CompanyTransactionKindNo And TD.TransactionKindNo = 18 )) As RemainingAmount, " +
                    " (T.NumberOfPAyments - (T.NumberOfPayments - (Select COUNT(*) From TempPrepaidAndRevenueReceivedDetails TD Where TD.Exported = 1 " +
                    " And TD.CompanyID = T.CompanyID And TD.VoucherNumber = T.VoucherNumber And " +
                    " TD.TransactionKindNo = T.TransactionKindNo And TD.CompanyID = @CompanyID And " +
                    " TD.CompanyTransactionKindNo = T.CompanyTransactionKindNo And TD.TransactionKindNo = 18))) As Differences, " +
                    " TD.FromAccountNumber As RevenueReceivedAccountNumber,TD.ToAccountNumber As RevenueAccountNumber, " +
                    " TD.FromCostCenter As RevenueReceivedCostNumber,TD.ToCostCenter As RevenueCostNumber, " +
                    " (Select C.ArabicName From ChartOfAccounts C Where TD.FromAccountNumber = C.AccountNumber And " +
                    " C.CompanyID = TD.CompanyID) As RevenueReceivedAccountName, " +
                    " (Select C.ArabicName From ChartOfAccounts C Where TD.ToAccountNumber = C.AccountNumber And " +
                    " C.CompanyID = TD.CompanyID) As RevenueAccountName, " +
                    " (Select CC.ArabicName From CostCenters CC Where TD.FromCostCenter = CC.CostNumber And " +
                    " CC.CompanyID = TD.CompanyID) As RevenueReceivedCostName, " +
                    " (Select CC.ArabicName From CostCenters CC Where TD.ToCostCenter = CC.CostNumber And " +
                    " CC.CompanyID = TD.CompanyID) As RevenueCostName, " +
                    " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = T.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= T.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= T.VoucherDate " +
                      " ) As CheckCase " +
                    " From TempPrepaidAndRevenueReceiveds T,AspNetUsers A, TempPrepaidAndRevenueReceivedDetails TD " +
                    " Where " +
                    " T.CompanyID =@CompanyID " +
                    " And " +
                    " T.TransactionKindNo = 18 " +
                    " And " +
                    " T.CompanyID = A.fCompanyId " +
                    " And " +
                    " T.InsUserID = A.Id " +
                    " And " +
                    " T.CompanyID = TD.CompanyID " +
                    " And " +
                    " T.TransactionKindNo = TD.TransactionKindNo " +
                    " And " +
                    " T.VoucherNumber = TD.VoucherNumber " +
                    " And " +
                    " TD.RowNumber = 1 " +
                    " And " +
                    " T.VoucherDate >= @FromDate " +
                    " And " +
                    " T.VoucherDate <= @ToDate " +
                    " And " +
                    " T.DateFirstPayment >= @FromDateFirstPayment " +
                    " And " +
                    " T.DateFirstPayment <= @ToDateFirstPayment " +
                    " Order By T.VoucherDate "
                     , new SqlParameter("@FromDate", Fromdate)
                     , new SqlParameter("@ToDate", ToDate)
                     , new SqlParameter("@FromDateFirstPayment", FromDateFirstPayment)
                     , new SqlParameter("@ToDateFirstPayment", ToDateFirstPayment)
                     , new SqlParameter("@CompanyID", CompanyID)

                 ).ToList();
                }
                catch
                {
                    return new List<TempPrepaidAndRevenueReceivedFilterVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedFilterVM>(
                    " Select T.VoucherNumber, T.VoucherDate, T.Total, T.DateFirstPayment, T.NumberOfPayments, T.Note, A.UserName, T.CompanyTransactionKindNo, T.TransactionKindNo, T.CompanyYear, " +
                    " (T.NumberOfPayments - (Select COUNT(*) From TempPrepaidAndRevenueReceivedDetails TD Where TD.Exported = 1 " +
                    " And TD.CompanyID = T.CompanyID And TD.VoucherNumber = T.VoucherNumber And " +
                    " TD.TransactionKindNo = T.TransactionKindNo And TD.CompanyID =@CompanyID And " +
                    " TD.CompanyTransactionKindNo = T.CompanyTransactionKindNo And TD.TransactionKindNo = 18)) As RemainingPayments, " +
                    " (T.Total - (Select ISNULL(Sum(Amount), 0) From TempPrepaidAndRevenueReceivedDetails TD Where TD.Exported = 1 " +
                    " And TD.CompanyID = T.CompanyID And TD.VoucherNumber = T.VoucherNumber And " +
                    " TD.TransactionKindNo = T.TransactionKindNo And TD.CompanyID = @CompanyID And " +
                    " TD.CompanyTransactionKindNo = T.CompanyTransactionKindNo And TD.TransactionKindNo = 18 )) As RemainingAmount, " +
                    " (T.NumberOfPAyments - (T.NumberOfPayments - (Select COUNT(*) From TempPrepaidAndRevenueReceivedDetails TD Where TD.Exported = 1 " +
                    " And TD.CompanyID = T.CompanyID And TD.VoucherNumber = T.VoucherNumber And " +
                    " TD.TransactionKindNo = T.TransactionKindNo And TD.CompanyID = @CompanyID And " +
                    " TD.CompanyTransactionKindNo = T.CompanyTransactionKindNo And TD.TransactionKindNo = 18))) As Differences, " +
                    " TD.FromAccountNumber As RevenueReceivedAccountNumber,TD.ToAccountNumber As RevenueAccountNumber, " +
                    " TD.FromCostCenter As RevenueReceivedCostNumber,TD.ToCostCenter As RevenueCostNumber, " +
                    " (Select C.EnglishName From ChartOfAccounts C Where TD.FromAccountNumber = C.AccountNumber And " +
                    " C.CompanyID = TD.CompanyID) As RevenueReceivedAccountName, " +
                    " (Select C.EnglishName From ChartOfAccounts C Where TD.ToAccountNumber = C.AccountNumber And " +
                    " C.CompanyID = TD.CompanyID) As RevenueAccountName, " +
                    " (Select CC.EnglishName From CostCenters CC Where TD.FromCostCenter = CC.CostNumber And " +
                    " CC.CompanyID = TD.CompanyID) As RevenueReceivedCostName, " +
                    " (Select CC.EnglishName From CostCenters CC Where TD.ToCostCenter = CC.CostNumber And " +
                    " CC.CompanyID = TD.CompanyID) As RevenueCostName, " +
                    " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = T.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= T.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= T.VoucherDate " +
                      " ) As CheckCase " +
                    " From TempPrepaidAndRevenueReceiveds T,AspNetUsers A, TempPrepaidAndRevenueReceivedDetails TD " +
                    " Where " +
                    " T.CompanyID =@CompanyID " +
                    " And " +
                    " T.TransactionKindNo = 18 " +
                    " And " +
                    " T.CompanyID = A.fCompanyId " +
                    " And " +
                    " T.InsUserID = A.Id " +
                    " And " +
                    " T.CompanyID = TD.CompanyID " +
                    " And " +
                    " T.TransactionKindNo = TD.TransactionKindNo " +
                    " And " +
                    " T.VoucherNumber = TD.VoucherNumber " +
                    " And " +
                    " TD.RowNumber = 1 " +
                    " And " +
                    " T.VoucherDate >= @FromDate " +
                    " And " +
                    " T.VoucherDate <= @ToDate " +
                    " And " +
                    " T.DateFirstPayment >= @FromDateFirstPayment " +
                    " And " +
                    " T.DateFirstPayment <= @ToDateFirstPayment " +
                    " Order By T.VoucherDate "
                     , new SqlParameter("@FromDate", Fromdate)
                     , new SqlParameter("@ToDate", ToDate)
                     , new SqlParameter("@FromDateFirstPayment", FromDateFirstPayment)
                     , new SqlParameter("@ToDateFirstPayment", ToDateFirstPayment)
                     , new SqlParameter("@CompanyID", CompanyID)

                 ).ToList();
                }
                catch
                {
                    return new List<TempPrepaidAndRevenueReceivedFilterVM>();
                }
            }
        }
        public ChartOfAccount GetAccountInfo(int CompanyID, string AccNumber, int Year)
        {
            try

            {
                var AccInfo = _context.Database.SqlQuery<ChartOfAccount>(
                "  select * from  ChartOfAccounts  where CompanyID=@CompanyID and AccountNumber  " +
                " not in (select AccountFather from ChartOfAccounts  where CompanyID=@CompanyID ) and AccountNumber=@AccountNumber "




                 , new SqlParameter("@AccountNumber", AccNumber)
                , new SqlParameter("@CompanyID", CompanyID)

            ).FirstOrDefault();

                return AccInfo;
            }
            catch
            {
                return new ChartOfAccount();
            }

        }
        public IEnumerable<TransActionVM> GetTransactionsDetail(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo,int CompanyYear)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<TransActionVM>(
                    " Select T.Debit,T.Credit, T.CostCenter, T.AccountNumber, T.CreditForeign, T.Note, T.DebitForeign,T.CreditDebitForeign, " +
                    " C.ArabicName As CostName, A.ArabicName As AccountName,T.RowNumber,T.CompanyYear " +
                    " From ChartOfAccounts A,Transactions T " +
                    " Left join CostCenters C On " +
                    " T.CompanyID = C.CompanyID " +
                    " And " +
                    " T.CostCenter = C.CostNumber " +
                    " Where " +
                    " T.CompanyID =@CompanyID " +
                    " And " +
                    " T.CompanyTransactionKindNo =@CompanyTransactionKindNo " +
                    " And " +
                    " T.VoucherNumber =@VoucherNumber " +
                    " And " +
                    " T.TransactionKindNo =@TransactionKindNo " +
                    " And " +
                    " T.CompanyID = A.CompanyID " +
                    " And " +
                    " T.AccountNumber = A.AccountNumber " +
                    " And " +
                    " T.CompanyYear = @CompanyYear " 
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransActionVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<TransActionVM>(
                    " Select T.Debit,T.Credit, T.CostCenter, T.AccountNumber, T.CreditForeign, T.Note, T.DebitForeign,T.CreditDebitForeign, " +
                    " C.EnglishName As CostCenterName, A.EnglishName As AccountName,T.RowNumber,T.CompanyYear " +
                    " From ChartOfAccounts A,Transactions T " +
                    " Left join CostCenters C On " +
                    " T.CompanyID = C.CompanyID " +
                    " And " +
                    " T.CostCenter = C.CostNumber " +
                    " Where " +
                    " T.CompanyID =@CompanyID " +
                    " And " +
                    " T.CompanyTransactionKindNo =@CompanyTransactionKindNo " +
                    " And " +
                    " T.VoucherNumber =@VoucherNumber " +
                    " And " +
                    " T.TransactionKindNo =@TransactionKindNo " +
                    " And " +
                    " T.CompanyID = A.CompanyID " +
                    " And " +
                    " T.AccountNumber = A.AccountNumber " +
                    " And " +
                    " T.CompanyYear = @CompanyYear "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransActionVM>();
                }
            }
        }
        public Transaction GetTransactionsDetailDebit(string VoucherNumber, int CompanyID, int CompanyTransactionKindNo, int iRowNumber , int CompanyYear)
        {
            try
            {
                var TransactionDebit = _context.Database.SqlQuery<Transaction>(
                " Select * " +
                " From  Transactions " +
                " Where " +
                " CompanyID =@CompanyID " +
                " And " +
                " CompanyTransactionKindNo =@CompanyTransactionKindNo " +
                " And " +
                " VoucherNumber =@VoucherNumber " +
                " And " +
                " RowNumber =@iRowNumber " +
                 " And " +
                " CompanyYear =@CompanyYear "
                , new SqlParameter("@VoucherNumber", VoucherNumber)
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                , new SqlParameter("@iRowNumber", iRowNumber)
                , new SqlParameter("@CompanyYear", CompanyYear)
                ).FirstOrDefault();

                return TransactionDebit;
            }
            catch
            {
                return new Transaction();
            }
        }
        public Transaction GetTransactionsDetailDebitByTransKind(string VoucherNumber, int CompanyID, int CompanyTransactionKindNo, int iRowNumber, int TransactionKindNo,int CompanyYear)
        {
            try
            {
                var TransactionDebit = _context.Database.SqlQuery<Transaction>(
                " Select * " +
                " From  Transactions " +
                " Where " +
                " CompanyID =@CompanyID " +
                " And " +
                " CompanyTransactionKindNo =@CompanyTransactionKindNo " +
                " And " +
                " VoucherNumber =@VoucherNumber " +
                " And " +
                " RowNumber =@iRowNumber " +
                " And " +
                " TransactionKindNo =@TransactionKindNo " +
                " And " +
                " CompanyYear =@CompanyYear "
                , new SqlParameter("@VoucherNumber", VoucherNumber)
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                , new SqlParameter("@iRowNumber", iRowNumber)
                , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                , new SqlParameter("@CompanyYear", CompanyYear)
                ).FirstOrDefault();

                return TransactionDebit;
            }
            catch
            {
                return new Transaction();
            }
        }
        public Transaction GetTransactionsDetailCredit(string VoucherNumber, int CompanyID, int CompanyTransactionKindNo, int iRowNumber , int CompanyYear)
        {
            try
            {
                var TransactionCredit = _context.Database.SqlQuery<Transaction>(
                " Select * " +
                " From  Transactions " +
                " Where " +
                " CompanyID =@CompanyID " +
                " And " +
                " CompanyTransactionKindNo =@CompanyTransactionKindNo " +
                " And " +
                " VoucherNumber =@VoucherNumber " +
                " And " +
                " RowNumber =@iRowNumber " +
                " And " +
                " CompanyYear =@CompanyYear "
                , new SqlParameter("@VoucherNumber", VoucherNumber)
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                , new SqlParameter("@iRowNumber", iRowNumber)
                , new SqlParameter("@CompanyYear", CompanyYear)
                ).FirstOrDefault();

                return TransactionCredit;
            }
            catch
            {
                return new Transaction();
            }
        }
        public Transaction GetTransactionsDetailCreditByTransKind(string VoucherNumber, int CompanyID, int CompanyTransactionKindNo, int iRowNumber, int TransactionKindNo)
        {
            try
            {
                var TransactionCredit = _context.Database.SqlQuery<Transaction>(
                " Select * " +
                " From  Transactions " +
                " Where " +
                " CompanyID =@CompanyID " +
                " And " +
                " CompanyTransactionKindNo =@CompanyTransactionKindNo " +
                " And " +
                " VoucherNumber =@VoucherNumber " +
                " And " +
                " RowNumber =@iRowNumber " +
                " And " +
                " TransactionKindNo =@TransactionKindNo "
                , new SqlParameter("@VoucherNumber", VoucherNumber)
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                , new SqlParameter("@iRowNumber", iRowNumber)
                , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                ).FirstOrDefault();

                return TransactionCredit;
            }
            catch
            {
                return new Transaction();
            }
        }
        public IEnumerable<TransactionGridVM> GetTransactionsDetailDepositInTheBankCredit(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo , int CompanyYear)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionGridVM>(
                    " Select T.Credit, T.CostCenter, T.AccountNumber, T.CreditForeign, T.Note, " +
                    " C.ArabicName As CostCenterName, A.ArabicName As AccountName,T.RowNumber " +
                    " From ChartOfAccounts A,Transactions T " +
                    " Left join CostCenters C On " +
                    " T.CompanyID = C.CompanyID " +
                    " And " +
                    " T.CostCenter = C.CostNumber " +
                    " Where " +
                    " T.CompanyID =@CompanyID " +
                    " And " +
                    " T.CompanyTransactionKindNo =@CompanyTransactionKindNo " +
                    " And " +
                    " T.VoucherNumber =@VoucherNumber " +
                    " And " +
                    " T.TransactionKindNo =@TransactionKindNo " +
                    " And " +
                    " T.CompanyID = A.CompanyID " + 
                    " And " +
                    " T.CompanyYear = @CompanyYear " +
                    " And " +
                    " T.AccountNumber = A.AccountNumber " +
                    " And " +
                    " T.Credit > 0 "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionGridVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionGridVM>(
                    " Select T.Credit, T.CostCenter, T.AccountNumber, T.CreditForeign, T.Note, " +
                    " C.EnglishName As CostCenterName, A.EnglishName As AccountName,T.RowNumber " +
                    " From ChartOfAccounts A,Transactions T " +
                    " Left join CostCenters C On " +
                    " T.CompanyID = C.CompanyID " +
                    " And " +
                    " T.CostCenter = C.CostNumber " +
                    " Where " +
                    " T.CompanyID =@CompanyID " +
                    " And " +
                    " T.CompanyTransactionKindNo =@CompanyTransactionKindNo " +
                    " And " +
                    " T.VoucherNumber =@VoucherNumber " +
                    " And " +
                    " T.TransactionKindNo =@TransactionKindNo " +
                    " And " +
                    " T.CompanyID = A.CompanyID " +
                    " And " +
                    " T.CompanyYear = @CompanyYear " +
                    " And " +
                    " T.AccountNumber = A.AccountNumber " +
                    " And " +
                    " T.Credit > 0 "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionGridVM>();
                }
            }
        }
        public IEnumerable<TransactionFixedVM> GetAllTransactionsDetailCredit(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo , int CompanyYear)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionFixedVM>(
                    " Select T.Credit, T.CostCenter, T.AccountNumber, T.CreditForeign, T.Note, " +
                    " C.ArabicName As CostCenterName, A.ArabicName As AccountName,T.RowNumber " +
                    " From ChartOfAccounts A,Transactions T " +
                    " Left join CostCenters C On " +
                    " T.CompanyID = C.CompanyID " +
                    " And " +
                    " T.CostCenter = C.CostNumber " +
                    " Where " +
                    " T.CompanyID =@CompanyID " +
                    " And " +
                    " T.CompanyTransactionKindNo =@CompanyTransactionKindNo " +
                    " And " +
                    " T.VoucherNumber =@VoucherNumber " +
                    " And " +
                    " T.TransactionKindNo =@TransactionKindNo " +
                    " And " +
                    " T.CompanyID = A.CompanyID " +
                    " And " +
                    " T.AccountNumber = A.AccountNumber " +
                    " And " +
                    " T.CompanyYear = @CompanyYear " +
                    " And " +
                    " T.Credit > 0 "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionFixedVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionFixedVM>(
                    " Select T.Credit, T.CostCenter, T.AccountNumber, T.CreditForeign, T.Note, " +
                    " C.EnglishName As CostCenterName, A.EnglishName As AccountName,T.RowNumber" +
                    " From ChartOfAccounts A,Transactions T " +
                    " Left join CostCenters C On " +
                    " T.CompanyID = C.CompanyID " +
                    " And " +
                    " T.CostCenter = C.CostNumber " +
                    " Where " +
                    " T.CompanyID =@CompanyID " +
                    " And " +
                    " T.CompanyTransactionKindNo =@CompanyTransactionKindNo " +
                    " And " +
                    " T.VoucherNumber =@VoucherNumber " +
                    " And " +
                    " T.TransactionKindNo =@TransactionKindNo " +
                    " And " +
                    " T.CompanyID = A.CompanyID " +
                    " And " +
                    " T.AccountNumber = A.AccountNumber " +
                     " And " +
                    " T.CompanyYear = @CompanyYear " +
                    " And " +
                    " T.Credit > 0 "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionFixedVM>();
                }
            }
        }
        public IEnumerable<TransactionFixedVM> GetAllTransactionsDetailDebit(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo , int CompanyYear)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionFixedVM>(
                    " Select T.Debit, T.CostCenter, T.AccountNumber, T.CreditForeign, T.Note, " +
                    " C.ArabicName As CostCenterName, A.ArabicName As AccountName,T.RowNumber " +
                    " From ChartOfAccounts A,Transactions T " +
                    " Left join CostCenters C On " +
                    " T.CompanyID = C.CompanyID " +
                    " And " +
                    " T.CostCenter = C.CostNumber " +
                    " Where " +
                    " T.CompanyID =@CompanyID " +
                    " And " +
                    " T.CompanyTransactionKindNo =@CompanyTransactionKindNo " +
                    " And " +
                    " T.VoucherNumber =@VoucherNumber " +
                    " And " +
                    " T.TransactionKindNo =@TransactionKindNo " +
                    " And " +
                    " T.CompanyID = A.CompanyID " +
                    " And " +
                    " T.AccountNumber = A.AccountNumber " +
                    " And " +
                    " T.CompanyYear = @CompanyYear " +
                    " And " +
                    " T.Debit > 0 "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionFixedVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionFixedVM>(
                    " Select T.Debit, T.CostCenter, T.AccountNumber, T.CreditForeign, T.Note, " +
                    " C.EnglishName As CostCenterName, A.EnglishName As AccountName,T.RowNumber " +
                    " From ChartOfAccounts A,Transactions T " +
                    " Left join CostCenters C On " +
                    " T.CompanyID = C.CompanyID " +
                    " And " +
                    " T.CostCenter = C.CostNumber " +
                    " Where " +
                    " T.CompanyID =@CompanyID " +
                    " And " +
                    " T.CompanyTransactionKindNo =@CompanyTransactionKindNo " +
                    " And " +
                    " T.VoucherNumber =@VoucherNumber " +
                    " And " +
                    " T.TransactionKindNo =@TransactionKindNo " +
                    " And " +
                    " T.CompanyID = A.CompanyID " +
                    " And " +
                    " T.AccountNumber = A.AccountNumber " +
                    " And " +
                    " T.CompanyYear = @CompanyYear " +
                    " And " +
                    " T.Debit > 0 "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionFixedVM>();
                }
            }
        }
        public IEnumerable<TransactionGridVM> GetTransactionsDetailReceiptVoucherCashMultiCredit(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo, int CompanyYear)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionGridVM>(
                    " Select T.Credit, T.CostCenter, T.AccountNumber, T.CreditForeign, T.Note, " +
                    " C.ArabicName As CostCenterName, A.ArabicName As AccountName,T.RowNumber ,T.CompanyYear " +
                    " From ChartOfAccounts A,Transactions T " +
                    " Left join CostCenters C On " +
                    " T.CompanyID = C.CompanyID " +
                    " And " +
                    " T.CostCenter = C.CostNumber " +
                    " Where " +
                    " T.CompanyID =@CompanyID " +
                    " And " +
                    " T.CompanyTransactionKindNo =@CompanyTransactionKindNo " +
                    " And " +
                    " T.VoucherNumber =@VoucherNumber " +
                    " And " +
                    " T.TransactionKindNo =@TransactionKindNo " +
                    " And " +
                    " T.CompanyYear =@CompanyYear " +
                    " And " +
                    " T.CompanyID = A.CompanyID " +
                    " And " +
                    " T.AccountNumber = A.AccountNumber " +
                    " And " +
                    " T.Credit > 0 "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionGridVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionGridVM>(
                    " Select T.Credit, T.CostCenter, T.AccountNumber, T.CreditForeign, T.Note, " +
                    " C.EnglishName As CostCenterName, A.EnglishName As AccountName,T.RowNumber ,T.CompanyYear " +
                    " From ChartOfAccounts A,Transactions T " +
                    " Left join CostCenters C On " +
                    " T.CompanyID = C.CompanyID " +
                    " And " +
                    " T.CostCenter = C.CostNumber " +
                    " Where " +
                    " T.CompanyID =@CompanyID " +
                    " And " +
                    " T.CompanyTransactionKindNo =@CompanyTransactionKindNo " +
                    " And " +
                    " T.VoucherNumber =@VoucherNumber " +
                    " And " +
                    " T.TransactionKindNo =@TransactionKindNo " +
                    " And " +
                    " T.CompanyYear =@CompanyYear " +
                    " And " +
                    " T.CompanyID = A.CompanyID " +
                    " And " +
                    " T.AccountNumber = A.AccountNumber " +
                    " And " +
                    " T.Credit > 0 "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionGridVM>();
                }
            }
        }
        public IEnumerable<TransactionGridVM> GetTransactionsDetailPaymentVoucherCashMultiDebit(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo, int CompanyYear)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionGridVM>(
                    " Select T.Debit, T.CostCenter, T.AccountNumber, T.CreditForeign, T.Note, " +
                    " C.ArabicName As CostCenterName, A.ArabicName As AccountName,T.RowNumber " +
                    " From ChartOfAccounts A,Transactions T " +
                    " Left join CostCenters C On " +
                    " T.CompanyID = C.CompanyID " +
                    " And " +
                    " T.CostCenter = C.CostNumber " +
                    " Where " +
                    " T.CompanyID =@CompanyID " +
                    " And " +
                    " T.CompanyTransactionKindNo =@CompanyTransactionKindNo " +
                    " And " +
                    " T.VoucherNumber =@VoucherNumber " +
                    " And " +
                    " T.TransactionKindNo =@TransactionKindNo " +
                    " And " +
                    " T.CompanyYear =@CompanyYear " +
                    " And " +
                    " T.CompanyID = A.CompanyID " +
                    " And " +
                    " T.AccountNumber = A.AccountNumber " +
                    " And " +
                    " T.Debit > 0 "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionGridVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionGridVM>(
                    " Select T.Debit, T.CostCenter, T.AccountNumber, T.CreditForeign, T.Note, " +
                    " C.EnglishName As CostCenterName, A.EnglishName As AccountName,T.RowNumber " +
                    " From ChartOfAccounts A,Transactions T " +
                    " Left join CostCenters C On " +
                    " T.CompanyID = C.CompanyID " +
                    " And " +
                    " T.CostCenter = C.CostNumber " +
                    " Where " +
                    " T.CompanyID =@CompanyID " +
                    " And " +
                    " T.CompanyTransactionKindNo =@CompanyTransactionKindNo " +
                    " And " +
                    " T.VoucherNumber =@VoucherNumber " +
                    " And " +
                    " T.TransactionKindNo =@TransactionKindNo " +
                    " And " +
                    " T.CompanyYear =@CompanyYear " +
                    " And " +
                    " T.CompanyID = A.CompanyID " +
                    " And " +
                    " T.AccountNumber = A.AccountNumber " +
                    " And " +
                    " T.Debit > 0 "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionGridVM>();
                }
            }
        }
        public IEnumerable<TransactionFixedVM> GetPapersToReceiptVoucherBank(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo, int CompanyYear)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionFixedVM>(
                    " Select P.ChequeNumber, P.ChequeDate, P.ChequeAmount, P.AccountNumberThird As BankAccountNumber, P.DrawerName, " +
                    " (Select DB.ArabicName From DrawnBanks DB Where P.AccountNumberThird = DB.BankID And P.CompanyID = DB.CompanyID) As BankAccountName, " +
                    " (Select PC.ArabicName From PapersCases PC Where PC.CaseID = P.ChequeCase) As ChequeCaseName " +
                    " From Papers P " +
                    " Where " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " P.OriginalTransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " P.OriginalVoucherNumber = @VoucherNumber " +
                    " And " +
                    " CompanyYear = @CompanyYear " +
                    " Order By RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionFixedVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionFixedVM>(
                    " Select P.ChequeNumber, P.ChequeDate, P.ChequeAmount, P.AccountNumberThird As BankAccountNumber, P.DrawerName, " +
                    " (Select DB.EnglishName From DrawnBanks DB Where P.AccountNumberThird = DB.BankID And P.CompanyID = DB.CompanyID) As BankAccountName, " +
                    " (Select PC.EnglishName From PapersCases PC Where PC.CaseID = P.ChequeCase) As ChequeCaseName " +
                    " From Papers P " +
                    " Where " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " P.OriginalTransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " P.OriginalVoucherNumber = @VoucherNumber " +
                    " And " +
                    " CompanyYear = @CompanyYear " +
                    " Order By RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionFixedVM>();
                }
            }
        }
        public IEnumerable<TransactionFixedVM> GetPapersToPaymentVoucherBank(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo, int CompanyYear)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionFixedVM>(
                    " Select P.ChequeNumber, P.ChequeDate, P.ChequeAmount, P.AccountNumberThird As BankAccountNumber, P.DrawerName, P.AccountNumberSecond As PostdatedAccountNumber, " +
                    " (Select C.ArabicName From ChartOfAccounts C Where P.AccountNumberThird = C.AccountNumber And P.CompanyID = C.CompanyID) As BankAccountName, " +
                    " (Select PC.ArabicName From PapersCases PC Where PC.CaseID = P.ChequeCase) As ChequeCaseName " +
                    " From Papers P " +
                    " Where " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " P.OriginalTransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " P.OriginalVoucherNumber = @VoucherNumber " +
                    " And " +
                    " CompanyYear = @CompanyYear " +
                    " Order By RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionFixedVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionFixedVM>(
                    " Select P.ChequeNumber, P.ChequeDate, P.ChequeAmount, P.AccountNumberThird As BankAccountNumber, P.DrawerName, P.AccountNumberSecond As PostdatedAccountNumber, " +
                    " (Select C.EnglishName From ChartOfAccounts C Where P.AccountNumberThird = C.AccountNumber And P.CompanyID = C.CompanyID) As BankAccountName, " +
                    " (Select PC.EnglishName From PapersCases PC Where PC.CaseID = P.ChequeCase) As ChequeCaseName " +
                    " From Papers P " +
                    " Where " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " P.OriginalTransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " P.OriginalVoucherNumber = @VoucherNumber " +
                    " And " +
                    " CompanyYear = @CompanyYear " +
                    " Order By RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionFixedVM>();
                }
            }
        }
        public IEnumerable<TransactionFixedVM> GetPapersToReceiptVoucherBankInChequeFund(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo, int CompanyYear)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionFixedVM>(
                    " Select P.ChequeNumber, P.ChequeDate, P.ChequeAmount, P.AccountNumberThird, P.DrawerName,P.RowNumber, " +
                    " (Select DB.ArabicName From DrawnBanks DB Where P.AccountNumberThird = DB.BankID And P.CompanyID = DB.CompanyID) As BankAccountNameJustForFill " +
                    " From Papers P " +
                    " Where " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " P.OriginalTransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " P.OriginalVoucherNumber = @VoucherNumber " +
                    " And " +
                    " P.CompanyYear = @CompanyYear " +
                    " And " +
                    " P.ChequeCase = 1 " +
                    " Order By P.RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionFixedVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionFixedVM>(
                    " Select P.ChequeNumber, P.ChequeDate, P.ChequeAmount, P.AccountNumberThird, P.DrawerName,P.RowNumber, " +
                    " (Select DB.EnglishName From DrawnBanks DB Where P.AccountNumberThird = DB.BankID And P.CompanyID = DB.CompanyID) As BankAccountNameJustForFill " +
                    " From Papers P " +
                    " Where " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " P.OriginalTransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " P.OriginalVoucherNumber = @VoucherNumber " +
                    " And " +
                    " CompanyYear = @CompanyYear " +
                    " And " +
                    " P.ChequeCase = 1 " +
                    " Order By RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionFixedVM>();
                }
            }
        }
        public IEnumerable<TransactionFixedVM> GetPapersToReceiptVoucherBankInChequeFundCopy(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo, int CompanyYear)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionFixedVM>(
                    " Select P.ChequeNumber, P.ChequeDate, P.ChequeAmount, P.AccountNumberThird, P.DrawerName,P.RowNumber, " +
                    " (Select DB.ArabicName From DrawnBanks DB Where P.AccountNumberThird = DB.BankID And P.CompanyID = DB.CompanyID) As BankAccountNameJustForFill " +
                    " From Papers P " +
                    " Where " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " P.OriginalTransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " P.OriginalVoucherNumber = @VoucherNumber " +
                    " And " +
                    " P.CompanyYear = @CompanyYear " +
                    " Order By P.RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionFixedVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionFixedVM>(
                    " Select P.ChequeNumber, P.ChequeDate, P.ChequeAmount, P.AccountNumberThird, P.DrawerName,P.RowNumber, " +
                    " (Select DB.EnglishName From DrawnBanks DB Where P.AccountNumberThird = DB.BankID And P.CompanyID = DB.CompanyID) As BankAccountNameJustForFill " +
                    " From Papers P " +
                    " Where " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " P.OriginalTransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " P.OriginalVoucherNumber = @VoucherNumber " +
                    " And " +
                    " CompanyYear = @CompanyYear " +
                    " Order By RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionFixedVM>();
                }
            }
        }
        public IEnumerable<TransactionFixedVM> GetPapersToPaymentVoucherBankPosted(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo, int CompanyYear)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionFixedVM>(
                    " Select P.ChequeNumber, P.ChequeDate, P.ChequeAmount, P.AccountNumberThird , P.DrawerName,P.RowNumber, P.AccountNumberSecond,P.Sirs,P.Mr,P.Mrs,P.Co,P.First,  " +
                    " (Select C.ArabicName From ChartOfAccounts C Where P.AccountNumberThird = C.AccountNumber And P.CompanyID = C.CompanyID) As BankAccountNameJustForFill " +
                    " From Papers P " +
                    " Where " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " P.OriginalTransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " P.OriginalVoucherNumber = @VoucherNumber " +
                    " And " +
                    " P.CompanyYear = @CompanyYear " +
                    " And " +
                    " P.ChequeCase = 14 " +
                    " Order By P.RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionFixedVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionFixedVM>(
                    " Select P.ChequeNumber, P.ChequeDate, P.ChequeAmount, P.AccountNumberThird , P.DrawerName,P.RowNumber, P.AccountNumberSecond,P.Sirs,P.Mr,P.Mrs,P.Co,P.First,  " +
                    " (Select C.EnglishName From ChartOfAccounts C Where P.AccountNumberThird = C.AccountNumber And P.CompanyID = C.CompanyID) As BankAccountNameJustForFill " +
                    " From Papers P " +
                    " Where " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " P.OriginalTransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " P.OriginalVoucherNumber = @VoucherNumber " +
                    " And " +
                    " P.CompanyYear = @CompanyYear " +
                    " And " +
                    " P.ChequeCase = 14 " +
                    " Order By P.RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionFixedVM>();
                }
            }
        }
        public IEnumerable<TransactionFixedVM> GetPapersToPaymentVoucherBankPostedCopy(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo, int CompanyYear)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionFixedVM>(
                    " Select P.ChequeNumber, P.ChequeDate, P.ChequeAmount, P.AccountNumberThird , P.DrawerName,P.RowNumber, P.AccountNumberSecond,P.Sirs,P.Mr,P.Mrs,P.Co,P.First,  " +
                    " (Select C.ArabicName From ChartOfAccounts C Where P.AccountNumberThird = C.AccountNumber And P.CompanyID = C.CompanyID) As BankAccountNameJustForFill " +
                    " From Papers P " +
                    " Where " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " P.OriginalTransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " P.OriginalVoucherNumber = @VoucherNumber " +
                    " And " +
                    " P.CompanyYear = @CompanyYear " +
                    " Order By P.RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionFixedVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<TransactionFixedVM>(
                    " Select P.ChequeNumber, P.ChequeDate, P.ChequeAmount, P.AccountNumberThird , P.DrawerName,P.RowNumber, P.AccountNumberSecond,P.Sirs,P.Mr,P.Mrs,P.Co,P.First,  " +
                    " (Select C.EnglishName From ChartOfAccounts C Where P.AccountNumberThird = C.AccountNumber And P.CompanyID = C.CompanyID) As BankAccountNameJustForFill " +
                    " From Papers P " +
                    " Where " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " P.OriginalTransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " P.OriginalVoucherNumber = @VoucherNumber " +
                    " And " +
                    " P.CompanyYear = @CompanyYear " +
                    " Order By P.RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<TransactionFixedVM>();
                }
            }
        }
        public TransactionFixedVM GetPostedPrintPapersCase(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo,int CompanyYear)
        {
            try
            {
                var PostedPapers = _context.Database.SqlQuery<TransactionFixedVM>(
                " Select Distinct Sirs,Mr,Mrs,Co,[First] " +
                " From  Papers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " OriginalCompanyTransactionKindNo = @CompanyTransactionKindNo " +
                " And " +
                " OriginalTransactionKindNo = @TransactionKindNo " +
                " And " +
                " OriginalVoucherNumber = @VoucherNumber " +
                " And " +
                " CompanyYear = @CompanyYear "
                , new SqlParameter("@VoucherNumber", VoucherNumber)
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                , new SqlParameter("@CompanyYear", TransactionKindNo)
                ).FirstOrDefault();

                return PostedPapers;
            }
            catch (Exception ex)
            {
                string error = ex.Message;
                return new TransactionFixedVM();
            }
        }
        public IEnumerable<TempPrepaidAndRevenueReceivedVM> GetTempPrepaidAndRevenueReceivedDetalsData(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                    " Select CollectionDate, Amount, Note, CompanyYear, " +
                    " (Case " +
                    " When Exported = 0 Then N'غير محصل' " +
                    " Else N'محصل' " +
                    " End) As Exported  " +
                    " From TempPrepaidAndRevenueReceivedDetails " +
                    " Where " +
                    " TransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " VoucherNumber = @VoucherNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    ).ToList();
                }
                catch
                {
                    return new List<TempPrepaidAndRevenueReceivedVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                    " Select CollectionDate, Amount, Note, CompanyYear, " +
                    " ( Case " +
                    " When Exported = 0 Then 'Not collected' " +
                    " Else 'collected' " +
                    " End) As Exported " +
                    " From TempPrepaidAndRevenueReceivedDetails " +
                    " Where " +
                    " TransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " VoucherNumber = @VoucherNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    ).ToList();
                }
                catch
                {
                    return new List<TempPrepaidAndRevenueReceivedVM>();
                }
            }
        }
        public IEnumerable<TempPrepaidAndRevenueReceivedVM> GetTempPrepaidAndRevenueReceivedDetailsNotExport(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo ,int CompanyYear)
        {
            try
            {
                return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                " Select CollectionDate, Amount, Note,RowNumber " +
                " From TempPrepaidAndRevenueReceivedDetails " +
                " Where " +
                " TransactionKindNo = @TransactionKindNo " +
                " And " +
                " CompanyID = @CompanyID " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                " And " +
                " VoucherNumber = @VoucherNumber " +
                " And " +
                " CompanyYear = @CompanyYear " +
                " And " +
                " Exported = 0 " +
                " Order By RowNumber Asc "
                , new SqlParameter("@VoucherNumber", VoucherNumber)
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                , new SqlParameter("@CompanyYear", CompanyYear)
                ).ToList();
            }
            catch
            {
                return new List<TempPrepaidAndRevenueReceivedVM>();
            }
        }
        public IEnumerable<TempPrepaidAndRevenueReceivedVM> GetTempPrepaidAndRevenueReceivedDetails(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo , int CompanyYear)
        {
            try
            {
                return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                " Select CollectionDate, Amount, Note,RowNumber " +
                " From TempPrepaidAndRevenueReceivedDetails " +
                " Where " +
                " TransactionKindNo = @TransactionKindNo " +
                " And " +
                " CompanyID = @CompanyID " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                " And " +
                " VoucherNumber = @VoucherNumber " +
                " And " +
                " CompanyYear = @CompanyYear " +
                " Order By RowNumber Asc "
                , new SqlParameter("@VoucherNumber", VoucherNumber)
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                , new SqlParameter("@CompanyYear", CompanyYear)
                ).ToList();
            }
            catch
            {
                return new List<TempPrepaidAndRevenueReceivedVM>();
            }
        }
        public IEnumerable<TempPrepaidAndRevenueReceivedDetail> GetRowNumberTempPrepaidAndRevenueReceived(string VoucherNumber, int CompanyID, int CompanyTransactionKindNo, int TransactionKindNo, int CompanyYear)
        {
            try
            {
                return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedDetail>(
                " Select * " +
                " From TempPrepaidAndRevenueReceivedDetails " +
                " Where " +
                " TransactionKindNo = @TransactionKindNo " +
                " And " +
                " CompanyID = @CompanyID " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                " And " +
                " VoucherNumber = @VoucherNumber " +
                " And " +
                " CompanyYear = @CompanyYear " +
                " And " +
                " Exported = 1 " +
                " Order By RowNumber "
                , new SqlParameter("@VoucherNumber", VoucherNumber)
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                , new SqlParameter("@CompanyYear", CompanyYear)
                ).ToList();
            }
            catch
            {
                return new List<TempPrepaidAndRevenueReceivedDetail>();
            }
        }
        public Transaction GetTransactionsDetailTax(string VoucherNumber, int CompanyID, int CompanyTransactionKindNo, int iRowNumber,int CompanyYear)
        {
            try
            {
                var TransactionTax = _context.Database.SqlQuery<Transaction>(
                " Select * " +
                " From  Transactions " +
                " Where " +
                " CompanyID =@CompanyID " +
                " And " +
                " CompanyTransactionKindNo =@CompanyTransactionKindNo " +
                " And " +
                " VoucherNumber =@VoucherNumber " +
                " And " +
                " RowNumber =@iRowNumber " +
                " And " +
                " CompanyYear =@CompanyYear "
                , new SqlParameter("@VoucherNumber", VoucherNumber)
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                , new SqlParameter("@iRowNumber", iRowNumber)
                , new SqlParameter("@CompanyYear", CompanyYear)
                ).FirstOrDefault();

                return TransactionTax;
            }
            catch
            {
                return new Transaction();
            }
        }
        public IEnumerable<Transaction> GetAccountStatement(int CompanyID, int Year, string AccNumber, DateTime FromDate, DateTime ToDate)
        {
            try

            {
                return _context.Database.SqlQuery<Transaction>(
                " select * from Transactions  " +
                " where CompanyID=@CompanyID and CompanyYear=@CompanyYear and AccountNumber=@AccountNumber and VoucherDate >=@FromDate and VoucherDate <=@ToDate " +
                " order by VoucherDate,VHI,VoucherNumber "



                , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@CompanyYear", Year)
                  , new SqlParameter("@AccountNumber", AccNumber)
                   , new SqlParameter("@FromDate", FromDate)
                    , new SqlParameter("@ToDate", ToDate)

            ).ToList();
            }
            catch
            {
                return new List<Transaction>();
            }
        }
        public IEnumerable<Transaction> GetOpeningBalanceTrans(int CompanyID, int Year, string AccNumber, DateTime FromDate, DateTime ToDate)
        {
            try

            {
                return _context.Database.SqlQuery<Transaction>(
                " select * from Transactions  " +
                " where CompanyID=@CompanyID and CompanyYear=@CompanyYear and AccountNumber=@AccountNumber and VoucherDate >=@FromDate and VoucherDate <=@ToDate and TransactionKindNo=15 " +
                " order by VoucherDate,VHI,VoucherNumber "



                , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@CompanyYear", Year)
                  , new SqlParameter("@AccountNumber", AccNumber)
                   , new SqlParameter("@FromDate", FromDate)
                    , new SqlParameter("@ToDate", ToDate)

            ).ToList();
            }
            catch
            {
                return new List<Transaction>();
            }
        }
        public IEnumerable<DebitNoteFilterVM> GetAllDebitNoteFromHeaderUnExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<DebitNoteFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 6 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order by H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<DebitNoteFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<DebitNoteFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 6 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order by H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<DebitNoteFilterVM>();
                }
            }
        }
        public IEnumerable<DebitNoteFilterVM> GetAllDebitNoteFromHeaderExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<DebitNoteFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 6 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<DebitNoteFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<DebitNoteFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 6 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<DebitNoteFilterVM>();
                }
            }
        }
        public IEnumerable<DepositInTheBankFilter> GetAllDepoistInTheBankFromHeaderUnExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<DepositInTheBankFilter>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 16 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order by H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<DepositInTheBankFilter>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<DepositInTheBankFilter>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 16 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order by H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<DepositInTheBankFilter>();
                }
            }
        }
        public IEnumerable<TempPrepaidAndRevenueReceivedFilterVM> GetAlllCollectionPrepaid(int CompanyID, DateTime FromDate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedFilterVM>(
                    " Select TD.Amount,TD.FromAccountNumber As ExpenseAccountNumber,TD.ToAccountNumber As PrepaidExpenseAccountNumber, " +
                    " TD.FromCostCenter As ExpenseCostNumber,TD.ToCostCenter As PrepaidExpenseCostNumber,TD.Note,TD.CollectionDate, " +
                    " TD.TransactionKindNo,TD.VoucherNumber,TD.RowNumber,TD.CompanyYear, " +
                    " (Select C.ArabicName From ChartOfAccounts C Where TD.FromAccountNumber = C.AccountNumber And " +
                    " C.CompanyID = TD.CompanyID) As ExpenseAccountName, " +
                    " (Select C.ArabicName From ChartOfAccounts C Where TD.ToAccountNumber = C.AccountNumber And " +
                    " C.CompanyID = TD.CompanyID) As PrepaidExpenseAccountName, " +
                    " (Select CC.ArabicName From CostCenters CC Where TD.FromCostCenter = CC.CostNumber And " +
                    " CC.CompanyID = TD.CompanyID) As ExpenseCostName, " +
                    " (Select CC.ArabicName From CostCenters CC Where TD.ToCostCenter = CC.CostNumber And " +
                    " CC.CompanyID = TD.CompanyID) As PrepaidExpenseCostName " +
                    " From " +
                    " TempPrepaidAndRevenueReceivedDetails TD " +
                    " Where " +
                    " TD.CompanyID = @CompanyID " +
                    " And " +
                    " TD.Exported = 0 " +
                    " And " +
                    " TD.TransactionKindNo = 17 " +
                    " And " +
                    " cast (datediff (day, 0, TD.CollectionDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, TD.CollectionDate) as datetime) <= @ToDate " +
                    " Order By TD.CollectionDate "
                    , new SqlParameter("@FromDate", FromDate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<TempPrepaidAndRevenueReceivedFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedFilterVM>(
                    " Select TD.Amount,TD.FromAccountNumber As ExpenseAccountNumber,TD.ToAccountNumber As PrepaidExpenseAccountNumber, " +
                    " TD.FromCostCenter As ExpenseCostNumber,TD.ToCostCenter As PrepaidExpenseCostNumber,TD.Note,TD.CollectionDate, " +
                    " TD.TransactionKindNo,TD.VoucherNumber,TD.RowNumber,TD.CompanyYear, " +
                    " (Select C.EnglishName From ChartOfAccounts C Where TD.FromAccountNumber = C.AccountNumber And " +
                    " C.CompanyID = TD.CompanyID) As ExpenseAccountName, " +
                    " (Select C.EnglishName From ChartOfAccounts C Where TD.ToAccountNumber = C.AccountNumber And " +
                    " C.CompanyID = TD.CompanyID) As PrepaidExpenseAccountName, " +
                    " (Select CC.EnglishName From CostCenters CC Where TD.FromCostCenter = CC.CostNumber And " +
                    " CC.CompanyID = TD.CompanyID) As ExpenseCostName, " +
                    " (Select CC.EnglishName From CostCenters CC Where TD.ToCostCenter = CC.CostNumber And " +
                    " CC.CompanyID = TD.CompanyID) As PrepaidExpenseCostName " +
                    " From " +
                    " TempPrepaidAndRevenueReceivedDetails TD " +
                    " Where " +
                    " TD.CompanyID = @CompanyID " +
                    " And " +
                    " TD.Exported = 0 " +
                    " And " +
                    " TD.TransactionKindNo = 17 " +
                    " And " +
                    " TD.CollectionDate >= @FromDate " +
                    " And " +
                    " TD.CollectionDate <= @ToDate "
                    , new SqlParameter("@FromDate", FromDate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<TempPrepaidAndRevenueReceivedFilterVM>();
                }
            }
        }
        public IEnumerable<TempPrepaidAndRevenueReceivedFilterVM> GetAlllCollectionRevenue(int CompanyID, DateTime FromDate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedFilterVM>(
                    " Select TD.Amount,TD.FromAccountNumber As RevenueReceivedAccountNumber,TD.ToAccountNumber As RevenueAccountNumber, " +
                    " TD.FromCostCenter As RevenueReceivedCostNumber,TD.ToCostCenter As RevenueCostNumber,TD.Note,TD.CollectionDate, " +
                    " TD.TransactionKindNo,TD.VoucherNumber,TD.RowNumber,TD.CompanyYear, " +
                    " (Select C.ArabicName From ChartOfAccounts C Where TD.FromAccountNumber = C.AccountNumber And " +
                    " C.CompanyID = TD.CompanyID) As RevenueReceivedAccountName, " +
                    " (Select C.ArabicName From ChartOfAccounts C Where TD.ToAccountNumber = C.AccountNumber And " +
                    " C.CompanyID = TD.CompanyID) As RevenueAccountName, " +
                    " (Select CC.ArabicName From CostCenters CC Where TD.FromCostCenter = CC.CostNumber And " +
                    " CC.CompanyID = TD.CompanyID) As RevenueReceivedCostName, " +
                    " (Select CC.ArabicName From CostCenters CC Where TD.ToCostCenter = CC.CostNumber And " +
                    " CC.CompanyID = TD.CompanyID) As RevenueCostName " +
                    " From " +
                    " TempPrepaidAndRevenueReceivedDetails TD " +
                    " Where " +
                    " TD.CompanyID = @CompanyID " +
                    " And " +
                    " TD.Exported = 0 " +
                    " And " +
                    " TD.TransactionKindNo = 18 " +
                    " And " +
                    " cast (datediff (day, 0, TD.CollectionDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, TD.CollectionDate) as datetime) <= @ToDate " +
                    " Order By TD.CollectionDate "
                    , new SqlParameter("@FromDate", FromDate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<TempPrepaidAndRevenueReceivedFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedFilterVM>(
                    " Select TD.Amount,TD.FromAccountNumber As RevenueReceivedAccountNumber,TD.ToAccountNumber As RevenueAccountNumber, " +
                    " TD.FromCostCenter As RevenueReceivedCostNumber,TD.ToCostCenter As RevenueCostNumber,TD.Note,TD.CollectionDate, " +
                    " TD.TransactionKindNo,TD.VoucherNumber,TD.RowNumber,TD.CompanyYear, " +
                    " (Select C.EnglishName From ChartOfAccounts C Where TD.FromAccountNumber = C.AccountNumber And " +
                    " C.CompanyID = TD.CompanyID) As RevenueReceivedAccountName, " +
                    " (Select C.EnglishName From ChartOfAccounts C Where TD.ToAccountNumber = C.AccountNumber And " +
                    " C.CompanyID = TD.CompanyID) As RevenueAccountName, " +
                    " (Select CC.EnglishName From CostCenters CC Where TD.FromCostCenter = CC.CostNumber And " +
                    " CC.CompanyID = TD.CompanyID) As RevenueReceivedCostName, " +
                    " (Select CC.EnglishName From CostCenters CC Where TD.ToCostCenter = CC.CostNumber And " +
                    " CC.CompanyID = TD.CompanyID) As RevenueCostName " +
                    " From " +
                    " TempPrepaidAndRevenueReceivedDetails TD " +
                    " Where " +
                    " TD.CompanyID = @CompanyID " +
                    " And " +
                    " TD.Exported = 0 " +
                    " And " +
                    " TD.TransactionKindNo = 18 " +
                    " And " +
                    " TD.CollectionDate >= @FromDate " +
                    " And " +
                    " TD.CollectionDate <= @ToDate "
                    , new SqlParameter("@FromDate", FromDate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<TempPrepaidAndRevenueReceivedFilterVM>();
                }
            }
        }
        public IEnumerable<DepositInTheBankFilter> GetAllDepoistInTheBankFromHeaderExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<DepositInTheBankFilter>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 16 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order by H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<DepositInTheBankFilter>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<DepositInTheBankFilter>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 16 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order by H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<DepositInTheBankFilter>();
                }
            }
        }
        public IEnumerable<CreditNoteFilterVM> GetAllCreditNoteFromHeader(int CompanyID, DateTime Fromdate, DateTime ToDate)

        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<CreditNoteFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, H.CompanyYear ," +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN N'غير مرحل' " +
                      " ELSE N'مرحل' " +
                      " END " +
                    ") As Export, " +
                    " C.ArabicName As CurrencyName,A.UserName,C.CurrencyID, " +
                    " ( " +
                      " Select C.ArabicName " +
                      " From ChartOfAccounts C, Transactions T " +
                      " Where " +
                      " C.AccountNumber = T.AccountNumber " +
                      " And " +
                      " H.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " T.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " T.Credit > 0 " +
                     " ) As PaidAccountName, " +
                     " ( " +
                       " Select T.AccountNumber " +
                       " From Transactions T " +
                       " Where " +
                       " H.CompanyID = C.CompanyID " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " T.Credit > 0 " +
                     " ) As PaidAccountNumber, " +
                     " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 7 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order by H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<CreditNoteFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<CreditNoteFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, H.CompanyYear , " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN 'UnExport' " +
                      " ELSE 'Export' " +
                      " END " +
                    ") As Export, " +
                    " C.EnglishName As CurrencyName,A.UserName,C.CurrencyID, " +
                    " ( " +
                      " Select C.EnglishName " +
                      " From ChartOfAccounts C, Transactions T " +
                      " Where " +
                      " C.AccountNumber = T.AccountNumber " +
                      " And " +
                      " H.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " T.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " T.Debit > 0 " +
                     " ) As PaidAccountName, " +
                     " ( " +
                       " Select T.AccountNumber " +
                       " From Transactions T " +
                       " Where " +
                       " H.CompanyID = C.CompanyID " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " T.Debit > 0 " +
                     " ) As PaidAccountNumber, " +
                     " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 7 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order by H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<CreditNoteFilterVM>();
                }
            }
        }
        public IEnumerable<CreditNoteFilterVM> GetAllCreditNoteFromHeaderUnExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<CreditNoteFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 7 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order by H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<CreditNoteFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<CreditNoteFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 7 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order by H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<CreditNoteFilterVM>();
                }
            }
        }
        public IEnumerable<CreditNoteFilterVM> GetAllCreditNoteFromHeaderExport(int CompanyID, DateTime Fromdate, DateTime ToDate)

        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<CreditNoteFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 7 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order by H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<CreditNoteFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<CreditNoteFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 7 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order by H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<CreditNoteFilterVM>();
                }
            }
        }
        public IEnumerable<ReceiptCashFilterVM> GetAllReceiptCashFromHeader(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<ReceiptCashFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName,H.CompanyYear, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo,H.SaleID, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " ( " +
                      " Select S.SalesName From Sales S " +
                      " Where " +
                      " H.CompanyID = S.CompanyID " +
                      " And " +
                      " H.SaleID = S.SalesID " +
                    " ) As SaleName, " +
                    " H.TotalDebit TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN N'غير مرحل' " +
                      " ELSE N'مرحل' " +
                      " END " +
                    ") As Export, " +
                    " C.ArabicName As CurrencyName,A.UserName,C.CurrencyID, " +
                    " ( " +
                      " Select C.ArabicName " +
                      " From ChartOfAccounts C, Transactions T " +
                      " Where " +
                      " C.AccountNumber = T.AccountNumber " +
                      " And " +
                      " H.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " T.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " T.Credit > 0 " +
                      " And " +
                      " H.CompanyYear = T.CompanyYear " +
                     " ) As PaidAccountName, " +
                     " ( " +
                       " Select T.AccountNumber " +
                       " From Transactions T " +
                       " Where " +
                       " H.CompanyID = C.CompanyID " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " T.Credit > 0 " +
                       " And " +
                      " H.CompanyYear = T.CompanyYear " +
                     " ) As PaidAccountNumber, " +
                     " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 3 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ReceiptCashFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<ReceiptCashFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName,H.CompanyYear, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo,H.SaleID, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " ( " +
                      " Select S.SalesName From Sales S " +
                      " Where " +
                      " H.CompanyID = S.CompanyID " +
                      " And " +
                      " H.SaleID = S.SalesID " +
                    " ) As SaleName, " +
                    " H.TotalDebit As TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN 'UnExport' " +
                      " ELSE 'Export' " +
                      " END " +
                    ") As Export, " +
                    " C.EnglishName As CurrencyName,A.UserName,C.CurrencyID , " +
                    " ( " +
                      " Select C.EnglishName " +
                      " From ChartOfAccounts C, Transactions T " +
                      " Where " +
                      " C.AccountNumber = T.AccountNumber " +
                      " And " +
                      " H.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " T.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " T.Credit > 0 " +
                      " And " +
                      " H.CompanyYear = T.CompanyYear " +
                     " ) As PaidAccountName, " +
                     " ( " +
                       " Select T.AccountNumber " +
                       " From Transactions T " +
                       " Where " +
                       " H.CompanyID = C.CompanyID " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " T.Credit > 0 " +
                       " And " +
                      " H.CompanyYear = T.CompanyYear " +
                     " ) As PaidAccountNumber, " +
                     " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 3 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ReceiptCashFilterVM>();
                }
            }
        }
        public IEnumerable<ReceiptCashFilterVM> GetAllReceiptCashFromHeaderUnExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<ReceiptCashFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 3 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ReceiptCashFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<ReceiptCashFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 3 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ReceiptCashFilterVM>();
                }
            }
        }
        public IEnumerable<ServiceBillFilterVM> GetAllServiceBillUnExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<ServiceBillFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo in(10,11,12,13,19,20,21,22) " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ServiceBillFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<ServiceBillFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo in(10,11,12,13,19,20,21,22) " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ServiceBillFilterVM>();
                }
            }
        }
        public IEnumerable<ReceiptCashFilterVM> GetAllReceiptCashFromHeaderExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<ReceiptCashFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 3 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ReceiptCashFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<ReceiptCashFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 3 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ReceiptCashFilterVM>();
                }
            }
        }
        public IEnumerable<ServiceBillFilterVM> GetAllServiceBillExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<ServiceBillFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo in(10,11,12,13,19,20,21,22) " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ServiceBillFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<ServiceBillFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo in (10,11,12,13,19,20,21,22) " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ServiceBillFilterVM>();
                }
            }
        }
        public IEnumerable<ReceiptCashFilterVM> GetAllReceiptCashMultiAccountFromHeader(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<ReceiptCashFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName,H.CompanyYear, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate,H.TotalDebit TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN N'غير مرحل' " +
                      " ELSE N'مرحل' " +
                      " END " +
                    ") As Export, " +
                    " C.ArabicName As CurrencyName,A.UserName,C.CurrencyID, " +
                    " ( " +
                      " Select C.ArabicName " +
                      " From ChartOfAccounts C, Transactions T " +
                      " Where " +
                      " C.AccountNumber = T.AccountNumber " +
                      " And " +
                      " H.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " T.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " T.Debit > 0 " +
                     " ) As FundAccountName, " +
                     " ( " +
                       " Select T.AccountNumber " +
                       " From Transactions T " +
                       " Where " +
                       " H.CompanyID = C.CompanyID " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " T.Debit > 0 " +
                     " ) As FundAccountNumber, " +
                     " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 23 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ReceiptCashFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<ReceiptCashFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName,H.CompanyYear, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate,H.TotalDebit As TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN 'UnExport' " +
                      " ELSE 'Export' " +
                      " END " +
                    ") As Export, " +
                    " C.EnglishName As CurrencyName,A.UserName,C.CurrencyID , " +
                    " ( " +
                      " Select C.EnglishName " +
                      " From ChartOfAccounts C, Transactions T " +
                      " Where " +
                      " C.AccountNumber = T.AccountNumber " +
                      " And " +
                      " H.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " T.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " T.Debit > 0 " +
                     " ) As FundAccountName, " +
                     " ( " +
                       " Select T.AccountNumber " +
                       " From Transactions T " +
                       " Where " +
                       " H.CompanyID = C.CompanyID " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " T.Debit > 0 " +
                     " ) As FundAccountNumber, " +
                     " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 23 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ReceiptCashFilterVM>();
                }
            }
        }
        public IEnumerable<ReceiptCashFilterVM> GetAllReceiptCashMultiAccountFromHeaderUnExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<ReceiptCashFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 23 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ReceiptCashFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<ReceiptCashFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 23 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ReceiptCashFilterVM>();
                }
            }
        }
        public IEnumerable<ReceiptCashFilterVM> GetAllReceiptCashMultiAccountFromHeaderExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<ReceiptCashFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 23 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ReceiptCashFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<ReceiptCashFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 23 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ReceiptCashFilterVM>();
                }
            }
        }
        public IEnumerable<PaymentCashFilterVM> GetAllPaymentCashMultiAccountFromHeader(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<PaymentCashFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName,H.CompanyYear, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate,H.TotalDebit TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN N'غير مرحل' " +
                      " ELSE N'مرحل' " +
                      " END " +
                    ") As Export, " +
                    " C.ArabicName As CurrencyName,A.UserName,C.CurrencyID, " +
                    " ( " +
                      " Select C.ArabicName " +
                      " From ChartOfAccounts C, Transactions T " +
                      " Where " +
                      " C.AccountNumber = T.AccountNumber " +
                      " And " +
                      " H.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " T.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " T.Credit > 0 " +
                     " ) As FundAccountName, " +
                     " ( " +
                       " Select T.AccountNumber " +
                       " From Transactions T " +
                       " Where " +
                       " H.CompanyID = C.CompanyID " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " T.Credit > 0 " +
                     " ) As FundAccountNumber, " +
                     " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 24 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaymentCashFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaymentCashFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName,H.CompanyYear, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate,H.TotalDebit As TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN 'UnExport' " +
                      " ELSE 'Export' " +
                      " END " +
                    ") As Export, " +
                    " C.EnglishName As CurrencyName,A.UserName,C.CurrencyID , " +
                    " ( " +
                      " Select C.EnglishName " +
                      " From ChartOfAccounts C, Transactions T " +
                      " Where " +
                      " C.AccountNumber = T.AccountNumber " +
                      " And " +
                      " H.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " T.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " T.Credit > 0 " +
                     " ) As FundAccountName, " +
                     " ( " +
                       " Select T.AccountNumber " +
                       " From Transactions T " +
                       " Where " +
                       " H.CompanyID = C.CompanyID " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " T.Credit > 0 " +
                     " ) As FundAccountNumber, " +
                     " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 24 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaymentCashFilterVM>();
                }
            }
        }
        public IEnumerable<PaymentCashFilterVM> GetAllPaymentCashMultiAccountFromHeaderUnExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<PaymentCashFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 24 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaymentCashFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaymentCashFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 24 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaymentCashFilterVM>();
                }
            }
        }
        public IEnumerable<PaymentCashFilterVM> GetAllPaymentCashMultiAccountFromHeaderExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<PaymentCashFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 24 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaymentCashFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaymentCashFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 24 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaymentCashFilterVM>();
                }
            }
        }
        public IEnumerable<TransActionVM> GetAllTransactionFromHeaderUnExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<TransActionVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo in (1,14) " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<TransActionVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<TransActionVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo in (1,14) " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<TransActionVM>();
                }
            }
        }
        public IEnumerable<TransActionVM> GetAllTransactionFromHeaderExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<TransActionVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo in (1,14) " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<TransActionVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<TransActionVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo in (1,14) " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<TransActionVM>();
                }
            }
        }
        public IEnumerable<ReceiptBankFilterVM> GetAllReceiptBankFromHeaderUnExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<ReceiptBankFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    " ) As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName,C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 2 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ReceiptBankFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<ReceiptBankFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName,C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 2 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ReceiptBankFilterVM>();
                }
            }
        }
        public IEnumerable<ReceiptBankFilterVM> GetAllReceiptBankFromHeaderExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<ReceiptBankFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 2 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ReceiptBankFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<ReceiptBankFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 2 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ReceiptBankFilterVM>();
                }
            }
        }
        public IEnumerable<PaymentBankFilterVM> GetAllPaymentBankFromHeaderUnExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<PaymentBankFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    " ) As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName,C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 4 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaymentBankFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaymentBankFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName,C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 4 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaymentBankFilterVM>();
                }
            }
        }
        public IEnumerable<PaymentBankFilterVM> GetAllPaymentBankFromHeaderExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<PaymentBankFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 4 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaymentBankFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaymentBankFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 4 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaymentBankFilterVM>();
                }
            }
        }
        public IEnumerable<PaymentCashFilterVM> GetAllPaymentCashFromHeader(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<PaymentCashFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, H.CompanyYear ," +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN N'غير مرحل' " +
                      " ELSE N'مرحل' " +
                      " END " +
                    ") As Export, " +
                    " C.ArabicName As CurrencyName,A.UserName,C.CurrencyID, " +
                    " ( " +
                      " Select C.ArabicName " +
                      " From ChartOfAccounts C, Transactions T " +
                      " Where " +
                      " C.AccountNumber = T.AccountNumber " +
                      " And " +
                      " H.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " T.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " T.Debit > 0 " +
                     " ) As PaidAccountName, " +
                     " ( " +
                       " Select T.AccountNumber " +
                       " From Transactions T " +
                       " Where " +
                       " H.CompanyID = C.CompanyID " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " T.Debit > 0 " +
                     " ) As PaidAccountNumber, " +
                     " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 5 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaymentCashFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaymentCashFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, H.CompanyYear , " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN 'UnExport' " +
                      " ELSE 'Export' " +
                      " END " +
                    ") As Export, " +
                    " C.EnglishName As CurrencyName,A.UserName,C.CurrencyID, " +
                    " ( " +
                      " Select C.EnglishName " +
                      " From ChartOfAccounts C, Transactions T " +
                      " Where " +
                      " C.AccountNumber = T.AccountNumber " +
                      " And " +
                      " H.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " T.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " T.Debit > 0 " +
                     " ) As PaidAccountName, " +
                     " ( " +
                       " Select T.AccountNumber " +
                       " From Transactions T " +
                       " Where " +
                       " H.CompanyID = C.CompanyID " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " T.Debit > 0 " +
                     " ) As PaidAccountNumber, " +
                     " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 5 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaymentCashFilterVM>();
                }
            }
        }
        public IEnumerable<PaymentCashFilterVM> GetAllPaymentCashFromHeaderUnExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<PaymentCashFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 5 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaymentCashFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaymentCashFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, H.CompanyYear ," +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 5 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaymentCashFilterVM>();
                }
            }
        }
        public IEnumerable<PaymentCashFilterVM> GetAllPaymentCashFromHeaderExport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<PaymentCashFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.ArabicName As CurrencyName,A.UserName, " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 5 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaymentCashFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaymentCashFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount,H.CompanyYear, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " C.EnglishName As CurrencyName,A.UserName " +
                    " C.CurrencyID " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 5 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaymentCashFilterVM>();
                }
            }
        }
        public IEnumerable<ReceiptBankFilterVM> GetAllReceiptBankFromHeader(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<ReceiptBankFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, H.CompanyYear ," +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo,H.SaleID, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " ( " +
                      " Select S.SalesName From Sales S " +
                      " Where " +
                      " H.CompanyID = S.CompanyID " +
                      " And " +
                      " H.SaleID = S.SalesID " +
                    " ) As SaleName, " +
                    " H.TotalDebit TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN N'غير مرحل' " +
                      " ELSE N'مرحل' " +
                      " END " +
                    ") As Export, " +
                    " ( " +
                      " Select IsNull(Count(*),0) From Papers P " +
                      " Where " +
                      " H.CompanyID = P.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = P.OriginalCompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = P.OriginalTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = P.OriginalVoucherNumber " +
                      " And " +
                      " H.CompanyYear = P.CompanyYear " +
                    " ) As AllPapers, " +
                    " ( " +
                      " Select IsNull(Count(*),0) From Papers P " +
                      " Where " +
                      " H.CompanyID = P.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = P.OriginalCompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = P.OriginalTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = P.OriginalVoucherNumber " +
                      " And " +
                      " P.ChequeCase not in (1) " +
                      " And " +
                      " H.CompanyYear = P.CompanyYear " +
                    " ) As AllUsedPapers, " +
                    " C.ArabicName As CurrencyName,A.UserName,C.CurrencyID, " +
                    " ( " +
                      " Select C.ArabicName " +
                      " From ChartOfAccounts C, Transactions T " +
                      " Where " +
                      " C.AccountNumber = T.AccountNumber " +
                      " And " +
                      " H.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " T.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " T.Credit > 0 " +
                      " And " +
                      " H.CompanyYear = T.CompanyYear " +
                     " ) As PaidAccountName, " +
                     " ( " +
                       " Select T.AccountNumber " +
                       " From Transactions T " +
                       " Where " +
                       " H.CompanyID = C.CompanyID " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " T.Credit > 0 " +
                       " And " +
                       " H.CompanyYear = T.CompanyYear " +
                     " ) As PaidAccountNumber, " +
                     " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 2 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ReceiptBankFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<ReceiptBankFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName, H.CompanyYear ," +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo,H.SaleID, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " ( " +
                      " Select S.SalesName From Sales S " +
                      " Where " +
                      " H.CompanyID = S.CompanyID " +
                      " And " +
                      " H.SaleID = S.SalesID " +
                    " ) As SaleName, " +
                    " H.TotalDebit As TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN 'UnExport' " +
                      " ELSE 'Export' " +
                      " END " +
                    ") As Export, " +
                    " ( " +
                      " Select Count(*)  From Papers P " +
                      " Where " +
                      " H.CompanyID = P.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = P.OriginalCompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = P.OriginalTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = P.OriginalVoucherNumber " +
                      " And " +
                      " H.CompanyYear = P.CompanyYear " +
                    " ) As AllPapers, " +
                    " ( " +
                      " Select Count(*)  From Papers P " +
                      " Where " +
                      " H.CompanyID = P.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = P.OriginalCompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = P.OriginalTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = P.OriginalVoucherNumber " +
                      " And " +
                      " P.ChequeCase not in (1) " +
                      " And " +
                      " H.CompanyYear = P.CompanyYear " +
                    " ) As AllUsedPapers, " +
                    " C.EnglishName As CurrencyName,A.UserName,C.CurrencyID, " +
                    " ( " +
                      " Select C.EnglishName " +
                      " From ChartOfAccounts C, Transactions T " +
                      " Where " +
                      " C.AccountNumber = T.AccountNumber " +
                      " And " +
                      " H.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " T.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " T.Credit > 0 " +
                      " And " +
                      " H.CompanyYear = T.CompanyYear " +
                     " ) As PaidAccountName, " +
                     " ( " +
                       " Select T.AccountNumber " +
                       " From Transactions T " +
                       " Where " +
                       " H.CompanyID = C.CompanyID " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " T.Credit > 0 " +
                       " And " +
                      " H.CompanyYear = T.CompanyYear " +
                     " ) As PaidAccountNumber, " +
                     " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 2 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ReceiptBankFilterVM>();
                }
            }
        }
        public IEnumerable<PaymentBankFilterVM> GetAllPaymentBankFromHeader(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<PaymentBankFilterVM>(
                    " Select " +
                    " CT.ArabicName As CompanyTransactionName, H.CompanyYear ," +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN N'غير مرحل' " +
                      " ELSE N'مرحل' " +
                      " END " +
                    ") As Export, " +
                    " ( " +
                      " Select IsNull(Count(*),0) From Papers P " +
                      " Where " +
                      " H.CompanyID = P.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = P.OriginalCompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = P.OriginalTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = P.OriginalVoucherNumber " +
                    " ) As AllPapers, " +
                    " ( " +
                      " Select IsNull(Count(*),0) From Papers P " +
                      " Where " +
                      " H.CompanyID = P.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = P.OriginalCompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = P.OriginalTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = P.OriginalVoucherNumber " +
                      " And " +
                      " P.ChequeCase not in (14) " +
                    " ) As AllUsedPapers, " +
                    " C.ArabicName As CurrencyName,A.UserName,C.CurrencyID, " +
                    " ( " +
                      " Select C.ArabicName " +
                      " From ChartOfAccounts C, Transactions T " +
                      " Where " +
                      " C.AccountNumber = T.AccountNumber " +
                      " And " +
                      " H.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " T.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " T.Debit > 0 " +
                     " ) As PaidAccountName, " +
                     " ( " +
                       " Select T.AccountNumber " +
                       " From Transactions T " +
                       " Where " +
                       " H.CompanyID = C.CompanyID " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " T.Debit > 0 " +
                     " ) As PaidAccountNumber, " +
                     " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 4 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaymentBankFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaymentBankFilterVM>(
                    " Select " +
                    " CT.EnglishName As CompanyTransactionName,  H.CompanyYear , " +
                    " H.CompanyTransactionKindNo,H.Exported,H.TransactionKindNo, " +
                    " H.VoucherNumber, H.VoucherDate, " +
                    " H.TotalDebit As TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    ") As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN 'UnExport' " +
                      " ELSE 'Export' " +
                      " END " +
                    ") As Export, " +
                    " ( " +
                      " Select Count(*)  From Papers P " +
                      " Where " +
                      " H.CompanyID = P.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = P.OriginalCompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = P.OriginalTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = P.OriginalVoucherNumber " +
                    " ) As AllPapers, " +
                    " ( " +
                      " Select Count(*)  From Papers P " +
                      " Where " +
                      " H.CompanyID = P.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = P.OriginalCompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = P.OriginalTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = P.OriginalVoucherNumber " +
                      " And " +
                      " P.ChequeCase not in (14) " +
                    " ) As AllUsedPapers, " +
                    " C.EnglishName As CurrencyName,A.UserName,C.CurrencyID, " +
                     " ( " +
                      " Select C.EnglishName " +
                      " From ChartOfAccounts C, Transactions T " +
                      " Where " +
                      " C.AccountNumber = T.AccountNumber " +
                      " And " +
                      " H.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " T.CompanyID = C.CompanyID " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " T.Debit > 0 " +
                     " ) As PaidAccountName, " +
                     " ( " +
                       " Select T.AccountNumber " +
                       " From Transactions T " +
                       " Where " +
                       " H.CompanyID = C.CompanyID " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " T.Debit > 0 " +
                     " ) As PaidAccountNumber, " +
                     " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A " +
                    " Where " +
                    " H.TransactionKindNo = 4 " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID =@CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaymentBankFilterVM>();
                }
            }
        }
        public IEnumerable<DefinitionBanksFilterVM> GetAllDefinitionBank(int CompanyID)

        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<DefinitionBanksFilterVM>(
                        " Select DB.BankID, A.UserName,DB.BankAccountNumber,DB.BillsOfExchangeAccountNumber, " +
                        " DB.ChequeUnderCollectionAccountNumber,DB.PostdatedChequeAccountNumber, " +
                        " ( " +
                            " Select CA.ArabicName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " DB.BankAccountNumber = CA.AccountNumber " +
                            " And " +
                            " DB.CompanyID = CA.CompanyID " +
                        " ) As BankAccountName, " +
                        " ( " +
                            " Select CA.ArabicName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " DB.ChequeUnderCollectionAccountNumber = CA.AccountNumber " +
                            " And " +
                            " DB.CompanyID = CA.CompanyID " +
                        " ) As ChequeUnderCollectionAccountName, " +
                        " ( " +
                            " Select CA.ArabicName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " DB.PostdatedChequeAccountNumber = CA.AccountNumber " +
                            " And " +
                            " DB.CompanyID = CA.CompanyID " +
                        " ) As PostdatedChequeAccountName, " +
                        " ( " +
                            " Select CA.ArabicName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " DB.BillsOfExchangeAccountNumber = CA.AccountNumber " +
                            " And " +
                            " DB.CompanyID = CA.CompanyID " +
                        " ) As BillsOfExchangeAccountName " +
                        " From DefinitionBanks DB,AspNetUsers A " +
                        " Where " +
                        " DB.CompanyID = A.fCompanyId " +
                        " And " +
                        " DB.InsUserID = A.Id " +
                        " And " +
                        " DB.CompanyID =@CompanyID " +
                        " And " +
                        " DB.IsDeleted = 0 "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<DefinitionBanksFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<DefinitionBanksFilterVM>(
                    " Select DB.BankID, A.UserName,DB.BankAccountNumber,DB.BillsOfExchangeAccountNumber, " +
                    " DB.ChequeUnderCollectionAccountNumber,DB.PostdatedChequeAccountNumber, " +
                        " ( " +
                            " Select CA.EnglishName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " DB.BankAccountNumber = CA.AccountNumber " +
                            " And " +
                            " DB.CompanyID = CA.CompanyID " +
                        " ) As BankAccountName, " +
                        " ( " +
                            " Select CA.EnglishName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " DB.ChequeUnderCollectionAccountNumber = CA.AccountNumber " +
                            " And " +
                            " DB.CompanyID = CA.CompanyID " +
                        " ) As ChequeUnderCollectionAccountName, " +
                        " ( " +
                            " Select CA.EnglishName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " DB.PostdatedChequeAccountNumber = CA.AccountNumber " +
                            " And " +
                            " DB.CompanyID = CA.CompanyID " +
                        " ) As PostdatedChequeAccountName, " +
                        " ( " +
                            " Select CA.EnglishName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " DB.BillsOfExchangeAccountNumber = CA.AccountNumber " +
                            " And " +
                            " DB.CompanyID = CA.CompanyID " +
                        " ) As BillsOfExchangeAccountName " +
                        " From DefinitionBanks DB,AspNetUsers A " +
                        " Where " +
                        " DB.CompanyID = A.fCompanyId " +
                        " And " +
                        " DB.InsUserID = A.Id " +
                        " And " +
                        " DB.CompanyID =@CompanyID " +
                        " And " +
                        " DB.IsDeleted = 0 "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<DefinitionBanksFilterVM>();
                }
            }
        }
       public DefinitionBanksFilterVM CheckAllDefinitionBank(int CompanyID, string AccountNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<DefinitionBanksFilterVM>(
                        " Select DB.BankID, A.UserName,DB.BankAccountNumber,DB.BillsOfExchangeAccountNumber, " +
                        " DB.ChequeUnderCollectionAccountNumber,DB.PostdatedChequeAccountNumber, " +
                        " ( " +
                            " Select CA.ArabicName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " DB.BankAccountNumber = CA.AccountNumber" +
                        
                       
                            " And " +
                            " DB.CompanyID = CA.CompanyID " +
                        " ) As BankAccountName, " +
                           
                        " ( " +
                            " Select CA.ArabicName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " DB.ChequeUnderCollectionAccountNumber = CA.AccountNumber " +
                            " And " +
                            " DB.CompanyID = CA.CompanyID " +
                        " ) As ChequeUnderCollectionAccountName, " +
                   
                        " ( " +
                            " Select CA.ArabicName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " DB.PostdatedChequeAccountNumber = CA.AccountNumber " +
                             
                            " And " +
                            " DB.CompanyID = CA.CompanyID " +
                        " ) As PostdatedChequeAccountName, " +

                       
                        " ( " +
                            " Select CA.ArabicName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " DB.BillsOfExchangeAccountNumber = CA.AccountNumber " +
                            
                            " And " +
                            " DB.CompanyID = CA.CompanyID " +
                        " ) As BillsOfExchangeAccountName " +
                           
                        " From DefinitionBanks DB,AspNetUsers A " +
                        " Where " +
                        " DB.CompanyID = A.fCompanyId " +
                        " And " +
                        " DB.AccountNumber = @AccountNumber " +
                        " And " +
                        " DB.InsUserID = A.Id " +
                        " And " +
                        " DB.CompanyID =@CompanyID " +
                        " And " +
                        " DB.IsDeleted = 0 " +
                           " And " +
                    " ( " +
                   "  DB.BillsOfExchangeAccountNumber = @AccountNumber " +

                    " Or " +

                   "  DB.PostdatedChequeAccountNumber = @AccountNumber " +

                   "  Or " +

                  "   DB.ChequeUnderCollectionAccountNumber = @AccountNumber " +

                   "  Or " +
                   "  DB.BankAccountNumber = @AccountNumber " +
                  "   ) " 
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)
                   


                ).FirstOrDefault();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new DefinitionBanksFilterVM();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<DefinitionBanksFilterVM>(
                    " Select DB.BankID, A.UserName,DB.BankAccountNumber,DB.BillsOfExchangeAccountNumber, " +
                        " DB.ChequeUnderCollectionAccountNumber,DB.PostdatedChequeAccountNumber, " +
                        " ( " +
                            " Select CA.ArabicName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " DB.BankAccountNumber = CA.AccountNumber" +
                            " And " +
                            " DB.CompanyID = CA.CompanyID " +
                        " ) As BankAccountName, " +
                           
                        " ( " +
                            " Select CA.ArabicName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " DB.ChequeUnderCollectionAccountNumber = CA.AccountNumber " +
                            " And " +
                            " DB.CompanyID = CA.CompanyID " +
                        " ) As ChequeUnderCollectionAccountName, " +
                       
                        " ( " +
                            " Select CA.ArabicName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " DB.PostdatedChequeAccountNumber = CA.AccountNumber " +

                            " And " +
                            " DB.CompanyID = CA.CompanyID " +
                        " ) As PostdatedChequeAccountName, " +

                      
                        " ( " +
                            " Select CA.ArabicName " +
                            " From ChartOfAccounts CA " +
                            " Where " +
                            " DB.BillsOfExchangeAccountNumber = CA.AccountNumber " +

                            " And " +
                            " DB.CompanyID = CA.CompanyID " +
                        " ) As BillsOfExchangeAccountName " +
                            
                        " From DefinitionBanks DB,AspNetUsers A " +
                        " Where " +
                        " DB.CompanyID = A.fCompanyId " +
                        " And " +
                        " DB.InsUserID = A.Id " +
                        " And " +
                        " DB.CompanyID =@CompanyID " +
                        " And " +
                        " DB.AccountNumber = @AccountNumber " +
                        " And " +
                        " DB.IsDeleted = 0 " +
                                " And " +
                    " ( " +
                   "  DB.BillsOfExchangeAccountNumber = @AccountNumber " +

                    " Or " +

                   "  DB.PostdatedChequeAccountNumber = @AccountNumber " +

                   "  Or " +

                  "   DB.ChequeUnderCollectionAccountNumber = @AccountNumber " +

                   "  Or " +
                   "  DB.BankAccountNumber = @AccountNumber " +
                  "   ) "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)
                   

                ).FirstOrDefault();
                }
                catch
                {
                    return new DefinitionBanksFilterVM();
                }
            }
        }
        public IEnumerable<DrawnBanksFilterVM> GetAllDrawnBank(int CompanyID)

        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<DrawnBanksFilterVM>(
                    " Select BankID,ArabicName As BankName " +
                    " From DrawnBanks " +
                    " Where " +
                    " CompanyID =@CompanyID " +
                    " And " +
                    " Active = 1 " +
                    " Order By BankID "
                    , new SqlParameter("@CompanyID", CompanyID)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<DrawnBanksFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<DrawnBanksFilterVM>(
                    " Select BankID,EnglishName As BankName " +
                    " From DrawnBanks " +
                    " Where " +
                    " CompanyID =@CompanyID " +
                    " And " +
                    " Active = 1 " +
                    " Order By BankID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<DrawnBanksFilterVM>();
                }
            }
        }
        public DrawnBanksFilterVM CheckAllDrawnBank(int CompanyID , string AccountNumber)

        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<DrawnBanksFilterVM>(
                    " Select BankID,ArabicName As BankName " +
                    " From DrawnBanks " +
                    " Where " +
                    " CompanyID =@CompanyID " +
                    " And " +
                    " AccountNumber =@AccountNumber " + 
                    " And " +
                    " Active = 1 " +
                    " Order By BankID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)
                ).FirstOrDefault();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new DrawnBanksFilterVM();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<DrawnBanksFilterVM>(
                    " Select BankID,EnglishName As BankName " +
                    " From DrawnBanks " +
                    " Where " +
                    " CompanyID =@CompanyID " +
                    " And " +
                    " AccountNumber =@AccountNumber " +
                    " And " +
                    " Active = 1 " +
                    " Order By BankID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)

                ).FirstOrDefault();
                }
                catch
                {
                    return new DrawnBanksFilterVM();
                }
            }
        }
        public IEnumerable<DefinitionBanksFilterVM> GetAllBankAccountNumber(int CompanyID)

        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<DefinitionBanksFilterVM>(
                    " Select DB.BankAccountNumber,DB.ChequeUnderCollectionAccountNumber, " +
                    " DB.PostdatedChequeAccountNumber,DB.BillsOfExchangeAccountNumber, " +
                    " ( " +
                        " Select CA.ArabicName " +
                        " From ChartOfAccounts CA " +
                        " Where " +
                        " DB.BankAccountNumber = CA.AccountNumber " +
                        " And " +
                        " DB.CompanyID = CA.CompanyID " +
                    " ) As BankAccountName, " +
                    " ( " +
                        " Case When DB.BankAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                          " Select CA.StoppedAccount " +
                          " From ChartOfAccounts CA " +
                          " Where " +
                          " DB.BankAccountNumber = CA.AccountNumber " +
                          " And " +
                          " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                    " ) As StoppedAccountBank, " +
                    " ( " +
                        " Case When DB.ChequeUnderCollectionAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                             " Select CA.StoppedAccount " +
                             " From ChartOfAccounts CA " +
                             " Where " +
                             " DB.ChequeUnderCollectionAccountNumber = CA.AccountNumber " +
                             " And " +
                             " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                     " ) As StoppedAccountChequeUnderCollection, " +
                     " ( " +
                        " Case When DB.PostdatedChequeAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                             " Select CA.StoppedAccount " +
                             " From ChartOfAccounts CA " +
                             " Where " +
                             " DB.PostdatedChequeAccountNumber = CA.AccountNumber " +
                             " And " +
                             " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                     " ) As StoppedAccountPostdatedCheque, " +
                     " ( " +
                        " Case When DB.BillsOfExchangeAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                             " Select CA.StoppedAccount " +
                             " From ChartOfAccounts CA " +
                             " Where " +
                             " DB.BillsOfExchangeAccountNumber = CA.AccountNumber " +
                             " And " +
                             " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                     " ) As StoppedAccountBillsOfExchange " +
                    " From DefinitionBanks DB " +
                    " Where " +
                    " DB.CompanyID = @CompanyID " +
                    " And " +
                    " DB.IsDeleted = 0 " +
                    " Order By Cast(DB.BankAccountNumber As bigint) "
                    , new SqlParameter("@CompanyID", CompanyID)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<DefinitionBanksFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<DefinitionBanksFilterVM>(
                    " Select DB.BankAccountNumber,DB.ChequeUnderCollectionAccountNumber, " +
                    " DB.PostdatedChequeAccountNumber,DB.BillsOfExchangeAccountNumber, " +
                    " ( " +
                        " Select CA.EnglishName " +
                        " From ChartOfAccounts CA " +
                        " Where " +
                        " DB.BankAccountNumber = CA.AccountNumber " +
                        " And " +
                        " DB.CompanyID = CA.CompanyID " +
                    " ) As BankAccountName, " +
                    " ( " +
                        " Case When DB.BankAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                          " Select CA.StoppedAccount " +
                          " From ChartOfAccounts CA " +
                          " Where " +
                          " DB.BankAccountNumber = CA.AccountNumber " +
                          " And " +
                          " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                    " ) As StoppedAccountBank, " +
                    " ( " +
                        " Case When DB.ChequeUnderCollectionAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                             " Select CA.StoppedAccount " +
                             " From ChartOfAccounts CA " +
                             " Where " +
                             " DB.ChequeUnderCollectionAccountNumber = CA.AccountNumber " +
                             " And " +
                             " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                     " ) As StoppedAccountChequeUnderCollection, " +
                     " ( " +
                        " Case When DB.PostdatedChequeAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                             " Select CA.StoppedAccount " +
                             " From ChartOfAccounts CA " +
                             " Where " +
                             " DB.PostdatedChequeAccountNumber = CA.AccountNumber " +
                             " And " +
                             " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                     " ) As StoppedAccountPostdatedCheque, " +
                     " ( " +
                        " Case When DB.BillsOfExchangeAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                             " Select CA.StoppedAccount " +
                             " From ChartOfAccounts CA " +
                             " Where " +
                             " DB.BillsOfExchangeAccountNumber = CA.AccountNumber " +
                             " And " +
                             " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                     " ) As StoppedAccountBillsOfExchange " +
                    " From DefinitionBanks DB " +
                    " Where " +
                    " DB.CompanyID = @CompanyID " +
                    " And " +
                    " DB.IsDeleted = 0 " +
                    " Order By Cast(DB.BankAccountNumber As bigint) "
                    , new SqlParameter("@CompanyID", CompanyID)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<DefinitionBanksFilterVM>();
                }
            }
        }
        public DefinitionBanksFilterVM CheckAllBankAccountNumber(int CompanyID, string AccountNumber)

        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<DefinitionBanksFilterVM>(
                     " Select DB.BankAccountNumber,DB.ChequeUnderCollectionAccountNumber, " +
                    " DB.PostdatedChequeAccountNumber,DB.BillsOfExchangeAccountNumber, " +
                    " ( " +
                        " Select CA.ArabicName " +
                        " From ChartOfAccounts CA " +
                        " Where " +
                        " DB.BankAccountNumber = CA.AccountNumber " +
                        " And " +
                        " DB.CompanyID = CA.CompanyID " +
                    " ) As BankAccountName, " +
                    " ( " +
                        " Case When DB.BankAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                          " Select CA.StoppedAccount " +
                          " From ChartOfAccounts CA " +
                          " Where " +
                          " DB.BankAccountNumber = CA.AccountNumber " +
                          " And " +
                          " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                    " ) As StoppedAccountBank, " +
                    " ( " +
                        " Case When DB.ChequeUnderCollectionAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                             " Select CA.StoppedAccount " +
                             " From ChartOfAccounts CA " +
                             " Where " +
                             " DB.ChequeUnderCollectionAccountNumber = CA.AccountNumber " +
                             " And " +
                             " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                     " ) As StoppedAccountChequeUnderCollection, " +
                     " ( " +
                        " Case When DB.PostdatedChequeAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                             " Select CA.StoppedAccount " +
                             " From ChartOfAccounts CA " +
                             " Where " +
                             " DB.PostdatedChequeAccountNumber = CA.AccountNumber " +
                             " And " +
                             " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                     " ) As StoppedAccountPostdatedCheque, " +
                     " ( " +
                        " Case When DB.BillsOfExchangeAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                             " Select CA.StoppedAccount " +
                             " From ChartOfAccounts CA " +
                             " Where " +
                             " DB.BillsOfExchangeAccountNumber = CA.AccountNumber " +
                             " And " +
                             " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                     " ) As StoppedAccountBillsOfExchange " +
                    " From DefinitionBanks DB " +
                    " Where " +
                    " DB.CompanyID = @CompanyID " +
                    " And " +
                    " DB.IsDeleted = 0 " +
                    " And " +
                    " ( " +
                   "  DB.BillsOfExchangeAccountNumber = @AccountNumber " +

                    " Or " +

                   "  DB.PostdatedChequeAccountNumber = @AccountNumber " +

                   "  Or " +

                  "   DB.ChequeUnderCollectionAccountNumber = @AccountNumber " +

                   "  Or " +
                   "  DB.BankAccountNumber = @AccountNumber " +
                  "   ) "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)



                ).FirstOrDefault();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new DefinitionBanksFilterVM();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<DefinitionBanksFilterVM>(
                    " Select DB.BankAccountNumber,DB.ChequeUnderCollectionAccountNumber, " +
                    " DB.PostdatedChequeAccountNumber,DB.BillsOfExchangeAccountNumber, " +
                    " ( " +
                        " Select CA.EnglishName " +
                        " From ChartOfAccounts CA " +
                        " Where " +
                        " DB.BankAccountNumber = CA.AccountNumber " +
                        " And " +
                        " DB.CompanyID = CA.CompanyID " +
                    " ) As BankAccountName, " +
                    " ( " +
                        " Case When DB.BankAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                          " Select CA.StoppedAccount " +
                          " From ChartOfAccounts CA " +
                          " Where " +
                          " DB.BankAccountNumber = CA.AccountNumber " +
                          " And " +
                          " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                    " ) As StoppedAccountBank, " +
                    " ( " +
                        " Case When DB.ChequeUnderCollectionAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                             " Select CA.StoppedAccount " +
                             " From ChartOfAccounts CA " +
                             " Where " +
                             " DB.ChequeUnderCollectionAccountNumber = CA.AccountNumber " +
                             " And " +
                             " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                     " ) As StoppedAccountChequeUnderCollection, " +
                     " ( " +
                        " Case When DB.PostdatedChequeAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                             " Select CA.StoppedAccount " +
                             " From ChartOfAccounts CA " +
                             " Where " +
                             " DB.PostdatedChequeAccountNumber = CA.AccountNumber " +
                             " And " +
                             " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                     " ) As StoppedAccountPostdatedCheque, " +
                     " ( " +
                        " Case When DB.BillsOfExchangeAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                             " Select CA.StoppedAccount " +
                             " From ChartOfAccounts CA " +
                             " Where " +
                             " DB.BillsOfExchangeAccountNumber = CA.AccountNumber " +
                             " And " +
                             " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                     " ) As StoppedAccountBillsOfExchange " +
                    " From DefinitionBanks DB " +
                    " Where " +
                    " DB.CompanyID = @CompanyID " +
                    " And " +
                    " DB.IsDeleted = 0 " +
                    " And " +
                    " ( " +
                   "  DB.BillsOfExchangeAccountNumber = @AccountNumber " +

                    " Or " +

                   "  DB.PostdatedChequeAccountNumber = @AccountNumber " +

                   "  Or " +

                  "   DB.ChequeUnderCollectionAccountNumber = @AccountNumber " +

                   "  Or " +
                   "  DB.BankAccountNumber = @AccountNumber " +
                  "   ) "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AccountNumber", AccountNumber)


                ).FirstOrDefault();
                }
                catch
                {
                    return new DefinitionBanksFilterVM();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetAllTransferFromFundToUnderCollection(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber,P.FCurrencyID,P.ConversionFactor, " +
                    " P.CompanyYear,P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                        " Select DB.ArabicName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As ChequeBoxName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 1 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber,P.FCurrencyID,P.ConversionFactor, " +
                    " P.CompanyYear,P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                        " Select DB.EnglishName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As ChequeBoxName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 1 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetAllReturnAChequeFromTheChequeBox(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber,P.FCurrencyID,P.ConversionFactor, " +
                    " P.CompanyYear,P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                        " Select DB.ArabicName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As ChequeBoxName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 1 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber,P.FCurrencyID,P.ConversionFactor, " +
                    " P.CompanyYear,P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                        " Select DB.EnglishName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As ChequeBoxName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 1 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetAllTransferFromFundToClearingDeposit(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber,P.FCurrencyID,P.ConversionFactor, " +
                    " P.CompanyYear,P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName,P.VHI, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                        " Select DB.ArabicName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As ChequeBoxName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 1 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber,P.FCurrencyID,P.ConversionFactor, " +
                    " P.CompanyYear,P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName,P.VHI, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                        " Select DB.EnglishName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As ChequeBoxName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 1 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetAllTransferFromFundToChequeEndorsement(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber,P.FCurrencyID,P.ConversionFactor, " +
                    " P.CompanyYear,P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName,P.VHI, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                        " Select DB.ArabicName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As ChequeBoxName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 1 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber,P.FCurrencyID,P.ConversionFactor, " +
                    " P.CompanyYear,P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName,P.VHI, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                        " Select DB.EnglishName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As ChequeBoxName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 1 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetAllPaymentChequeUnderCollection(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName,P.VHI, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFifth = C.AccountNumber " +
                    " ) As UnderCollectionAccountName, " +
                    " ( " +
                        " Select DB.ArabicName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 2 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName,P.VHI, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFifth = C.AccountNumber " +
                    " ) As UnderCollectionAccountName, " +
                    " ( " +
                        " Select DB.EnglishName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 2 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetAllPaymentChequeEndorsement(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As EndorsementAccountName, " +
                    " ( " +
                        " Select DB.ArabicName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 5 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As EndorsementAccountName, " +
                    " ( " +
                        " Select DB.EnglishName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 5 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetAllDrawingChequeUnderCollection(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFifth = C.AccountNumber " +
                    " ) As UnderCollectionAccountName, " +
                    " ( " +
                        " Select DB.ArabicName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 2 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFifth = C.AccountNumber " +
                    " ) As UnderCollectionAccountName, " +
                    " ( " +
                        " Select DB.EnglishName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 2 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetAllReturnChequeUnderCollection(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As BankUnderCollectionAccountName, " +
                    " ( " +
                        " Select DB.ArabicName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 3 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As BankUnderCollectionAccountName, " +
                    " ( " +
                        " Select DB.EnglishName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 3 " +
                    " And " +
                    " FORMAT(P.ChequeDate,'dd/MM/yyyy') >= FORMAT(@FromDate,'dd/MM/yyyy') " +
                    " And " +
                    " FORMAT(P.ChequeDate,'dd/MM/yyyy') <= FORMAT(@ToDate,'dd/MM/yyyy') " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetAllReturnChequeClearingDeposit(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As BankClearingDepositAccountName, " +
                    " ( " +
                        " Select DB.ArabicName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 4 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As BankClearingDepositAccountName, " +
                    " ( " +
                        " Select DB.EnglishName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 4 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetAllReturnChequeEndorsement(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As EndorsementAccountName, " +
                    " ( " +
                        " Select DB.ArabicName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 5 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As EndorsementAccountName, " +
                    " ( " +
                        " Select DB.EnglishName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 5 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetAllFundChequesDrawnFromUnderCollection(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFifth = C.AccountNumber " +
                    " ) As BankUnderCollectionAccountName, " +
                    " ( " +
                        " Select DB.ArabicName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 7 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFifth = C.AccountNumber " +
                    " ) As BankUnderCollectionAccountName, " +
                    " ( " +
                        " Select DB.EnglishName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 7 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetAllReturnedChequeFund(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select CompanyTransactionKindNo, AccountNumberFirst, AccountNumberSecond, AccountNumberThird, AccountNumberFourth, AccountNumberFifth," +
                    " ChequeAmount, ChequeDate, ChequeNumber, RowNumber, VoucherNumber, FCurrencyID, ConversionFactor, " +
                    " CompanyYear, sChequeDate,TransactionKindNo, VoucherDate, UserName, DrawerName, " +
                    " IsBill,BillCustomerNumber,CustomerName,BankOrEndorsementAccountName,BankName,BillCustomerName,VHI " +
                    " From ( " +
                        " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                        " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                        " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName, " +
                        " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                        " ( " +
                          " Select C.ArabicName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " P.AccountNumberFourth = C.AccountNumber " +
                        " ) As CustomerName, " +
                        " ( " +
                          " Select C.ArabicName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " C.AccountNumber = CASE " +
                          " WHEN P.AccountNumberFifth = '' Or P.AccountNumberFifth is null THEN  P.AccountNumberSecond " +
                          " ELSE P.AccountNumberFifth " +
                          " END " +
                        " ) As BankOrEndorsementAccountName, " +
                        " ( " +
                        " Select DB.ArabicName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                        " ) As BankName, " +
                        " ( " +
                          " Select C.ArabicName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " P.BillCustomerAccountNumber = C.AccountNumber " +
                        " ) As BillCustomerName " +
                        " From Papers P, AspNetUsers A " +
                        " Where " +
                        " P.CompanyID = A.fCompanyId " +
                        " And " +
                        " P.InsUserID = A.Id " +
                        " And " +
                        " P.ChequeCase = 6 " +
                        " And " +
                        " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                        " And " +
                        " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                        " And " +
                        " P.CompanyID = @CompanyID " +
                        " Union All " +
                        " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                        " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                        " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName, " +
                        " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                        " ( " +
                          " Select C.ArabicName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " P.AccountNumberFourth = C.AccountNumber " +
                        " ) As CustomerName, " +
                        " ( " +
                          " Select C.ArabicName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " P.AccountNumberSecond = C.AccountNumber " +
                        " ) As BankOrEndorsementAccountName, " +
                        " ( " +
                        " Select DB.ArabicName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                        " ) As BankName, " +
                        " ( " +
                          " Select C.ArabicName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " P.BillCustomerAccountNumber = C.AccountNumber " +
                        " ) As BillCustomerName " +
                        " From Papers P, AspNetUsers A " +
                        " Where " +
                        " P.CompanyID = A.fCompanyId " +
                        " And " +
                        " P.InsUserID = A.Id " +
                        " And " +
                        " P.ChequeCase = 10 " +
                        " And " +
                        " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                        " And " +
                        " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                        " And " +
                        " P.CompanyID = @CompanyID " +
                    " ) As ReturnPaper " +
                    " Order By ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select CompanyTransactionKindNo, AccountNumberFirst, AccountNumberSecond, AccountNumberThird, AccountNumberFourth, AccountNumberFifth," +
                    " ChequeAmount, ChequeDate, ChequeNumber, RowNumber, VoucherNumber, FCurrencyID, ConversionFactor, " +
                    " CompanyYear, sChequeDate,TransactionKindNo, VoucherDate, UserName, DrawerName, " +
                    " IsBill,BillCustomerNumber,CustomerName,BankOrEndorsementAccountName,BankName,BillCustomerName,VHI, " +
                    " From ( " +
                        " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                        " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                        " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName, " +
                        " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                        " ( " +
                          " Select C.EnglishName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " P.AccountNumberFourth = C.AccountNumber " +
                        " ) As CustomerName, " +
                        " ( " +
                          " Select C.EnglishName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " C.AccountNumber = CASE " +
                          " WHEN P.AccountNumberFifth = '' Or P.AccountNumberFifth is null THEN  P.AccountNumberSecond " +
                          " ELSE P.AccountNumberFifth " +
                          " END " +
                        " ) As BankOrEndorsementAccountName, " +
                        " ( " +
                        " Select DB.EnglishName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                        " ) As BankName, " +
                        " ( " +
                          " Select C.EnglishName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " P.BillCustomerAccountNumber = C.AccountNumber " +
                        " ) As BillCustomerName " +
                        " From Papers P, AspNetUsers A " +
                        " Where " +
                        " P.CompanyID = A.fCompanyId " +
                        " And " +
                        " P.InsUserID = A.Id " +
                        " And " +
                        " P.ChequeCase = 6 " +
                        " And " +
                        " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                        " And " +
                        " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                        " And " +
                        " P.CompanyID = @CompanyID " +
                        " Union All " +
                        " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                        " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                        " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName, " +
                        " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                        " ( " +
                          " Select C.EnglishName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " P.AccountNumberFourth = C.AccountNumber " +
                        " ) As CustomerName, " +
                        " ( " +
                          " Select C.EnglishName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " P.AccountNumberSecond = C.AccountNumber " +
                        " ) As BankOrEndorsementAccountName, " +
                        " ( " +
                        " Select DB.EnglishName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                        " ) As BankName, " +
                        " ( " +
                          " Select C.EnglishName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " P.BillCustomerAccountNumber = C.AccountNumber " +
                        " ) As BillCustomerName " +
                        " From Papers P, AspNetUsers A " +
                        " Where " +
                        " P.CompanyID = A.fCompanyId " +
                        " And " +
                        " P.InsUserID = A.Id " +
                        " And " +
                        " P.ChequeCase = 10 " +
                        " And " +
                        " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                        " And " +
                        " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                        " And " +
                        " P.CompanyID = @CompanyID " +
                    " ) As ReturnPaper " +
                    " Order By ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetAllCourtFund(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName,P.CaseNumber, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFifth = C.AccountNumber " +
                    " ) As BankUnderCollectionAccountName, " +
                    " ( " +
                        " Select DB.ArabicName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 12 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, P.AccountNumberFourth, P.AccountNumberFifth, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName,P.CaseNumber, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber,P.VHI, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As CustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFifth = C.AccountNumber " +
                    " ) As BankUnderCollectionAccountName, " +
                    " ( " +
                        " Select DB.EnglishName From DrawnBanks DB " +
                        " Where " +
                        " P.AccountNumberThird = DB.BankID " +
                        " And " +
                        " P.CompanyID = DB.CompanyID " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 12 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetAllPostdatedCheque(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName,P.VHI, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As PostdatedChequeName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberThird = C.AccountNumber " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As PaidToAccount " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 14 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName,P.VHI, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As PostdatedChequeName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberThird = C.AccountNumber " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As PaidToAccount " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 14 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetAllReturnPostdatedCheque(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName,P.ChequeCase,P.VHI, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As PostdatedChequeName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberThird = C.AccountNumber " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As PaidToAccount " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 14 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName,P.ChequeCase,P.VHI, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As PostdatedChequeName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberThird = C.AccountNumber " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As PaidToAccount " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 14  " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetAllReturnPaidPostdatedCheque(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName,P.ChequeCase, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As PostdatedChequeName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberThird = C.AccountNumber " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As PaidToAccount " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 15 " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, A.UserName, P.DrawerName,P.ChequeCase, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As PostdatedChequeName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberThird = C.AccountNumber " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As PaidToAccount " +
                    " From Papers P, AspNetUsers A " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 15  " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetAllCheques(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                     " Select P.PaidInAccountNumber, P.BankOrEndorsementAccountNumber, P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.VoucherNumber, " +
                     " P.CompanyYear, P.VoucherDate, P.UserName, P.DrawerName, P.IsBill, P.BillCustomerNumber, P.OriginalVoucherNumber, " +
                     " P.CaseName, P.ChequeCase, P.CompanyID, P.PaidInAccountName, P.BillCustomerName, P.BankOrEndorsementAccountName, " +
                     " P.OriginalCompanyTransactionKind, P.CaseNumber, P.OriginalCompanyTransactionKindNo, P.OriginalTransactionKindNo,P.SaleID, " +
                     " (" +
                       " Select S.SalesName " +
                       " From Sales S " +
                       " Where " +
                       " P.SaleID = S.SalesID " +
                       " And " +
                       " P.CompanyID = S.CompanyID " +
                     " ) As SaleName " +
                    " From " +
                    " ( " +
                       " Select Distinct P.AccountNumberSecond As PaidInAccountNumber, '' As BankOrEndorsementAccountNumber, P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.VoucherNumber, " +
                       " P.CompanyYear, P.VoucherDate, A.UserName, P.DrawerName, P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber, P.OriginalVoucherNumber, " +
                       " PC.ArabicName As CaseName, P.ChequeCase, P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID,  " +
                       " ( " +
                        " Select CT.ArabicName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                       " ( " +
                         " Select C.ArabicName From ChartOfAccounts C " +
                         " Where " +
                         " P.CompanyID = C.CompanyID " +
                         " And " +
                         " P.AccountNumberSecond = C.AccountNumber " +
                      " ) As PaidInAccountName, " +
                      " ( " +
                        " Select C.ArabicName From ChartOfAccounts C " +
                        " Where " +
                        " P.CompanyID = C.CompanyID " +
                        " And " +
                        " P.BillCustomerAccountNumber = C.AccountNumber " +
                     " ) As BillCustomerName, " +
                     " '' As BankOrEndorsementAccountName " +
                     " From Papers P, AspNetUsers A, PapersCases PC " +
                     " Where " +
                     " P.CompanyID = A.fCompanyId " +
                     " And " +
                     " P.InsUserID = A.Id " +
                     " And " +
                     " P.ChequeCase = 1 " +
                     " And " +
                     " P.ChequeCase = PC.CaseID " +
                     " Union All " +
                     " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberFifth As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                     " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                     " PC.ArabicName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                     " ( " +
                        " Select CT.ArabicName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFifth = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 2 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberSecond As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.ArabicName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.ArabicName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 3 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberSecond As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.ArabicName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.ArabicName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 4 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberSecond As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.ArabicName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.ArabicName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 5 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,(CASE " +
                    " WHEN P.AccountNumberFifth = '' Or P.AccountNumberFifth is null THEN P.AccountNumberSecond " +
                    " ELSE P.AccountNumberFifth " +
                    " END) As BankOrEndorsementAccountNumber, P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.ArabicName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.ArabicName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                   " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " C.AccountNumber = CASE " +
                      " WHEN P.AccountNumberFifth = '' Or P.AccountNumberFifth is null THEN  P.AccountNumberSecond " +
                      " ELSE P.AccountNumberFifth " +
                      " END " +
                    " )  As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 6 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberFifth As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.ArabicName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.ArabicName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFifth = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 7 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,(CASE " +
                    " WHEN P.AccountNumberFifth = '' Or P.AccountNumberFifth is null THEN P.AccountNumberSecond " +
                    " ELSE P.AccountNumberFifth " +
                    " END) As BankOrEndorsementAccountNumber, P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.ArabicName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.ArabicName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " C.AccountNumber = CASE " +
                      " WHEN P.AccountNumberFifth = '' Or P.AccountNumberFifth is null THEN  P.AccountNumberSecond " +
                      " ELSE P.AccountNumberFifth " +
                      " END " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 8 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberFifth As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.ArabicName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.ArabicName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFifth = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 9 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberSecond As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.ArabicName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.ArabicName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 10 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberSecond As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.ArabicName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.ArabicName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                     " Select C.ArabicName From ChartOfAccounts C " +
                     " Where " +
                     " P.CompanyID = C.CompanyID " +
                     " And " +
                     " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 11 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberSecond As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.ArabicName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.ArabicName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 12 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberSecond As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.ArabicName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.ArabicName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 13 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberSecond As PaidInAccountNumber, '' As BankOrEndorsementAccountNumber, P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.VoucherNumber, " +
                    " P.CompanyYear, P.VoucherDate, A.UserName, P.DrawerName, P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber, P.OriginalVoucherNumber, " +
                    " PC.ArabicName As CaseName, P.ChequeCase, P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID,  " +
                    " ( " +
                        " Select CT.ArabicName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                     " ) As OriginalCompanyTransactionKind, " +
                     " ( " +
                         " Select C.ArabicName From ChartOfAccounts C " +
                         " Where " +
                         " P.CompanyID = C.CompanyID " +
                         " And " +
                         " P.AccountNumberSecond = C.AccountNumber " +
                     " ) As PaidInAccountName, " +
                     " ( " +
                        " Select C.ArabicName From ChartOfAccounts C " +
                        " Where " +
                        " P.CompanyID = C.CompanyID " +
                        " And " +
                        " P.BillCustomerAccountNumber = C.AccountNumber " +
                     " ) As BillCustomerName, " +
                     " '' As BankOrEndorsementAccountName " +
                     " From Papers P, AspNetUsers A, PapersCases PC " +
                     " Where " +
                     " P.CompanyID = A.fCompanyId " +
                     " And " +
                     " P.InsUserID = A.Id " +
                     " And " +
                     " P.ChequeCase = 18 " +
                     " And " +
                     " P.ChequeCase = PC.CaseID " +
                " ) " +
                " As P " +
                " Where " +
                " P.CompanyID = @CompanyID " +
                " And " +
                " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                " And " +
                " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                " And " +
                " ( " +
                    " P.ChequeCase <= 13 " +
                    " Or " +
                    " P.ChequeCase = 18 " +
                " ) "
                , new SqlParameter("@FromDate", Fromdate)
                , new SqlParameter("@ToDate", ToDate)
                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select P.PaidInAccountNumber, P.BankOrEndorsementAccountNumber, P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.VoucherNumber, " +
                     " P.CompanyYear, P.VoucherDate, P.UserName, P.DrawerName, P.IsBill, P.BillCustomerNumber, P.OriginalVoucherNumber, " +
                     " P.CaseName, P.ChequeCase, P.CompanyID, P.PaidInAccountName, P.BillCustomerName, P.BankOrEndorsementAccountName, " +
                     " P.OriginalCompanyTransactionKind, P.CaseNumber, P.OriginalCompanyTransactionKindNo, P.OriginalTransactionKindNo,P.SaleID, " +
                     " (" +
                       " Select S.SalesName " +
                       " From Sales S " +
                       " Where " +
                       " P.SaleID = S.SalesID " +
                       " And " +
                       " P.CompanyID = S.CompanyID " +
                     " ) As SaleName " +
                    " From " +
                    " ( " +
                       " Select Distinct P.AccountNumberSecond As PaidInAccountNumber, '' As BankOrEndorsementAccountNumber, P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.VoucherNumber, " +
                       " P.CompanyYear, P.VoucherDate, A.UserName, P.DrawerName, P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber, P.OriginalVoucherNumber, " +
                       " PC.EnglishName As CaseName, P.ChequeCase, P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                       " ( " +
                        " Select CT.EnglishName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                       " ( " +
                         " Select C.EnglishName From ChartOfAccounts C " +
                         " Where " +
                         " P.CompanyID = C.CompanyID " +
                         " And " +
                         " P.AccountNumberSecond = C.AccountNumber " +
                      " ) As PaidInAccountName, " +
                      " ( " +
                        " Select C.EnglishName From ChartOfAccounts C " +
                        " Where " +
                        " P.CompanyID = C.CompanyID " +
                        " And " +
                        " P.BillCustomerAccountNumber = C.AccountNumber " +
                     " ) As BillCustomerName, " +
                     " '' As BankOrEndorsementAccountName " +
                     " From Papers P, AspNetUsers A, PapersCases PC " +
                     " Where " +
                     " P.CompanyID = A.fCompanyId " +
                     " And " +
                     " P.InsUserID = A.Id " +
                     " And " +
                     " P.ChequeCase = 1 " +
                     " And " +
                     " P.ChequeCase = PC.CaseID " +
                     " Union All " +
                     " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberFifth As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                     " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                     " PC.EnglishName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                     " ( " +
                        " Select CT.EnglishName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFifth = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 2 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberSecond As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.EnglishName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.EnglishName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 3 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberSecond As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.EnglishName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.EnglishName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 4 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberSecond As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.EnglishName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.EnglishName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 5 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,(CASE " +
                    " WHEN P.AccountNumberFifth = '' Or P.AccountNumberFifth is null THEN P.AccountNumberSecond " +
                    " ELSE P.AccountNumberFifth " +
                    " END) As BankOrEndorsementAccountNumber, P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.EnglishName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.EnglishName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                   " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " C.AccountNumber = CASE " +
                      " WHEN P.AccountNumberFifth = '' Or P.AccountNumberFifth is null THEN  P.AccountNumberSecond " +
                      " ELSE P.AccountNumberFifth " +
                      " END " +
                    " )  As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 6 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberFifth As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.EnglishName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.EnglishName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFifth = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 7 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,(CASE " +
                    " WHEN P.AccountNumberFifth = '' Or P.AccountNumberFifth is null THEN P.AccountNumberSecond " +
                    " ELSE P.AccountNumberFifth " +
                    " END) As BankOrEndorsementAccountNumber, P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.EnglishName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.EnglishName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " C.AccountNumber = CASE " +
                      " WHEN P.AccountNumberFifth = '' Or P.AccountNumberFifth is null THEN  P.AccountNumberSecond " +
                      " ELSE P.AccountNumberFifth " +
                      " END " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 8 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberFifth As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.EnglishName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.EnglishName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFifth = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 9 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberSecond As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.EnglishName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.EnglishName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 10 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberSecond As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.EnglishName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.EnglishName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                     " Select C.EnglishName From ChartOfAccounts C " +
                     " Where " +
                     " P.CompanyID = C.CompanyID " +
                     " And " +
                     " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 11 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberSecond As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.EnglishName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.EnglishName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 12 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberFourth As PaidInAccountNumber,P.AccountNumberSecond As BankOrEndorsementAccountNumber,P.ChequeAmount,P.ChequeDate,P.ChequeNumber,P.VoucherNumber, " +
                    " P.CompanyYear,P.VoucherDate,A.UserName,P.DrawerName,P.IsBill,P.BillCustomerAccountNumber As BillCustomerNumber,P.OriginalVoucherNumber, " +
                    " PC.EnglishName As CaseName,P.ChequeCase,P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                    " ( " +
                        " Select CT.EnglishName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFourth = C.AccountNumber " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As BankOrEndorsementAccountName " +
                    " From Papers P, AspNetUsers A, PapersCases PC " +
                    " Where " +
                    " P.CompanyID = A.fCompanyId " +
                    " And " +
                    " P.InsUserID = A.Id " +
                    " And " +
                    " P.ChequeCase = 13 " +
                    " And " +
                    " P.ChequeCase = PC.CaseID " +
                    " Union All " +
                    " Select Distinct P.AccountNumberSecond As PaidInAccountNumber, '' As BankOrEndorsementAccountNumber, P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.VoucherNumber, " +
                       " P.CompanyYear, P.VoucherDate, A.UserName, P.DrawerName, P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber, P.OriginalVoucherNumber, " +
                       " PC.EnglishName As CaseName, P.ChequeCase, P.CompanyID,P.CaseNumber,P.OriginalCompanyTransactionKindNo,P.OriginalTransactionKindNo,P.SaleID, " +
                       " ( " +
                        " Select CT.EnglishName From CompanyTransactionKinds CT " +
                        " Where " +
                        " P.CompanyID = CT.CompanyID " +
                        " And " +
                        " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                       " ) As OriginalCompanyTransactionKind, " +
                       " ( " +
                         " Select C.EnglishName From ChartOfAccounts C " +
                         " Where " +
                         " P.CompanyID = C.CompanyID " +
                         " And " +
                         " P.AccountNumberSecond = C.AccountNumber " +
                      " ) As PaidInAccountName, " +
                      " ( " +
                        " Select C.EnglishName From ChartOfAccounts C " +
                        " Where " +
                        " P.CompanyID = C.CompanyID " +
                        " And " +
                        " P.BillCustomerAccountNumber = C.AccountNumber " +
                     " ) As BillCustomerName, " +
                     " '' As BankOrEndorsementAccountName " +
                     " From Papers P, AspNetUsers A, PapersCases PC " +
                     " Where " +
                     " P.CompanyID = A.fCompanyId " +
                     " And " +
                     " P.InsUserID = A.Id " +
                     " And " +
                     " P.ChequeCase = 18 " +
                     " And " +
                     " P.ChequeCase = PC.CaseID " +
                " ) " +
                " As P " +
                " Where " +
                " P.CompanyID = @CompanyID " +
                " And " +
                " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                " And " +
                " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                " And " +
                " ( " +
                    " P.ChequeCase <= 13 " +
                    " Or " +
                    " P.ChequeCase = 18 " +
                " ) "
                , new SqlParameter("@FromDate", Fromdate)
                , new SqlParameter("@ToDate", ToDate)
                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetAllPaymentCheques(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                        " Select Distinct P.AccountNumberFirst As PaidToAccountNumber, AccountNumberThird As BankAccountNumber, AccountNumberSecond As PostdatedAccountNumber, " +
                        " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.VoucherNumber, P.CompanyYear, P.VoucherDate, A.UserName, P.DrawerName, " +
                        " P.OriginalVoucherNumber, PC.ArabicName As CaseName, P.ChequeCase, P.CompanyID, " +
                       " ( " +
                         " Select CT.ArabicName From CompanyTransactionKinds CT " +
                         " Where " +
                         " P.CompanyID = CT.CompanyID " +
                         " And " +
                         " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                        " ) As OriginalCompanyTransactionKind, " +
                        " ( " +
                          " Select C.ArabicName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " P.AccountNumberFirst = C.AccountNumber " +
                       " ) As PaidToAccountName, " +
                       " ( " +
                          " Select C.ArabicName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " P.AccountNumberThird = C.AccountNumber " +
                       " ) As BankAccountName, " +
                       " (  " +
                          " Select C.ArabicName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " P.AccountNumberSecond = C.AccountNumber " +
                       " ) As PostdatedAccountName " +
                      " From Papers P, AspNetUsers A, PapersCases PC " +
                      " Where " +
                      " P.CompanyID = A.fCompanyId " +
                      " And " +
                      " P.InsUserID = A.Id " +
                      " And " +
                      " P.ChequeCase in (14, 15, 16, 17) " +
                      " And " +
                      " P.ChequeCase = PC.CaseID " +
                      " And " +
                      " P.CompanyID = @CompanyID " +
                      " And " +
                      " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                      " And " +
                      " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.AccountNumberFirst As PaidToAccountNumber, AccountNumberThird As BankAccountNumber, AccountNumberSecond As PostdatedAccountNumber, " +
                        " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.VoucherNumber, P.CompanyYear, P.VoucherDate, A.UserName, P.DrawerName, " +
                        " P.OriginalVoucherNumber, PC.EnglishName As CaseName, P.ChequeCase, P.CompanyID, " +
                       " ( " +
                         " Select CT.EnglishName From CompanyTransactionKinds CT " +
                         " Where " +
                         " P.CompanyID = CT.CompanyID " +
                         " And " +
                         " P.OriginalCompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                        " ) As OriginalCompanyTransactionKind, " +
                        " ( " +
                          " Select C.EnglishName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " P.AccountNumberFirst = C.AccountNumber " +
                       " ) As PaidToAccountName, " +
                       " ( " +
                          " Select C.EnglishName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " P.AccountNumberThird = C.AccountNumber " +
                       " ) As BankAccountName, " +
                       " (  " +
                          " Select C.EnglishName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " P.AccountNumberSecond = C.AccountNumber " +
                       " ) As PostdatedAccountName " +
                      " From Papers P, AspNetUsers A, PapersCases PC " +
                      " Where " +
                      " P.CompanyID = A.fCompanyId " +
                      " And " +
                      " P.InsUserID = A.Id " +
                      " And " +
                      " P.ChequeCase in (14, 15, 16, 17) " +
                      " And " +
                      " P.ChequeCase = PC.CaseID " +
                      " And " +
                      " P.CompanyID = @CompanyID " +
                      " And " +
                      " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                      " And " +
                      " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetTrankingChequesReport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.ChequeCase, P.RowNumber, P.AccountNumberThird, " +
                    " P.OriginalCompanyTransactionKindNo, P.OriginalTransactionKindNo, P.OriginalVoucherNumber, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber, PC.ArabicName As CaseName, P.CompanyYear, P.DrawerName,P.sChequeDate, " +
                    " (CASE " +
                    " WHEN P.AccountNumberFourth = '' Or P.AccountNumberFourth is null THEN P.AccountNumberSecond " +
                    " ELSE P.AccountNumberFourth " +
                    " END) As PaidInAccountNumber, " +
                    " ( " +
                    " Select C.ArabicName From ChartOfAccounts C " +
                    " Where " +
                    " P.CompanyID = C.CompanyID " +
                    " And " +
                    " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                    " Select C.ArabicName From ChartOfAccounts C " +
                    " Where " +
                    " P.CompanyID = C.CompanyID " +
                    " And " +
                    " C.AccountNumber = CASE " +
                    " WHEN P.AccountNumberFourth = '' Or P.AccountNumberFourth is null THEN  P.AccountNumberSecond " +
                    " ELSE P.AccountNumberFourth " +
                    " END " +
                    " )  As PaidInAccountName " +
                    " From Papers P,PapersCases PC " +
                    " Where " +
                    " P.ChequeCase = PC.CaseID " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " ( " +
                        " P.ChequeCase <= 13 " +
                        " Or " +
                        " P.ChequeCase = 18 " +
                    " ) " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.ChequeCase, P.RowNumber, P.AccountNumberThird, " +
                    " P.OriginalCompanyTransactionKindNo, P.OriginalTransactionKindNo, P.OriginalVoucherNumber, " +
                    " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber, PC.EnglishName As CaseName, P.CompanyYear, P.DrawerName,P.sChequeDate, " +
                    " (CASE " +
                    " WHEN P.AccountNumberFourth = '' Or P.AccountNumberFourth is null THEN P.AccountNumberSecond " +
                    " ELSE P.AccountNumberFourth " +
                    " END) As PaidInAccountNumber, " +
                    " ( " +
                    " Select C.EnglishName From ChartOfAccounts C " +
                    " Where " +
                    " P.CompanyID = C.CompanyID " +
                    " And " +
                    " P.BillCustomerAccountNumber = C.AccountNumber " +
                    " ) As BillCustomerName, " +
                    " ( " +
                    " Select C.EnglishName From ChartOfAccounts C " +
                    " Where " +
                    " P.CompanyID = C.CompanyID " +
                    " And " +
                    " C.AccountNumber = CASE " +
                    " WHEN P.AccountNumberFourth = '' Or P.AccountNumberFourth is null THEN  P.AccountNumberSecond " +
                    " ELSE P.AccountNumberFourth " +
                    " END " +
                    " )  As PaidInAccountName " +
                    " From Papers P,PapersCases PC " +
                    " Where " +
                    " P.ChequeCase = PC.CaseID " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " ( " +
                        " P.ChequeCase <= 13 " +
                        " Or " +
                        " P.ChequeCase = 18 " +
                    " ) " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<AccountingDetailsReportVM> GetVoucherDetails(int CompanyID, string VoucherNumber, int TransactionKindNo, int CompanyTransactionKindNo, int CompanyYear)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<AccountingDetailsReportVM>(
                    " Select T.Debit, T.Credit, T.CreditDebitForeign, T.AccountNumber, T.Note, T.CostCenter, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " C.CompanyID = T.CompanyID " +
                      " And " +
                      " C.AccountNumber = T.AccountNumber " +
                    " ) As AccountName, " +
                    " ( " +
                      " Select CC.ArabicName From CostCenters CC " +
                      " Where " +
                      " CC.CompanyID = T.CompanyID " +
                      " And " +
                      " CC.CostNumber = T.CostCenter " +
                    " ) As CostCenterName " +
                    " From Transactions T " +
                    " Where " +
                    " T.CompanyID = @CompanyID " +
                    " And " +
                    " T.VoucherNumber = @VoucherNumber " +
                    " And " +
                    " T.CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " T.TransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " T.CompanyYear = @CompanyYear "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)

                ).ToList();
                }
                catch
                {
                    return new List<AccountingDetailsReportVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<AccountingDetailsReportVM>(
                    " Select T.Debit, T.Credit, T.CreditDebitForeign, T.AccountNumber, T.Note, T.CostCenter, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " C.CompanyID = T.CompanyID " +
                      " And " +
                      " C.AccountNumber = T.AccountNumber " +
                    " ) As AccountName, " +
                    " ( " +
                      " Select CC.EnglishName From CostCenters CC " +
                      " Where " +
                      " CC.CompanyID = T.CompanyID " +
                      " And " +
                      " CC.CostNumber = T.CostCenter " +
                    " ) As CostCenterName " +
                    " From Transactions T " +
                    " Where " +
                    " T.CompanyID = @CompanyID " +
                    " And " +
                    " T.VoucherNumber = @VoucherNumber " +
                    " And " +
                    " T.CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " T.TransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " T.CompanyYear = @CompanyYear "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)

                ).ToList();
                }
                catch
                {
                    return new List<AccountingDetailsReportVM>();
                }
            }
        }
        public IEnumerable<AccountingDetailsReportVM> GetServiceDetails(int CompanyID, string VoucherNumber, int TransactionKindNo, int CompanyTransactionKindNo, int CompanyYear)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<AccountingDetailsReportVM>(
                    " Select TSB.ServiceNo, TSB.Price, TSB.ForeignPrice, TSB.Qty, TSB.LocalDiscount, " +
                    " TSB.TotalLocal,TSB.Tax, TSB.PriceAfterLineDisc, " +
                    " S.ArabicName As ServiceName, TSB.ServiceNot, TSB.Note,TSB.TotalDiscValue,TSB.NetAfterTotalDisc " +
                    " From TransActionServiceBills TSB,[Services] S " +
                    " Where " +
                    " S.CompanyID = TSB.CompanyID " +
                    " And " +
                    " S.ServiceID = TSB.ServiceNo " +
                    " And " +
                    " TSB.CompanyID = @CompanyID " +
                    " And " +
                    " TSB.BillID = @VoucherNumber " +
                    " And " +
                    " TSB.CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " TSB.TransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " TSB.CompanyYear = @CompanyYear "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)

                ).ToList();
                }
                catch
                {
                    return new List<AccountingDetailsReportVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<AccountingDetailsReportVM>(
                    " Select TSB.ServiceNo, TSB.Price, TSB.ForeignPrice, TSB.Qty, TSB.LocalDiscount, " +
                    " TSB.TotalLocal,TSB.Tax, TSB.PriceAfterLineDisc, " +
                    " S.EnglishName As ServiceName, TSB.ServiceNot, TSB.Note,TSB.TotalDiscValue,TSB.NetAfterTotalDisc " +
                    " From TransActionServiceBills TSB,[Services] S " +
                    " Where " +
                    " S.CompanyID = TSB.CompanyID " +
                    " And " +
                    " S.ServiceID = TSB.ServiceNo " +
                    " And " +
                    " TSB.CompanyID = @CompanyID " +
                    " And " +
                    " TSB.BillID = @VoucherNumber " +
                    " And " +
                    " TSB.CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " TSB.TransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " TSB.CompanyYear = @CompanyYear "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)

                ).ToList();
                }
                catch
                {
                    return new List<AccountingDetailsReportVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetTrankingPaymentChequesReport(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.ChequeCase, P.RowNumber, " +
                    " P.AccountNumberFirst As PaidToAccountNumber, AccountNumberThird, " +
                    " P.OriginalCompanyTransactionKindNo, P.OriginalTransactionKindNo, P.OriginalVoucherNumber, " +
                    "  PC.ArabicName As CaseName, P.CompanyYear, P.DrawerName,P.sChequeDate, " +
                    " ( " +
                          " Select C.EnglishName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " P.AccountNumberFirst = C.AccountNumber " +
                       " ) As PaidToAccountName " +
                    " From Papers P,PapersCases PC " +
                    " Where " +
                    " P.ChequeCase = PC.CaseID " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.ChequeCase in(14,15,16,17)  " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.ChequeCase, P.RowNumber, " +
                    " P.AccountNumberFirst As PaidToAccountNumber, AccountNumberThird, " +
                    " P.OriginalCompanyTransactionKindNo, P.OriginalTransactionKindNo, P.OriginalVoucherNumber, " +
                    "  PC.EnglishName As CaseName, P.CompanyYear, P.DrawerName,P.sChequeDate, " +
                    " ( " +
                          " Select C.EnglishName From ChartOfAccounts C " +
                          " Where " +
                          " P.CompanyID = C.CompanyID " +
                          " And " +
                          " P.AccountNumberFirst = C.AccountNumber " +
                       " ) As PaidToAccountName " +
                    " From Papers P,PapersCases PC " +
                    " Where " +
                    " P.ChequeCase = PC.CaseID " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) <= @ToDate " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.ChequeCase in(14,15,16,17)  " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetChequeDetails(int CompanyID, string ChequeNumber, string OriginalVoucherNumber, int OriginalCompanyTransactionKind,
                                                           double ChequeAmount, int RowNumber, string AccountNumberThird, int OriginalTransactionKindNo, int CompanyYear,
                                                           string PaidInAccountNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select PC.ArabicName As CaseName,N'اخر حركة تمت على شيك' As CaseDetail,P.ChequeNumber,convert(varchar, P.ChequeDate, 103) As sChequeDate, " +
                    " ISNull(convert(varchar(50), CAST(P.ChequeAmount as money), -1),0) As PaperAmount,P.DrawerName,P.ChequeAmount, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " C.AccountNumber = CASE " +
                      " WHEN P.AccountNumberFourth = '' Or P.AccountNumberFourth is null THEN  P.AccountNumberSecond " +
                      " ELSE P.AccountNumberFourth " +
                      " END " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.ChequeCase not in (1) " +
                      " And " +
                      " C.AccountNumber = CASE " +
                      " WHEN P.AccountNumberFifth = '' Or P.AccountNumberFifth is null THEN  P.AccountNumberSecond " +
                      " ELSE P.AccountNumberFifth " +
                      " END " +
                    " ) As BankOrEndorsementAccountName, P.VoucherNumber,P.VoucherDate, " +
                    " ( " +
                      " Select CT.ArabicName From CompanyTransactionKinds CT " +
                      " Where " +
                      " P.CompanyID = CT.CompanyID " +
                      " And " +
                      " P.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " ) As CompanyTransactionKindName " +
                    " From Papers P, PapersCases PC " +
                    " Where " +
                    " P.CHequeCase = PC.CaseID " +
                    " And " +
                    " P.ChequeNumber = @ChequeNumber " +
                    " And " +
                    " P.OriginalVoucherNumber = @OriginalVoucherNumber " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @OriginalCompanyTransactionKind " +
                    " And " +
                    " P.OriginalTransactionKindNo = @OriginalTransactionKindNo " +
                    " And " +
                    " P.RowNumber = @RowNumber " +
                    " And " +
                    " P.ChequeAmount = @ChequeAmount " +
                    " And " +
                    " P.AccountNumberThird = @AccountNumberThird " +
                    " And " +
                    " P.CompanyYear = @CompanyYear " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " ( " +
                     " P.AccountNumberSecond = @PaidInAccountNumber " +
                     " Or " +
                     " P.AccountNumberFourth = @PaidInAccountNumber " +
                    " ) " +
                    " And " +
                    " ( " +
                         " P.ChequeCase <= 13 " +
                         " Or " +
                         " P.ChequeCase = 18 " +
                    " ) " +
                    " Union All " +
                    " Select Top 1 PC.ArabicName As CaseName,N'الحركات التي تمت على شيك' As CaseDetail,'' As ChequeNumber,'' As sChequeDate,'' As PaperAmount,'' As DrawerName,0 As ChequeAmount,'' As PaidInAccountName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.ChequeCase not in (1) " +
                      " And " +
                      " C.AccountNumber = CASE " +
                      " WHEN P.AccountNumberFifth = '' Or P.AccountNumberFifth is null THEN  P.AccountNumberSecond " +
                      " ELSE P.AccountNumberFifth " +
                      " END " +
                    " ) As BankOrEndorsementAccountName, P.VoucherNumber,P.VoucherDate, " +
                    " ( " +
                      " Select CT.ArabicName From CompanyTransactionKinds CT " +
                      " Where " +
                      " P.CompanyID = CT.CompanyID " +
                      " And " +
                      " P.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " ) As CompanyTransactionKindName " +
                    " From TracingPapers P, PapersCases PC " +
                    " Where " +
                    " P.CHequeCase = PC.CaseID " +
                    " And " +
                    " P.ChequeNumber = @ChequeNumber " +
                    " And " +
                    " P.OriginalVoucherNumber = @OriginalVoucherNumber " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @OriginalCompanyTransactionKind " +
                    " And " +
                    " P.OriginalTransactionKindNo = @OriginalTransactionKindNo " +
                    " And " +
                    " P.RowNumber = @RowNumber " +
                    " And " +
                    " P.ChequeAmount = @ChequeAmount " +
                    " And " +
                    " P.AccountNumberThird = @AccountNumberThird " +
                    " And " +
                    " P.CompanyYear = @CompanyYear " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " ( " +
                     " P.AccountNumberSecond = @PaidInAccountNumber " +
                     " Or " +
                     " P.AccountNumberFourth = @PaidInAccountNumber " +
                    " ) " +
                    " And " +
                    " ( " +
                         " P.ChequeCase <= 13 " +
                         " Or " +
                         " P.ChequeCase = 18 " +
                    " ) " +
                    " Union All " +
                    " Select PC.ArabicName As CaseName, '' As CaseDetail,'' As ChequeNumber,'' As sChequeDate,'' As PaperAmount,'' As DrawerName, 0 As ChequeAmount,'' As PaidInAccountName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.ChequeCase not in (1) " +
                      " And " +
                      " C.AccountNumber = CASE " +
                      " WHEN P.AccountNumberFifth = '' Or P.AccountNumberFifth is null THEN  P.AccountNumberSecond " +
                      " ELSE P.AccountNumberFifth " +
                      " END " +
                    " ) As BankOrEndorsementAccountName, P.VoucherNumber,P.VoucherDate, " +
                    " ( " +
                      " Select CT.ArabicName From CompanyTransactionKinds CT " +
                      " Where " +
                      " P.CompanyID = CT.CompanyID " +
                      " And " +
                      " P.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " ) As CompanyTransactionKindName " +
                    " From TracingPapers P, PapersCases PC " +
                    " Where " +
                    " P.CHequeCase = PC.CaseID " +
                    " And " +
                    " P.ChequeNumber = @ChequeNumber " +
                    " And " +
                    " P.OriginalVoucherNumber = @OriginalVoucherNumber " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @OriginalCompanyTransactionKind " +
                    " And " +
                    " P.OriginalTransactionKindNo = @OriginalTransactionKindNo " +
                    " And " +
                    " P.RowNumber = @RowNumber " +
                    " And " +
                    " P.ChequeAmount = @ChequeAmount " +
                    " And " +
                    " P.AccountNumberThird = @AccountNumberThird " +
                    " And " +
                    " P.CompanyYear = @CompanyYear " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " ( " +
                     " P.AccountNumberSecond = @PaidInAccountNumber " +
                     " Or " +
                     " P.AccountNumberFourth = @PaidInAccountNumber " +
                    " ) " +
                    " And " +
                    " ( " +
                         " P.ChequeCase <= 13 " +
                         " Or " +
                         " P.ChequeCase = 18 " +
                    " ) " +
                    " And " +
                    " P.Id Not In(select top 1 PT.Id from TracingPapers PT " +
                    " Where " +
                    " PT.ChequeNumber = @ChequeNumber " +
                    " And " +
                    " PT.OriginalVoucherNumber = @OriginalVoucherNumber " +
                    " And " +
                    " PT.OriginalCompanyTransactionKindNo = @OriginalCompanyTransactionKind " +
                    " And " +
                    " PT.OriginalTransactionKindNo = @OriginalTransactionKindNo " +
                    " And " +
                    " PT.RowNumber = @RowNumber " +
                    " And " +
                    " PT.ChequeAmount = @ChequeAmount " +
                    " And " +
                    " PT.AccountNumberThird = @AccountNumberThird " +
                    " And " +
                    " PT.CompanyYear = @CompanyYear " +
                    " And " +
                    " PT.CompanyID = @CompanyID " +
                    " And " +
                    " ( " +
                         " P.ChequeCase <= 13 " +
                         " Or " +
                         " P.ChequeCase = 18 " +
                    " ) " +
                    " ) "
                    , new SqlParameter("@ChequeNumber", ChequeNumber)
                    , new SqlParameter("@OriginalVoucherNumber", OriginalVoucherNumber)
                    , new SqlParameter("@OriginalCompanyTransactionKind", OriginalCompanyTransactionKind)
                    , new SqlParameter("@OriginalTransactionKindNo", OriginalTransactionKindNo)
                    , new SqlParameter("@RowNumber", RowNumber)
                    , new SqlParameter("@ChequeAmount", ChequeAmount)
                    , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@PaidInAccountNumber", PaidInAccountNumber)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select PC.EnglishName As CaseName,'The last move was made on a cheque' As CaseDetail,P.ChequeNumber,convert(varchar, P.ChequeDate, 103) As sChequeDate, " +
                    " ISNull(convert(varchar(50), CAST(P.ChequeAmount as money), -1),0) As PaperAmount,P.DrawerName,P.ChequeAmount, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " C.AccountNumber = CASE " +
                      " WHEN P.AccountNumberFourth = '' Or P.AccountNumberFourth is null THEN  P.AccountNumberSecond " +
                      " ELSE P.AccountNumberFourth " +
                      " END " +
                    " ) As PaidInAccountName, " +
                    " ( " +
                        " Select C.ArabicName From ChartOfAccounts C " +
                        " Where " +
                        " P.CompanyID = C.CompanyID " +
                        " And " +
                        " P.BillCustomerAccountNumber = C.AccountNumber " +
                     " ) As BillCustomerName,P.ISBill, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.ChequeCase not in (1) " +
                      " And " +
                      " C.AccountNumber = CASE " +
                      " WHEN P.AccountNumberFifth = '' Or P.AccountNumberFifth is null THEN  P.AccountNumberSecond " +
                      " ELSE P.AccountNumberFifth " +
                      " END " +
                    " ) As BankOrEndorsementAccountName, P.VoucherNumber,P.VoucherDate, " +
                    " ( " +
                      " Select CT.EnglishName From CompanyTransactionKinds CT " +
                      " Where " +
                      " P.CompanyID = CT.CompanyID " +
                      " And " +
                      " P.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " ) As CompanyTransactionKind " +
                    " From Papers P, PapersCases PC " +
                    " Where " +
                    " P.CHequeCase = PC.CaseID " +
                    " And " +
                    " P.ChequeNumber = @ChequeNumber " +
                    " And " +
                    " P.OriginalVoucherNumber = @OriginalVoucherNumber " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @OriginalCompanyTransactionKind " +
                    " And " +
                    " P.OriginalTransactionKindNo = @OriginalTransactionKindNo " +
                    " And " +
                    " P.RowNumber = @RowNumber " +
                    " And " +
                    " P.ChequeAmount = @ChequeAmount " +
                    " And " +
                    " P.AccountNumberThird = @AccountNumberThird " +
                    " And " +
                    " P.CompanyYear = @CompanyYear " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " ( " +
                     " P.AccountNumberSecond = @PaidInAccountNumber " +
                     " Or " +
                     " P.AccountNumberFourth = @PaidInAccountNumber " +
                    " ) " +
                    " And " +
                    " ( " +
                         " P.ChequeCase <= 13 " +
                         " Or " +
                         " P.ChequeCase = 18 " +
                    " ) " +
                    " Union All " +
                    " Select Top 1 PC.EnglishName As CaseName,'Movements made on cheque' As CaseDetail,'' As ChequeNumber,'' As sChequeDate,'' As PaperAmount,'' As DrawerName, 0 As ChequeAmount,'' As PaidInAccountName,'' As BillCustomerName, 0 As ISBill, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.ChequeCase not in (1) " +
                      " And " +
                      " C.AccountNumber = CASE " +
                      " WHEN P.AccountNumberFifth = '' Or P.AccountNumberFifth is null THEN  P.AccountNumberSecond " +
                      " ELSE P.AccountNumberFifth " +
                      " END " +
                    " ) As BankOrEndorsementAccountName, P.VoucherNumber,P.VoucherDate, " +
                    " ( " +
                      " Select CT.EnglishName From CompanyTransactionKinds CT " +
                      " Where " +
                      " P.CompanyID = CT.CompanyID " +
                      " And " +
                      " P.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " ) As CompanyTransactionKind " +
                    " From TracingPapers P, PapersCases PC " +
                    " Where " +
                    " P.CHequeCase = PC.CaseID " +
                    " And " +
                    " P.ChequeNumber = @ChequeNumber " +
                    " And " +
                    " P.OriginalVoucherNumber = @OriginalVoucherNumber " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @OriginalCompanyTransactionKind " +
                    " And " +
                    " P.OriginalTransactionKindNo = @OriginalTransactionKindNo " +
                    " And " +
                    " P.RowNumber = @RowNumber " +
                    " And " +
                    " P.ChequeAmount = @ChequeAmount " +
                    " And " +
                    " P.AccountNumberThird = @AccountNumberThird " +
                    " And " +
                    " P.CompanyYear = @CompanyYear " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " ( " +
                     " P.AccountNumberSecond = @PaidInAccountNumber " +
                     " Or " +
                     " P.AccountNumberFourth = @PaidInAccountNumber " +
                    " ) " +
                    " And " +
                    " ( " +
                         " P.ChequeCase <= 13 " +
                         " Or " +
                         " P.ChequeCase = 18 " +
                    " ) " +
                    " Union All " +
                    " Select PC.EnglishName As CaseName, '' As CaseDetail,'' As ChequeNumber,'' As sChequeDate,'' As PaperAmount,'' As DrawerName,0 As ChequeAmount,'' As PaidInAccountName,'' As BillCustomerName, 0 As ISBill, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.ChequeCase not in (1) " +
                      " And " +
                      " C.AccountNumber = CASE " +
                      " WHEN P.AccountNumberFifth = '' Or P.AccountNumberFifth is null THEN  P.AccountNumberSecond " +
                      " ELSE P.AccountNumberFifth " +
                      " END " +
                    " ) As BankOrEndorsementAccountName, P.VoucherNumber,P.VoucherDate, " +
                    " ( " +
                      " Select CT.EnglishName From CompanyTransactionKinds CT " +
                      " Where " +
                      " P.CompanyID = CT.CompanyID " +
                      " And " +
                      " P.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " ) As CompanyTransactionKind " +
                    " From TracingPapers P, PapersCases PC " +
                    " Where " +
                    " P.CHequeCase = PC.CaseID " +
                    " And " +
                    " P.ChequeNumber = @ChequeNumber " +
                    " And " +
                    " P.OriginalVoucherNumber = @OriginalVoucherNumber " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @OriginalCompanyTransactionKind " +
                    " And " +
                    " P.OriginalTransactionKindNo = @OriginalTransactionKindNo " +
                    " And " +
                    " P.RowNumber = @RowNumber " +
                    " And " +
                    " P.ChequeAmount = @ChequeAmount " +
                    " And " +
                    " P.AccountNumberThird = @AccountNumberThird " +
                    " And " +
                    " P.CompanyYear = @CompanyYear " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " ( " +
                     " P.AccountNumberSecond = @PaidInAccountNumber " +
                     " Or " +
                     " P.AccountNumberFourth = @PaidInAccountNumber " +
                    " ) " +
                    " And " +
                    " ( " +
                         " P.ChequeCase <= 13 " +
                         " Or " +
                         " P.ChequeCase = 18 " +
                    " ) " +
                    " And " +
                    " P.Id Not In(select top 1 PT.Id from TracingPapers PT " +
                    " Where " +
                    " PT.ChequeNumber = @ChequeNumber " +
                    " And " +
                    " PT.OriginalVoucherNumber = @OriginalVoucherNumber " +
                    " And " +
                    " PT.OriginalCompanyTransactionKindNo = @OriginalCompanyTransactionKind " +
                    " And " +
                    " PT.OriginalTransactionKindNo = @OriginalTransactionKindNo " +
                    " And " +
                    " PT.RowNumber = @RowNumber " +
                    " And " +
                    " PT.ChequeAmount = @ChequeAmount " +
                    " And " +
                    " PT.AccountNumberThird = @AccountNumberThird " +
                    " And " +
                    " PT.CompanyYear = @CompanyYear " +
                    " And " +
                    " PT.CompanyID = @CompanyID " +
                    " And " +
                    " ( " +
                         " P.ChequeCase <= 13 " +
                         " Or " +
                         " P.ChequeCase = 18 " +
                    " ) " +
                    " ) "
                    , new SqlParameter("@ChequeNumber", ChequeNumber)
                    , new SqlParameter("@OriginalVoucherNumber", OriginalVoucherNumber)
                    , new SqlParameter("@OriginalCompanyTransactionKind", OriginalCompanyTransactionKind)
                    , new SqlParameter("@OriginalTransactionKindNo", OriginalTransactionKindNo)
                    , new SqlParameter("@RowNumber", RowNumber)
                    , new SqlParameter("@ChequeAmount", ChequeAmount)
                    , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@PaidInAccountNumber", PaidInAccountNumber)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<PaperFilterVM> GetPaymentChequeDetails(int CompanyID, string ChequeNumber, string OriginalVoucherNumber, int OriginalCompanyTransactionKind,
                                                           double ChequeAmount, int RowNumber, string AccountNumberThird, int OriginalTransactionKindNo, int CompanyYear,
                                                           string PaidToAccountNumber)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select PC.ArabicName As CaseName,N'اخر حركة تمت على شيك' As CaseDetail,P.ChequeNumber,convert(varchar, P.ChequeDate, 103) As sChequeDate, " +
                    " ISNull(convert(varchar(50), CAST(P.ChequeAmount as money), -1),0) As PaperAmount,P.DrawerName,P.ChequeAmount, " +
                    " (" +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As PaidToAccountName, " +
                    " ( " +
                        " Select C.EnglishName From ChartOfAccounts C " +
                        " Where " +
                        " P.CompanyID = C.CompanyID " +
                        " And " +
                        " P.AccountNumberThird = C.AccountNumber " +
                    " ) As BankAccountName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As PostdatedAccountName, " +
                    " P.VoucherNumber,P.VoucherDate, " +
                    " ( " +
                      " Select CT.ArabicName From CompanyTransactionKinds CT " +
                      " Where " +
                      " P.CompanyID = CT.CompanyID " +
                      " And " +
                      " P.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " ) As CompanyTransactionKindName " +
                    " From Papers P, PapersCases PC " +
                    " Where " +
                    " P.CHequeCase = PC.CaseID " +
                    " And " +
                    " P.ChequeNumber = @ChequeNumber " +
                    " And " +
                    " P.OriginalVoucherNumber = @OriginalVoucherNumber " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @OriginalCompanyTransactionKind " +
                    " And " +
                    " P.OriginalTransactionKindNo = @OriginalTransactionKindNo " +
                    " And " +
                    " P.RowNumber = @RowNumber " +
                    " And " +
                    " P.ChequeAmount = @ChequeAmount " +
                    " And " +
                    " P.AccountNumberThird = @AccountNumberThird " +
                    " And " +
                    " P.CompanyYear = @CompanyYear " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.AccountNumberFirst = @PaidToAccountNumber " +
                    " And " +
                    " P.ChequeCase in (14,15,16,17) " +
                    " Union All " +
                    " Select Top 1 PC.ArabicName As CaseName,N'الحركات التي تمت على شيك' As CaseDetail,'' As ChequeNumber,'' As sChequeDate,'' As PaperAmount,'' As DrawerName,'' As ChequeAmount,'' As PaidToAccountName, " +
                    " '' As BankAccountName, '' As PostdatedAccountName, P.VoucherNumber,P.VoucherDate, " +
                    " ( " +
                      " Select CT.ArabicName From CompanyTransactionKinds CT " +
                      " Where " +
                      " P.CompanyID = CT.CompanyID " +
                      " And " +
                      " P.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " ) As CompanyTransactionKindName " +
                    " From TracingPapers P, PapersCases PC " +
                    " Where " +
                    " P.CHequeCase = PC.CaseID " +
                    " And " +
                    " P.ChequeNumber = @ChequeNumber " +
                    " And " +
                    " P.OriginalVoucherNumber = @OriginalVoucherNumber " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @OriginalCompanyTransactionKind " +
                    " And " +
                    " P.OriginalTransactionKindNo = @OriginalTransactionKindNo " +
                    " And " +
                    " P.RowNumber = @RowNumber " +
                    " And " +
                    " P.ChequeAmount = @ChequeAmount " +
                    " And " +
                    " P.AccountNumberThird = @AccountNumberThird " +
                    " And " +
                    " P.CompanyYear = @CompanyYear " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.AccountNumberFirst = @PaidToAccountNumber " +
                    " And " +
                    " P.ChequeCase in (14,15,16,17) " +
                    " Union All " +
                    " Select PC.ArabicName As CaseName, '' As CaseDetail,'' As ChequeNumber,'' As sChequeDate,'' As PaperAmount,'' As DrawerName,'' As ChequeAmount,'' As PaidInAccountName, " +
                    " '' As BankAccountName, '' As PostdatedAccountName, P.VoucherNumber,P.VoucherDate, " +
                    " ( " +
                      " Select CT.ArabicName From CompanyTransactionKinds CT " +
                      " Where " +
                      " P.CompanyID = CT.CompanyID " +
                      " And " +
                      " P.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " ) As CompanyTransactionKindName " +
                    " From TracingPapers P, PapersCases PC " +
                    " Where " +
                    " P.CHequeCase = PC.CaseID " +
                    " And " +
                    " P.ChequeNumber = @ChequeNumber " +
                    " And " +
                    " P.OriginalVoucherNumber = @OriginalVoucherNumber " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @OriginalCompanyTransactionKind " +
                    " And " +
                    " P.OriginalTransactionKindNo = @OriginalTransactionKindNo " +
                    " And " +
                    " P.RowNumber = @RowNumber " +
                    " And " +
                    " P.ChequeAmount = @ChequeAmount " +
                    " And " +
                    " P.AccountNumberThird = @AccountNumberThird " +
                    " And " +
                    " P.CompanyYear = @CompanyYear " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.AccountNumberFirst = @PaidToAccountNumber " +
                    " And " +
                    " P.ChequeCase in (14,15,16,17) " +
                    " And " +
                    " P.Id Not In(select top 1 PT.Id from TracingPapers PT " +
                    " Where " +
                    " PT.ChequeNumber = @ChequeNumber " +
                    " And " +
                    " PT.OriginalVoucherNumber = @OriginalVoucherNumber " +
                    " And " +
                    " PT.OriginalCompanyTransactionKindNo = @OriginalCompanyTransactionKind " +
                    " And " +
                    " PT.OriginalTransactionKindNo = @OriginalTransactionKindNo " +
                    " And " +
                    " PT.RowNumber = @RowNumber " +
                    " And " +
                    " PT.ChequeAmount = @ChequeAmount " +
                    " And " +
                    " PT.AccountNumberThird = @AccountNumberThird " +
                    " And " +
                    " PT.CompanyYear = @CompanyYear " +
                    " And " +
                    " PT.CompanyID = @CompanyID " +
                    " And " +
                    " PT.ChequeCase in (14,15,16,17) " +
                    " ) "
                    , new SqlParameter("@ChequeNumber", ChequeNumber)
                    , new SqlParameter("@OriginalVoucherNumber", OriginalVoucherNumber)
                    , new SqlParameter("@OriginalCompanyTransactionKind", OriginalCompanyTransactionKind)
                    , new SqlParameter("@OriginalTransactionKindNo", OriginalTransactionKindNo)
                    , new SqlParameter("@RowNumber", RowNumber)
                    , new SqlParameter("@ChequeAmount", ChequeAmount)
                    , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@PaidToAccountNumber", PaidToAccountNumber)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select PC.EnglishName As CaseName,'The last move was made on a cheque' As CaseDetail,P.ChequeNumber,convert(varchar, P.ChequeDate, 103) As sChequeDate, " +
                    " ISNull(convert(varchar(50), CAST(P.ChequeAmount as money), -1),0) As PaperAmount,P.DrawerName,P.ChequeAmount, " +
                    " (" +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As PaidToAccountName, " +
                    " ( " +
                        " Select C.EnglishName From ChartOfAccounts C " +
                        " Where " +
                        " P.CompanyID = C.CompanyID " +
                        " And " +
                        " P.AccountNumberThird = C.AccountNumber " +
                    " ) As BankAccountName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As PostdatedAccountName, " +
                    " P.VoucherNumber,P.VoucherDate, " +
                    " ( " +
                      " Select CT.ArabicName From CompanyTransactionKinds CT " +
                      " Where " +
                      " P.CompanyID = CT.CompanyID " +
                      " And " +
                      " P.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " ) As CompanyTransactionKindName " +
                    " From Papers P, PapersCases PC " +
                    " Where " +
                    " P.CHequeCase = PC.CaseID " +
                    " And " +
                    " P.ChequeNumber = @ChequeNumber " +
                    " And " +
                    " P.OriginalVoucherNumber = @OriginalVoucherNumber " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @OriginalCompanyTransactionKind " +
                    " And " +
                    " P.OriginalTransactionKindNo = @OriginalTransactionKindNo " +
                    " And " +
                    " P.RowNumber = @RowNumber " +
                    " And " +
                    " P.ChequeAmount = @ChequeAmount " +
                    " And " +
                    " P.AccountNumberThird = @AccountNumberThird " +
                    " And " +
                    " P.CompanyYear = @CompanyYear " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.AccountNumberFirst = @PaidToAccountNumber " +
                    " And " +
                    " P.ChequeCase in (14,15,16,17) " +
                    " Union All " +
                    " Select Top 1 PC.EnglishName As CaseName,'Movements made on cheque' As CaseDetail,'' As ChequeNumber,'' As sChequeDate,'' As PaperAmount,'' As DrawerName,'' As ChequeAmount,'' As PaidToAccountName, " +
                    " '' As BankAccountName, '' As PostdatedAccountName, P.VoucherNumber,P.VoucherDate, " +
                    " ( " +
                      " Select CT.ArabicName From CompanyTransactionKinds CT " +
                      " Where " +
                      " P.CompanyID = CT.CompanyID " +
                      " And " +
                      " P.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " ) As CompanyTransactionKindName " +
                    " From TracingPapers P, PapersCases PC " +
                    " Where " +
                    " P.CHequeCase = PC.CaseID " +
                    " And " +
                    " P.ChequeNumber = @ChequeNumber " +
                    " And " +
                    " P.OriginalVoucherNumber = @OriginalVoucherNumber " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @OriginalCompanyTransactionKind " +
                    " And " +
                    " P.OriginalTransactionKindNo = @OriginalTransactionKindNo " +
                    " And " +
                    " P.RowNumber = @RowNumber " +
                    " And " +
                    " P.ChequeAmount = @ChequeAmount " +
                    " And " +
                    " P.AccountNumberThird = @AccountNumberThird " +
                    " And " +
                    " P.CompanyYear = @CompanyYear " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.AccountNumberFirst = @PaidToAccountNumber " +
                    " And " +
                    " P.ChequeCase in (14,15,16,17) " +
                    " Union All " +
                    " Select PC.EnglishName As CaseName, '' As CaseDetail,'' As ChequeNumber,'' As sChequeDate,'' As PaperAmount,'' As DrawerName,'' As ChequeAmount,'' As PaidInAccountName, " +
                    " '' As BankAccountName, '' As PostdatedAccountName, P.VoucherNumber,P.VoucherDate, " +
                    " ( " +
                      " Select CT.ArabicName From CompanyTransactionKinds CT " +
                      " Where " +
                      " P.CompanyID = CT.CompanyID " +
                      " And " +
                      " P.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " ) As CompanyTransactionKindName " +
                    " From TracingPapers P, PapersCases PC " +
                    " Where " +
                    " P.CHequeCase = PC.CaseID " +
                    " And " +
                    " P.ChequeNumber = @ChequeNumber " +
                    " And " +
                    " P.OriginalVoucherNumber = @OriginalVoucherNumber " +
                    " And " +
                    " P.OriginalCompanyTransactionKindNo = @OriginalCompanyTransactionKind " +
                    " And " +
                    " P.OriginalTransactionKindNo = @OriginalTransactionKindNo " +
                    " And " +
                    " P.RowNumber = @RowNumber " +
                    " And " +
                    " P.ChequeAmount = @ChequeAmount " +
                    " And " +
                    " P.AccountNumberThird = @AccountNumberThird " +
                    " And " +
                    " P.CompanyYear = @CompanyYear " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " P.AccountNumberFirst = @PaidToAccountNumber " +
                    " And " +
                    " P.ChequeCase in (14,15,16,17) " +
                    " And " +
                    " P.Id Not In(select top 1 PT.Id from TracingPapers PT " +
                    " Where " +
                    " PT.ChequeNumber = @ChequeNumber " +
                    " And " +
                    " PT.OriginalVoucherNumber = @OriginalVoucherNumber " +
                    " And " +
                    " PT.OriginalCompanyTransactionKindNo = @OriginalCompanyTransactionKind " +
                    " And " +
                    " PT.OriginalTransactionKindNo = @OriginalTransactionKindNo " +
                    " And " +
                    " PT.RowNumber = @RowNumber " +
                    " And " +
                    " PT.ChequeAmount = @ChequeAmount " +
                    " And " +
                    " PT.AccountNumberThird = @AccountNumberThird " +
                    " And " +
                    " PT.CompanyYear = @CompanyYear " +
                    " And " +
                    " PT.CompanyID = @CompanyID " +
                    " And " +
                    " PT.ChequeCase in (14,15,16,17) " +
                    " ) "
                    , new SqlParameter("@ChequeNumber", ChequeNumber)
                    , new SqlParameter("@OriginalVoucherNumber", OriginalVoucherNumber)
                    , new SqlParameter("@OriginalCompanyTransactionKind", OriginalCompanyTransactionKind)
                    , new SqlParameter("@OriginalTransactionKindNo", OriginalTransactionKindNo)
                    , new SqlParameter("@RowNumber", RowNumber)
                    , new SqlParameter("@ChequeAmount", ChequeAmount)
                    , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@PaidToAccountNumber", PaidToAccountNumber)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
        }
        public IEnumerable<AccountingDetailsReportVM> GetAccountingDetailsReport(int CompanyID, Boolean DateApproval, DateTime FromDate, DateTime ToDate)
        {
            if (DateApproval)
            {
                if (Resources.Resource.CurLang == "Arb")
                {
                    try
                    {
                        return _context.Database.SqlQuery<AccountingDetailsReportVM>(
                        " Select Distinct H.VoucherDate, H.VoucherNumber, H.VHI, H.CompanyTransactionKindNo, H.TransactionKindNo,H.Exported, " +
                        " H.Note, H.CompanyYear, A.UserName, H.TotalDebit As Amount,Ct.ArabicName As CompanyTransactionKindName " +
                        " From Headers H, AspNetUsers A, CompanyTransactionKinds CT " +
                        " Where " +
                        " H.CompanyID = A.fCompanyId " +
                        " And " +
                        " CT.CompanyID = H.CompanyID " +
                        " And " +
                        " Ct.CompanyTransactionKindID = H.CompanyTransactionKindNo " +
                        " And " +
                        " H.CompanyID = @CompanyID " +
                        " And " +
                        " cast (datediff (day, 0, H.VoucherDate) as datetime) >= @FromDate " +
                        " And " +
                        " cast (datediff (day, 0, H.VoucherDate) as datetime) <= @ToDate " +
                        " And " +
                        " H.InsUserID = A.Id " +
                        " Order By H.VoucherDate "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromDate", FromDate)
                        , new SqlParameter("@ToDate", ToDate)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<AccountingDetailsReportVM>();
                    }
                }
                else
                {
                    try

                    {
                        return _context.Database.SqlQuery<AccountingDetailsReportVM>(
                        " Select Distinct H.VoucherDate, H.VoucherNumber, H.VHI, H.CompanyTransactionKindNo, H.TransactionKindNo,H.Exported, " +
                        " ISNULL(H.Note,'') As Note , H.CompanyYear, A.UserName, H.TotalDebit As Amount,Ct.EnglishName As CompanyTransactionKindName " +
                        " From Headers H, AspNetUsers A, CompanyTransactionKinds CT " +
                        " Where " +
                        " H.CompanyID = A.fCompanyId " +
                        " And " +
                        " CT.CompanyID = H.CompanyID " +
                        " And " +
                        " Ct.CompanyTransactionKindID = H.CompanyTransactionKindNo " +
                        " And " +
                        " H.CompanyID = @CompanyID " +
                        " And " +
                        " cast (datediff (day, 0, H.VoucherDate) as datetime) >= @FromDate " +
                        " And " +
                        " cast (datediff (day, 0, H.VoucherDate) as datetime) <= @ToDate " +
                        " And " +
                        " H.InsUserID = A.Id " +
                        " Order By H.VoucherDate "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromDate", FromDate)
                        , new SqlParameter("@ToDate", ToDate)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<AccountingDetailsReportVM>();
                    }
                }
            }
            else
            {
                if (Resources.Resource.CurLang == "Arb")
                {
                    try
                    {
                        return _context.Database.SqlQuery<AccountingDetailsReportVM>(
                        " Select Distinct H.VoucherDate, H.VoucherNumber, H.VHI, H.CompanyTransactionKindNo, H.TransactionKindNo,H.Exported, " +
                        " ISNULL(H.Note,'') As Note , H.CompanyYear, A.UserName, H.TotalDebit As Amount,Ct.ArabicName As CompanyTransactionKindName " +
                        " From Headers H, AspNetUsers A, CompanyTransactionKinds CT " +
                        " Where " +
                        " H.CompanyID = A.fCompanyId " +
                        " And " +
                        " CT.CompanyID = H.CompanyID " +
                        " And " +
                        " Ct.CompanyTransactionKindID = H.CompanyTransactionKindNo " +
                        " And " +
                        " H.CompanyID = @CompanyID " +
                        " And " +
                        " H.InsUserID = A.Id " +
                        " Order By H.VoucherDate "
                        , new SqlParameter("@CompanyID", CompanyID)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<AccountingDetailsReportVM>();
                    }
                }
                else
                {
                    try

                    {
                        return _context.Database.SqlQuery<AccountingDetailsReportVM>(
                        " Select Distinct H.VoucherDate, H.VoucherNumber, H.VHI, H.CompanyTransactionKindNo, H.TransactionKindNo,H.Exported, " +
                        " H.Note, H.CompanyYear, A.UserName, H.TotalDebit As Amount,Ct.EnglishName As CompanyTransactionKindName " +
                        " From Headers H, AspNetUsers A, CompanyTransactionKinds CT " +
                        " Where " +
                        " H.CompanyID = A.fCompanyId " +
                        " And " +
                        " CT.CompanyID = H.CompanyID " +
                        " And " +
                        " Ct.CompanyTransactionKindID = H.CompanyTransactionKindNo " +
                        " And " +
                        " H.CompanyID = @CompanyID " +
                        " And " +
                        " H.InsUserID = A.Id " +
                        " Order By H.VoucherDate "
                        , new SqlParameter("@CompanyID", CompanyID)

                    ).ToList();
                    }
                    catch
                    {
                        return new List<AccountingDetailsReportVM>();
                    }
                }
            }
        }
        public IEnumerable<SalesReportVM> GetSalesReport(int CompanyID, DateTime FromDate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<SalesReportVM>(
                    "Select CompanyID,VoucherNumber, TransactionKindNo, VoucherDate, ISNull(SaleID,0) As SaleID,Amount,IsNull(SaleName,'') As SaleName, " +
                    " TransactionKindName,UserName,AccountNumber,AccountName From " +
                    " ( " +
                    " Select H.CompanyID,H.VoucherNumber, H.TransactionKindNo, H.VoucherDate, H.SaleID, H.TotalDebit As Amount,A.UserName,T.AccountNumber, " +
                    " ( " +
                      " Select C.ArabicName " +
                      " From ChartOfAccounts C " +
                      " Where " +
                      " C.CompanyID = T.CompanyID " +
                      " And " +
                      " C.AccountNumber = T.AccountNumber " +
                    " ) As AccountName, " +
                    " ( " +
                      " Select S.SalesName " +
                      " From Sales S " +
                      " Where " +
                      " H.CompanyID = S.CompanyID " +
                      " And " +
                      " H.SaleID = S.SalesID " +
                    " ) As SaleName, " +
                    " ( " +
                     " Select T.ArabicName " +
                     " From TransactionKinds T " +
                     " Where " +
                     " H.TransactionKindNo = T.TransactionKindID " +
                    " ) As TransactionKindName " +
                    " From Headers H,AspNetUsers A,Transactions T  " +
                    " Where " +
                    " H.TransactionKindNo in(2, 3, 6) " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyID = T.CompanyID " +
                    " And " +
                    " H.TransactionKindNo = T.TransactionKindNo " +
                    " And " +
                    " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                    " And " +
                    " H.VoucherNumber = T.VoucherNumber " +
                    " And " +
                    " T.Credit > 0 " +
                    " Union All " +
                    " Select HS.CompanyID,Cast(HS.BillID As nvarchar(Max)) As VoucherNumber,HS.TransactionKindNo,HS.BillDate As VoucherDate, " +
                    " HS.SaleManNo,ISNull((HS.Total - HS.Discount), 0) As Amount,A.UserName,T.AccountNumber, " +
                    " ( " +
                      " Select C.ArabicName " +
                      " From ChartOfAccounts C " +
                      " Where " +
                      " C.CompanyID = T.CompanyID " +
                      " And " +
                      " C.AccountNumber = T.AccountNumber " +
                    " ) As AccountName, " +
                    " ( " +
                     " Select S.SalesName " +
                     " From Sales S " +
                     " Where " +
                     " HS.CompanyID = S.CompanyID " +
                     " And " +
                     " HS.SaleManNo = S.SalesID " +
                     " ) As SaleName, " +
                     " ( " +
                      " Select T.ArabicName " +
                      " From TransactionKinds T " +
                      " Where " +
                      " HS.TransactionKindNo = T.TransactionKindID " +
                     " ) As TransactionKindName " +
                    " From HeaderServiceBills HS,AspNetUsers A,Headers H,Transactions T  " +
                    " Where " +
                    " HS.TransactionKindNo in(10, 11) " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyID = T.CompanyID " +
                    " And " +
                    " H.TransactionKindNo = T.TransactionKindNo " +
                    " And " +
                    " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                    " And " +
                    " H.VoucherNumber = T.VoucherNumber " +
                    " And " +
                    " H.CompanyID = HS.CompanyID " +
                    " And " +
                    " H.TransactionKindNo = HS.TransactionKindNo " +
                    " And " +
                    " H.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                    " And " +
                    " H.VHI = HS.BillID " +
                    " And " +
                    " T.CompanyID = HS.CompanyID " +
                    " And " +
                    " T.TransactionKindNo = HS.TransactionKindNo " +
                    " And " +
                    " T.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                    " And " +
                    " T.VHI = HS.BillID " +
                    " And " +
                    " T.Debit > 0 " +
                    " Union All " +
                    " Select HS.CompanyID,Cast(HS.BillID As nvarchar(Max)) As VoucherNumber,HS.TransactionKindNo,HS.BillDate As VoucherDate, " +
                    " HS.SaleManNo,ISNull(((HS.Total - HS.Discount) * -1), 0) As Amount,A.UserName,T.AccountNumber, " +
                    " ( " +
                      " Select C.ArabicName " +
                      " From ChartOfAccounts C " +
                      " Where " +
                      " C.CompanyID = T.CompanyID " +
                      " And " +
                      " C.AccountNumber = T.AccountNumber " +
                    " ) As AccountName, " +
                    " ( " +
                     " Select S.SalesName " +
                     " From Sales S " +
                     " Where " +
                     " HS.CompanyID = S.CompanyID " +
                     " And " +
                     " HS.SaleManNo = S.SalesID " +
                     " ) As SaleName, " +
                     " ( " +
                      " Select T.ArabicName " +
                      " From TransactionKinds T " +
                      " Where " +
                      " HS.TransactionKindNo = T.TransactionKindID " +
                     " ) As TransactionKindName " +
                    " From HeaderServiceBills HS,AspNetUsers A,Headers H,Transactions T  " +
                    " Where " +
                    " HS.TransactionKindNo in(19, 20) " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyID = T.CompanyID " +
                    " And " +
                    " H.TransactionKindNo = T.TransactionKindNo " +
                    " And " +
                    " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                    " And " +
                    " H.VoucherNumber = T.VoucherNumber " +
                    " And " +
                    " H.CompanyID = HS.CompanyID " +
                    " And " +
                    " H.TransactionKindNo = HS.TransactionKindNo " +
                    " And " +
                    " H.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                    " And " +
                    " H.VHI = HS.BillID " +
                    " And " +
                    " T.CompanyID = HS.CompanyID " +
                    " And " +
                    " T.TransactionKindNo = HS.TransactionKindNo " +
                    " And " +
                    " T.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                    " And " +
                    " T.VHI = HS.BillID " +
                    " And " +
                    " T.Credit > 0 " +
                    " Union All " +
                    " Select H.CompanyID,H.VoucherNumber, H.TransactionKindNo, H.VoucherDate, " +
                    " ( " +
                       " Select S.SalesID " +
                       " From Sales S, ChartOfAccounts C " +
                       " Where " +
                       " T.CompanyID = S.CompanyID " +
                       " And " +
                       " S.SalesID = C.SalesID " +
                       " And " +
                       " C.CompanyID = T.CompanyID " +
                       " And " +
                       " C.AccountNumber = T.AccountNumber " +
                    " ) As SaleID , " +
                    " H.TotalDebit As Amount,A.UserName,T.AccountNumber, " +
                    " ( " +
                      " Select C.ArabicName " +
                      " From ChartOfAccounts C " +
                      " Where " +
                      " C.CompanyID = T.CompanyID " +
                      " And " +
                      " C.AccountNumber = T.AccountNumber " +
                    " ) As AccountName, " +
                    " ( " +
                       " Select S.SalesName " +
                       " From Sales S, ChartOfAccounts C " +
                       " Where " +
                       " T.CompanyID = S.CompanyID " +
                       " And " +
                       " S.SalesID = C.SalesID " +
                       " And " +
                       " C.CompanyID = T.CompanyID " +
                       " And " +
                       " C.AccountNumber = T.AccountNumber " +
                    " ) As SaleName , " +
                    " ( " +
                     " Select T.ArabicName " +
                     " From TransactionKinds T " +
                     " Where " +
                     " H.TransactionKindNo = T.TransactionKindID " +
                    " ) As TransactionKindName " +
                    " From Headers H,AspNetUsers A,Transactions T  " +
                    " Where " +
                    " H.TransactionKindNo = 23 " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyID = T.CompanyID " +
                    " And " +
                    " H.TransactionKindNo = T.TransactionKindNo " +
                    " And " +
                    " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                    " And " +
                    " H.VoucherNumber = T.VoucherNumber " +
                    " And " +
                    " T.Credit > 0 " +
                    " ) AllSaleDate " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " cast (datediff (day, 0, VoucherDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, VoucherDate) as datetime) <= @ToDate "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@FromDate", FromDate)
                    , new SqlParameter("@ToDate", ToDate)

                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<SalesReportVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<SalesReportVM>(
                    "Select CompanyID,VoucherNumber, TransactionKindNo, VoucherDate, ISNull(SaleID,0) As SaleID,Amount,IsNull(SaleName,'') As SaleName, " +
                        " TransactionKindName,UserName,AccountNumber,AccountName From " +
                        " ( " +
                        " Select H.CompanyID,H.VoucherNumber, H.TransactionKindNo, H.VoucherDate, H.SaleID, H.TotalDebit As Amount,A.UserName,T.AccountNumber, " +
                        " ( " +
                          " Select C.EnglishName " +
                          " From ChartOfAccounts C " +
                          " Where " +
                          " C.CompanyID = T.CompanyID " +
                          " And " +
                          " C.AccountNumber = T.AccountNumber " +
                        " ) As AccountName, " +
                        " ( " +
                          " Select S.SalesName " +
                          " From Sales S " +
                          " Where " +
                          " H.CompanyID = S.CompanyID " +
                          " And " +
                          " H.SaleID = S.SalesID " +
                        " ) As SaleName, " +
                        " ( " +
                         " Select T.EnglishName " +
                         " From TransactionKinds T " +
                         " Where " +
                         " H.TransactionKindNo = T.TransactionKindID " +
                        " ) As TransactionKindName " +
                        " From Headers H,AspNetUsers A,Transactions T  " +
                        " Where " +
                        " H.TransactionKindNo in(2, 3, 6) " +
                        " And " +
                        " H.InsUserID = A.Id " +
                        " And " +
                        " H.CompanyID = A.fCompanyId " +
                        " And " +
                        " H.CompanyID = T.CompanyID " +
                        " And " +
                        " H.TransactionKindNo = T.TransactionKindNo " +
                        " And " +
                        " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                        " And " +
                        " H.VoucherNumber = T.VoucherNumber " +
                        " And " +
                        " T.Credit > 0 " +
                        " Union All " +
                        " Select HS.CompanyID,Cast(HS.BillID As nvarchar(Max)) As VoucherNumber,HS.TransactionKindNo,HS.BillDate As VoucherDate, " +
                        " HS.SaleManNo,ISNull((HS.Total - HS.Discount), 0) As Amount,A.UserName,T.AccountNumber, " +
                        " ( " +
                          " Select C.EnglishName " +
                          " From ChartOfAccounts C " +
                          " Where " +
                          " C.CompanyID = T.CompanyID " +
                          " And " +
                          " C.AccountNumber = T.AccountNumber " +
                        " ) As AccountName, " +
                        " ( " +
                         " Select S.SalesName " +
                         " From Sales S " +
                         " Where " +
                         " HS.CompanyID = S.CompanyID " +
                         " And " +
                         " HS.SaleManNo = S.SalesID " +
                         " ) As SaleName, " +
                         " ( " +
                          " Select T.EnglishName " +
                          " From TransactionKinds T " +
                          " Where " +
                          " HS.TransactionKindNo = T.TransactionKindID " +
                         " ) As TransactionKindName " +
                        " From HeaderServiceBills HS,AspNetUsers A,Headers H,Transactions T  " +
                        " Where " +
                        " HS.TransactionKindNo in(10, 11) " +
                        " And " +
                        " H.InsUserID = A.Id " +
                        " And " +
                        " H.CompanyID = A.fCompanyId " +
                        " And " +
                        " H.CompanyID = T.CompanyID " +
                        " And " +
                        " H.TransactionKindNo = T.TransactionKindNo " +
                        " And " +
                        " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                        " And " +
                        " H.VoucherNumber = T.VoucherNumber " +
                        " And " +
                        " H.CompanyID = HS.CompanyID " +
                        " And " +
                        " H.TransactionKindNo = HS.TransactionKindNo " +
                        " And " +
                        " H.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                        " And " +
                        " H.VHI = HS.BillID " +
                        " And " +
                        " T.CompanyID = HS.CompanyID " +
                        " And " +
                        " T.TransactionKindNo = HS.TransactionKindNo " +
                        " And " +
                        " T.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                        " And " +
                        " T.VHI = HS.BillID " +
                        " And " +
                        " T.Debit > 0 " +
                        " Union All " +
                        " Select HS.CompanyID,Cast(HS.BillID As nvarchar(Max)) As VoucherNumber,HS.TransactionKindNo,HS.BillDate As VoucherDate, " +
                        " HS.SaleManNo,ISNull(((HS.Total - HS.Discount) * -1), 0) As Amount,A.UserName,T.AccountNumber, " +
                        " ( " +
                          " Select C.EnglishName " +
                          " From ChartOfAccounts C " +
                          " Where " +
                          " C.CompanyID = T.CompanyID " +
                          " And " +
                          " C.AccountNumber = T.AccountNumber " +
                        " ) As AccountName, " +
                        " ( " +
                         " Select S.SalesName " +
                         " From Sales S " +
                         " Where " +
                         " HS.CompanyID = S.CompanyID " +
                         " And " +
                         " HS.SaleManNo = S.SalesID " +
                         " ) As SaleName, " +
                         " ( " +
                          " Select T.EnglishName " +
                          " From TransactionKinds T " +
                          " Where " +
                          " HS.TransactionKindNo = T.TransactionKindID " +
                         " ) As TransactionKindName " +
                        " From HeaderServiceBills HS,AspNetUsers A,Headers H,Transactions T  " +
                        " Where " +
                        " HS.TransactionKindNo in(19, 20) " +
                        " And " +
                        " H.InsUserID = A.Id " +
                        " And " +
                        " H.CompanyID = A.fCompanyId " +
                        " And " +
                        " H.CompanyID = T.CompanyID " +
                        " And " +
                        " H.TransactionKindNo = T.TransactionKindNo " +
                        " And " +
                        " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                        " And " +
                        " H.VoucherNumber = T.VoucherNumber " +
                        " And " +
                        " H.CompanyID = HS.CompanyID " +
                        " And " +
                        " H.TransactionKindNo = HS.TransactionKindNo " +
                        " And " +
                        " H.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                        " And " +
                        " H.VHI = HS.BillID " +
                        " And " +
                        " T.CompanyID = HS.CompanyID " +
                        " And " +
                        " T.TransactionKindNo = HS.TransactionKindNo " +
                        " And " +
                        " T.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                        " And " +
                        " T.VHI = HS.BillID " +
                        " And " +
                        " T.Credit > 0 " +
                        " Union All " +
                        " Select H.CompanyID,H.VoucherNumber, H.TransactionKindNo, H.VoucherDate, " +
                        " ( " +
                           " Select S.SalesID " +
                           " From Sales S, ChartOfAccounts C " +
                           " Where " +
                           " T.CompanyID = S.CompanyID " +
                           " And " +
                           " S.SalesID = C.SalesID " +
                           " And " +
                           " C.CompanyID = T.CompanyID " +
                           " And " +
                           " C.AccountNumber = T.AccountNumber " +
                        " ) As SaleID , " +
                        " H.TotalDebit As Amount,A.UserName,T.AccountNumber, " +
                        " ( " +
                          " Select C.EnglishName " +
                          " From ChartOfAccounts C " +
                          " Where " +
                          " C.CompanyID = T.CompanyID " +
                          " And " +
                          " C.AccountNumber = T.AccountNumber " +
                        " ) As AccountName, " +
                        " ( " +
                           " Select S.SalesName " +
                           " From Sales S, ChartOfAccounts C " +
                           " Where " +
                           " T.CompanyID = S.CompanyID " +
                           " And " +
                           " S.SalesID = C.SalesID " +
                           " And " +
                           " C.CompanyID = T.CompanyID " +
                           " And " +
                           " C.AccountNumber = T.AccountNumber " +
                        " ) As SaleName , " +
                        " ( " +
                         " Select T.EnglishName " +
                         " From TransactionKinds T " +
                         " Where " +
                         " H.TransactionKindNo = T.TransactionKindID " +
                        " ) As TransactionKindName " +
                        " From Headers H,AspNetUsers A,Transactions T  " +
                        " Where " +
                        " H.TransactionKindNo = 23 " +
                        " And " +
                        " H.InsUserID = A.Id " +
                        " And " +
                        " H.CompanyID = A.fCompanyId " +
                        " And " +
                        " H.CompanyID = T.CompanyID " +
                        " And " +
                        " H.TransactionKindNo = T.TransactionKindNo " +
                        " And " +
                        " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                        " And " +
                        " H.VoucherNumber = T.VoucherNumber " +
                        " And " +
                        " T.Credit > 0 " +
                        " ) AllSaleDate " +
                        " Where " +
                        " CompanyID = @CompanyID " +
                        " And " +
                        " cast (datediff (day, 0, VoucherDate) as datetime) >= @FromDate " +
                        " And " +
                        " cast (datediff (day, 0, VoucherDate) as datetime) <= @ToDate "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@FromDate", FromDate)
                    , new SqlParameter("@ToDate", ToDate)

                ).ToList();
                }
                catch
                {
                    return new List<SalesReportVM>();
                }
            }
        }
        public IEnumerable<ServiceTaxReportVM> GetServiceTaxReport(int CompanyID, DateTime FromDate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<ServiceTaxReportVM>(
                    "Select CompanyID,BillID, TransactionKindNo,BillDate,Total,Tax,NetTotal,TransactionKindName,UserName,AccountNumber,AccountName From " +
                    " ( " +
                      " Select HS.CompanyID, HS.BillID, HS.TransactionKindNo, HS.BillDate, " +
                      " ISNull(HS.Total, 0) As Total, ISNull((HS.Tax), 0) As Tax, ISNull((HS.NetTotal), 0) As NetTotal, " +
                      " A.UserName, T.AccountNumber, " +
                      " ( " +
                        " Select C.ArabicName " +
                        " From ChartOfAccounts C " +
                        " Where " +
                        " C.CompanyID = T.CompanyID " +
                        " And " +
                        " C.AccountNumber = T.AccountNumber " +
                      " ) As AccountName, " +
                      " (" +
                        " Select T.ArabicName " +
                        " From TransactionKinds T " +
                        " Where " +
                        " HS.TransactionKindNo = T.TransactionKindID " +
                      " ) As TransactionKindName " +
                      " From HeaderServiceBills HS,AspNetUsers A, Headers H,Transactions T " +
                      " Where " +
                      " HS.TransactionKindNo in(10, 11, 21, 22) " +
                      " And " +
                      " H.InsUserID = A.Id " +
                      " And " +
                      " H.CompanyID = A.fCompanyId " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " H.CompanyID = HS.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = HS.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                      " And " +
                      " H.VHI = HS.BillID " +
                      " And " +
                      " T.CompanyID = HS.CompanyID " +
                      " And " +
                      " T.TransactionKindNo = HS.TransactionKindNo " +
                      " And " +
                      " T.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                      " And " +
                      " T.VHI = HS.BillID " +
                      " And " +
                      " T.Debit > 0" +
                      " Union All " +
                      " Select HS.CompanyID, HS.BillID, HS.TransactionKindNo, HS.BillDate, " +
                      " ISNull(((HS.Total) * -1), 0) As Total,ISNull(((HS.Tax) * -1), 0) As Tax,ISNull(((HS.NetTotal) * -1), 0) As NetTotal, " +
                      " A.UserName, T.AccountNumber, " +
                      " ( " +
                        " Select C.ArabicName " +
                        " From ChartOfAccounts C " +
                        " Where " +
                        " C.CompanyID = T.CompanyID " +
                        " And " +
                        " C.AccountNumber = T.AccountNumber " +
                      " ) As AccountName, " +
                      " (" +
                        " Select T.ArabicName " +
                        " From TransactionKinds T " +
                        " Where " +
                        " HS.TransactionKindNo = T.TransactionKindID " +
                      " ) As TransactionKindName " +
                      " From HeaderServiceBills HS,AspNetUsers A, Headers H,Transactions T " +
                      " Where " +
                      " HS.TransactionKindNo in(19, 20,12,13) " +
                      " And " +
                      " H.InsUserID = A.Id " +
                      " And " +
                      " H.CompanyID = A.fCompanyId " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " H.CompanyID = HS.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = HS.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                      " And " +
                      " H.VHI = HS.BillID " +
                      " And " +
                      " T.CompanyID = HS.CompanyID " +
                      " And " +
                      " T.TransactionKindNo = HS.TransactionKindNo " +
                      " And " +
                      " T.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                      " And " +
                      " T.VHI = HS.BillID " +
                      " And " +
                      " T.Credit > 0" +
                   " ) AllServiceTaxDate " +
                   " Where " +
                   " CompanyID = @CompanyID " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) >= @FromDate " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) <= @ToDate " +
                   " And " +
                   " Tax <> 0 "
                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@FromDate", FromDate)
                   , new SqlParameter("@ToDate", ToDate)

                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<ServiceTaxReportVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<ServiceTaxReportVM>(
                    "Select CompanyID,BillID, TransactionKindNo,BillDate,Total,Tax,NetTotal,TransactionKindName,UserName,AccountNumber,AccountName From " +
                    " ( " +
                      " Select HS.CompanyID, HS.BillID, HS.TransactionKindNo, HS.BillDate, " +
                      " ISNull((HS.Total), 0) As Total, ISNull((HS.Tax), 0) As Tax, ISNull((HS.NetTotal), 0) As NetTotal, " +
                      " A.UserName, T.AccountNumber, " +
                      " ( " +
                        " Select C.EnglishName " +
                        " From ChartOfAccounts C " +
                        " Where " +
                        " C.CompanyID = T.CompanyID " +
                        " And " +
                        " C.AccountNumber = T.AccountNumber " +
                      " ) As AccountName, " +
                      " (" +
                        " Select T.EnglishName " +
                        " From TransactionKinds T " +
                        " Where " +
                        " HS.TransactionKindNo = T.TransactionKindID " +
                      " ) As TransactionKindName " +
                      " From HeaderServiceBills HS,AspNetUsers A, Headers H,Transactions T " +
                      " Where " +
                      " HS.TransactionKindNo in(10, 11, 21, 22) " +
                      " And " +
                      " H.InsUserID = A.Id " +
                      " And " +
                      " H.CompanyID = A.fCompanyId " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " H.CompanyID = HS.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = HS.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                      " And " +
                      " H.VHI = HS.BillID " +
                      " And " +
                      " T.CompanyID = HS.CompanyID " +
                      " And " +
                      " T.TransactionKindNo = HS.TransactionKindNo " +
                      " And " +
                      " T.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                      " And " +
                      " T.VHI = HS.BillID " +
                      " And " +
                      " T.Debit > 0" +
                      " Union All " +
                      " Select HS.CompanyID, HS.BillID, HS.TransactionKindNo, HS.BillDate, " +
                      " ISNull(((HS.Total) * -1), 0) As Total,ISNull(((HS.Tax) * -1), 0) As Tax,ISNull(((HS.NetTotal) * -1), 0) As NetTotal, " +
                      " A.UserName, T.AccountNumber, " +
                      " ( " +
                        " Select C.EnglishName " +
                        " From ChartOfAccounts C " +
                        " Where " +
                        " C.CompanyID = T.CompanyID " +
                        " And " +
                        " C.AccountNumber = T.AccountNumber " +
                      " ) As AccountName, " +
                      " (" +
                        " Select T.EnglishName " +
                        " From TransactionKinds T " +
                        " Where " +
                        " HS.TransactionKindNo = T.TransactionKindID " +
                      " ) As TransactionKindName " +
                      " From HeaderServiceBills HS,AspNetUsers A, Headers H,Transactions T " +
                      " Where " +
                      " HS.TransactionKindNo in(19, 20,12,13) " +
                      " And " +
                      " H.InsUserID = A.Id " +
                      " And " +
                      " H.CompanyID = A.fCompanyId " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " H.CompanyID = HS.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = HS.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                      " And " +
                      " H.VHI = HS.BillID " +
                      " And " +
                      " T.CompanyID = HS.CompanyID " +
                      " And " +
                      " T.TransactionKindNo = HS.TransactionKindNo " +
                      " And " +
                      " T.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                      " And " +
                      " T.VHI = HS.BillID " +
                      " And " +
                      " T.Credit > 0" +
                   " ) AllServiceTaxDate " +
                   " Where " +
                   " CompanyID = @CompanyID " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) >= @FromDate " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) <= @ToDate " +
                   " And " +
                   " Tax <> 0 "
                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@FromDate", FromDate)
                   , new SqlParameter("@ToDate", ToDate)
                ).ToList();
                }
                catch
                {
                    return new List<ServiceTaxReportVM>();
                }
            }
        }
        public IEnumerable<ServiceTaxReportVM> GetServiceTaxReportTaxExempt(int CompanyID, DateTime FromDate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<ServiceTaxReportVM>(
                    "Select CompanyID,BillID, TransactionKindNo,BillDate,Total,Tax,NetTotal,TransactionKindName,UserName,AccountNumber,AccountName From " +
                    " ( " +
                      " Select HS.CompanyID, HS.BillID, HS.TransactionKindNo, HS.BillDate, " +
                      " ISNull((HS.Total), 0) As Total, ISNull((HS.Tax), 0) As Tax, ISNull((HS.NetTotal), 0) As NetTotal, " +
                      " A.UserName, T.AccountNumber, " +
                      " ( " +
                        " Select C.ArabicName " +
                        " From ChartOfAccounts C " +
                        " Where " +
                        " C.CompanyID = T.CompanyID " +
                        " And " +
                        " C.AccountNumber = T.AccountNumber " +
                      " ) As AccountName, " +
                      " (" +
                        " Select T.ArabicName " +
                        " From TransactionKinds T " +
                        " Where " +
                        " HS.TransactionKindNo = T.TransactionKindID " +
                      " ) As TransactionKindName " +
                      " From HeaderServiceBills HS,AspNetUsers A, Headers H,Transactions T " +
                      " Where " +
                      " HS.TransactionKindNo in(10, 11, 21, 22) " +
                      " And " +
                      " H.InsUserID = A.Id " +
                      " And " +
                      " H.CompanyID = A.fCompanyId " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " H.CompanyID = HS.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = HS.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                      " And " +
                      " H.VHI = HS.BillID " +
                      " And " +
                      " T.CompanyID = HS.CompanyID " +
                      " And " +
                      " T.TransactionKindNo = HS.TransactionKindNo " +
                      " And " +
                      " T.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                      " And " +
                      " T.VHI = HS.BillID " +
                      " And " +
                      " T.Debit > 0" +
                      " Union All " +
                      " Select HS.CompanyID, HS.BillID, HS.TransactionKindNo, HS.BillDate, " +
                      " ISNull(((HS.Total) * -1), 0) As Total,ISNull(((HS.Tax) * -1), 0) As Tax,ISNull(((HS.NetTotal) * -1), 0) As NetTotal, " +
                      " A.UserName, T.AccountNumber, " +
                      " ( " +
                        " Select C.ArabicName " +
                        " From ChartOfAccounts C " +
                        " Where " +
                        " C.CompanyID = T.CompanyID " +
                        " And " +
                        " C.AccountNumber = T.AccountNumber " +
                      " ) As AccountName, " +
                      " (" +
                        " Select T.ArabicName " +
                        " From TransactionKinds T " +
                        " Where " +
                        " HS.TransactionKindNo = T.TransactionKindID " +
                      " ) As TransactionKindName " +
                      " From HeaderServiceBills HS,AspNetUsers A, Headers H,Transactions T " +
                      " Where " +
                      " HS.TransactionKindNo in(19, 20,12,13) " +
                      " And " +
                      " H.InsUserID = A.Id " +
                      " And " +
                      " H.CompanyID = A.fCompanyId " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " H.CompanyID = HS.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = HS.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                      " And " +
                      " H.VHI = HS.BillID " +
                      " And " +
                      " T.CompanyID = HS.CompanyID " +
                      " And " +
                      " T.TransactionKindNo = HS.TransactionKindNo " +
                      " And " +
                      " T.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                      " And " +
                      " T.VHI = HS.BillID " +
                      " And " +
                      " T.Credit > 0" +
                   " ) AllServiceTaxDate " +
                   " Where " +
                   " CompanyID = @CompanyID " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) >= @FromDate " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) <= @ToDate " +
                   " And " +
                   " Tax = 0 "
                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@FromDate", FromDate)
                   , new SqlParameter("@ToDate", ToDate)

                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<ServiceTaxReportVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<ServiceTaxReportVM>(
                    "Select CompanyID,BillID, TransactionKindNo,BillDate,Total,Tax,NetTotal,TransactionKindName,UserName,AccountNumber,AccountName From " +
                    " ( " +
                      " Select HS.CompanyID, HS.BillID, HS.TransactionKindNo, HS.BillDate, " +
                      " ISNull((HS.Total), 0) As Total, ISNull((HS.Tax), 0) As Tax, ISNull((HS.NetTotal), 0) As NetTotal, " +
                      " A.UserName, T.AccountNumber, " +
                      " ( " +
                        " Select C.EnglishName " +
                        " From ChartOfAccounts C " +
                        " Where " +
                        " C.CompanyID = T.CompanyID " +
                        " And " +
                        " C.AccountNumber = T.AccountNumber " +
                      " ) As AccountName, " +
                      " (" +
                        " Select T.EnglishName " +
                        " From TransactionKinds T " +
                        " Where " +
                        " HS.TransactionKindNo = T.TransactionKindID " +
                      " ) As TransactionKindName " +
                      " From HeaderServiceBills HS,AspNetUsers A, Headers H,Transactions T " +
                      " Where " +
                      " HS.TransactionKindNo in(10, 11, 21, 22) " +
                      " And " +
                      " H.InsUserID = A.Id " +
                      " And " +
                      " H.CompanyID = A.fCompanyId " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " H.CompanyID = HS.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = HS.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                      " And " +
                      " H.VHI = HS.BillID " +
                      " And " +
                      " T.CompanyID = HS.CompanyID " +
                      " And " +
                      " T.TransactionKindNo = HS.TransactionKindNo " +
                      " And " +
                      " T.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                      " And " +
                      " T.VHI = HS.BillID " +
                      " And " +
                      " T.Debit > 0" +
                      " Union All " +
                      " Select HS.CompanyID, HS.BillID, HS.TransactionKindNo, HS.BillDate, " +
                      " ISNull(((HS.Total) * -1), 0) As Total,ISNull(((HS.Tax) * -1), 0) As Tax,ISNull(((HS.NetTotal) * -1), 0) As NetTotal, " +
                      " A.UserName, T.AccountNumber, " +
                      " ( " +
                        " Select C.EnglishName " +
                        " From ChartOfAccounts C " +
                        " Where " +
                        " C.CompanyID = T.CompanyID " +
                        " And " +
                        " C.AccountNumber = T.AccountNumber " +
                      " ) As AccountName, " +
                      " (" +
                        " Select T.EnglishName " +
                        " From TransactionKinds T " +
                        " Where " +
                        " HS.TransactionKindNo = T.TransactionKindID " +
                      " ) As TransactionKindName " +
                      " From HeaderServiceBills HS,AspNetUsers A, Headers H,Transactions T " +
                      " Where " +
                      " HS.TransactionKindNo in(19, 20,12,13) " +
                      " And " +
                      " H.InsUserID = A.Id " +
                      " And " +
                      " H.CompanyID = A.fCompanyId " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " H.CompanyID = HS.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = HS.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                      " And " +
                      " H.VHI = HS.BillID " +
                      " And " +
                      " T.CompanyID = HS.CompanyID " +
                      " And " +
                      " T.TransactionKindNo = HS.TransactionKindNo " +
                      " And " +
                      " T.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                      " And " +
                      " T.VHI = HS.BillID " +
                      " And " +
                      " T.Credit > 0" +
                   " ) AllServiceTaxDate " +
                   " Where " +
                   " CompanyID = @CompanyID " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) >= @FromDate " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) <= @ToDate " +
                   " And " +
                   " Tax = 0 "
                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@FromDate", FromDate)
                   , new SqlParameter("@ToDate", ToDate)
                ).ToList();
                }
                catch
                {
                    return new List<ServiceTaxReportVM>();
                }
            }
        }
        public IEnumerable<ServiceTaxReportVM> GetServiceTaxReportDetailed(int CompanyID, DateTime FromDate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<ServiceTaxReportVM>(
                    "Select CompanyID,BillID, TransactionKindNo,BillDate,Total,Tax,NetTotal,TransactionKindName,UserName,AccountNumber,AccountName,TaxPercentage,ServiceNo,ServiceName From " +
                    " ( " +
                      " Select TS.CompanyID, TS.BillID, TS.TransactionKindNo, H.VoucherDate As BillDate,TS.Tax As TaxPercentage,TS.ServiceNo,  " +
                      " ISNull((Ts.NetAfterTotalDisc), 0) As Total, ISNull((TS.NetTotalTax), 0) As Tax, ISNull((Ts.NetAfterTotalDisc + TS.NetTotalTax), 0) As NetTotal, " +
                      " A.UserName, T.AccountNumber, " +
                      " ( " +
                        " Select C.ArabicName " +
                        " From ChartOfAccounts C " +
                        " Where " +
                        " C.CompanyID = T.CompanyID " +
                        " And " +
                        " C.AccountNumber = T.AccountNumber " +
                      " ) As AccountName, " +
                      " (" +
                        " Select T.ArabicName " +
                        " From TransactionKinds T " +
                        " Where " +
                        " H.TransactionKindNo = T.TransactionKindID " +
                      " ) As TransactionKindName, " +
                      " ( " +
                         " Select S.ArabicName " +
                         " From[Services] S " +
                         " Where " +
                         " S.CompanyID = Ts.CompanyID " +
                         " And " +
                         " S.ServiceID = TS.ServiceNo " +
                       " ) As ServiceName " +
                      " From TransActionServiceBills TS,AspNetUsers A, Headers H,Transactions T " +
                      " Where " +
                      " TS.TransactionKindNo in(10, 11, 21, 22) " +
                      " And " +
                      " H.InsUserID = A.Id " +
                      " And " +
                      " H.CompanyID = A.fCompanyId " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " H.CompanyID = TS.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = TS.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                      " And " +
                      " H.VHI = TS.BillID " +
                      " And " +
                      " T.CompanyID = TS.CompanyID " +
                      " And " +
                      " T.TransactionKindNo = TS.TransactionKindNo " +
                      " And " +
                      " T.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                      " And " +
                      " T.VHI = TS.BillID " +
                      " And " +
                      " T.Debit > 0" +
                      " Union All " +
                      " Select TS.CompanyID, TS.BillID, TS.TransactionKindNo, H.VoucherDate As BillDate,TS.Tax As TaxPercentage,TS.ServiceNo,  " +
                      " ISNull((Ts.NetAfterTotalDisc * -1), 0) As Total, ISNull((TS.NetTotalTax * -1), 0) As Tax, ISNull(((Ts.NetAfterTotalDisc + TS.NetTotalTax) * -1), 0) As NetTotal, " +
                      " A.UserName, T.AccountNumber, " +
                      " ( " +
                        " Select C.ArabicName " +
                        " From ChartOfAccounts C " +
                        " Where " +
                        " C.CompanyID = T.CompanyID " +
                        " And " +
                        " C.AccountNumber = T.AccountNumber " +
                      " ) As AccountName, " +
                      " (" +
                        " Select T.ArabicName " +
                        " From TransactionKinds T " +
                        " Where " +
                        " H.TransactionKindNo = T.TransactionKindID " +
                      " ) As TransactionKindName, " +
                      " ( " +
                         " Select S.ArabicName " +
                         " From[Services] S " +
                         " Where " +
                         " S.CompanyID = Ts.CompanyID " +
                         " And " +
                         " S.ServiceID = TS.ServiceNo " +
                       " ) As ServiceName " +
                      " From TransActionServiceBills TS,AspNetUsers A, Headers H,Transactions T " +
                      " Where " +
                      " TS.TransactionKindNo in(19, 20,12,13) " +
                      " And " +
                      " H.InsUserID = A.Id " +
                      " And " +
                      " H.CompanyID = A.fCompanyId " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " H.CompanyID = TS.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = TS.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                      " And " +
                      " H.VHI = TS.BillID " +
                      " And " +
                      " T.CompanyID = TS.CompanyID " +
                      " And " +
                      " T.TransactionKindNo = TS.TransactionKindNo " +
                      " And " +
                      " T.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                      " And " +
                      " T.VHI = TS.BillID " +
                      " And " +
                      " T.Credit > 0" +
                   " ) AllServiceTaxDate " +
                   " Where " +
                   " CompanyID = @CompanyID " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) >= @FromDate " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) <= @ToDate " +
                   " And " +
                   " Tax <> 0 "
                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@FromDate", FromDate)
                   , new SqlParameter("@ToDate", ToDate)

                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<ServiceTaxReportVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<ServiceTaxReportVM>(
                    "Select CompanyID,BillID, TransactionKindNo,BillDate,Total,Tax,NetTotal,TransactionKindName,UserName,AccountNumber,AccountName,TaxPercentage,ServiceNo,ServiceName From " +
                    " ( " +
                      " Select TS.CompanyID, TS.BillID, TS.TransactionKindNo, H.VoucherDate As BillDate,TS.Tax As TaxPercentage,TS.ServiceNo,  " +
                      " ISNull((Ts.NetAfterTotalDisc), 0) As Total, ISNull((TS.NetTotalTax), 0) As Tax, ISNull((Ts.NetAfterTotalDisc + TS.NetTotalTax), 0) As NetTotal, " +
                      " A.UserName, T.AccountNumber, " +
                      " ( " +
                        " Select C.EnglishName " +
                        " From ChartOfAccounts C " +
                        " Where " +
                        " C.CompanyID = T.CompanyID " +
                        " And " +
                        " C.AccountNumber = T.AccountNumber " +
                      " ) As AccountName, " +
                      " (" +
                        " Select T.EnglishName " +
                        " From TransactionKinds T " +
                        " Where " +
                        " H.TransactionKindNo = T.TransactionKindID " +
                      " ) As TransactionKindName, " +
                      " ( " +
                         " Select S.EnglishName " +
                         " From[Services] S " +
                         " Where " +
                         " S.CompanyID = Ts.CompanyID " +
                         " And " +
                         " S.ServiceID = TS.ServiceNo " +
                       " ) As ServiceName " +
                      " From TransActionServiceBills TS,AspNetUsers A, Headers H,Transactions T " +
                      " Where " +
                      " TS.TransactionKindNo in(10, 11, 21, 22) " +
                      " And " +
                      " H.InsUserID = A.Id " +
                      " And " +
                      " H.CompanyID = A.fCompanyId " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " H.CompanyID = TS.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = TS.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                      " And " +
                      " H.VHI = TS.BillID " +
                      " And " +
                      " T.CompanyID = TS.CompanyID " +
                      " And " +
                      " T.TransactionKindNo = TS.TransactionKindNo " +
                      " And " +
                      " T.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                      " And " +
                      " T.VHI = TS.BillID " +
                      " And " +
                      " T.Debit > 0" +
                      " Union All " +
                      " Select TS.CompanyID, TS.BillID, TS.TransactionKindNo, H.VoucherDate As BillDate,TS.Tax As TaxPercentage,TS.ServiceNo,  " +
                      " ISNull((Ts.NetAfterTotalDisc * -1), 0) As Total, ISNull((TS.NetTotalTax * -1), 0) As Tax, ISNull(((Ts.NetAfterTotalDisc + TS.NetTotalTax) * -1), 0) As NetTotal, " +
                      " A.UserName, T.AccountNumber, " +
                      " ( " +
                        " Select C.EnglishName " +
                        " From ChartOfAccounts C " +
                        " Where " +
                        " C.CompanyID = T.CompanyID " +
                        " And " +
                        " C.AccountNumber = T.AccountNumber " +
                      " ) As AccountName, " +
                      " (" +
                        " Select T.EnglishName " +
                        " From TransactionKinds T " +
                        " Where " +
                        " H.TransactionKindNo = T.TransactionKindID " +
                      " ) As TransactionKindName, " +
                      " ( " +
                         " Select S.EnglishName " +
                         " From[Services] S " +
                         " Where " +
                         " S.CompanyID = Ts.CompanyID " +
                         " And " +
                         " S.ServiceID = TS.ServiceNo " +
                       " ) As ServiceName " +
                      " From TransActionServiceBills TS,AspNetUsers A, Headers H,Transactions T " +
                      " Where " +
                      " TS.TransactionKindNo in(19, 20,12,13) " +
                      " And " +
                      " H.InsUserID = A.Id " +
                      " And " +
                      " H.CompanyID = A.fCompanyId " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " H.CompanyID = TS.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = TS.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                      " And " +
                      " H.VHI = TS.BillID " +
                      " And " +
                      " T.CompanyID = TS.CompanyID " +
                      " And " +
                      " T.TransactionKindNo = TS.TransactionKindNo " +
                      " And " +
                      " T.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                      " And " +
                      " T.VHI = TS.BillID " +
                      " And " +
                      " T.Credit > 0" +
                   " ) AllServiceTaxDate " +
                   " Where " +
                   " CompanyID = @CompanyID " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) >= @FromDate " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) <= @ToDate " +
                   " And " +
                   " Tax <> 0 "
                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@FromDate", FromDate)
                   , new SqlParameter("@ToDate", ToDate)

                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<ServiceTaxReportVM>();
                }
            }
        }
        public IEnumerable<ServiceTaxReportVM> GetServiceTaxReportDetailedTaxExempt(int CompanyID, DateTime FromDate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<ServiceTaxReportVM>(
                    "Select CompanyID,BillID, TransactionKindNo,BillDate,Total,Tax,NetTotal,TransactionKindName,UserName,AccountNumber,AccountName,TaxPercentage,ServiceNo,ServiceName From " +
                    " ( " +
                      " Select TS.CompanyID, TS.BillID, TS.TransactionKindNo, H.VoucherDate As BillDate,TS.Tax As TaxPercentage,TS.ServiceNo, " +
                      " ISNull((Ts.NetAfterTotalDisc), 0) As Total, ISNull((TS.NetTotalTax), 0) As Tax, ISNull((Ts.NetAfterTotalDisc + TS.NetTotalTax), 0) As NetTotal, " +
                      " A.UserName, T.AccountNumber, " +
                      " ( " +
                        " Select C.ArabicName " +
                        " From ChartOfAccounts C " +
                        " Where " +
                        " C.CompanyID = T.CompanyID " +
                        " And " +
                        " C.AccountNumber = T.AccountNumber " +
                      " ) As AccountName, " +
                      " (" +
                        " Select T.ArabicName " +
                        " From TransactionKinds T " +
                        " Where " +
                        " H.TransactionKindNo = T.TransactionKindID " +
                      " ) As TransactionKindName, " +
                      " ( " +
                         " Select S.ArabicName " +
                         " From[Services] S " +
                         " Where " +
                         " S.CompanyID = Ts.CompanyID " +
                         " And " +
                         " S.ServiceID = TS.ServiceNo " +
                       " ) As ServiceName " +
                      " From TransActionServiceBills TS,AspNetUsers A, Headers H,Transactions T " +
                      " Where " +
                      " TS.TransactionKindNo in(10, 11, 21, 22) " +
                      " And " +
                      " H.InsUserID = A.Id " +
                      " And " +
                      " H.CompanyID = A.fCompanyId " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " H.CompanyID = TS.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = TS.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                      " And " +
                      " H.VHI = TS.BillID " +
                      " And " +
                      " T.CompanyID = TS.CompanyID " +
                      " And " +
                      " T.TransactionKindNo = TS.TransactionKindNo " +
                      " And " +
                      " T.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                      " And " +
                      " T.VHI = TS.BillID " +
                      " And " +
                      " T.Debit > 0" +
                      " Union All " +
                      " Select TS.CompanyID, TS.BillID, TS.TransactionKindNo, H.VoucherDate As BillDate,TS.Tax As TaxPercentage,  " +
                      " ISNull((Ts.NetAfterTotalDisc * -1), 0) As Total, ISNull((TS.NetTotalTax * -1), 0) As Tax, ISNull(((Ts.NetAfterTotalDisc + TS.NetTotalTax) * -1), 0) As NetTotal, " +
                      " A.UserName, T.AccountNumber, " +
                      " ( " +
                        " Select C.ArabicName " +
                        " From ChartOfAccounts C " +
                        " Where " +
                        " C.CompanyID = T.CompanyID " +
                        " And " +
                        " C.AccountNumber = T.AccountNumber " +
                      " ) As AccountName, " +
                      " (" +
                        " Select T.ArabicName " +
                        " From TransactionKinds T " +
                        " Where " +
                        " H.TransactionKindNo = T.TransactionKindID " +
                      " ) As TransactionKindName, " +
                      " ( " +
                         " Select S.ArabicName " +
                         " From[Services] S " +
                         " Where " +
                         " S.CompanyID = Ts.CompanyID " +
                         " And " +
                         " S.ServiceID = TS.ServiceNo " +
                       " ) As ServiceName " +
                      " From TransActionServiceBills TS,AspNetUsers A, Headers H,Transactions T " +
                      " Where " +
                      " TS.TransactionKindNo in(19, 20,12,13) " +
                      " And " +
                      " H.InsUserID = A.Id " +
                      " And " +
                      " H.CompanyID = A.fCompanyId " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " H.CompanyID = TS.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = TS.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                      " And " +
                      " H.VHI = TS.BillID " +
                      " And " +
                      " T.CompanyID = TS.CompanyID " +
                      " And " +
                      " T.TransactionKindNo = TS.TransactionKindNo " +
                      " And " +
                      " T.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                      " And " +
                      " T.VHI = TS.BillID " +
                      " And " +
                      " T.Credit > 0" +
                   " ) AllServiceTaxDate " +
                   " Where " +
                   " CompanyID = @CompanyID " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) >= @FromDate " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) <= @ToDate " +
                   " And " +
                   " Tax = 0 "
                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@FromDate", FromDate)
                   , new SqlParameter("@ToDate", ToDate)

                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<ServiceTaxReportVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<ServiceTaxReportVM>(
                    "Select CompanyID,BillID, TransactionKindNo,BillDate,Total,Tax,NetTotal,TransactionKindName,UserName,AccountNumber,AccountName,TaxPercentage,ServiceNo,ServiceName From " +
                    " ( " +
                      " Select TS.CompanyID, TS.BillID, TS.TransactionKindNo, H.VoucherDate As BillDate,TS.Tax As TaxPercentage,TS.ServiceNo,    " +
                      " ISNull((Ts.NetAfterTotalDisc), 0) As Total, ISNull((TS.NetTotalTax), 0) As Tax, ISNull((Ts.NetAfterTotalDisc + TS.NetTotalTax), 0) As NetTotal, " +
                      " A.UserName, T.AccountNumber, " +
                      " ( " +
                        " Select C.EnglishName " +
                        " From ChartOfAccounts C " +
                        " Where " +
                        " C.CompanyID = T.CompanyID " +
                        " And " +
                        " C.AccountNumber = T.AccountNumber " +
                      " ) As AccountName, " +
                      " (" +
                        " Select T.EnglishName " +
                        " From TransactionKinds T " +
                        " Where " +
                        " H.TransactionKindNo = T.TransactionKindID " +
                      " ) As TransactionKindName, " +
                      " ( " +
                         " Select S.ArabicName " +
                         " From[Services] S " +
                         " Where " +
                         " S.CompanyID = Ts.CompanyID " +
                         " And " +
                         " S.ServiceID = TS.ServiceNo " +
                       " ) As ServiceName " +
                      " From TransActionServiceBills TS,AspNetUsers A, Headers H,Transactions T " +
                      " Where " +
                      " TS.TransactionKindNo in(10, 11, 21, 22) " +
                      " And " +
                      " H.InsUserID = A.Id " +
                      " And " +
                      " H.CompanyID = A.fCompanyId " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " H.CompanyID = TS.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = TS.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                      " And " +
                      " H.VHI = TS.BillID " +
                      " And " +
                      " T.CompanyID = TS.CompanyID " +
                      " And " +
                      " T.TransactionKindNo = TS.TransactionKindNo " +
                      " And " +
                      " T.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                      " And " +
                      " T.VHI = TS.BillID " +
                      " And " +
                      " T.Debit > 0" +
                      " Union All " +
                      " Select TS.CompanyID, TS.BillID, TS.TransactionKindNo, H.VoucherDate As BillDate,TS.Tax As TaxPercentage,  " +
                      " ISNull((Ts.NetAfterTotalDisc * -1), 0) As Total, ISNull((TS.NetTotalTax * -1), 0) As Tax, ISNull(((Ts.NetAfterTotalDisc + TS.NetTotalTax) * -1), 0) As NetTotal, " +
                      " A.UserName, T.AccountNumber, " +
                      " ( " +
                        " Select C.EnglishName " +
                        " From ChartOfAccounts C " +
                        " Where " +
                        " C.CompanyID = T.CompanyID " +
                        " And " +
                        " C.AccountNumber = T.AccountNumber " +
                      " ) As AccountName, " +
                      " (" +
                        " Select T.EnglishName " +
                        " From TransactionKinds T " +
                        " Where " +
                        " H.TransactionKindNo = T.TransactionKindID " +
                      " ) As TransactionKindName, " +
                      " ( " +
                         " Select S.ArabicName " +
                         " From[Services] S " +
                         " Where " +
                         " S.CompanyID = Ts.CompanyID " +
                         " And " +
                         " S.ServiceID = TS.ServiceNo " +
                       " ) As ServiceName " +
                      " From TransActionServiceBills TS,AspNetUsers A, Headers H,Transactions T " +
                      " Where " +
                      " TS.TransactionKindNo in(19, 20,12,13) " +
                      " And " +
                      " H.InsUserID = A.Id " +
                      " And " +
                      " H.CompanyID = A.fCompanyId " +
                      " And " +
                      " H.CompanyID = T.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = T.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                      " And " +
                      " H.VoucherNumber = T.VoucherNumber " +
                      " And " +
                      " H.CompanyID = TS.CompanyID " +
                      " And " +
                      " H.TransactionKindNo = TS.TransactionKindNo " +
                      " And " +
                      " H.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                      " And " +
                      " H.VHI = TS.BillID " +
                      " And " +
                      " T.CompanyID = TS.CompanyID " +
                      " And " +
                      " T.TransactionKindNo = TS.TransactionKindNo " +
                      " And " +
                      " T.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                      " And " +
                      " T.VHI = TS.BillID " +
                      " And " +
                      " T.Credit > 0" +
                   " ) AllServiceTaxDate " +
                   " Where " +
                   " CompanyID = @CompanyID " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) >= @FromDate " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) <= @ToDate " +
                   " And " +
                   " Tax = 0 "
                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@FromDate", FromDate)
                   , new SqlParameter("@ToDate", ToDate)
                ).ToList();
                }
                catch
                {
                    return new List<ServiceTaxReportVM>();
                }
            }
        }
        public IEnumerable<ServiceReportVM> GetServiceReport(int CompanyID, DateTime FromDate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<ServiceReportVM>(
                    " Select CompanyID, BillID, TransactionKindNo, MONTH(BillDate) as MonthNo,BillDate, Total, Discount, NetTotalAfterDiscount, Tax, NetTotal,  " +
                    " TransactionKindName, UserName, AccountNumber, AccountName, SaleID, SaleName From " +
                    " ( " +
                       " Select HS.CompanyID, HS.BillID, HS.TransactionKindNo, HS.BillDate, " +
                       " ISNull((HS.Total + Hs.Discount), 0) As Total, IsNull((Hs.Discount), 0) As Discount, ISNull(HS.Total, 0) As NetTotalAfterDiscount, " +
                       " ISNull((HS.Tax), 0) As Tax, ISNull((HS.NetTotal), 0) As NetTotal, " +
                       " A.UserName, T.AccountNumber, H.SaleID, " +
                       " ( " +
                         " Select C.ArabicName " +
                         " From ChartOfAccounts C " +
                         " Where " +
                         " C.CompanyID = T.CompanyID " +
                         " And " +
                         " C.AccountNumber = T.AccountNumber " +
                       " ) As AccountName, " +
                       " ( " +
                         " Select T.ArabicName " +
                         " From TransactionKinds T " +
                         " Where " +
                         " HS.TransactionKindNo = T.TransactionKindID " +
                       " ) As TransactionKindName, " +
                        " ( " +
                           " Select S.SalesName " +
                           " From Sales S " +
                           " Where " +
                           " H.CompanyID = S.CompanyID " +
                           " And " +
                           " H.SaleID = S.SalesID " +
                         " ) As SaleName " +
                       " From HeaderServiceBills HS,AspNetUsers A, Headers H,Transactions T " +
                       " Where " +
                       " HS.TransactionKindNo in(10, 11, 21, 22) " +
                       " And " +
                       " H.InsUserID = A.Id " +
                       " And " +
                       " H.CompanyID = A.fCompanyId " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.CompanyID = HS.CompanyID " +
                       " And " +
                       " H.TransactionKindNo = HS.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                       " And " +
                       " H.VHI = HS.BillID " +
                       " And " +
                       " T.CompanyID = HS.CompanyID " +
                       " And " +
                       " T.TransactionKindNo = HS.TransactionKindNo " +
                       " And " +
                       " T.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                       " And " +
                       " T.VHI = HS.BillID " +
                       " And " +
                       " T.Debit > 0 " +
                       " Union All " +
                       " Select HS.CompanyID, HS.BillID, HS.TransactionKindNo, HS.BillDate,  " +
                       " ISNull(((HS.Total + Hs.Discount) * -1), 0) As Total, IsNull((Hs.Discount * -1), 0) As Discount, ISNull((HS.Total * -1), 0) As NetTotalAfterDiscount,  " +
                       " ISNull((HS.Tax * -1), 0) As Tax, ISNull((HS.NetTotal * -1), 0) As NetTotal, " +
                       "  A.UserName, T.AccountNumber,H.SaleID, " +
                       " ( " +
                        " Select C.ArabicName " +
                        " From ChartOfAccounts C " +
                        " Where " +
                        " C.CompanyID = T.CompanyID " +
                        " And " +
                        " C.AccountNumber = T.AccountNumber " +
                       " ) As AccountName, " +
                       " ( " +
                         " Select T.ArabicName " +
                         " From TransactionKinds T " +
                         " Where " +
                         " HS.TransactionKindNo = T.TransactionKindID " +
                       " ) As TransactionKindName, " +
                       " ( " +
                           " Select S.SalesName " +
                           " From Sales S " +
                           " Where " +
                           " H.CompanyID = S.CompanyID " +
                           " And " +
                           " H.SaleID = S.SalesID " +
                         " ) As SaleName " +
                       " From HeaderServiceBills HS,AspNetUsers A, Headers H,Transactions T " +
                       " Where " +
                       " HS.TransactionKindNo in(19, 20, 12, 13) " +
                       " And " +
                       " H.InsUserID = A.Id " +
                       " And " +
                       " H.CompanyID = A.fCompanyId " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.CompanyID = HS.CompanyID " +
                       " And " +
                       " H.TransactionKindNo = HS.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                       " And " +
                       " H.VHI = HS.BillID " +
                       " And " +
                       " T.CompanyID = HS.CompanyID " +
                       " And " +
                       " T.TransactionKindNo = HS.TransactionKindNo " +
                       " And " +
                       " T.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                       " And " +
                       " T.VHI = HS.BillID " +
                       " And " +
                       " T.Credit > 0 " +
                    " ) AllServiceDate " +
                    " Where " +
                   " CompanyID = @CompanyID " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) >= @FromDate " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) <= @ToDate "
                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@FromDate", FromDate)
                   , new SqlParameter("@ToDate", ToDate)

                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<ServiceReportVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<ServiceReportVM>(
                    " Select CompanyID, BillID, TransactionKindNo,MONTH(BillDate) as MonthNo, BillDate, Total, Discount, NetTotalAfterDiscount, Tax, NetTotal,  " +
                    " TransactionKindName, UserName, AccountNumber, AccountName, SaleID, SaleName From " +
                    " ( " +
                       " Select HS.CompanyID, HS.BillID, HS.TransactionKindNo, HS.BillDate, " +
                       " ISNull((HS.Total + Hs.Discount), 0) As Total, IsNull((Hs.Discount), 0) As Discount, ISNull(HS.Total, 0) As NetTotalAfterDiscount, " +
                       " ISNull((HS.Tax), 0) As Tax, ISNull((HS.NetTotal), 0) As NetTotal, " +
                       " A.UserName, T.AccountNumber, H.SaleID, " +
                       " ( " +
                         " Select C.EnglishName " +
                         " From ChartOfAccounts C " +
                         " Where " +
                         " C.CompanyID = T.CompanyID " +
                         " And " +
                         " C.AccountNumber = T.AccountNumber " +
                       " ) As AccountName, " +
                       " ( " +
                         " Select T.EnglishName " +
                         " From TransactionKinds T " +
                         " Where " +
                         " HS.TransactionKindNo = T.TransactionKindID " +
                       " ) As TransactionKindName, " +
                        " ( " +
                           " Select S.SalesName " +
                           " From Sales S " +
                           " Where " +
                           " H.CompanyID = S.CompanyID " +
                           " And " +
                           " H.SaleID = S.SalesID " +
                         " ) As SaleName " +
                       " From HeaderServiceBills HS,AspNetUsers A, Headers H,Transactions T " +
                       " Where " +
                       " HS.TransactionKindNo in(10, 11, 21, 22) " +
                       " And " +
                       " H.InsUserID = A.Id " +
                       " And " +
                       " H.CompanyID = A.fCompanyId " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.CompanyID = HS.CompanyID " +
                       " And " +
                       " H.TransactionKindNo = HS.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                       " And " +
                       " H.VHI = HS.BillID " +
                       " And " +
                       " T.CompanyID = HS.CompanyID " +
                       " And " +
                       " T.TransactionKindNo = HS.TransactionKindNo " +
                       " And " +
                       " T.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                       " And " +
                       " T.VHI = HS.BillID " +
                       " And " +
                       " T.Debit > 0 " +
                       " Union All " +
                       " Select HS.CompanyID, HS.BillID, HS.TransactionKindNo, HS.BillDate,  " +
                       " ISNull(((HS.Total + Hs.Discount) * -1), 0) As Total, IsNull((Hs.Discount * -1), 0) As Discount, ISNull((HS.Total * -1), 0) As NetTotalAfterDiscount,  " +
                       " ISNull((HS.Tax * -1), 0) As Tax, ISNull((HS.NetTotal * -1), 0) As NetTotal, " +
                       "  A.UserName, T.AccountNumber,H.SaleID, " +
                       " ( " +
                        " Select C.EnglishName " +
                        " From ChartOfAccounts C " +
                        " Where " +
                        " C.CompanyID = T.CompanyID " +
                        " And " +
                        " C.AccountNumber = T.AccountNumber " +
                       " ) As AccountName, " +
                       " ( " +
                         " Select T.EnglishName " +
                         " From TransactionKinds T " +
                         " Where " +
                         " HS.TransactionKindNo = T.TransactionKindID " +
                       " ) As TransactionKindName, " +
                       " ( " +
                           " Select S.SalesName " +
                           " From Sales S " +
                           " Where " +
                           " H.CompanyID = S.CompanyID " +
                           " And " +
                           " H.SaleID = S.SalesID " +
                         " ) As SaleName " +
                       " From HeaderServiceBills HS,AspNetUsers A, Headers H,Transactions T " +
                       " Where " +
                       " HS.TransactionKindNo in(19, 20, 12, 13) " +
                       " And " +
                       " H.InsUserID = A.Id " +
                       " And " +
                       " H.CompanyID = A.fCompanyId " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.CompanyID = HS.CompanyID " +
                       " And " +
                       " H.TransactionKindNo = HS.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                       " And " +
                       " H.VHI = HS.BillID " +
                       " And " +
                       " T.CompanyID = HS.CompanyID " +
                       " And " +
                       " T.TransactionKindNo = HS.TransactionKindNo " +
                       " And " +
                       " T.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                       " And " +
                       " T.VHI = HS.BillID " +
                       " And " +
                       " T.Credit > 0 " +
                    " ) AllServiceDate " +
                    " Where " +
                   " CompanyID = @CompanyID " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) >= @FromDate " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) <= @ToDate "

                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@FromDate", FromDate)
                   , new SqlParameter("@ToDate", ToDate)

                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<ServiceReportVM>();
                }
            }
        }
        public IEnumerable<ServiceReportVM> GetServiceReportDetailed(int CompanyID, DateTime FromDate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<ServiceReportVM>(
                    " Select CompanyID, BillID, TransactionKindNo, BillDate, Total, Discount, NetTotalAfterDiscount, Tax, NetTotal, TransactionKindName, UserName, " +
                    " AccountNumber, AccountName, TaxPercentage, ServiceNo, ServiceName, SaleID, SaleName From " +
                    " ( " +
                      " Select TS.CompanyID, TS.BillID, TS.TransactionKindNo, H.VoucherDate As BillDate, TS.Tax As TaxPercentage, TS.ServiceNo, " +
                      " ISNull((TS.Price), 0) As Total, IsNull((TS.LocalDiscount + TS.TotalDiscValue), 0) As Discount, ISNull((TS.NetAfterTotalDisc), 0) As NetTotalAfterDiscount, " +
                      " ISNull((TS.NetTotalTax), 0) As Tax, ISNull((Ts.NetAfterTotalDisc + TS.NetTotalTax), 0) As NetTotal, " +
                      " A.UserName, T.AccountNumber, H.SaleID, " +
                      " ( " +
                         " Select C.ArabicName " +
                         " From ChartOfAccounts C " +
                         " Where " +
                         " C.CompanyID = T.CompanyID " +
                         " And " +
                         " C.AccountNumber = T.AccountNumber " +
                       " ) As AccountName, " +
                       " ( " +
                         " Select T.ArabicName " +
                         " From TransactionKinds T " +
                         " Where " +
                         " H.TransactionKindNo = T.TransactionKindID " +
                       " ) As TransactionKindName, " +
                       " ( " +
                          " Select S.ArabicName " +
                          " From[Services] S " +
                          " Where " +
                          " S.CompanyID = Ts.CompanyID " +
                          " And " +
                          " S.ServiceID = TS.ServiceNo " +
                        " ) As ServiceName, " +
                        " ( " +
                           " Select S.SalesName " +
                           " From Sales S " +
                           " Where " +
                           " H.CompanyID = S.CompanyID " +
                           " And " +
                           " H.SaleID = S.SalesID " +
                        " ) As SaleName " +
                        " From TransActionServiceBills TS,AspNetUsers A, Headers H,Transactions T " +
                        " Where " +
                        " TS.TransactionKindNo in(10, 11, 21, 22) " +
                        " And " +
                        " H.InsUserID = A.Id " +
                        " And " +
                        " H.CompanyID = A.fCompanyId " +
                        " And " +
                        " H.CompanyID = T.CompanyID " +
                        " And " +
                        " H.TransactionKindNo = T.TransactionKindNo " +
                        " And " +
                        " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                        " And " +
                        " H.VoucherNumber = T.VoucherNumber " +
                        " And " +
                        " H.CompanyID = TS.CompanyID " +
                        " And " +
                        " H.TransactionKindNo = TS.TransactionKindNo " +
                        " And " +
                        " H.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                        " And " +
                        " H.VHI = TS.BillID " +
                        " And " +
                        " T.CompanyID = TS.CompanyID " +
                        " And " +
                        " T.TransactionKindNo = TS.TransactionKindNo " +
                        " And " +
                        " T.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                        " And " +
                        " T.VHI = TS.BillID " +
                        " And " +
                        " T.Debit > 0 " +
                        " Union All " +
                        " Select TS.CompanyID, TS.BillID, TS.TransactionKindNo, H.VoucherDate As BillDate,TS.Tax As TaxPercentage,TS.ServiceNo, " +
                        " ISNull((TS.Price * -1), 0) As Total, IsNull(((TS.LocalDiscount + TS.TotalDiscValue) * -1), 0) As Discount, ISNull((TS.NetAfterTotalDisc * -1), 0) As NetTotalAfterDiscount, " +
                        " ISNull((TS.NetTotalTax * -1), 0) As Tax, ISNull(((Ts.NetAfterTotalDisc + TS.NetTotalTax) * -1), 0) As NetTotal, " +
                        " A.UserName, T.AccountNumber,H.SaleID, " +
                       " ( " +
                         " Select C.ArabicName " +
                         " From ChartOfAccounts C " +
                         " Where " +
                         " C.CompanyID = T.CompanyID " +
                         " And " +
                         " C.AccountNumber = T.AccountNumber " +
                       " ) As AccountName, " +
                       " ( " +
                         " Select T.ArabicName " +
                         " From TransactionKinds T " +
                         " Where " +
                         " H.TransactionKindNo = T.TransactionKindID " +
                       " ) As TransactionKindName, " +
                       " ( " +
                          " Select S.ArabicName " +
                          " From[Services] S " +
                          " Where " +
                          " S.CompanyID = Ts.CompanyID " +
                          " And " +
                          " S.ServiceID = TS.ServiceNo " +
                        " ) As ServiceName, " +
                        " ( " +
                           " Select S.SalesName " +
                           " From Sales S " +
                           " Where " +
                           " H.CompanyID = S.CompanyID " +
                           " And " +
                           " H.SaleID = S.SalesID " +
                         " ) As SaleName " +
                        " From TransActionServiceBills TS,AspNetUsers A, Headers H,Transactions T " +
                        " Where " +
                        " TS.TransactionKindNo in(19, 20, 12, 13) " +
                        " And " +
                        " H.InsUserID = A.Id " +
                        " And " +
                        " H.CompanyID = A.fCompanyId " +
                        " And " +
                        " H.CompanyID = T.CompanyID " +
                        " And " +
                        " H.TransactionKindNo = T.TransactionKindNo " +
                        " And " +
                        " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                        " And " +
                        " H.VoucherNumber = T.VoucherNumber " +
                        " And " +
                        " H.CompanyID = TS.CompanyID " +
                        " And " +
                        " H.TransactionKindNo = TS.TransactionKindNo " +
                        " And " +
                        " H.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                        " And " +
                        " H.VHI = TS.BillID " +
                        " And " +
                        " T.CompanyID = TS.CompanyID " +
                        " And " +
                        " T.TransactionKindNo = TS.TransactionKindNo " +
                        " And " +
                        " T.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                        " And " +
                        " T.VHI = TS.BillID " +
                        " And " +
                        " T.Credit > 0 " +
                     " ) AllServiceDate " +
                    " Where " +
                   " CompanyID = @CompanyID " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) >= @FromDate " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) <= @ToDate "

                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@FromDate", FromDate)
                   , new SqlParameter("@ToDate", ToDate)

                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<ServiceReportVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<ServiceReportVM>(
                    " Select CompanyID, BillID, TransactionKindNo, BillDate, Total, Discount, NetTotalAfterDiscount, Tax, NetTotal, TransactionKindName, UserName, " +
                    " AccountNumber, AccountName, TaxPercentage, ServiceNo, ServiceName, SaleID, SaleName From " +
                    " ( " +
                      " Select TS.CompanyID, TS.BillID, TS.TransactionKindNo, H.VoucherDate As BillDate, TS.Tax As TaxPercentage, TS.ServiceNo, " +
                      " ISNull((TS.Price), 0) As Total, IsNull((TS.LocalDiscount + TS.TotalDiscValue), 0) As Discount, ISNull((TS.NetAfterTotalDisc), 0) As NetTotalAfterDiscount, " +
                      " ISNull((TS.NetTotalTax), 0) As Tax, ISNull((Ts.NetAfterTotalDisc + TS.NetTotalTax), 0) As NetTotal, " +
                      " A.UserName, T.AccountNumber, H.SaleID, " +
                      " ( " +
                         " Select C.EnglishName " +
                         " From ChartOfAccounts C " +
                         " Where " +
                         " C.CompanyID = T.CompanyID " +
                         " And " +
                         " C.AccountNumber = T.AccountNumber " +
                       " ) As AccountName, " +
                       " ( " +
                         " Select T.EnglishName " +
                         " From TransactionKinds T " +
                         " Where " +
                         " H.TransactionKindNo = T.TransactionKindID " +
                       " ) As TransactionKindName, " +
                       " ( " +
                          " Select S.EnglishName " +
                          " From[Services] S " +
                          " Where " +
                          " S.CompanyID = Ts.CompanyID " +
                          " And " +
                          " S.ServiceID = TS.ServiceNo " +
                        " ) As ServiceName, " +
                        " ( " +
                           " Select S.SalesName " +
                           " From Sales S " +
                           " Where " +
                           " H.CompanyID = S.CompanyID " +
                           " And " +
                           " H.SaleID = S.SalesID " +
                        " ) As SaleName " +
                        " From TransActionServiceBills TS,AspNetUsers A, Headers H,Transactions T " +
                        " Where " +
                        " TS.TransactionKindNo in(10, 11, 21, 22) " +
                        " And " +
                        " H.InsUserID = A.Id " +
                        " And " +
                        " H.CompanyID = A.fCompanyId " +
                        " And " +
                        " H.CompanyID = T.CompanyID " +
                        " And " +
                        " H.TransactionKindNo = T.TransactionKindNo " +
                        " And " +
                        " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                        " And " +
                        " H.VoucherNumber = T.VoucherNumber " +
                        " And " +
                        " H.CompanyID = TS.CompanyID " +
                        " And " +
                        " H.TransactionKindNo = TS.TransactionKindNo " +
                        " And " +
                        " H.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                        " And " +
                        " H.VHI = TS.BillID " +
                        " And " +
                        " T.CompanyID = TS.CompanyID " +
                        " And " +
                        " T.TransactionKindNo = TS.TransactionKindNo " +
                        " And " +
                        " T.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                        " And " +
                        " T.VHI = TS.BillID " +
                        " And " +
                        " T.Debit > 0 " +
                        " Union All " +
                        " Select TS.CompanyID, TS.BillID, TS.TransactionKindNo, H.VoucherDate As BillDate,TS.Tax As TaxPercentage,TS.ServiceNo, " +
                        " ISNull((TS.Price * -1), 0) As Total, IsNull(((TS.LocalDiscount + TS.TotalDiscValue) * -1), 0) As Discount, ISNull((TS.NetAfterTotalDisc * -1), 0) As NetTotalAfterDiscount, " +
                        " ISNull((TS.NetTotalTax * -1), 0) As Tax, ISNull(((Ts.NetAfterTotalDisc + TS.NetTotalTax) * -1), 0) As NetTotal, " +
                        " A.UserName, T.AccountNumber,H.SaleID, " +
                       " ( " +
                         " Select C.EnglishName " +
                         " From ChartOfAccounts C " +
                         " Where " +
                         " C.CompanyID = T.CompanyID " +
                         " And " +
                         " C.AccountNumber = T.AccountNumber " +
                       " ) As AccountName, " +
                       " ( " +
                         " Select T.EnglishName " +
                         " From TransactionKinds T " +
                         " Where " +
                         " H.TransactionKindNo = T.TransactionKindID " +
                       " ) As TransactionKindName, " +
                       " ( " +
                          " Select S.EnglishName " +
                          " From[Services] S " +
                          " Where " +
                          " S.CompanyID = Ts.CompanyID " +
                          " And " +
                          " S.ServiceID = TS.ServiceNo " +
                        " ) As ServiceName, " +
                        " ( " +
                           " Select S.SalesName " +
                           " From Sales S " +
                           " Where " +
                           " H.CompanyID = S.CompanyID " +
                           " And " +
                           " H.SaleID = S.SalesID " +
                         " ) As SaleName " +
                        " From TransActionServiceBills TS,AspNetUsers A, Headers H,Transactions T " +
                        " Where " +
                        " TS.TransactionKindNo in(19, 20, 12, 13) " +
                        " And " +
                        " H.InsUserID = A.Id " +
                        " And " +
                        " H.CompanyID = A.fCompanyId " +
                        " And " +
                        " H.CompanyID = T.CompanyID " +
                        " And " +
                        " H.TransactionKindNo = T.TransactionKindNo " +
                        " And " +
                        " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                        " And " +
                        " H.VoucherNumber = T.VoucherNumber " +
                        " And " +
                        " H.CompanyID = TS.CompanyID " +
                        " And " +
                        " H.TransactionKindNo = TS.TransactionKindNo " +
                        " And " +
                        " H.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                        " And " +
                        " H.VHI = TS.BillID " +
                        " And " +
                        " T.CompanyID = TS.CompanyID " +
                        " And " +
                        " T.TransactionKindNo = TS.TransactionKindNo " +
                        " And " +
                        " T.CompanyTransactionKindNo = TS.CompanyTransactionKindNo " +
                        " And " +
                        " T.VHI = TS.BillID " +
                        " And " +
                        " T.Credit > 0 " +
                     " ) AllServiceDate " +
                    " Where " +
                   " CompanyID = @CompanyID " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) >= @FromDate " +
                   " And " +
                   " cast (datediff (day, 0, BillDate) as datetime) <= @ToDate "

                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@FromDate", FromDate)
                   , new SqlParameter("@ToDate", ToDate)

                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<ServiceReportVM>();
                }
            }
        }
        public int GetCountAllChequeInFund(int CompanyID)
        {
            int Count = _context.Database.SqlQuery<int>
                (
                " Select Count(*) As PaperCount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 1 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperCount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Count;
        }
        public string GetSumAllChequeInFund(int CompanyID)
        {
            string Sum = _context.Database.SqlQuery<string>
                (
                " Select ISNull(convert(varchar(50), CAST(Sum(ChequeAmount) as money), -1),0) As PaperAmount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 1 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperAmount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Sum;
        }
        public int GetCountAllUbderCollectionCheque(int CompanyID)
        {
            try
            {
                int Count = _context.Database.SqlQuery<int>
                (
                 " Select Count(*) As PaperCount From " +
                 " ( " +
                   " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                   " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                   " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                   " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                   " From Papers P,AspNetUsers A " +
                   " Where " +
                   " P.CompanyID = A.fCompanyId " +
                   " And " +
                   " P.InsUserID = A.Id " +
                   " And " +
                   " P.ChequeCase = 2 " +
                   " And " +
                   " P.CompanyID = @CompanyID " +
                " ) PaperCount "
                , new SqlParameter("@CompanyID", CompanyID)
             ).First();
                return Count;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public string GetSumAllUbderCollectionCheque(int CompanyID)
        {
            string Sum = _context.Database.SqlQuery<string>
                (
                " Select ISNull(convert(varchar(50), CAST(Sum(ChequeAmount) as money), -1),0) As PaperAmount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 2 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperAmount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();
            return Sum;
        }
        public int GetCountAllEndorsementPaperCount(int CompanyID)
        {
            int Count = _context.Database.SqlQuery<int>
                (
                " Select Count(*) As PaperCount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 5 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperCount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Count;
        }
        public string GetSumAllEndorsementPaperCount(int CompanyID)
        {
            string Sum = _context.Database.SqlQuery<string>
                (
                " Select ISNull(convert(varchar(50), CAST(Sum(ChequeAmount) as money), -1),0) As PaperAmount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 5 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperAmount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Sum;
        }
        public int GetCountAllPaymentUbderCollectionCheque(int CompanyID)
        {
            int Count = _context.Database.SqlQuery<int>
                (
                " Select Count(*) As PaperCount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 3 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperCount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Count;
        }
        public string GetSumAllPaymentUbderCollectionCheque(int CompanyID)
        {
            string Sum = _context.Database.SqlQuery<string>
                (
                " Select ISNull(convert(varchar(50), CAST(Sum(ChequeAmount) as money), -1),0) As PaperAmount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 3 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperAmount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Sum;
        }
        public int GetCountAllClearingDepositCheque(int CompanyID)
        {
            int Count = _context.Database.SqlQuery<int>
                (
                " Select Count(*) As PaperCount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 4 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperCount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Count;
        }
        public string GetSumAllClearingDepositCheque(int CompanyID)
        {
            string Sum = _context.Database.SqlQuery<string>
                (
                " Select ISNull(convert(varchar(50), CAST(Sum(ChequeAmount) as money), -1),0) As PaperAmount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 4 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperAmount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Sum;
        }
        public int GetCountAllDrawingUnderCollectionCheque(int CompanyID)
        {
            int Count = _context.Database.SqlQuery<int>
                (
                " Select Count(*) As PaperCount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 7 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperCount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Count;
        }
        public string GetSumAllDrawingUnderCollectionCheque(int CompanyID)
        {
            string Sum = _context.Database.SqlQuery<string>
                (
                " Select ISNull(convert(varchar(50), CAST(Sum(ChequeAmount) as money), -1),0) As PaperAmount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 7 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperAmount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Sum;
        }
        public int GetCountAllReturnedCheque(int CompanyID)
        {
            int Count = _context.Database.SqlQuery<int>
                (
                " Select Count(*) As PaperCount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase in(6,10) " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperCount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Count;
        }
        public string GetSumAllReturnedCheque(int CompanyID)
        {
            string Sum = _context.Database.SqlQuery<string>
                (
                " Select ISNull(convert(varchar(50), CAST(Sum(ChequeAmount) as money), -1),0) As PaperAmount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase in(6,10) " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperAmount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Sum;
        }
        public int GetCountAllCourtFundCheque(int CompanyID)
        {
            int Count = _context.Database.SqlQuery<int>
                (
                " Select Count(*) As PaperCount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 12 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperCount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Count;
        }
        public string GetSumAllCourtFundCheque(int CompanyID)
        {
            string Sum = _context.Database.SqlQuery<string>
                (
                " Select ISNull(convert(varchar(50), CAST(Sum(ChequeAmount) as money), -1),0) As PaperAmount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 12 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperAmount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Sum;
        }
        public int GetCountAllPostdatedCheque(int CompanyID)
        {
            int Count = _context.Database.SqlQuery<int>
                (
                " Select Count(*) As PaperCount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 14 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperCount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Count;
        }
        public string GetSumAllPostdatedCheque(int CompanyID)
        {
            string Sum = _context.Database.SqlQuery<string>
                (
                " Select ISNull(convert(varchar(50), CAST(Sum(ChequeAmount) as money), -1),0) As PaperAmount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 14 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperAmount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Sum;
        }
        public int GetCountAllReturnPostdatedCheque(int CompanyID)
        {
            int Count = _context.Database.SqlQuery<int>
                (
                " Select Count(*) As PaperCount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 14 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperCount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Count;
        }
        public string GetSumAlllReturnPostdatedCheque(int CompanyID)
        {
            string Sum = _context.Database.SqlQuery<string>
                (
                " Select ISNull(convert(varchar(50), CAST(Sum(ChequeAmount) as money), -1),0) As PaperAmount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 14 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperAmount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Sum;
        }
        public int GetCountAllReturnPaidPostdatedCheque(int CompanyID)
        {
            int Count = _context.Database.SqlQuery<int>
                (
                " Select Count(*) As PaperCount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 15 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperCount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Count;
        }
        public string GetSumAlllReturnPaidPostdatedCheque(int CompanyID)
        {
            string Sum = _context.Database.SqlQuery<string>
                (
                " Select ISNull(convert(varchar(50), CAST(Sum(ChequeAmount) as money), -1),0) As PaperAmount From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 15 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) PaperAmount "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return Sum;
        }
        public DateTime GetFromDateChequeInFund(int CompanyID)
        {
            DateTime FromDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Min(ChequeDate),DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0)) As FromDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 1 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) FromDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return FromDate;
        }
        public DateTime GetToDateChequeInFund(int CompanyID)
        {
            DateTime FromDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Max(ChequeDate),DATEADD (dd, -1, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) +1, 0))) As ToDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 1 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) ToDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return FromDate;
        }
        public DateTime GetFromDateUbderCollectionCheque(int CompanyID)
        {
            DateTime FromDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Min(ChequeDate),DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0)) As FromDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 2 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) FromDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return FromDate;
        }
        public DateTime GetToDateUbderCollectionCheque(int CompanyID)
        {
            DateTime ToDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Max(ChequeDate),DATEADD (dd, -1, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) +1, 0)))As ToDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 2 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) ToDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return ToDate;
        }
        public DateTime GetFromDateEndorsementCheque(int CompanyID)
        {
            DateTime FromDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Min(ChequeDate),DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0)) As FromDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 5 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) FromDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return FromDate;
        }
        public DateTime GetToDateEndorsementCheque(int CompanyID)
        {
            DateTime ToDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Max(ChequeDate),DATEADD (dd, -1, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) +1, 0)))As ToDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 5 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) ToDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return ToDate;
        }
        public DateTime GetFromDatePaymentUbderCollectionCheque(int CompanyID)
        {
            DateTime FromDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Min(ChequeDate),DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0)) As FromDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 3 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) FromDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return FromDate;
        }
        public DateTime GetToDatePaymentUbderCollectionCheque(int CompanyID)
        {
            DateTime ToDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Max(ChequeDate),DATEADD (dd, -1, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) +1, 0)))As ToDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 3 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) ToDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return ToDate;
        }
        public DateTime GetFromDateClearingDepositCheque(int CompanyID)
        {
            DateTime FromDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Min(ChequeDate),DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0)) As FromDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 4 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) FromDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return FromDate;
        }
        public DateTime GetToDateClearingDepositCheque(int CompanyID)
        {
            DateTime ToDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Max(ChequeDate),DATEADD (dd, -1, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) +1, 0)))As ToDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 4 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) ToDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return ToDate;
        }
        public DateTime GetFromDateDrawingUnderCollectionCheque(int CompanyID)
        {
            DateTime FromDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Min(ChequeDate),DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0)) As FromDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 7 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) FromDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return FromDate;
        }
        public DateTime GetToDateDrawingUnderCollectionCheque(int CompanyID)
        {
            DateTime ToDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Max(ChequeDate),DATEADD (dd, -1, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) +1, 0)))As ToDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 7 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) ToDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return ToDate;
        }
        public DateTime GetFromDateReturnedCheque(int CompanyID)
        {
            DateTime FromDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Min(ChequeDate),DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0)) As FromDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase in (6,10) " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) FromDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return FromDate;
        }
        public DateTime GetToDateReturnedCheque(int CompanyID)
        {
            DateTime ToDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Max(ChequeDate),DATEADD (dd, -1, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) +1, 0)))As ToDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase in(6,10) " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) ToDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return ToDate;
        }
        public DateTime GetFromDateCourtFundCheque(int CompanyID)
        {
            DateTime FromDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Min(ChequeDate),DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0)) As FromDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 12 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) FromDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return FromDate;
        }
        public DateTime GetToDateCourtFundCheque(int CompanyID)
        {
            DateTime ToDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Max(ChequeDate),DATEADD (dd, -1, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) +1, 0)))As ToDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 12 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) ToDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return ToDate;
        }
        public DateTime GetFromDateAllCheque(int CompanyID)
        {
            DateTime FromDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Min(ChequeDate),DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0)) As FromDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                  " And " +
                  " ( " +
                    " P.ChequeCase <= 13 " +
                    " Or " +
                    " P.ChequeCase = 18 " +
                  " ) " +
                " ) FromDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return FromDate;
        }
        public DateTime GetToDateAllCheque(int CompanyID)
        {
            DateTime ToDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Max(ChequeDate),DATEADD (dd, -1, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) +1, 0)))As ToDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFourth,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                  " And " +
                  " ( " +
                    " P.ChequeCase <= 13 " +
                    " Or " +
                    " P.ChequeCase = 18 " +
                  " ) " +
                " ) ToDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return ToDate;
        }
        public DateTime GetFromDatePostdatedCheques(int CompanyID)
        {
            DateTime FromDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Min(ChequeDate),DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0)) As FromDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 14 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) FromDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return FromDate;
        }
        public DateTime GetToDatePostdatedCheques(int CompanyID)
        {
            DateTime FromDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Max(ChequeDate),DATEADD (dd, -1, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) +1, 0))) As ToDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 14 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) ToDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return FromDate;
        }
        public DateTime GetFromDateReturnPostdatedCheques(int CompanyID)
        {
            DateTime FromDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Min(ChequeDate),DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0)) As FromDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 14 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) FromDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return FromDate;
        }
        public DateTime GetToDateReturnPostdatedCheques(int CompanyID)
        {
            DateTime FromDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Max(ChequeDate),DATEADD (dd, -1, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) +1, 0))) As ToDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 14 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) ToDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return FromDate;
        }
        public DateTime GetFromDateReturnPaidPostdatedCheques(int CompanyID)
        {
            DateTime FromDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Min(ChequeDate),DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0)) As FromDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 15 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) FromDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return FromDate;
        }
        public DateTime GetToDateReturnPaidPostdatedCheques(int CompanyID)
        {
            DateTime FromDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Max(ChequeDate),DATEADD (dd, -1, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) +1, 0))) As ToDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase = 15 " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) ToDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return FromDate;
        }
        public DateTime GetFromDateAllPostdatedCheque(int CompanyID)
        {
            DateTime FromDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Min(ChequeDate),DATEADD(yy, DATEDIFF(yy, 0, GETDATE()), 0)) As FromDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase in (14,15,16,17) " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) FromDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return FromDate;
        }
        public DateTime GetToDateAllPostdatedCheque(int CompanyID)
        {
            DateTime FromDate = _context.Database.SqlQuery<DateTime>
                (
                " Select ISNULL(Max(ChequeDate),DATEADD (dd, -1, DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) +1, 0))) As ToDate From " +
                " ( " +
                  " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst,P.AccountNumberSecond,P.AccountNumberThird,P.AccountNumberFifth, " +
                  " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, " +
                  " P.TransactionKindNo, P.VoucherDate, A.UserName,P.DrawerName, " +
                  " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber " +
                  " From Papers P,AspNetUsers A " +
                  " Where " +
                  " P.CompanyID = A.fCompanyId " +
                  " And " +
                  " P.InsUserID = A.Id " +
                  " And " +
                  " P.ChequeCase in (14,15,16,17) " +
                  " And " +
                  " P.CompanyID = @CompanyID " +
                " ) ToDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                ).First();

            return FromDate;
        }
        public IEnumerable<AccountLevelVM> GetAccountLevelVMs(int CompanyID)// Nana
        {
            try

            {
                return _context.Database.SqlQuery<AccountLevelVM>(
                " select distinct  AccountLevel from ChartOfAccounts  " +
                " where   " +
                " CompanyID=@CompanyID "



                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<AccountLevelVM>();
            }
        }
        public IEnumerable<ChartOfAccount> GetChartOfAccountByLevel(int CompanyID)// Nana
        {
            try

            {
                return _context.Database.SqlQuery<ChartOfAccount>(
                "   select  *  from ChartOfAccounts  " +
                " where   " +
                " CompanyID=@CompanyID " +
                " order by  AccountNumber,AccountLevel "



                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<ChartOfAccount>();
            }
        }
        public IEnumerable<ChartOfAccount> GetChartOfAccountByLevelAndCity(int CompanyID, int CityId, int AreaId)
        {
            try

            {
                if (AreaId > 0)
                {
                    return _context.Database.SqlQuery<ChartOfAccount>(
           "   select  *  from ChartOfAccounts  " +
           " where   " +
           " CompanyID=@CompanyID and AccountNumber in (select AccountNumber from CustomerInformations where CityID=@CityID and AreaID=@AreaID and CompanyID=@CompanyID ) " +
           " order by  AccountNumber,AccountLevel "



           , new SqlParameter("@CompanyID", CompanyID)
            , new SqlParameter("@CityID", CityId)
             , new SqlParameter("@AreaID", AreaId)

       ).ToList();
                }
                else
                {
                    return _context.Database.SqlQuery<ChartOfAccount>(
                               "   select  *  from ChartOfAccounts  " +
                               " where   " +
                               " CompanyID=@CompanyID and AccountNumber in (select AccountNumber from CustomerInformations where CityID=@CityID   and CompanyID=@CompanyID ) " +
                               " order by  AccountNumber,AccountLevel "



                               , new SqlParameter("@CompanyID", CompanyID)
                                , new SqlParameter("@CityID", CityId)
                                

                           ).ToList();
                }


           
            }
            catch
            {
                return new List<ChartOfAccount>();
            }
        }
        public IEnumerable<ChartOfAccount> GetChartOfAccountByCostCenterID(int CompanyID, string CostCenterID, int BudgetType)
        {
            try

            {
                return _context.Database.SqlQuery<ChartOfAccount>(
                "   select  *  from ChartOfAccounts  " +
                " where   " +
                " CompanyID=@CompanyID and   AccountNumber in " +
                " (Select AccountNumber from EstimatedBudgets where CompanyID=@CompanyID  and BudgetType=@BudgetType and CostCenterNumber=@CostCenterID and  CostCenterNumber is not null and  AccountNumber is not null) " +
                " order by  AccountNumber,AccountLevel "

                 , new SqlParameter("@BudgetType", BudgetType)
                 , new SqlParameter("@CostCenterID", CostCenterID)
                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return new List<ChartOfAccount>();
            }
        }
        public IEnumerable<CostCenter> GetCostCenterByLevel(int CompanyID)// Nana
        {
            try

            {
                return _context.Database.SqlQuery<CostCenter>(
                "   select  *  from CostCenters  " +
                " where   " +
                " CompanyID=@CompanyID " +
                " order by  CostNumber,CostLevel "



                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<CostCenter>();
            }
        }
        public IEnumerable<Transaction> GetTransactionForPivotAcc(int CompanyID, DateTime FromDate, DateTime toDate)// Nana
        {
            try

            {
                return _context.Database.SqlQuery<Transaction>(
                "   select * from Transactions  " +
                " where   " +
                " CompanyID=@CompanyID  and VoucherDate >=@FromDate and VoucherDate <=@ToDate "




                , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@FromDate", FromDate)
                  , new SqlParameter("@ToDate", toDate)

            ).ToList();
            }
            catch
            {
                return new List<Transaction>();
            }
        }
        public IEnumerable<TransactionTotVM> TransactionByAccKind(int CompanyID, DateTime FromDate, DateTime toDate, int AccKind)
        {
            try

            {
                return _context.Database.SqlQuery<TransactionTotVM>(
                " select AccountNumber,sum(Debit) as Debit ,sum(Credit) as Credit,sum(DebitForeign) as DebitForeign, sum(CreditForeign) as CreditForeign from Transactions  " +
                " where  " +
                " AccountNumber in (select AccountNumber From  ChartOfAccounts   where  AccountKind =@AccountKind	and CompanyID=@CompanyID    ) " +
                " and CompanyID=@CompanyID  and VoucherDate >=@FromDate and VoucherDate <=@ToDate " +
                "    group by (AccountNumber)  "


                  , new SqlParameter("@AccountKind", AccKind)
                , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@FromDate", FromDate)
                  , new SqlParameter("@ToDate", toDate)

            ).ToList();
            }
            catch (Exception ex)
            {
                return new List<TransactionTotVM>();
            }
        }
        public IEnumerable<TrialBalanceVM> GetTotalTransactionByCostCenter(int CompanyID, DateTime FromDate, DateTime toDate)// Nana
        {
            try

            {
                return _context.Database.SqlQuery<TrialBalanceVM>(
                "   select CostCenter,sum(Debit) as DebitTransAction ,sum(Credit) as CreditTransAction from Transactions  " +
                " where   " +
                " CompanyID=@CompanyID  and VoucherDate >=@FromDate and VoucherDate <=@ToDate and   CostCenter is not null  " +
                "    group by (CostCenter)  "



                , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@FromDate", FromDate)
                  , new SqlParameter("@ToDate", toDate)

            ).ToList();
            }
            catch
            {
                return new List<TrialBalanceVM>();
            }
        }
        public IEnumerable<TrialBalanceVM> GetTransactionForTrialCost(int CompanyID, DateTime FromDate, DateTime toDate)// Nana
        {
            try

            {
                return _context.Database.SqlQuery<TrialBalanceVM>(
                "   select CostCenter,sum(Debit) as DebitTransAction ,sum(Credit) as CreditTransAction from Transactions  " +
                " where   " +
                " CompanyID=@CompanyID  and VoucherDate >=@FromDate and VoucherDate <=@ToDate and  CostCenter is not null " +
                "    group by (CostCenter)  "



                , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@FromDate", FromDate)
                  , new SqlParameter("@ToDate", toDate)

            ).ToList();
            }
            catch
            {
                return new List<TrialBalanceVM>();
            }
        }

        public IEnumerable<TrialBalanceVM> GetTransactionForTrialForDash(int CompanyID, DateTime FromDate, DateTime toDate, bool ByCostCenter, string CostCenter, bool PartOfNumber, int PartType)// Nana
        {
            try

            {
                if (ByCostCenter && (!String.IsNullOrEmpty(CostCenter)))
                {
                    if (PartOfNumber)
                    {
                        return _context.Database.SqlQuery<TrialBalanceVM>(
                           "   select  month(VoucherDate) as MonthNo,AccountNumber,sum(Debit) as DebitTransAction ,sum(Credit) as CreditTransAction from Transactions  " +
                           " where   " +
                           " CompanyID=@CompanyID  and VoucherDate >=@FromDate and VoucherDate <=@ToDate  and CostCenter Like @CostCenter   " +
                           "    group by (AccountNumber, month(VoucherDate)  "



                           , new SqlParameter("@CompanyID", CompanyID)
                           , new SqlParameter("@FromDate", FromDate)
                           , new SqlParameter("@ToDate", toDate)
                           , new SqlParameter("@CostCenter", CostCenter)
                           ).ToList();

                    }
                    else
                    {
                        return _context.Database.SqlQuery<TrialBalanceVM>(
                        "   select  month(VoucherDate) as MonthNo, AccountNumber,sum(Debit) as DebitTransAction ,sum(Credit) as CreditTransAction from Transactions  " +
                        " where   " +
                        " CompanyID=@CompanyID  and VoucherDate >=@FromDate and VoucherDate <=@ToDate  and CostCenter=@CostCenter " +
                        "    group by (AccountNumber, month(VoucherDate)  "



                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromDate", FromDate)
                        , new SqlParameter("@ToDate", toDate)
                        , new SqlParameter("@CostCenter", CostCenter)
                        ).ToList();

                    }

                }
                else
                {
                    return _context.Database.SqlQuery<TrialBalanceVM>(
                      "   select  month(VoucherDate) as MonthNo,AccountNumber,sum(Debit) as DebitTransAction ,sum(Credit) as CreditTransAction from Transactions  " +
                      " where   " +
                      " CompanyID=@CompanyID  and VoucherDate >=@FromDate and VoucherDate <=@ToDate " +
                      "    group by (AccountNumber, month(VoucherDate)  "



                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@FromDate", FromDate)
                      , new SqlParameter("@ToDate", toDate)

                      ).ToList();
                }

            }
            catch (Exception ex)
            {
                return new List<TrialBalanceVM>();
            }
        }

        public IEnumerable<TrialBalanceVM> GetTransactionForTrial(int CompanyID, DateTime FromDate, DateTime toDate, bool ByCostCenter, string CostCenter, bool PartOfNumber, int PartType)// Nana
        {
            try

            {
                if (ByCostCenter && (!String.IsNullOrEmpty(CostCenter)))
                {
                    if (PartOfNumber)
                    {
                        return _context.Database.SqlQuery<TrialBalanceVM>(
                           "   select AccountNumber,sum(Debit) as DebitTransAction ,sum(Credit) as CreditTransAction from Transactions  " +
                           " where   " +
                           " CompanyID=@CompanyID  and VoucherDate >=@FromDate and VoucherDate <=@ToDate  and CostCenter Like @CostCenter   " +
                           "    group by (AccountNumber)  "



                           , new SqlParameter("@CompanyID", CompanyID)
                           , new SqlParameter("@FromDate", FromDate)
                           , new SqlParameter("@ToDate", toDate)
                           , new SqlParameter("@CostCenter", CostCenter)
                           ).ToList();

                    }
                    else
                    {
                        return _context.Database.SqlQuery<TrialBalanceVM>(
                        "   select AccountNumber,sum(Debit) as DebitTransAction ,sum(Credit) as CreditTransAction from Transactions  " +
                        " where   " +
                        " CompanyID=@CompanyID  and VoucherDate >=@FromDate and VoucherDate <=@ToDate  and CostCenter=@CostCenter " +
                        "    group by (AccountNumber)  "



                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromDate", FromDate)
                        , new SqlParameter("@ToDate", toDate)
                        , new SqlParameter("@CostCenter", CostCenter)
                        ).ToList();

                    }

                }
                else
                {
                    return _context.Database.SqlQuery<TrialBalanceVM>(
                      "   select AccountNumber,sum(Debit) as DebitTransAction ,sum(Credit) as CreditTransAction from Transactions  " +
                      " where   " +
                      " CompanyID=@CompanyID  and VoucherDate >=@FromDate and VoucherDate <=@ToDate " +
                      "    group by (AccountNumber)  "



                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@FromDate", FromDate)
                      , new SqlParameter("@ToDate", toDate)

                      ).ToList();
                }

            }
            catch (Exception ex)
            {
                return new List<TrialBalanceVM>();
            }
        }
        public IEnumerable<TrialBalanceVM> GetTotalTransactionByCostCenterID(int CompanyID, DateTime FromDate, DateTime toDate)
        {
            try

            {
                return _context.Database.SqlQuery<TrialBalanceVM>(
                "   select AccountNumber,sum(Debit) as DebitTransAction ,sum(Credit) as CreditTransAction from Transactions  " +
                " where   " +
                " CompanyID=@CompanyID  and VoucherDate >=@FromDate and VoucherDate <=@ToDate  and CostCenter=@CostCenterID " +
                "    group by (AccountNumber)  "



                , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@FromDate", FromDate)
                  , new SqlParameter("@ToDate", toDate)

            ).ToList();
            }
            catch
            {
                return new List<TrialBalanceVM>();
            }
        }

        public IEnumerable<TrialBalanceVM> GetTotCreditDebitForTrialForDash(int CompanyID, DateTime FromDate, DateTime toDate, bool ByCostCenter, string CostCenter, bool PartOfNumber, int PartType)// Nana
        {
            try

            {
                if (ByCostCenter && (!String.IsNullOrEmpty(CostCenter)))
                {
                    if (PartOfNumber)
                    {
                        return _context.Database.SqlQuery<TrialBalanceVM>(
                              "   select  month(VoucherDate) as MonthNo,AccountNumber,sum(Debit) as DebitBalance ,sum(Credit) as CreditBalance from Transactions  " +
                              " where   " +
                              " CompanyID=@CompanyID  and VoucherDate >= @FromDate and VoucherDate <@ToDate and CostCenter Like @CostCenter  " +
                              "    group by (AccountNumber,month(VoucherDate))  "


                              , new SqlParameter("@CostCenter", CostCenter)
                              , new SqlParameter("@CompanyID", CompanyID)
                               , new SqlParameter("@FromDate", FromDate)
                                , new SqlParameter("@ToDate", toDate)

                              ).ToList();
                    }
                    else
                    {
                        return _context.Database.SqlQuery<TrialBalanceVM>(
                           "   select  month(VoucherDate) as MonthNo,AccountNumber,sum(Debit) as DebitBalance ,sum(Credit) as CreditBalance from Transactions  " +
                           " where   " +
                           " CompanyID=@CompanyID  and VoucherDate >= @FromDate and VoucherDate <@ToDate and CostCenter=@CostCenter " +
                           "    group by (AccountNumber,month(VoucherDate))  "


                           , new SqlParameter("@CostCenter", CostCenter)
                           , new SqlParameter("@CompanyID", CompanyID)
                            , new SqlParameter("@FromDate", FromDate)
                             , new SqlParameter("@ToDate", toDate)

                           ).ToList();

                    }

                }
                else
                {
                    return _context.Database.SqlQuery<TrialBalanceVM>(
                    "   select  month(VoucherDate) as MonthNo,AccountNumber,sum(Debit) as DebitBalance ,sum(Credit) as CreditBalance from Transactions  " +
                    " where   " +
                    " CompanyID=@CompanyID  and VoucherDate >= @FromDate and VoucherDate <@ToDate " +
                    "    group by (AccountNumber ,month(VoucherDate) )  "



                    , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@FromDate", FromDate)
                      , new SqlParameter("@ToDate", toDate)

                ).ToList();
                }

            }
            catch
            {
                return new List<TrialBalanceVM>();
            }
        }

        public IEnumerable<TrialBalanceVM> GetTotCreditDebitForTrial(int CompanyID, DateTime FromDate, DateTime toDate, bool ByCostCenter, string CostCenter, bool PartOfNumber, int PartType)// Nana
        {
            try

            {
                if (ByCostCenter && (!String.IsNullOrEmpty(CostCenter)))
                {
                    if (PartOfNumber)
                    {
                        return _context.Database.SqlQuery<TrialBalanceVM>(
                              "   select AccountNumber,sum(Debit) as DebitBalance ,sum(Credit) as CreditBalance from Transactions  " +
                              " where   " +
                              " CompanyID=@CompanyID  and VoucherDate >= @FromDate and VoucherDate <@ToDate and CostCenter Like @CostCenter  " +
                              "    group by (AccountNumber)  "


                              , new SqlParameter("@CostCenter", CostCenter)
                              , new SqlParameter("@CompanyID", CompanyID)
                               , new SqlParameter("@FromDate", FromDate)
                                , new SqlParameter("@ToDate", toDate)

                              ).ToList();
                    }
                    else
                    {
                        return _context.Database.SqlQuery<TrialBalanceVM>(
                           "   select AccountNumber,sum(Debit) as DebitBalance ,sum(Credit) as CreditBalance from Transactions  " +
                           " where   " +
                           " CompanyID=@CompanyID  and VoucherDate >= @FromDate and VoucherDate <@ToDate and CostCenter=@CostCenter " +
                           "    group by (AccountNumber)  "


                           , new SqlParameter("@CostCenter", CostCenter)
                           , new SqlParameter("@CompanyID", CompanyID)
                            , new SqlParameter("@FromDate", FromDate)
                             , new SqlParameter("@ToDate", toDate)

                           ).ToList();

                    }

                }
                else
                {
                    return _context.Database.SqlQuery<TrialBalanceVM>(
                    "   select AccountNumber,sum(Debit) as DebitBalance ,sum(Credit) as CreditBalance from Transactions  " +
                    " where   " +
                    " CompanyID=@CompanyID  and VoucherDate >= @FromDate and VoucherDate <@ToDate " +
                    "    group by (AccountNumber)  "



                    , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@FromDate", FromDate)
                      , new SqlParameter("@ToDate", toDate)

                ).ToList();
                }

            }
            catch
            {
                return new List<TrialBalanceVM>();
            }
        }
        public IEnumerable<TrialBalanceVM> GetTransactionForTrialOpen(int CompanyID, DateTime FromDate, DateTime toDate)// Nana
        {
            try

            {
                return _context.Database.SqlQuery<TrialBalanceVM>(
                "   select AccountNumber,sum(Debit) as DebitTransAction ,sum(Credit) as CreditTransAction from Transactions  " +
                " where   " +
                " CompanyID=@CompanyID  and VoucherDate >=@FromDate and VoucherDate <=@ToDate  and TransactionKindNo=15 " +
                "    group by (AccountNumber)  "



                , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@FromDate", FromDate)
                  , new SqlParameter("@ToDate", toDate)

            ).ToList();
            }
            catch
            {
                return new List<TrialBalanceVM>();
            }
        }
        public IEnumerable<TrialBalanceVM> GetTotCreditDebitForCostCenterOpen(int CompanyID, DateTime FromDate, DateTime toDate)// Nana
        {
            try

            {
                return _context.Database.SqlQuery<TrialBalanceVM>(
                "   select CostCenter,sum(Debit) as DebitBalance ,sum(Credit) as CreditBalance from Transactions  " +
                " where   " +
                " CompanyID=@CompanyID  and VoucherDate = @FromDate and TransactionKindNo=15 amd   CostCenter is not null" +
                "    group by (AccountNumber)  "



                , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@FromDate", FromDate)


            ).ToList();
            }
            catch
            {
                return new List<TrialBalanceVM>();
            }
        }
        public IEnumerable<TrialBalanceVM> GetTotCreditDebitForTrialOpen(int CompanyID, DateTime FromDate, DateTime toDate)// Nana
        {
            try

            {
                return _context.Database.SqlQuery<TrialBalanceVM>(
                "   select AccountNumber,sum(Debit) as DebitBalance ,sum(Credit) as CreditBalance from Transactions  " +
                " where   " +
                " CompanyID=@CompanyID  and VoucherDate = @FromDate and TransactionKindNo=15 " +
                "    group by (AccountNumber)  "



                , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@FromDate", FromDate)


            ).ToList();
            }
            catch
            {
                return new List<TrialBalanceVM>();
            }
        }
        public IEnumerable<TrialBalanceVM> GetTransactionForCostMonthly(int CompanyID, DateTime FromDate, DateTime toDate)// Nana
        {
            try

            {
                return _context.Database.SqlQuery<TrialBalanceVM>(
                "   select CostCenter,DATEPART(Month, VoucherDate) Month,sum(Debit) as DebitTransAction ,sum(Credit) as CreditTransAction from Transactions  " +
                " where   " +
                " CompanyID=@CompanyID  and VoucherDate >=@FromDate and VoucherDate <=@ToDate  and  CostCenter is not null " +
                "     group by (CostCenter),(DATEPART(Month, VoucherDate) )    "



                , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@FromDate", FromDate)
                  , new SqlParameter("@ToDate", toDate)

            ).ToList();
            }
            catch
            {
                return new List<TrialBalanceVM>();
            }
        }
        public IEnumerable<TrialBalanceVM> GetTransactionForCostMonthlyByID(int CompanyID, DateTime FromDate, DateTime toDate, string CostCenterID)
        {
            try

            {
                return _context.Database.SqlQuery<TrialBalanceVM>(
                "   select AccountNumber,DATEPART(Month, VoucherDate) Month,sum(Debit) as DebitTransAction ,sum(Credit) as CreditTransAction from Transactions  " +
                " where   " +
                " CompanyID=@CompanyID  and VoucherDate >=@FromDate and VoucherDate <=@ToDate and CostCenter=@CostCenterID " +
                "     group by (AccountNumber),(DATEPART(Month, VoucherDate) )    "


               , new SqlParameter("@CostCenterID", CostCenterID)
                , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@FromDate", FromDate)
                  , new SqlParameter("@ToDate", toDate)

            ).ToList();
            }
            catch
            {
                return new List<TrialBalanceVM>();
            }
        }
        public IEnumerable<TrialBalanceVM> GetTransactionForTrialYearly(int CompanyID, DateTime FromDate, DateTime toDate, bool ByCostCenter, string CostCenter, bool PartOfNumber, int PartType)// Nana
        {
            try

            {
                if (ByCostCenter && (!String.IsNullOrEmpty(CostCenter)))
                {
                    if (PartOfNumber)
                    {
                        return _context.Database.SqlQuery<TrialBalanceVM>(
                             "   select AccountNumber,DATEPART(Month, VoucherDate) Month,sum(Debit) as DebitTransAction ,sum(Credit) as CreditTransAction from Transactions  " +
                             " where   " +
                             " CompanyID=@CompanyID  and VoucherDate >=@FromDate and VoucherDate <=@ToDate  and CostCenter Like @CostCenter  " +
                             "     group by (AccountNumber),(DATEPART(Month, VoucherDate) )    "


                          , new SqlParameter("@CostCenter", CostCenter)
                             , new SqlParameter("@CompanyID", CompanyID)
                              , new SqlParameter("@FromDate", FromDate)
                               , new SqlParameter("@ToDate", toDate)

                          ).ToList();

                    }
                    else
                    {
                        return _context.Database.SqlQuery<TrialBalanceVM>(
                           "   select AccountNumber,DATEPART(Month, VoucherDate) Month,sum(Debit) as DebitTransAction ,sum(Credit) as CreditTransAction from Transactions  " +
                           " where   " +
                           " CompanyID=@CompanyID  and VoucherDate >=@FromDate and VoucherDate <=@ToDate  and CostCenter=@CostCenter " +
                           "     group by (AccountNumber),(DATEPART(Month, VoucherDate) )    "


                     , new SqlParameter("@CostCenter", CostCenter)
                           , new SqlParameter("@CompanyID", CompanyID)
                            , new SqlParameter("@FromDate", FromDate)
                             , new SqlParameter("@ToDate", toDate)

                       ).ToList();

                    }

                }
                else
                {
                    return _context.Database.SqlQuery<TrialBalanceVM>(
                    "   select AccountNumber,DATEPART(Month, VoucherDate) Month,sum(Debit) as DebitTransAction ,sum(Credit) as CreditTransAction from Transactions  " +
                    " where   " +
                    " CompanyID=@CompanyID  and VoucherDate >=@FromDate and VoucherDate <=@ToDate " +
                    "     group by (AccountNumber),(DATEPART(Month, VoucherDate) )    "
                        , new SqlParameter("@CompanyID", CompanyID)
                         , new SqlParameter("@FromDate", FromDate)
                          , new SqlParameter("@ToDate", toDate)

                    ).ToList();
                }

            }
            catch
            {
                return new List<TrialBalanceVM>();
            }
        }

        public IEnumerable<ChartOfAccount> GetAccountChild(int CompanyID, string AccountNo)
        {

            try
            {
                return _context.Database.SqlQuery<ChartOfAccount>(
                " Select* From  ChartOfAccounts " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountFather = @AccountNo "

                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@AccountNo", AccountNo)

            ).ToList();
            }
            catch
            {
                return new List<ChartOfAccount>();
            }


        }
        public IEnumerable<CostCenter> GetCostChild(int CompanyID, string CostNumber)
        {

            try
            {
                return _context.Database.SqlQuery<CostCenter>(
                " Select* From  CostCenters " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CostFather = @CostNumber "

                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@CostNumber", CostNumber)

            ).ToList();
            }
            catch
            {
                return new List<CostCenter>();
            }


        }
        public IEnumerable<ChartOfAccount> GetTransActionAccountForBalance(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<ChartOfAccount>(
                    " Select * From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID=@CompanyID " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID=@CompanyID " +
                    " ) " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ChartOfAccount>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<ChartOfAccount>(
                    " Select * From  ChartOfAccounts " +
                    " Where " +
                    " CompanyID=@CompanyID " +
                    " And " +
                    " AccountNumber Not In " +
                    " ( " +
                      " Select AccountFather From ChartOfAccounts " +
                      " Where " +
                      " CompanyID=@CompanyID " +
                    " ) " +
                    " Order By AccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<ChartOfAccount>();
                }

            }
        }
        public IEnumerable<DrawnBankVM> GetDrawnBank(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<DrawnBankVM>(
                    " Select BankID, ArabicName, EnglishName, " +
                    " (Case When Active = 1 Then N'فعال' Else N'غير فعال' End ) As Active From DrawnBanks " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " Order By BankID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<DrawnBankVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<DrawnBankVM>(
                    " Select BankID, ArabicName, EnglishName, " +
                    " (Case When Active = 1 Then 'Active' Else 'Inactive' End ) As Active From DrawnBanks " +
                    " Where " +
                    " CompanyID=@CompanyID " +
                    " Order By BankID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<DrawnBankVM>();
                }

            }
        }
        public IEnumerable<CustSuppRepVM> GetAccountsInfoByKind(int CompanyID, int AccountKind)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                if (AccountKind == 1)
                {
                    try
                    {
                        return _context.Database.SqlQuery<CustSuppRepVM>(
                        " Select CA.AccountNumber, CA.ArabicName As AccountName, CI.Mobile, CI.Telephone, CI.TeleFax, CI.StreetName, CI.Email,CA.AccountKind, " +
                        " ( " +
                          " Case When CA.SalesID = '0' Or CA.SalesID IS NULL Then '' " +
                          " Else " +
                          " ( " +
                            " Select S.SalesName From Sales S " +
                            " Where " +
                            " CA.SalesID = S.SalesID " +
                            " And " +
                            " CA.CompanyID = S.CompanyID " +
                          " ) " +
                          " End " +
                        " ) As SaleName, " +
                        " ( " +
                          " Case When CI.CityID = '0' Or CI.CityID IS NULL Then '' " +
                          " Else " +
                          " ( " +
                            " Select CC.ArabicName From CustomerCities CC " +
                            " Where " +
                            " CI.CityID = CC.CustomerCityID " +
                            " And " +
                            " CI.CompanyID = CC.CompanyID " +
                          " ) " +
                          " End " +
                        " ) As CustomerCity, " +
                        " ( " +
                          " Case When CI.AreaID = '0' Or CI.AreaID  IS NULL Then '' " +
                          " Else " +
                          " ( " +
                            " Select CAS.ArabicName From CustomerAreas CAS " +
                            " Where " +
                            " CI.AreaID = CAS.CustomerAreaID " +
                            " And " +
                            " CI.CompanyID = CAS.CompanyID " +
                            " And " +
                            " CI.CityID = CAS.CustomerCityID " +
                          " ) " +
                          " End " +
                        " ) As CustomerArea, CA.SalesID " +
                        " From  ChartOfAccounts CA " +
                        " Left Join CustomerInformations CI On " +
                        " CA.AccountNumber = CI.AccountNumber " +
                        " And " +
                        " CI.CompanyID = CA.CompanyID " +
                        " where " +
                        " CA.AccountKind = 1 " +
                        " And " +
                        " CA.CompanyID = @CompanyID " +
                        " And " +
                        " CA.AccountNumber Not In " +
                        " ( " +
                         " Select AccountFather From ChartOfAccounts " +
                         " Where " +
                         " CompanyID = @CompanyID " +
                        " ) "
                        , new SqlParameter("@CompanyID", CompanyID)

                    ).ToList();
                    }
                    catch (Exception ex)
                    {
                        return new List<CustSuppRepVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<CustSuppRepVM>(
                        " Select CA.AccountNumber, CA.ArabicName As AccountName, SI.Mobile, SI.Telephone, SI.TeleFax, SI.Email, SI.NameOfPersonInCharge,CA.AccountKind, " +
                        " ( " +
                          " Case When SI.SupplierCountryID = '0' Or SI.SupplierCountryID IS NULL Then '' " +
                          " Else " +
                          " ( " +
                            " Select SC.ArabicName From SupplierCountries SC " +
                            " Where " +
                            " SI.SupplierCountryID = SC.SupplierCountryID " +
                            " And " +
                            " SI.CompanyID = SC.CompanyID " +
                          " ) " +
                          " End " +
                        " ) As SupplierCountry, " +
                        " ( " +
                          " Case When SI.SupplierCityID = '0' Or SI.SupplierCityID  IS NULL Then '' " +
                          " Else " +
                          " ( " +
                            " Select SCS.ArabicName From SupplierCities SCS " +
                            " Where " +
                            " SI.SupplierCityID = SCS.SupplierCityID " +
                            " And " +
                            " SI.CompanyID = SCS.CompanyID " +
                            " And " +
                            " SI.SupplierCountryID = SCS.SupplierCountryID " +
                          " ) " +
                          " End " +
                        " ) As SupplierCity " +
                        " From ChartOfAccounts CA " +
                        " Left Join SupplierInformations SI On " +
                        " CA.AccountNumber = SI.AccountNumber " +
                        " And " +
                        " SI.CompanyID = CA.CompanyID " +
                        " where " +
                        " CA.AccountKind = 2 " +
                        " And " +
                        " CA.CompanyID = @CompanyID " +
                        " And " +
                        " CA.AccountNumber Not In " +
                        " ( " +
                         " Select AccountFather From ChartOfAccounts " +
                         " Where " +
                         " CompanyID = @CompanyID " +
                        " ) "
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                    }
                    catch (Exception ex)
                    {
                        return new List<CustSuppRepVM>();
                    }
                }
            }
            else
            {
                if (AccountKind == 1)
                {
                    try
                    {
                        return _context.Database.SqlQuery<CustSuppRepVM>(
                        " Select CA.AccountNumber, CA.EnglishName As AccountName, CI.Mobile, CI.Telephone, CI.TeleFax, CI.StreetName, CI.Email,CA.AccountKind, " +
                        " ( " +
                          " Case When CA.SalesID = '0' Or CA.SalesID IS NULL Then '' " +
                          " Else " +
                          " ( " +
                            " Select S.SalesName From Sales S " +
                            " Where " +
                            " CA.SalesID = S.SalesID " +
                            " And " +
                            " CA.CompanyID = S.CompanyID " +
                          " ) " +
                          " End " +
                        " ) As SaleName, " +
                        " ( " +
                          " Case When CI.CityID = '0' Or CI.CityID IS NULL Then '' " +
                          " Else " +
                          " ( " +
                            " Select CC.EnglishName From CustomerCities CC " +
                            " Where " +
                            " CI.CityID = CC.CustomerCityID " +
                            " And " +
                            " CI.CompanyID = CC.CompanyID " +
                          " ) " +
                          " End " +
                        " ) As CustomerCity, " +
                        " ( " +
                          " Case When CI.AreaID = '0' Or CI.AreaID  IS NULL Then '' " +
                          " Else " +
                          " ( " +
                            " Select CAS.EnglishName From CustomerAreas CAS " +
                            " Where " +
                            " CI.AreaID = CAS.CustomerAreaID " +
                            " And " +
                            " CI.CompanyID = CAS.CompanyID " +
                            " And " +
                            " CI.CityID = CAS.CustomerCityID " +
                          " ) " +
                          " End " +
                        " ) As CustomerArea, CA.SalesID " +
                        " From  ChartOfAccounts CA " +
                        " Left Join CustomerInformations CI On " +
                        " CA.AccountNumber = CI.AccountNumber " +
                        " And " +
                        " CI.CompanyID = CA.CompanyID " +
                        " where " +
                        " CA.AccountKind = 1 " +
                        " And " +
                        " CA.CompanyID = @CompanyID " +
                        " And " +
                        " CA.AccountNumber Not In " +
                        " ( " +
                         " Select AccountFather From ChartOfAccounts " +
                         " Where " +
                         " CompanyID = @CompanyID " +
                        " ) "
                        , new SqlParameter("@CompanyID", CompanyID)

                    ).ToList();
                    }
                    catch (Exception ex)
                    {
                        return new List<CustSuppRepVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<CustSuppRepVM>(
                        " Select CA.AccountNumber, CA.EnglishName As AccountName, SI.Mobile, SI.Telephone, SI.TeleFax, SI.Email, SI.NameOfPersonInCharge,CA.AccountKind, " +
                        " ( " +
                          " Case When SI.SupplierCountryID = '0' Or SI.SupplierCountryID IS NULL Then '' " +
                          " Else " +
                          " ( " +
                            " Select SC.EnglishName From SupplierCountries SC " +
                            " Where " +
                            " SI.SupplierCountryID = SC.SupplierCountryID " +
                            " And " +
                            " SI.CompanyID = SC.CompanyID " +
                          " ) " +
                          " End " +
                        " ) As SupplierCountry, " +
                        " ( " +
                          " Case When SI.SupplierCityID = '0' Or SI.SupplierCityID  IS NULL Then '' " +
                          " Else " +
                          " ( " +
                            " Select SCS.EnglishName From SupplierCities SCS " +
                            " Where " +
                            " SI.SupplierCityID = SCS.SupplierCityID " +
                            " And " +
                            " SI.CompanyID = SCS.CompanyID " +
                            " And " +
                            " SI.SupplierCountryID = SCS.SupplierCountryID " +
                          " ) " +
                          " End " +
                        " ) As SupplierCity " +
                        " From ChartOfAccounts CA " +
                        " Left Join SupplierInformations SI On " +
                        " CA.AccountNumber = SI.AccountNumber " +
                        " And " +
                        " SI.CompanyID = CA.CompanyID " +
                        " where " +
                        " CA.AccountKind = 2 " +
                        " And " +
                        " CA.CompanyID = @CompanyID " +
                        " And " +
                        " CA.AccountNumber Not In " +
                        " ( " +
                         " Select AccountFather From ChartOfAccounts " +
                         " Where " +
                         " CompanyID = @CompanyID " +
                        " ) "
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                    }
                    catch (Exception ex)
                    {
                        return new List<CustSuppRepVM>();
                    }
                }
            }
        }
        public IEnumerable<TransActionDataVM> GetTransActionDatasReport(int CompanyID, Boolean ByDate, DateTime fromDate, DateTime ToDate)
        {
            if (ByDate)
            {
                try
                {
                    return _context.Database.SqlQuery<TransActionDataVM>(
                    " select C.AccountNumber,C.ArabicName,C.EnglishName,T.VoucherDate,T.VoucherNumber,T.VHI,T.Debit,T.Credit,T.Note,T.CompanyTransactionKindNo,T.TransactionKindNo " +
                    " from ChartOfAccounts C,Transactions T " +
                    " Where " +
                    " C.CompanyID=@CompanyID and T.CompanyID=@CompanyID and C.CompanyID=T.CompanyID and C.AccountNumber=T.AccountNumber " +
                    " and VoucherDate>=@FromDate and VoucherDate<=@ToDate "
                    , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@FromDate", fromDate)
                      , new SqlParameter("@ToDate", ToDate)

                ).ToList();
                }
                catch
                {
                    return new List<TransActionDataVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<TransActionDataVM>(
                         " select C.AccountNumber,C.ArabicName,C.EnglishName,T.VoucherDate,T.VoucherNumber,T.VHI,T.Debit,T.Credit,T.Note,T.CompanyTransactionKindNo,T.TransactionKindNo " +
                         " from ChartOfAccounts C,Transactions T " +
                         " Where " +

                         " C.CompanyID=@CompanyID and T.CompanyID=@CompanyID and C.CompanyID=T.CompanyID and C.AccountNumber=T.AccountNumber "



                         , new SqlParameter("@CompanyID", CompanyID)


                       ).ToList();
                }
                catch
                {
                    return new List<TransActionDataVM>();
                }

            }
        }
        public IEnumerable<TransReportDetailVM> GetTransActionDatasReportDetail(int CompanyID, DateTime fromDate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<TransReportDetailVM>(
                    " Select C.AccountNumber, C.ArabicName As AccountName, CC.ArabicName As CostCenterName, " +
                    " T.VoucherDate, T.VoucherNumber, T.Debit, T.Credit, T.Note, T.CompanyTransactionKindNo, T.TransactionKindNo, " +
                    " T.DebitForeign, T.CreditForeign, T.RowNumber, T.CostCenter, C.AccountKind, C.AccountTypeID, C.AccountLevel, T.CompanyYear " +
                    " from ChartOfAccounts C, Transactions T " +
                    " Left Join CostCenters CC On " +
                    " T.CostCenter = CC.CostNumber " +
                    " And " +
                    " T.CompanyID = CC.CompanyID " +
                    " Where " +
                    " C.CompanyID = @CompanyID " +
                    " And " +
                    " C.CompanyID = T.CompanyID " +
                    " And " +
                    " C.AccountNumber = T.AccountNumber " +
                    " And " +
                    " VoucherDate >= @FromDate " +
                    " And " +
                    " VoucherDate <= @ToDate "
                    , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@FromDate", fromDate)
                      , new SqlParameter("@ToDate", ToDate)

                ).ToList();
                }
                catch
                {
                    return new List<TransReportDetailVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<TransReportDetailVM>(
                    " Select C.AccountNumber, C.EnglishName As AccountName, CC.EnglishName As CostCenterName, " +
                    " T.VoucherDate, T.VoucherNumber, T.Debit, T.Credit, T.Note, T.CompanyTransactionKindNo, T.TransactionKindNo, " +
                    " T.DebitForeign, T.CreditForeign, T.RowNumber, T.CostCenter, C.AccountKind, C.AccountTypeID, C.AccountLevel, T.CompanyYear " +
                    " from ChartOfAccounts C, Transactions T " +
                    " Left Join CostCenters CC On " +
                    " T.CostCenter = CC.CostNumber " +
                    " And " +
                    " T.CompanyID = CC.CompanyID " +
                    " Where " +
                    " C.CompanyID = @CompanyID " +
                    " And " +
                    " C.CompanyID = T.CompanyID " +
                    " And " +
                    " C.AccountNumber = T.AccountNumber " +
                    " And " +
                    " VoucherDate >= @FromDate " +
                    " And " +
                    " VoucherDate <= @ToDate "
                    , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@FromDate", fromDate)
                      , new SqlParameter("@ToDate", ToDate)

                ).ToList();
                }
                catch
                {
                    return new List<TransReportDetailVM>();
                }
            }



        }
        public void TransferTRansAction(int CompanyID, string FromAccount, string ToAccount, int Year)
        {
       
          
                _context.Database.ExecuteSqlCommand(
               "  Update   Transactions " +
              " set AccountNumber=@ToAccountNumber  " +

             " where CompanyID=@CompanyID and AccountNumber=@FromAccountNumber and  CompanyYear=@Year  and TransactionKindNo <> 15 "

               , new SqlParameter("@CompanyID", CompanyID)
               , new SqlParameter("@ToAccountNumber", ToAccount)
               , new SqlParameter("@Year", Year)
               , new SqlParameter("@FromAccountNumber", FromAccount)

                      );

            
       

        }
        public void TransferAccreditationInformation(int CompanyID, string FromAccount, string ToAccount)
        {
            _context.Database.ExecuteSqlCommand(
            "  Update   AccreditationInformations " +
            " set AccountNumber=@ToAccountNumber  " +

            " where CompanyID=@CompanyID and AccountNumber=@FromAccountNumber"

            , new SqlParameter("@CompanyID", CompanyID)
            , new SqlParameter("@ToAccountNumber", ToAccount)
               
               , new SqlParameter("@FromAccountNumber", FromAccount)



            );
        }
        public void TransferSt_CarpenterH(int CompanyID, string FromAccount, string ToAccount)
        {
            _context.Database.ExecuteSqlCommand(
            "  Update   St_CarpenterH " +
            " set HrID=@ToAccountNumber  " +

            " where CompanyID=@CompanyID and HrID=@FromAccountNumber"

            , new SqlParameter("@CompanyID", CompanyID)
            , new SqlParameter("@ToAccountNumber", ToAccount)
               
               , new SqlParameter("@FromAccountNumber", FromAccount)

            );
        }
        public void TransferSt_DelegateReceivingH(int CompanyID, string FromAccount, string ToAccount)
        {
            _context.Database.ExecuteSqlCommand(
            "  Update   St_DelegateReceivingH " +
            " set HrID=@ToAccountNumber  " +

            " where CompanyID=@CompanyID and HrID=@FromAccountNumber"

            , new SqlParameter("@CompanyID", CompanyID)
            , new SqlParameter("@ToAccountNumber", ToAccount)
               
               , new SqlParameter("@FromAccountNumber", FromAccount)



            );
        }
        public void TransferTRansActionServiceBill(int CompanyID, string FromAccount, string ToAccount, int Year)
        {
                _context.Database.ExecuteSqlCommand(
                "  Update   TransActionServiceBills " +
               " set AccountNumber=@ToAccountNumber  " +

              " where CompanyID=@CompanyID and AccountNumber=@FromAccountNumber and  CompanyYear=@Year "

               , new SqlParameter("@CompanyID", CompanyID)
               , new SqlParameter("@ToAccountNumber", ToAccount)
               , new SqlParameter("@Year", Year)
               , new SqlParameter("@FromAccountNumber", FromAccount)
              );
            
               
        }
        public void TransferAssetMaintenance(int CompanyID, string FromAccount, string ToAccount)
            {
                _context.Database.ExecuteSqlCommand(
                "  Update   AssetMaintenances " +
                " set CreditAccountNo=@ToAccountNumber " +

                " where CompanyID=@CompanyID and CreditAccountNo=@FromAccountNumber "

                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@ToAccountNumber", ToAccount)
                   , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
        public void TransferEstimatedBudget(int CompanyID, string FromAccount, string ToAccount, int Year , int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
            "  Update   EstimatedBudgets " +
            " set AccountNumber=@ToAccountNumber " +

            " where CompanyID=@CompanyID and AccountNumber=@FromAccountNumber and CompanyYear=@Year  "

            , new SqlParameter("@CompanyID", CompanyID)
            , new SqlParameter("@ToAccountNumber", ToAccount)
            , new SqlParameter("@Year", Year)
            , new SqlParameter("@FromAccountNumber", FromAccount)
            );
            }
           else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
            "  Update   EstimatedBudgets " +
            " set CostCenterNumber=@ToAccountNumber " +

            " where CompanyID=@CompanyID and CostCenterNumber=@FromAccountNumber and CompanyYear=@Year  "

            , new SqlParameter("@CompanyID", CompanyID)
            , new SqlParameter("@ToAccountNumber", ToAccount)
            , new SqlParameter("@Year", Year)
            , new SqlParameter("@FromAccountNumber", FromAccount)
            );
            }

        }
        public void TransferPapers(int CompanyID, string FromAccount, string ToAccount, int Year, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   Papers " +
                     " set AccountNumberFirst=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountNumberFirst=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   Papers " +
                     " set AccountNumberSecond=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountNumberSecond=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 3)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   Papers " +
                     " set AccountNumberThird=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountNumberThird=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 4)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   Papers " +
                     " set AccountNumberFourth=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountNumberFourth=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 5)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   Papers " +
                     " set AccountNumberFifth=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountNumberFifth=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 6)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   Papers " +
                     " set BillCustomerAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and BillCustomerAccountNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

        }
        public void TransferO_ReceiptBillHeaderH(int CompanyID, string FromAccount, string ToAccount, int Year, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   O_ReceiptBillHeaderH " +
                     " set CustomerAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and CustomerAccountNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   O_ReceiptBillHeaderH " +
                     " set BillAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and BillAccountNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

           

        }
        public void TransferO_ReceiptBillHeaderHistoryH(int CompanyID, string FromAccount, string ToAccount, int Year, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   O_ReceiptBillHeaderHistoryH " +
                     " set CustomerAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and CustomerAccountNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   O_ReceiptBillHeaderHistoryH " +
                     " set BillAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and BillAccountNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

           

        }
        public void TransferCostCenters(int CompanyID, string FromAccount, string ToAccount, int Year, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   CostCenters " +
                     " set CostFather=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and CostFather=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   CostCenters " +
                     " set CostChart=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and CostChart=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 3)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   CostCenters " +
                     " set CostZero=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and CostZero=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 4)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   CostCenters " +
                     " set LevelZero=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and LevelZero=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 5)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   CostCenters " +
                     " set CostNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and CostNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

         

        }
        public void TransferCompany(int CompanyID, string FromAccount, string ToAccount, int Year, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   Companies " +
                     " set AccountChart=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountChart=@FromAccountNumber   "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   Companies " +
                     " set AccountChartZero=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountChartZero=@FromAccountNumber   "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 3)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   Companies " +
                     " set CostChart=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and CostChart=@FromAccountNumber   "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 4)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   Companies " +
                     " set CostChartZero=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and CostChartZero=@FromAccountNumber   "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
           

        }
        public void TransferDefinitionBank(int CompanyID, string FromAccount, string ToAccount, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   DefinitionBanks " +
                     " set BankAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and BankAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   DefinitionBanks " +
                     " set BankAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and BankAccountNumber=@FromAccountNumber   "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 3)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   DefinitionBanks " +
                     " set PostdatedChequeAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and PostdatedChequeAccountNumber=@FromAccountNumber   "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 4)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   DefinitionBanks " +
                     " set BillsOfExchangeAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and BillsOfExchangeAccountNumber=@FromAccountNumber   "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }


        }
        public void TransferSupplierInformations(int CompanyID, string FromAccount, string ToAccount, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   SupplierInformations " +
                     " set AccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   SupplierInformations " +
                     " set BankAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and BankAccountNumber=@FromAccountNumber   "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
           

        }
        public void TransferTracingPapers(int CompanyID, string FromAccount, string ToAccount, int Year, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   TracingPapers " +
                     " set AccountNumberFirst=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountNumberFirst=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   TracingPapers " +
                     " set AccountNumberSecond=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountNumberSecond=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 3)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   TracingPapers " +
                     " set AccountNumberThird=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountNumberThird=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 4)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   TracingPapers " +
                     " set AccountNumberFourth=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountNumberFourth=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 5)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   TracingPapers " +
                     " set AccountNumberFifth=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountNumberFifth=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 5)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   TracingPapers " +
                     " set BillCustomerAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and BillCustomerAccountNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

        }
        public void TransferHeaderServiceBill(int CompanyID, string FromAccount, string ToAccount, int Year, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   HeaderServiceBills " +
                     " set AccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   HeaderServiceBills " +
                     " set DebitAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and DebitAccountNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 3)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   HeaderServiceBills " +
                     " set CreditAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and CreditAccountNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 4)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   HeaderServiceBills " +
                     " set TaxAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and TaxAccountNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 5)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   HeaderServiceBills " +
                     " set DebitCostNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and DebitCostNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 6)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   HeaderServiceBills " +
                     " set CreditCostNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and CreditCostNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 7)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   HeaderServiceBills " +
                     " set TaxCostNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and TaxCostNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

        }
        public void TransferO_PaperH(int CompanyID, string FromAccount, string ToAccount, int Year, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   O_PaperH " +
                     " set AccountNumberFirst=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountNumberFirst=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   O_PaperH " +
                     " set AccountNumberSecond=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountNumberSecond=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 3)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   O_PaperH " +
                     " set AccountNumberThird=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountNumberThird=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 4)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   O_PaperH " +
                     " set AccountNumberFourth=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountNumberFourth=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 5)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   O_PaperH " +
                     " set AccountNumberFifth=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountNumberFifth=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 6)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   O_PaperH " +
                     " set BillCustomerAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and BillCustomerAccountNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

        }
        public void TransferO_HeaderH(int CompanyID, string FromAccount, string ToAccount, int Year, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   O_HeaderH " +
                     " set CustomerNo=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and CustomerNo=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   O_HeaderH " +
                     " set BillNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and BillNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 3)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   O_HeaderH " +
                     " set OrderNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and OrderNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            

        }
        public void TransferO_HeaderHistoryH(int CompanyID, string FromAccount, string ToAccount, int Year, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   O_HeaderHistoryH " +
                     " set CustomerNo=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and CustomerNo=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   O_HeaderHistoryH " +
                     " set BillNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and BillNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 3)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   O_HeaderHistoryH " +
                     " set OrderNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and OrderNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            

        }
        public void TransferHeaders(int CompanyID, string FromAccount, string ToAccount, int Year, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   Headers " +
                     " set CustomerNo=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and CustomerNo=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   Headers " +
                     " set BillNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and BillNumber=@FromAccountNumber and  CompanyYear=@Year  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@Year", Year)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }


            

        }
        public void TransferAsset(int CompanyID, string FromAccount, string ToAccount, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   Assets " +
                     " set CreditAccountNo=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and CreditAccountNo=@FromAccountNumber "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   Assets " +
                     " set DebitAccountNo=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and DebitAccountNo=@FromAccountNumber   "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

        }
        public void TempPrepaidAndRevenueReceivedDetailFrom(int CompanyID, string FromAccount, string ToAccount, int Year, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                "  Update   TempPrepaidAndRevenueReceivedDetails " +
                " set FromCostCenter=@ToAccountNumber  " +

                 " where CompanyID=@CompanyID and FromCostCenter=@FromAccountNumber and  CompanyYear=@Year  "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@ToAccountNumber", ToAccount)
                 , new SqlParameter("@Year", Year)
                 , new SqlParameter("@FromAccountNumber", FromAccount)
           );
            }
               
        }
        public void TempPrepaidAndRevenueReceivedDetailTo(int CompanyID, string FromAccount, string ToAccount, int Year , int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                              "  Update   TempPrepaidAndRevenueReceivedDetails " +
                              " set ToCostCenter=@ToAccountNumber  " +

                               " where CompanyID=@CompanyID and ToCostCenter=@FromAccountNumber and  CompanyYear=@Year  "
                               , new SqlParameter("@CompanyID", CompanyID)
                               , new SqlParameter("@ToAccountNumber", ToAccount)
                               , new SqlParameter("@Year", Year)
                               , new SqlParameter("@FromAccountNumber", FromAccount)
                         );
            }
           else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                              "  Update   TempPrepaidAndRevenueReceivedDetails " +
                              " set ToAccountNumber=@ToAccountNumber  " +

                               " where CompanyID=@CompanyID and ToAccountNumber=@FromAccountNumber and  CompanyYear=@Year  "
                               , new SqlParameter("@CompanyID", CompanyID)
                               , new SqlParameter("@ToAccountNumber", ToAccount)
                               , new SqlParameter("@Year", Year)
                               , new SqlParameter("@FromAccountNumber", FromAccount)
                         );
            }
               
        }

        public void TransferOtherAccount(int CompanyID, string FromAccount, string ToAccount, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   OtherAccounts " +
                     " set ChequeFundAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and ChequeFundAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   OtherAccounts " +
                     " set ExpensesAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and ExpensesAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 3)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   OtherAccounts " +
                     " set PaidExpensesAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and PaidExpensesAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 4)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   OtherAccounts " +
                     " set CashFundsAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and CashFundsAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 5)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   OtherAccounts " +
                     " set RevenuesAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and RevenuesAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 6)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   OtherAccounts " +
                     " set RevenuesReceivedAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and RevenuesReceivedAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 7)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   OtherAccounts " +
                     " set SalesTaxAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and SalesTaxAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 8)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   OtherAccounts " +
                     " set PurchasesTaxAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and PurchasesTaxAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 9)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   OtherAccounts " +
                     " set ReturnSalesTaxAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and ReturnSalesTaxAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 10)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   OtherAccounts " +
                     " set ReturnPurchasesTaxAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and ReturnPurchasesTaxAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 11)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   OtherAccounts " +
                     " set CustomerAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and CustomerAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 12)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   OtherAccounts " +
                     " set SupplierAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and SupplierAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }


        }


        public void TransferSt_BankH(int CompanyID, string FromAccount, string ToAccount)
        {
            _context.Database.ExecuteSqlCommand(
                 "  Update   St_BankH " +
                 " set BankAccountNumber = @ToAccountNumber  " +

                  " where CompanyID=@CompanyID and BankAccountNumber=@FromAccountNumber  "
                  , new SqlParameter("@CompanyID", CompanyID)
                  , new SqlParameter("@ToAccountNumber", ToAccount)
                  , new SqlParameter("@FromAccountNumber", FromAccount)
            );
        }
        public void TransferSt_SalesManH(int CompanyID, string FromAccount, string ToAccount)
        {
            _context.Database.ExecuteSqlCommand(
                 "  Update   St_SalesManH " +
                 " set HrID = @ToAccountNumber  " +

                  " where CompanyID=@CompanyID and HrID=@FromAccountNumber  "
                  , new SqlParameter("@CompanyID", CompanyID)
                  , new SqlParameter("@ToAccountNumber", ToAccount)
                  , new SqlParameter("@FromAccountNumber", FromAccount)
            );
        }
        public void TransferSt_BranchOtherExpenseAccountH(int CompanyID, string FromAccount, string ToAccount)
        {
            _context.Database.ExecuteSqlCommand(
                 "  Update   St_BranchOtherExpenseAccountH " +
                 " set OtherExpenseAccountNumber = @ToAccountNumber  " +

                  " where CompanyID=@CompanyID and OtherExpenseAccountNumber=@FromAccountNumber  "
                  , new SqlParameter("@CompanyID", CompanyID)
                  , new SqlParameter("@ToAccountNumber", ToAccount)
                  , new SqlParameter("@FromAccountNumber", FromAccount)
            );
        }
        public void TransferSt_FundingAgencyH(int CompanyID, string FromAccount, string ToAccount)
        {
            _context.Database.ExecuteSqlCommand(
                 "  Update   St_FundingAgencyH " +
                 " set CommissionAccount = @ToAccountNumber  " +

                  " where CompanyID=@CompanyID and CommissionAccount=@FromAccountNumber  "
                  , new SqlParameter("@CompanyID", CompanyID)
                  , new SqlParameter("@ToAccountNumber", ToAccount)
                  , new SqlParameter("@FromAccountNumber", FromAccount)
            );
        }
        public void TransferSt_PurchaseOrderHeader(int CompanyID, string FromAccount, string ToAccount , int Year)
        {
            _context.Database.ExecuteSqlCommand(
                 "  Update   St_PurchaseOrderHeader " +
                 " set SupplierAccountNumber = @ToAccountNumber  " +

                  " where CompanyID=@CompanyID and SupplierAccountNumber=@FromAccountNumber and  CompanyYear=@Year  "
                  , new SqlParameter("@CompanyID", CompanyID)
                  , new SqlParameter("@ToAccountNumber", ToAccount)
                  , new SqlParameter("@Year", Year)
                  , new SqlParameter("@FromAccountNumber", FromAccount)
            );
        }
        public void TransferO_TransactionH(int CompanyID, string FromAccount, string ToAccount , int Year)
        {
            _context.Database.ExecuteSqlCommand(
                 "  Update   O_TransactionH " +
                 " set AccountNumber = @ToAccountNumber  " +

                  " where CompanyID=@CompanyID and AccountNumber=@FromAccountNumber and  CompanyYear=@Year  "
                  , new SqlParameter("@CompanyID", CompanyID)
                  , new SqlParameter("@ToAccountNumber", ToAccount)
                  , new SqlParameter("@Year", Year)
                  , new SqlParameter("@FromAccountNumber", FromAccount)
            );
        }
        public void TransferO_TransactionHistoryH(int CompanyID, string FromAccount, string ToAccount , int Year)
        {
            _context.Database.ExecuteSqlCommand(
                 "  Update   O_TransactionHistoryH " +
                 " set AccountNumber = @ToAccountNumber  " +

                  " where CompanyID=@CompanyID and AccountNumber=@FromAccountNumber and  CompanyYear=@Year  "
                  , new SqlParameter("@CompanyID", CompanyID)
                  , new SqlParameter("@ToAccountNumber", ToAccount)
                  , new SqlParameter("@Year", Year)
                  , new SqlParameter("@FromAccountNumber", FromAccount)
            );
        }
        public void TransferSt_HeaderH(int CompanyID, string FromAccount, string ToAccount)
        {
            _context.Database.ExecuteSqlCommand(
                 "  Update   St_HeaderH " +
                 " set CustomerOrSupplierAccountNumber = @ToAccountNumber  " +

                  " where CompanyID=@CompanyID and CustomerOrSupplierAccountNumber=@FromAccountNumber  "
                  , new SqlParameter("@CompanyID", CompanyID)
                  , new SqlParameter("@ToAccountNumber", ToAccount)
                  , new SqlParameter("@FromAccountNumber", FromAccount)
            );
        }
        public void TransferSt_ItemCard(int CompanyID, string FromAccount, string ToAccount)
        {
            _context.Database.ExecuteSqlCommand(
                 "  Update   St_ItemCard " +
                 " set SupplierAccountNumber = @ToAccountNumber  " +

                  " where CompanyID=@CompanyID and SupplierAccountNumber=@FromAccountNumber  "
                  , new SqlParameter("@CompanyID", CompanyID)
                  , new SqlParameter("@ToAccountNumber", ToAccount)
                  , new SqlParameter("@FromAccountNumber", FromAccount)
            );
        }
        public void TransferSt_ItemCardH(int CompanyID, string FromAccount, string ToAccount)
        {
            _context.Database.ExecuteSqlCommand(
                 "  Update  St_ItemCardH " +
                 " set SupplierAccountNumber = @ToAccountNumber  " +

                  " where CompanyID=@CompanyID and SupplierAccountNumber=@FromAccountNumber  "
                  , new SqlParameter("@CompanyID", CompanyID)
                  , new SqlParameter("@ToAccountNumber", ToAccount)
                  , new SqlParameter("@FromAccountNumber", FromAccount)
            );
        }
        public void TransferSt_BranchExpenseAccountH(int CompanyID, string FromAccount, string ToAccount)
        {
            _context.Database.ExecuteSqlCommand(
                 "  Update   St_BranchExpenseAccountH " +
                 " set ExpenseAccountNumber = @ToAccountNumber  " +

                  " where CompanyID=@CompanyID and ExpenseAccountNumber=@FromAccountNumber  "
                  , new SqlParameter("@CompanyID", CompanyID)
                  , new SqlParameter("@ToAccountNumber", ToAccount)
                  , new SqlParameter("@FromAccountNumber", FromAccount)
            );
        }
        public void TransferSt_BranchAccountH(int CompanyID, string FromAccount, string ToAccount, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_BranchAccountH " +
                     " set FundAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and FundAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_BranchAccountH " +
                     " set SalesAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and SalesAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 3)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_BranchAccountH " +
                     " set MaintenanceCardAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and MaintenanceCardAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 4)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_BranchAccountH " +
                     " set ReturnCardAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and ReturnCardAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 5)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_BranchAccountH " +
                     " set TransferFeesAndInstallationAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and TransferFeesAndInstallationAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 6)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_BranchAccountH " +
                     " set ChequeFundAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and ChequeFundAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 7)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_BranchAccountH " +
                     " set RelocationAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and RelocationAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 8)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_BranchAccountH " +
                     " set VisaAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and VisaAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 9)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_BranchAccountH " +
                     " set MasterAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and MasterAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 10)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_BranchAccountH " +
                     " set AmericanAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AmericanAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 11)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_BranchAccountH " +
                     " set ArabiCashAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and ArabiCashAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

        }
        public void TransferSt_Header(int CompanyID, string FromAccount, string ToAccount, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_Header " +
                     " set AccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_Header " +
                     " set OtherExpensesAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and OtherExpensesAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 3)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_Header " +
                     " set ShippingAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and ShippingAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 4)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_Header " +
                     " set OtherExpensesCostCenter=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and OtherExpensesCostCenter=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 5)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_Header " +
                     " set ShippingCostCenter=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and ShippingCostCenter=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

        }
        public void TransferSt_WarehouseAccount(int CompanyID, string FromAccount, string ToAccount, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_WarehouseAccount " +
                     " set SalesFundAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and SalesFundAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_WarehouseAccount " +
                     " set SalesAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and SalesAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 3)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_WarehouseAccount " +
                     " set CostOfGoodsAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and CostOfGoodsAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 4)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_WarehouseAccount " +
                     " set SalesRefundFundAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and SalesRefundFundAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 5)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_WarehouseAccount " +
                     " set SalesReturnAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and SalesReturnAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 6)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_WarehouseAccount " +
                     " set ReturnCostOfGoodsAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and ReturnCostOfGoodsAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 7)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_WarehouseAccount " +
                     " set PurchaseFundAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and PurchaseFundAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 8)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_WarehouseAccount " +
                     " set PurchaseAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and PurchaseAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 9)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_WarehouseAccount " +
                     " set PurchaseFundReturnAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and PurchaseFundReturnAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 10)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_WarehouseAccount " +
                     " set PurchaseReturnAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and PurchaseReturnAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

        }
        public void TransferSt_OtherAccount(int CompanyID, string FromAccount, string ToAccount, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_OtherAccount " +
                     " set SalesTaxAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and SalesTaxAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_OtherAccount " +
                     " set SalesTaxReturnAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and SalesTaxReturnAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 3)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_OtherAccount " +
                     " set PurchaseTaxAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and PurchaseTaxAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 4)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_OtherAccount " +
                     " set PurchaseTaxReturnAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and PurchaseTaxReturnAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 5)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_OtherAccount " +
                     " set ForeignPurchaseAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and ForeignPurchaseAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 6)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_OtherAccount " +
                     " set DirectAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and DirectAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 7)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_OtherAccount " +
                     " set DifferenceAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and DifferenceAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
           

        }
        public void TransferSt_OtherAccountH(int CompanyID, string FromAccount, string ToAccount, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_OtherAccountH " +
                     " set SalesTaxAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and SalesTaxAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_OtherAccountH " +
                     " set PurchaseTaxAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and PurchaseTaxAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 3)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_OtherAccountH " +
                     " set PurchaseAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and PurchaseAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 4)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_OtherAccountH " +
                     " set ForeignPurchaseAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and ForeignPurchaseAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 5)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_OtherAccountH " +
                     " set DirectAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and DirectAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 6)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_OtherAccountH " +
                     " set DifferenceAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and DifferenceAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
            else if (level == 6)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_OtherAccountH " +
                     " set BillsOfExchangeAccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and BillsOfExchangeAccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }
           

        }
        public void TransferSt_Warehouse(int CompanyID, string FromAccount, string ToAccount, int level)
        {
            if (level == 1)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update  St_Warehouse " +
                     " set AccountNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and AccountNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

            else if (level == 2)
            {
                _context.Database.ExecuteSqlCommand(
                     "  Update   St_Warehouse " +
                     " set CostCenterNumber=@ToAccountNumber  " +

                      " where CompanyID=@CompanyID and CostCenterNumber=@FromAccountNumber  "
                      , new SqlParameter("@CompanyID", CompanyID)
                      , new SqlParameter("@ToAccountNumber", ToAccount)
                      , new SqlParameter("@FromAccountNumber", FromAccount)
                );
            }

     
           

        }
        public void UpdateOpeinigBalance(int CompanyID, string AccountNumber, double OpeningBalanceDebit, double OpeningBalanceCredit, int Year)
        {
            _context.Database.ExecuteSqlCommand(
           "  Update   ChartOfAccounts " +
           " set OpeningBalanceDebit=@OpeningBalanceDebit, OpeningBalanceCredit=@OpeningBalanceCredit   " +

            " where CompanyID=@CompanyID and AccountNumber=@AccountNumber and  CompanyYear=@Year  "
            , new SqlParameter("@CompanyID", CompanyID)
            , new SqlParameter("@AccountNumber", AccountNumber)
            , new SqlParameter("@Year", Year)
            , new SqlParameter("@OpeningBalanceDebit", OpeningBalanceDebit)
            , new SqlParameter("@OpeningBalanceCredit", OpeningBalanceCredit)

            );
        }
        public void DeleteOpeinigBalance(int CompanyID, string AccountNumber, int Year)
        {
            _context.Database.ExecuteSqlCommand(
              "  Delete from    Transactions " +


              " where CompanyID=@CompanyID and AccountNumber=@AccountNumber and  CompanyYear=@Year  and TransactionKindNo= 15 "

              , new SqlParameter("@CompanyID", CompanyID)
              , new SqlParameter("@AccountNumber", AccountNumber)
               , new SqlParameter("@Year", Year)
             );
        }
        public void UpdateTransActionOpeinigBalance(int CompanyID, string AccountNumber, double OpeningBalanceDebit, double OpeningBalanceCredit, int Year)
        {
            _context.Database.ExecuteSqlCommand(
              "  Update     Transactions  set  Debit=@OpeningBalanceDebit,Credit=@OpeningBalanceCredit " +


              " where CompanyID=@CompanyID and AccountNumber=@AccountNumber and  CompanyYear=@Year  and TransactionKindNo= 15 "

              , new SqlParameter("@CompanyID", CompanyID)
              , new SqlParameter("@AccountNumber", AccountNumber)
               , new SqlParameter("@Year", Year)
                , new SqlParameter("@OpeningBalanceCredit", OpeningBalanceCredit)
                 , new SqlParameter("@OpeningBalanceDebit", OpeningBalanceDebit)
             );
        }
        public void TransferTRansActionOpeinig(int CompanyID, string FromAccount, string ToAccount, int Year)
        {
            _context.Database.ExecuteSqlCommand(
           "  Update   Transactions " +
           " set AccountNumber=@ToAccountNumber ,AccountName='' " +

           " where CompanyID=@CompanyID and AccountNumber=@FromAccountNumber and  CompanyYear=@Year  and TransactionKindNo = 15 "

           , new SqlParameter("@CompanyID", CompanyID)
           , new SqlParameter("@ToAccountNumber", ToAccount)
              , new SqlParameter("@Year", Year)
              , new SqlParameter("@FromAccountNumber", FromAccount)



           );
        }

        public IEnumerable<DefinitionAssetSiteVM> GetAllDefinitionAsset(int CompanyID)
        {
            try
            {
                return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                " Select Distinct * From( " +
                " SELECT DAS.Id As SerialID, DAS.CompanyID, DAS.AssetID, DAS.AssetTypeID, DAS.AdministrationID, DAS.CircleID, DAS.SectionID, DAS.SiteID, DAS.TransferDate, " +
                " ( " +
                  " Select A.AssetName " +
                  " From Assets A " +
                  " Where " +
                  " A.AssetID = DAS.AssetID " +
                  " And " +
                  " A.CompanyID = DAS.CompanyID " +
                " ) As AssetName, " +
                " ( " +
                  " Select ATS.[Name] " +
                  " From AssetTypes ATS " +
                  " Where " +
                  " ATS.AssetTypeID = DAS.AssetTypeID " +
                  " And " +
                  " ATS.CompanyID = DAS.CompanyID " +
                " ) As AssetTypeName, " +
                " ( " +
                  " Select AA.AdministrationName " +
                  " From AssetAdministrations AA " +
                  " Where " +
                  " AA.AdministrationID = DAS.AdministrationID " +
                  " And " +
                  " AA.CompanyID = DAS.CompanyID " +
                " ) As AdministrationName, " +
                " ( " +
                  " Select AC.CircleName " +
                  " From AssetCircles AC " +
                  " Where " +
                  " AC.CircleID = DAS.CircleID " +
                  " And " +
                  " AC.CompanyID = DAS.CompanyID " +
                " ) As CircleName, " +
                " ( " +
                  " Select ASS.SectionName " +
                  " From AssetSections ASS " +
                  " Where " +
                  " ASS.SectionID = DAS.SectionID " +
                  " And " +
                  " ASS.CompanyID = DAS.CompanyID " +
                " ) As SectionName, " +
                " ( " +
                  " Select ASS.SiteName " +
                  " From AssetSites ASS " +
                  " Where " +
                  " ASS.SiteID = DAS.SiteID " +
                  " And " +
                  " ASS.CompanyID = DAS.CompanyID " +
                " ) As SiteName " +
                " From DefinitionAssetSites DAS, " +
                " ( " +
                  " SELECT MAX(DASS.TransferDate) as TransferDate FROM DefinitionAssetSites DASS Group by AssetID, CompanyID) DASS " +
                  " where " +
                  " DAS.TransferDate = DASS.TransferDate " +
                 " ) As DAS, " +
                 " ( " +
                    " SELECT MAX(DASS.Id) as Id FROM DefinitionAssetSites DASS Group by AssetID, CompanyID, TransferDate " +
                 " ) DASS " +
                 " Where  " +
                 " DAS.SerialID = DASS.Id " +
                 " And " +
                 " DAS.CompanyID = @CompanyID " +
                 " Order By DAS.AssetID "
                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<DefinitionAssetSiteVM>();
            }
        }
        public DefinitionAssetSiteVM CheckAllDefinitionAsset(int CompanyID , string AccountNumber)
        {
            try
            {
                return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                " Select Distinct * From( " +
                " SELECT DAS.Id As SerialID, DAS.CompanyID, DAS.AssetID, DAS.AssetTypeID, DAS.AdministrationID, DAS.CircleID, DAS.SectionID, DAS.SiteID, DAS.TransferDate, " +
                " ( " +
                  " Select A.AssetName " +
                  " From Assets A " +
                  " Where " +
                  " A.AssetID = DAS.AssetID " +
                  " And " +
                  " A.CompanyID = DAS.CompanyID " +
                " ) As AssetName, " +
                " ( " +
                  " Select ATS.[Name] " +
                  " From AssetTypes ATS " +
                  " Where " +
                  " ATS.AssetTypeID = DAS.AssetTypeID " +
                  " And " +
                  " ATS.CompanyID = DAS.CompanyID " +
                " ) As AssetTypeName, " +
                " ( " +
                  " Select AA.AdministrationName " +
                  " From AssetAdministrations AA " +
                  " Where " +
                  " AA.AdministrationID = DAS.AdministrationID " +
                  " And " +
                  " AA.CompanyID = DAS.CompanyID " +
                " ) As AdministrationName, " +
                " ( " +
                  " Select AC.CircleName " +
                  " From AssetCircles AC " +
                  " Where " +
                  " AC.CircleID = DAS.CircleID " +
                  " And " +
                  " AC.CompanyID = DAS.CompanyID " +
                " ) As CircleName, " +
                " ( " +
                  " Select ASS.SectionName " +
                  " From AssetSections ASS " +
                  " Where " +
                  " ASS.SectionID = DAS.SectionID " +
                  " And " +
                  " ASS.CompanyID = DAS.CompanyID " +
                " ) As SectionName, " +
                " ( " +
                  " Select ASS.SiteName " +
                  " From AssetSites ASS " +
                  " Where " +
                  " ASS.SiteID = DAS.SiteID " +
                  " And " +
                  " ASS.CompanyID = DAS.CompanyID " +
                " ) As SiteName " +
                " From DefinitionAssetSites DAS, " +
                " ( " +
                  " SELECT MAX(DASS.TransferDate) as TransferDate FROM DefinitionAssetSites DASS Group by AssetID, CompanyID) DASS " +
                  " where " +
                  " DAS.TransferDate = DASS.TransferDate " +
                 " ) As DAS, " +
                 " ( " +
                    " SELECT MAX(DASS.Id) as Id FROM DefinitionAssetSites DASS Group by AssetID, CompanyID, TransferDate " +
                 " ) DASS " +
                 " Where  " +
                 " DAS.SerialID = DASS.Id " +
                 " And " +
                 " DAS.CompanyID = @CompanyID " +
                  " And " +
                 " DAS.AssetID = @AccountNumber " +
                 " Order By DAS.AssetID "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@AccountNumber", AccountNumber)

            ).FirstOrDefault();
            }
            catch
            {
                return new DefinitionAssetSiteVM();
            }
        }
        public double GetTotalBankFund(int CompanyID, int year)
        {

            try

            {
                return _context.Database.SqlQuery<Double>("  select sum(Debit-Credit) as Net    from Transactions " +
                    " where AccountNumber in ( select distinct BankAccountNumber from DefinitionBanks where CompanyID=@CompanyID ) and CompanyID=@CompanyID and CompanyYear=@CompanyYear "


                 , new SqlParameter("@CompanyID", CompanyID)
                  , new SqlParameter("@CompanyYear", year)

             ).FirstOrDefault();

            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }


        }

        public IEnumerable<ExpenseTotalVM> GetTotlExpense(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {

            try

            {
                return _context.Database.SqlQuery<ExpenseTotalVM>("   select month(VoucherDate) as MonthNo,sum(Debit)-sum(Credit) as NET,   sum(Debit) as DebitTransAction ,sum(Credit) as CreditTransAction, AccountTypeID from Transactions  ,ChartOfAccounts  " +
                     "  Where   " +
                     "   Transactions.AccountNumber in (select  AccountNumber from ChartOfAccounts where AccountTypeID in (14,15,16) and CompanyID=@CompanyID )  " +
                     "  and  Transactions.AccountNumber=ChartOfAccounts.AccountNumber " +
                     " and Transactions.CompanyID=@CompanyID and Transactions.CompanyID=@CompanyID  " +
                     " and VoucherDate >=@FromDate and VoucherDate <=@ToDate  " +
                     " group by   month(VoucherDate),AccountTypeID   "




                 , new SqlParameter("@FromDate", Fromdate)
                 , new SqlParameter("@ToDate", ToDate)
                 , new SqlParameter("@CompanyID", CompanyID)


             ).ToList();

            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return new List<ExpenseTotalVM>();
            }


        }
        public double GetAccountTypeTotalForAcc(int CompanyID, DateTime Fromdate, DateTime ToDate, string Acc)
        {

            try

            {
                return _context.Database.SqlQuery<Double>("   select ISNULL(sum( T.Debit-T.Credit),0) As Total from   Transactions T  " +
                     "  Where   " +
                     "    T.AccountNumber=@ACc " +
                     " and   T.CompanyID=@CompanyID " +
                     " and T.VoucherDate>=@FromDate and T.VoucherDate<=@ToDate "




                 , new SqlParameter("@FromDate", Fromdate)
                 , new SqlParameter("@ToDate", ToDate)
                 , new SqlParameter("@CompanyID", CompanyID)
                  , new SqlParameter("@Acc", Acc)

             ).FirstOrDefault();

            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }


        }
        public IEnumerable<AccountTTotalVM> GetAccountTypeTotal(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {

            try

            {
                return _context.Database.SqlQuery<AccountTTotalVM>("   select CA.AccountTypeID,sum( T.Debit-T.Credit) As Total from ChartOfAccounts CA,Transactions T  " +
                    "  Where T.CompanyID=CA.CompanyID " +
                    "  and T.AccountNumber=CA.AccountNumber " +
                    " and CA.CompanyID =@CompanyID and T.CompanyID=@CompanyID " +
                    " and T.VoucherDate>=@FromDate and T.VoucherDate<=@ToDate " +
                    " group by AccountTypeID "


                , new SqlParameter("@FromDate", Fromdate)
                , new SqlParameter("@ToDate", ToDate)
                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return new List<AccountTTotalVM>();
            }


        }
        public IEnumerable<TransActionFilter> GetServiceBillHeaders(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<TransActionFilter>(
                     " Select " +
                     " CT.ArabicName As CompanyTransactionName, H.CompanyYear, " +
                     " H.CompanyTransactionKindNo, H.Exported, H.TransactionKindNo, " +
                     " H.VoucherNumber, H.VoucherDate, HS.AccountNumber, HS.SaleManNo, " +
                     " ( " +
                       " Select C.ArabicName " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " C.AccountNumber = HS.AccountNumber " +
                       " And " +
                       " C.CompanyID = HS.CompanyID " +
                     " ) As AccountName, " +
                    " ( " +
                      " Select S.SalesName From Sales S " +
                      " Where " +
                      " S.SalesID = HS.SaleManNo " +
                      " And " +
                      " S.CompanyID = HS.CompanyID " +
                    " ) As SaleManName, H.TotalDebit TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    " ) As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN N'غير مرحل' " +
                      " ELSE N'مرحل' " +
                      " END " +
                    " ) As Export, " +
                    " C.ArabicName As CurrencyName,A.UserName,C.CurrencyID, " +
                    " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A, HeaderServiceBills HS " +
                    " Where " +
                    " H.TransactionKindNo in (10, 11, 12, 13, 19, 20, 21, 22) " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID = @CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.CompanyID = HS.CompanyID " +
                    " And " +
                    " H.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                    " And " +
                    " H.TransactionKindNo = HS.TransactionKindNo " +
                    " And " +
                    " H.VoucherNumber = HS.BillID " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<TransActionFilter>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<TransActionFilter>(
                    " Select " +
                     " CT.EnglishName As CompanyTransactionName, H.CompanyYear, " +
                     " H.CompanyTransactionKindNo, H.Exported, H.TransactionKindNo, " +
                     " H.VoucherNumber, H.VoucherDate, HS.AccountNumber, HS.SaleManNo, " +
                     " ( " +
                       " Select C.EnglishName " +
                       " From ChartOfAccounts C " +
                       " Where " +
                       " C.AccountNumber = HS.AccountNumber " +
                       " And " +
                       " C.CompanyID = HS.CompanyID " +
                     " ) As AccountName, " +
                    " ( " +
                      " Select S.SalesName From Sales S " +
                      " Where " +
                      " S.SalesID = HS.SaleManNo " +
                      " And " +
                      " S.CompanyID = HS.CompanyID " +
                    " ) As SaleManName, H.TotalDebit TotalAmount, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.FCurrencyID = 1 THEN 0 " +
                      " ELSE H.TotalDebitForeign " +
                      " END " +
                    " ) As ForeignTotal, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN N'غير مرحل' " +
                      " ELSE N'مرحل' " +
                      " END " +
                    " ) As Export, " +
                    " C.ArabicName As CurrencyName,A.UserName,C.CurrencyID, " +
                    " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                    " From Headers H, CompanyTransactionKinds CT,Currencies As C,AspNetUsers A, HeaderServiceBills HS " +
                    " Where " +
                    " H.TransactionKindNo in (10, 11, 12, 13, 19, 20, 21, 22) " +
                    " And " +
                    " H.CompanyID = CT.CompanyID " +
                    " And " +
                    " H.CompanyID = C.CompanyID " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.CompanyTransactionKindNo = CT.CompanyTransactionKindID " +
                    " And " +
                    " H.TransactionKindNo = CT.TransactionKindID " +
                    " And " +
                    " H.CompanyID = @CompanyID " +
                    " And " +
                    " H.FCurrencyID = C.CurrencyID " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.CompanyID = HS.CompanyID " +
                    " And " +
                    " H.CompanyTransactionKindNo = HS.CompanyTransactionKindNo " +
                    " And " +
                    " H.TransactionKindNo = HS.TransactionKindNo " +
                    " And " +
                    " H.VoucherNumber = HS.BillID " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " Order By H.VoucherDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<TransActionFilter>();
                }
            }
        }
        public void SaveTracingPaper(int CompanyID, int CompanyYear, int RowNumber, string OldVoucherNumber, int OldCompanyTransactionKindNo, int OldTransactionKindNo,
                                    string ChequeNumber, string sChequeDate, double ChequeAmount, string AccountNumberThird)
        {
            _context.Database.ExecuteSqlCommand(
                " Insert Into TracingPapers ( " +
                " CompanyID,CompanyYear,StockCode, " +
                " CompanyTransactionKindNo,TransactionKindNo,VoucherNumber, " +
                " VHI,VoucherDate,RowNumber, " +
                " ChequeNumber,ChequeDate,ChequeAmount, " +
                " ChequeCase,OldVoucherNumber,OldVHI, " +
                " OldCompanyTransactionKindNo,OldTransactionKindNo,AccountNumberFirst, " +
                " AccountNumberSecond,AccountNumberThird,AccountNumberFourth, " +
                " AccountNumberFifth,DrawerName,Remark, " +
                " ReturnNote,ReturnCustomerNote,UnderReturnNote, " +
                " UnderReturnCustomerNote,EndorReturnNote, " +
                " OldSupplierBalance,InsUserID,InsDateTime,CaseNumber,Sirs,Mr,Co,[First], " +
                " Mrs,BankAccountNameJustForFill,OriginalVoucherNumber,OriginalVHI,OriginalCompanyTransactionKindNo, " +
                " OriginalTransactionKindNo,IsBill,BillCustomerAccountNumber,BillNumber,ConversionFactor,FCurrencyID,sChequeDate,PaymentReturnNote,SaleID,PaymentPaidReturnNote " +
                " ) " +
                " Select " +
                " CompanyID,CompanyYear,StockCode, " +
                " CompanyTransactionKindNo,TransactionKindNo,VoucherNumber, " +
                " VHI,VoucherDate,RowNumber, " +
                " ChequeNumber,ChequeDate,ChequeAmount, " +
                " ChequeCase,OldVoucherNumber,OldVHI, " +
                " OldCompanyTransactionKindNo,OldTransactionKindNo,AccountNumberFirst, " +
                " AccountNumberSecond,AccountNumberThird,AccountNumberFourth, " +
                " AccountNumberFifth,DrawerName,Remark, " +
                " ReturnNote,ReturnCustomerNote,UnderReturnNote, " +
                " UnderReturnCustomerNote,EndorReturnNote, " +
                " OldSupplierBalance,InsUserID,InsDateTime,CaseNumber,Sirs,Mr,Co,[First], " +
                " Mrs,BankAccountNameJustForFill,OriginalVoucherNumber,OriginalVHI,OriginalCompanyTransactionKindNo, " +
                " OriginalTransactionKindNo,IsBill,BillCustomerAccountNumber,BillNumber,ConversionFactor,FCurrencyID,sChequeDate,PaymentReturnNote,SaleID,PaymentPaidReturnNote " +
                " From Papers " +
                " Where " +
                " VoucherNumber = @OldVoucherNumber " +
                " And " +
                " CompanyTransactionKindNo = @OldCompanyTransactionKindNo " +
                " And " +
                " TransactionKindNo = @OldTransactionKindNo " +
                " And " +
                " CompanyID = @CompanyID " +
                " And " +
                " CompanyYear = @CompanyYear " +
                " And " +
                " RowNumber = @RowNumber " +
                " And " +
                " ChequeNumber = @ChequeNumber " +
                " And " +
                " sChequeDate = @sChequeDate " +
                " And " +
                " ChequeAmount = @ChequeAmount " +
                " And " +
                " AccountNumberThird = @AccountNumberThird "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@OldVoucherNumber", OldVoucherNumber)
                , new SqlParameter("@OldCompanyTransactionKindNo", OldCompanyTransactionKindNo)
                , new SqlParameter("@OldTransactionKindNo", OldTransactionKindNo)
                , new SqlParameter("@CompanyYear", CompanyYear)
                , new SqlParameter("@RowNumber", RowNumber)
                , new SqlParameter("@ChequeNumber", ChequeNumber)
                , new SqlParameter("@sChequeDate", sChequeDate)
                , new SqlParameter("@ChequeAmount", ChequeAmount)
                , new SqlParameter("@AccountNumberThird", AccountNumberThird)
            );
        }
        public void UpdatePaper(int CompanyID, int CompanyYear, int RowNumber, string OldVoucherNumber, int OldCompanyTransactionKindNo, int OldTransactionKindNo, int OldVHI,
                                int CompanyTransactionKindNo, int TransactionKindNo, DateTime VoucherDate, string VoucherNumber, int VHI, int ChequeCase, string AccountNumberSecond,
                                string AccountNumberFourth, string Remark, string InsUserID, DateTime InsDateTime, string AccountNumberFifth,
                                string ChequeNumber, string sChequeDate, double ChequeAmount, string AccountNumberThird)
        {
            _context.Database.ExecuteSqlCommand(
                 " Update Papers " +
                 " Set " +
                 " OldVoucherNumber = @OldVoucherNumber, " +
                 " OldCompanyTransactionKindNo = @OldCompanyTransactionKindNo, " +
                 " OldTransactionKindNo = @OldTransactionKindNo, " +
                 " OldVHI = @OldVHI, " +
                 " CompanyTransactionKindNo = @CompanyTransactionKindNo, " +
                 " TransactionKindNo = @TransactionKindNo, " +
                 " VoucherDate = @VoucherDate, " +
                 " VoucherNumber = @VoucherNumber, " +
                 " VHI = @VHI, " +
                 " ChequeCase = @ChequeCase, " +
                 " AccountNumberSecond = @AccountNumberSecond, " +
                 " AccountNumberFourth = @AccountNumberFourth, " +
                 " Remark = @Remark, " +
                 " InsUserID = @InsUserID, " +
                 " InsDateTime = @InsDateTime, " +
                 " AccountNumberFifth = @AccountNumberFifth " +
                 " Where " +
                 " VoucherNumber = @OldVoucherNumber " +
                 " And " +
                 " CompanyTransactionKindNo = @OldCompanyTransactionKindNo " +
                 " And " +
                 " TransactionKindNo = @OldTransactionKindNo " +
                 " And " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CompanyYear = @CompanyYear " +
                 " And " +
                 " RowNumber = @RowNumber " +
                 " And " +
                 " ChequeNumber = @ChequeNumber " +
                 " And " +
                 " sChequeDate = @sChequeDate " +
                 " And " +
                 " ChequeAmount = @ChequeAmount " +
                 " And " +
                 " AccountNumberThird = @AccountNumberThird "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@OldVoucherNumber", OldVoucherNumber)
                 , new SqlParameter("@OldCompanyTransactionKindNo", OldCompanyTransactionKindNo)
                 , new SqlParameter("@OldTransactionKindNo", OldTransactionKindNo)
                 , new SqlParameter("@OldVHI", OldVHI)
                 , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                 , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                 , new SqlParameter("@VoucherDate", VoucherDate)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                 , new SqlParameter("@VHI", VHI)
                 , new SqlParameter("@ChequeCase", ChequeCase)
                 , new SqlParameter("@AccountNumberSecond", AccountNumberSecond)
                 , new SqlParameter("@AccountNumberFourth", AccountNumberFourth)
                 , new SqlParameter("@Remark", Remark)
                 , new SqlParameter("@InsUserID", InsUserID)
                 , new SqlParameter("@InsDateTime", InsDateTime)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                 , new SqlParameter("@RowNumber", RowNumber)
                 , new SqlParameter("@AccountNumberFifth", AccountNumberFifth)
                 , new SqlParameter("@ChequeNumber", ChequeNumber)
                 , new SqlParameter("@sChequeDate", sChequeDate)
                 , new SqlParameter("@ChequeAmount", ChequeAmount)
                 , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                 );
        }
        public void UpdatePaperReturnedFromChequeBox(int CompanyID, int CompanyYear, int RowNumber, string OldVoucherNumber, int OldCompanyTransactionKindNo, int OldTransactionKindNo, int OldVHI,
                                int CompanyTransactionKindNo, int TransactionKindNo, DateTime VoucherDate, string VoucherNumber, int VHI, int ChequeCase, string Remark, string InsUserID,
                                DateTime InsDateTime, string ChequeNumber, string sChequeDate, double ChequeAmount, string AccountNumberThird)
        {
            _context.Database.ExecuteSqlCommand(
                 " Update Papers " +
                 " Set " +
                 " OldVoucherNumber = @OldVoucherNumber, " +
                 " OldCompanyTransactionKindNo = @OldCompanyTransactionKindNo, " +
                 " OldTransactionKindNo = @OldTransactionKindNo, " +
                 " OldVHI = @OldVHI, " +
                 " CompanyTransactionKindNo = @CompanyTransactionKindNo, " +
                 " TransactionKindNo = @TransactionKindNo, " +
                 " VoucherDate = @VoucherDate, " +
                 " VoucherNumber = @VoucherNumber, " +
                 " VHI = @VHI, " +
                 " ChequeCase = @ChequeCase, " +
                 " Remark = @Remark, " +
                 " InsUserID = @InsUserID, " +
                 " InsDateTime = @InsDateTime " +
                 " Where " +
                 " VoucherNumber = @OldVoucherNumber " +
                 " And " +
                 " CompanyTransactionKindNo = @OldCompanyTransactionKindNo " +
                 " And " +
                 " TransactionKindNo = @OldTransactionKindNo " +
                 " And " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CompanyYear = @CompanyYear " +
                 " And " +
                 " RowNumber = @RowNumber " +
                 " And " +
                 " ChequeNumber = @ChequeNumber " +
                 " And " +
                 " sChequeDate = @sChequeDate " +
                 " And " +
                 " ChequeAmount = @ChequeAmount " +
                 " And " +
                 " AccountNumberThird = @AccountNumberThird "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@OldVoucherNumber", OldVoucherNumber)
                 , new SqlParameter("@OldCompanyTransactionKindNo", OldCompanyTransactionKindNo)
                 , new SqlParameter("@OldTransactionKindNo", OldTransactionKindNo)
                 , new SqlParameter("@OldVHI", OldVHI)
                 , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                 , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                 , new SqlParameter("@VoucherDate", VoucherDate)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                 , new SqlParameter("@VHI", VHI)
                 , new SqlParameter("@ChequeCase", ChequeCase)
                 , new SqlParameter("@Remark", Remark)
                 , new SqlParameter("@InsUserID", InsUserID)
                 , new SqlParameter("@InsDateTime", InsDateTime)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                 , new SqlParameter("@RowNumber", RowNumber)
                 , new SqlParameter("@ChequeNumber", ChequeNumber)
                 , new SqlParameter("@sChequeDate", sChequeDate)
                 , new SqlParameter("@ChequeAmount", ChequeAmount)
                 , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                 );
        }
        public void UpdatePaymentPaperUnderCollection(int CompanyID, int CompanyYear, int RowNumber, string OldVoucherNumber, int OldCompanyTransactionKindNo, int OldTransactionKindNo, int OldVHI,
                                int CompanyTransactionKindNo, int TransactionKindNo, DateTime VoucherDate, string VoucherNumber, int VHI, int ChequeCase, string AccountNumberSecond,
                                string Remark, string InsUserID, DateTime InsDateTime, string AccountNumberFifth, string ChequeNumber, string sChequeDate,
                                double ChequeAmount, string AccountNumberThird)
        {
            _context.Database.ExecuteSqlCommand(
                 " Update Papers " +
                 " Set " +
                 " OldVoucherNumber = @OldVoucherNumber, " +
                 " OldCompanyTransactionKindNo = @OldCompanyTransactionKindNo, " +
                 " OldTransactionKindNo = @OldTransactionKindNo, " +
                 " OldVHI = @OldVHI, " +
                 " CompanyTransactionKindNo = @CompanyTransactionKindNo, " +
                 " TransactionKindNo = @TransactionKindNo, " +
                 " VoucherDate = @VoucherDate, " +
                 " VoucherNumber = @VoucherNumber, " +
                 " VHI = @VHI, " +
                 " ChequeCase = @ChequeCase, " +
                 " AccountNumberSecond = @AccountNumberSecond, " +
                 " Remark = @Remark, " +
                 " InsUserID = @InsUserID, " +
                 " InsDateTime = @InsDateTime, " +
                 " AccountNumberFifth = @AccountNumberFifth " +
                 " Where " +
                 " VoucherNumber = @OldVoucherNumber " +
                 " And " +
                 " CompanyTransactionKindNo = @OldCompanyTransactionKindNo " +
                 " And " +
                 " TransactionKindNo = @OldTransactionKindNo " +
                 " And " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CompanyYear = @CompanyYear " +
                 " And " +
                 " RowNumber = @RowNumber " +
                 " And " +
                 " ChequeNumber = @ChequeNumber " +
                 " And " +
                 " sChequeDate = @sChequeDate " +
                 " And " +
                 " ChequeAmount = @ChequeAmount " +
                 " And " +
                 " AccountNumberThird = @AccountNumberThird "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@OldVoucherNumber", OldVoucherNumber)
                 , new SqlParameter("@OldCompanyTransactionKindNo", OldCompanyTransactionKindNo)
                 , new SqlParameter("@OldTransactionKindNo", OldTransactionKindNo)
                 , new SqlParameter("@OldVHI", OldVHI)
                 , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                 , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                 , new SqlParameter("@VoucherDate", VoucherDate)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                 , new SqlParameter("@VHI", VHI)
                 , new SqlParameter("@ChequeCase", ChequeCase)
                 , new SqlParameter("@AccountNumberSecond", AccountNumberSecond)
                 , new SqlParameter("@Remark", Remark)
                 , new SqlParameter("@InsUserID", InsUserID)
                 , new SqlParameter("@InsDateTime", InsDateTime)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                 , new SqlParameter("@RowNumber", RowNumber)
                 , new SqlParameter("@AccountNumberFifth", AccountNumberFifth)
                 , new SqlParameter("@ChequeNumber", ChequeNumber)
                 , new SqlParameter("@sChequeDate", sChequeDate)
                 , new SqlParameter("@ChequeAmount", ChequeAmount)
                 , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                 );
        }
        public void UpdatePaymentPaperEndorsement(int CompanyID, int CompanyYear, int RowNumber, string OldVoucherNumber, int OldCompanyTransactionKindNo,
                                                      int OldTransactionKindNo, int OldVHI, int ChequeCase, string Remark, string InsUserID, DateTime InsDateTime,
                                                      string ChequeNumber, string sChequeDate, double ChequeAmount, string AccountNumberThird)
        {
            _context.Database.ExecuteSqlCommand(
                 " Update Papers " +
                 " Set " +
                 " ChequeCase = @ChequeCase, " +
                 " Remark = @Remark, " +
                 " InsUserID = @InsUserID, " +
                 " InsDateTime = @InsDateTime " +
                 " Where " +
                 " VoucherNumber = @OldVoucherNumber " +
                 " And " +
                 " CompanyTransactionKindNo = @OldCompanyTransactionKindNo " +
                 " And " +
                 " TransactionKindNo = @OldTransactionKindNo " +
                 " And " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CompanyYear = @CompanyYear " +
                 " And " +
                 " RowNumber = @RowNumber " +
                 " And " +
                 " ChequeNumber = @ChequeNumber " +
                 " And " +
                 " sChequeDate = @sChequeDate " +
                 " And " +
                 " ChequeAmount = @ChequeAmount " +
                 " And " +
                 " AccountNumberThird = @AccountNumberThird "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@OldVoucherNumber", OldVoucherNumber)
                 , new SqlParameter("@OldCompanyTransactionKindNo", OldCompanyTransactionKindNo)
                 , new SqlParameter("@OldTransactionKindNo", OldTransactionKindNo)
                 , new SqlParameter("@OldVHI", OldVHI)
                 , new SqlParameter("@ChequeCase", ChequeCase)
                 , new SqlParameter("@Remark", Remark)
                 , new SqlParameter("@InsUserID", InsUserID)
                 , new SqlParameter("@InsDateTime", InsDateTime)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                 , new SqlParameter("@RowNumber", RowNumber)
                 , new SqlParameter("@ChequeNumber", ChequeNumber)
                 , new SqlParameter("@sChequeDate", sChequeDate)
                 , new SqlParameter("@ChequeAmount", ChequeAmount)
                 , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                 );
        }
        public void UpdateDrawingPaperUnderCollection(int CompanyID, int CompanyYear, int RowNumber, string OldVoucherNumber, int OldCompanyTransactionKindNo, int OldTransactionKindNo, int OldVHI,
                                int CompanyTransactionKindNo, int TransactionKindNo, DateTime VoucherDate, string VoucherNumber, int VHI, int ChequeCase,
                                string Remark, string InsUserID, DateTime InsDateTime, string UnderReturnNote, string ChequeNumber,
                                string sChequeDate, double ChequeAmount, string AccountNumberThird)
        {
            _context.Database.ExecuteSqlCommand(
                 " Update Papers " +
                 " Set " +
                 " OldVoucherNumber = @OldVoucherNumber, " +
                 " OldCompanyTransactionKindNo = @OldCompanyTransactionKindNo, " +
                 " OldTransactionKindNo = @OldTransactionKindNo, " +
                 " OldVHI = @OldVHI, " +
                 " CompanyTransactionKindNo = @CompanyTransactionKindNo, " +
                 " TransactionKindNo = @TransactionKindNo, " +
                 " VoucherDate = @VoucherDate, " +
                 " VoucherNumber = @VoucherNumber, " +
                 " VHI = @VHI, " +
                 " ChequeCase = @ChequeCase, " +
                 " Remark = @Remark, " +
                 " InsUserID = @InsUserID, " +
                 " InsDateTime = @InsDateTime, " +
                 " UnderReturnNote = @UnderReturnNote " +
                 " Where " +
                 " VoucherNumber = @OldVoucherNumber " +
                 " And " +
                 " CompanyTransactionKindNo = @OldCompanyTransactionKindNo " +
                 " And " +
                 " TransactionKindNo = @OldTransactionKindNo " +
                 " And " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CompanyYear = @CompanyYear " +
                 " And " +
                 " RowNumber = @RowNumber " +
                 " And " +
                 " ChequeNumber = @ChequeNumber " +
                 " And " +
                 " sChequeDate = @sChequeDate " +
                 " And " +
                 " ChequeAmount = @ChequeAmount " +
                 " And " +
                 " AccountNumberThird = @AccountNumberThird "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@OldVoucherNumber", OldVoucherNumber)
                 , new SqlParameter("@OldCompanyTransactionKindNo", OldCompanyTransactionKindNo)
                 , new SqlParameter("@OldTransactionKindNo", OldTransactionKindNo)
                 , new SqlParameter("@OldVHI", OldVHI)
                 , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                 , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                 , new SqlParameter("@VoucherDate", VoucherDate)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                 , new SqlParameter("@VHI", VHI)
                 , new SqlParameter("@ChequeCase", ChequeCase)
                 , new SqlParameter("@UnderReturnNote", UnderReturnNote)
                 , new SqlParameter("@Remark", Remark)
                 , new SqlParameter("@InsUserID", InsUserID)
                 , new SqlParameter("@InsDateTime", InsDateTime)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                 , new SqlParameter("@RowNumber", RowNumber)
                 , new SqlParameter("@ChequeNumber", ChequeNumber)
                 , new SqlParameter("@sChequeDate", sChequeDate)
                 , new SqlParameter("@ChequeAmount", ChequeAmount)
                 , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                 );
        }
        public void UpdateReturnPaperUnderCollection(int CompanyID, int CompanyYear, int RowNumber, string OldVoucherNumber, int OldCompanyTransactionKindNo, int OldTransactionKindNo, int OldVHI,
                                int CompanyTransactionKindNo, int TransactionKindNo, DateTime VoucherDate, string VoucherNumber, int VHI, int ChequeCase,
                                string Remark, string InsUserID, DateTime InsDateTime, string ReturnNote, string ChequeNumber, string sChequeDate, double ChequeAmount, string AccountNumberThird)
        {
            _context.Database.ExecuteSqlCommand(
                 " Update Papers " +
                 " Set " +
                 " OldVoucherNumber = @OldVoucherNumber, " +
                 " OldCompanyTransactionKindNo = @OldCompanyTransactionKindNo, " +
                 " OldTransactionKindNo = @OldTransactionKindNo, " +
                 " OldVHI = @OldVHI, " +
                 " CompanyTransactionKindNo = @CompanyTransactionKindNo, " +
                 " TransactionKindNo = @TransactionKindNo, " +
                 " VoucherDate = @VoucherDate, " +
                 " VoucherNumber = @VoucherNumber, " +
                 " VHI = @VHI, " +
                 " ChequeCase = @ChequeCase, " +
                 " Remark = @Remark, " +
                 " InsUserID = @InsUserID, " +
                 " InsDateTime = @InsDateTime, " +
                 " ReturnNote = @ReturnNote " +
                 " Where " +
                 " VoucherNumber = @OldVoucherNumber " +
                 " And " +
                 " CompanyTransactionKindNo = @OldCompanyTransactionKindNo " +
                 " And " +
                 " TransactionKindNo = @OldTransactionKindNo " +
                 " And " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CompanyYear = @CompanyYear " +
                 " And " +
                 " RowNumber = @RowNumber " +
                 " And " +
                 " ChequeNumber = @ChequeNumber " +
                 " And " +
                 " sChequeDate = @sChequeDate " +
                 " And " +
                 " ChequeAmount = @ChequeAmount " +
                 " And " +
                 " AccountNumberThird = @AccountNumberThird "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@OldVoucherNumber", OldVoucherNumber)
                 , new SqlParameter("@OldCompanyTransactionKindNo", OldCompanyTransactionKindNo)
                 , new SqlParameter("@OldTransactionKindNo", OldTransactionKindNo)
                 , new SqlParameter("@OldVHI", OldVHI)
                 , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                 , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                 , new SqlParameter("@VoucherDate", VoucherDate)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                 , new SqlParameter("@VHI", VHI)
                 , new SqlParameter("@ChequeCase", ChequeCase)
                 , new SqlParameter("@ReturnNote", ReturnNote)
                 , new SqlParameter("@Remark", Remark)
                 , new SqlParameter("@InsUserID", InsUserID)
                 , new SqlParameter("@InsDateTime", InsDateTime)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                 , new SqlParameter("@RowNumber", RowNumber)
                 , new SqlParameter("@ChequeNumber", ChequeNumber)
                 , new SqlParameter("@sChequeDate", sChequeDate)
                 , new SqlParameter("@ChequeAmount", ChequeAmount)
                 , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                 );
        }
        public void UpdateReturngPaperClearingDeposit(int CompanyID, int CompanyYear, int RowNumber, string OldVoucherNumber, int OldCompanyTransactionKindNo, int OldTransactionKindNo, int OldVHI,
                                int CompanyTransactionKindNo, int TransactionKindNo, DateTime VoucherDate, string VoucherNumber, int VHI, int ChequeCase,
                                string Remark, string InsUserID, DateTime InsDateTime, string ReturnNote, string ChequeNumber, string sChequeDate, double ChequeAmount, string AccountNumberThird)
        {
            _context.Database.ExecuteSqlCommand(
                 " Update Papers " +
                 " Set " +
                 " OldVoucherNumber = @OldVoucherNumber, " +
                 " OldCompanyTransactionKindNo = @OldCompanyTransactionKindNo, " +
                 " OldTransactionKindNo = @OldTransactionKindNo, " +
                 " OldVHI = @OldVHI, " +
                 " CompanyTransactionKindNo = @CompanyTransactionKindNo, " +
                 " TransactionKindNo = @TransactionKindNo, " +
                 " VoucherDate = @VoucherDate, " +
                 " VoucherNumber = @VoucherNumber, " +
                 " VHI = @VHI, " +
                 " ChequeCase = @ChequeCase, " +
                 " Remark = @Remark, " +
                 " InsUserID = @InsUserID, " +
                 " InsDateTime = @InsDateTime, " +
                 " ReturnNote = @ReturnNote " +
                 " Where " +
                 " VoucherNumber = @OldVoucherNumber " +
                 " And " +
                 " CompanyTransactionKindNo = @OldCompanyTransactionKindNo " +
                 " And " +
                 " TransactionKindNo = @OldTransactionKindNo " +
                 " And " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CompanyYear = @CompanyYear " +
                 " And " +
                 " RowNumber = @RowNumber " +
                 " And " +
                 " ChequeNumber = @ChequeNumber " +
                 " And " +
                 " sChequeDate = @sChequeDate " +
                 " And " +
                 " ChequeAmount = @ChequeAmount " +
                 " And " +
                 " AccountNumberThird = @AccountNumberThird "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@OldVoucherNumber", OldVoucherNumber)
                 , new SqlParameter("@OldCompanyTransactionKindNo", OldCompanyTransactionKindNo)
                 , new SqlParameter("@OldTransactionKindNo", OldTransactionKindNo)
                 , new SqlParameter("@OldVHI", OldVHI)
                 , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                 , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                 , new SqlParameter("@VoucherDate", VoucherDate)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                 , new SqlParameter("@VHI", VHI)
                 , new SqlParameter("@ChequeCase", ChequeCase)
                 , new SqlParameter("@ReturnNote", ReturnNote)
                 , new SqlParameter("@Remark", Remark)
                 , new SqlParameter("@InsUserID", InsUserID)
                 , new SqlParameter("@InsDateTime", InsDateTime)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                 , new SqlParameter("@RowNumber", RowNumber)
                 , new SqlParameter("@ChequeNumber", ChequeNumber)
                 , new SqlParameter("@sChequeDate", sChequeDate)
                 , new SqlParameter("@ChequeAmount", ChequeAmount)
                 , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                 );
        }
        public void UpdateReturngPaperEndorsement(int CompanyID, int CompanyYear, int RowNumber, string OldVoucherNumber, int OldCompanyTransactionKindNo, int OldTransactionKindNo, int OldVHI,
                                int CompanyTransactionKindNo, int TransactionKindNo, DateTime VoucherDate, string VoucherNumber, int VHI, int ChequeCase,
                                string Remark, string InsUserID, DateTime InsDateTime, string EndorReturnNote, string ChequeNumber, string sChequeDate, double ChequeAmount, string AccountNumberThird)
        {
            _context.Database.ExecuteSqlCommand(
                 " Update Papers " +
                 " Set " +
                 " OldVoucherNumber = @OldVoucherNumber, " +
                 " OldCompanyTransactionKindNo = @OldCompanyTransactionKindNo, " +
                 " OldTransactionKindNo = @OldTransactionKindNo, " +
                 " OldVHI = @OldVHI, " +
                 " CompanyTransactionKindNo = @CompanyTransactionKindNo, " +
                 " TransactionKindNo = @TransactionKindNo, " +
                 " VoucherDate = @VoucherDate, " +
                 " VoucherNumber = @VoucherNumber, " +
                 " VHI = @VHI, " +
                 " ChequeCase = @ChequeCase, " +
                 " Remark = @Remark, " +
                 " InsUserID = @InsUserID, " +
                 " InsDateTime = @InsDateTime, " +
                 " EndorReturnNote = @EndorReturnNote " +
                 " Where " +
                 " VoucherNumber = @OldVoucherNumber " +
                 " And " +
                 " CompanyTransactionKindNo = @OldCompanyTransactionKindNo " +
                 " And " +
                 " TransactionKindNo = @OldTransactionKindNo " +
                 " And " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CompanyYear = @CompanyYear " +
                 " And " +
                 " RowNumber = @RowNumber " +
                 " And " +
                 " ChequeNumber = @ChequeNumber " +
                 " And " +
                 " sChequeDate = @sChequeDate " +
                 " And " +
                 " ChequeAmount = @ChequeAmount " +
                 " And " +
                 " AccountNumberThird = @AccountNumberThird "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@OldVoucherNumber", OldVoucherNumber)
                 , new SqlParameter("@OldCompanyTransactionKindNo", OldCompanyTransactionKindNo)
                 , new SqlParameter("@OldTransactionKindNo", OldTransactionKindNo)
                 , new SqlParameter("@OldVHI", OldVHI)
                 , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                 , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                 , new SqlParameter("@VoucherDate", VoucherDate)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                 , new SqlParameter("@VHI", VHI)
                 , new SqlParameter("@ChequeCase", ChequeCase)
                 , new SqlParameter("@EndorReturnNote", EndorReturnNote)
                 , new SqlParameter("@Remark", Remark)
                 , new SqlParameter("@InsUserID", InsUserID)
                 , new SqlParameter("@InsDateTime", InsDateTime)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                 , new SqlParameter("@RowNumber", RowNumber)
                 , new SqlParameter("@ChequeNumber", ChequeNumber)
                 , new SqlParameter("@sChequeDate", sChequeDate)
                 , new SqlParameter("@ChequeAmount", ChequeAmount)
                 , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                 );
        }
        public void UpdateReturnToPaidAccount(int CompanyID, int CompanyYear, int RowNumber, string OldVoucherNumber, int OldCompanyTransactionKindNo,
                                                      int OldTransactionKindNo, int OldVHI, int ChequeCase, string Remark, string InsUserID, DateTime InsDateTime,
                                                      string ChequeNumber, string sChequeDate, double ChequeAmount, string AccountNumberThird, string UnderReturnCustomerNote)
        {
            _context.Database.ExecuteSqlCommand(
                 " Update Papers " +
                 " Set " +
                 " ChequeCase = @ChequeCase, " +
                 " Remark = @Remark, " +
                 " InsUserID = @InsUserID, " +
                 " InsDateTime = @InsDateTime, " +
                 " UnderReturnCustomerNote = @UnderReturnCustomerNote " +
                 " Where " +
                 " VoucherNumber = @OldVoucherNumber " +
                 " And " +
                 " CompanyTransactionKindNo = @OldCompanyTransactionKindNo " +
                 " And " +
                 " TransactionKindNo = @OldTransactionKindNo " +
                 " And " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CompanyYear = @CompanyYear " +
                 " And " +
                 " RowNumber = @RowNumber " +
                 " And " +
                 " ChequeNumber = @ChequeNumber " +
                 " And " +
                 " sChequeDate = @sChequeDate " +
                 " And " +
                 " ChequeAmount = @ChequeAmount " +
                 " And " +
                 " AccountNumberThird = @AccountNumberThird "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@OldVoucherNumber", OldVoucherNumber)
                 , new SqlParameter("@OldCompanyTransactionKindNo", OldCompanyTransactionKindNo)
                 , new SqlParameter("@OldTransactionKindNo", OldTransactionKindNo)
                 , new SqlParameter("@OldVHI", OldVHI)
                 , new SqlParameter("@ChequeCase", ChequeCase)
                 , new SqlParameter("@Remark", Remark)
                 , new SqlParameter("@InsUserID", InsUserID)
                 , new SqlParameter("@InsDateTime", InsDateTime)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                 , new SqlParameter("@RowNumber", RowNumber)
                 , new SqlParameter("@ChequeNumber", ChequeNumber)
                 , new SqlParameter("@sChequeDate", sChequeDate)
                 , new SqlParameter("@ChequeAmount", ChequeAmount)
                 , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                 , new SqlParameter("@UnderReturnCustomerNote", UnderReturnCustomerNote)
                 );
        }
        public void UpdateReturnToPaidAccount1(int CompanyID, int CompanyYear, int RowNumber, string OldVoucherNumber, int OldCompanyTransactionKindNo,
                                                      int OldTransactionKindNo, int OldVHI, int ChequeCase, string Remark, string InsUserID, DateTime InsDateTime,
                                                      string ChequeNumber, string sChequeDate, double ChequeAmount, string AccountNumberThird, string ReturnCustomerNote)
        {
            _context.Database.ExecuteSqlCommand(
                 " Update Papers " +
                 " Set " +
                 " ChequeCase = @ChequeCase, " +
                 " Remark = @Remark, " +
                 " InsUserID = @InsUserID, " +
                 " InsDateTime = @InsDateTime, " +
                 " ReturnCustomerNote = @ReturnCustomerNote " +
                 " Where " +
                 " VoucherNumber = @OldVoucherNumber " +
                 " And " +
                 " CompanyTransactionKindNo = @OldCompanyTransactionKindNo " +
                 " And " +
                 " TransactionKindNo = @OldTransactionKindNo " +
                 " And " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CompanyYear = @CompanyYear " +
                 " And " +
                 " RowNumber = @RowNumber " +
                 " And " +
                 " ChequeNumber = @ChequeNumber " +
                 " And " +
                 " sChequeDate = @sChequeDate " +
                 " And " +
                 " ChequeAmount = @ChequeAmount " +
                 " And " +
                 " AccountNumberThird = @AccountNumberThird "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@OldVoucherNumber", OldVoucherNumber)
                 , new SqlParameter("@OldCompanyTransactionKindNo", OldCompanyTransactionKindNo)
                 , new SqlParameter("@OldTransactionKindNo", OldTransactionKindNo)
                 , new SqlParameter("@OldVHI", OldVHI)
                 , new SqlParameter("@ChequeCase", ChequeCase)
                 , new SqlParameter("@Remark", Remark)
                 , new SqlParameter("@InsUserID", InsUserID)
                 , new SqlParameter("@InsDateTime", InsDateTime)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                 , new SqlParameter("@RowNumber", RowNumber)
                 , new SqlParameter("@ChequeNumber", ChequeNumber)
                 , new SqlParameter("@sChequeDate", sChequeDate)
                 , new SqlParameter("@ChequeAmount", ChequeAmount)
                 , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                 , new SqlParameter("@ReturnCustomerNote", ReturnCustomerNote)
                 );
        }
        public void UpdateTransferToCourt(int CompanyID, int CompanyYear, int RowNumber, string OldVoucherNumber, int OldCompanyTransactionKindNo,
                                                      int OldTransactionKindNo, int OldVHI, int ChequeCase, string Remark, string InsUserID, DateTime InsDateTime,
                                                      string ChequeNumber, string sChequeDate, double ChequeAmount, string AccountNumberThird, string CaseNumber)
        {
            _context.Database.ExecuteSqlCommand(
                 " Update Papers " +
                 " Set " +
                 " ChequeCase = @ChequeCase, " +
                 " Remark = @Remark, " +
                 " InsUserID = @InsUserID, " +
                 " InsDateTime = @InsDateTime, " +
                 " CaseNumber = @CaseNumber " +
                 " Where " +
                 " VoucherNumber = @OldVoucherNumber " +
                 " And " +
                 " CompanyTransactionKindNo = @OldCompanyTransactionKindNo " +
                 " And " +
                 " TransactionKindNo = @OldTransactionKindNo " +
                 " And " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CompanyYear = @CompanyYear " +
                 " And " +
                 " RowNumber = @RowNumber " +
                 " And " +
                 " ChequeNumber = @ChequeNumber " +
                 " And " +
                 " sChequeDate = @sChequeDate " +
                 " And " +
                 " ChequeAmount = @ChequeAmount " +
                 " And " +
                 " AccountNumberThird = @AccountNumberThird "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@OldVoucherNumber", OldVoucherNumber)
                 , new SqlParameter("@OldCompanyTransactionKindNo", OldCompanyTransactionKindNo)
                 , new SqlParameter("@OldTransactionKindNo", OldTransactionKindNo)
                 , new SqlParameter("@OldVHI", OldVHI)
                 , new SqlParameter("@ChequeCase", ChequeCase)
                 , new SqlParameter("@Remark", Remark)
                 , new SqlParameter("@InsUserID", InsUserID)
                 , new SqlParameter("@InsDateTime", InsDateTime)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                 , new SqlParameter("@RowNumber", RowNumber)
                 , new SqlParameter("@ChequeNumber", ChequeNumber)
                 , new SqlParameter("@sChequeDate", sChequeDate)
                 , new SqlParameter("@ChequeAmount", ChequeAmount)
                 , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                 , new SqlParameter("@CaseNumber", CaseNumber)
                 );
        }
        public void UpdateCompromisePaper(int CompanyID, int CompanyYear, int RowNumber, string OldVoucherNumber, int OldCompanyTransactionKindNo,
                                                      int OldTransactionKindNo, int OldVHI, int ChequeCase, string Remark, string InsUserID, DateTime InsDateTime,
                                                      string ChequeNumber, string sChequeDate, double ChequeAmount, string AccountNumberThird)
        {
            _context.Database.ExecuteSqlCommand(
                 " Update Papers " +
                 " Set " +
                 " ChequeCase = @ChequeCase, " +
                 " Remark = @Remark, " +
                 " InsUserID = @InsUserID, " +
                 " InsDateTime = @InsDateTime " +
                 " Where " +
                 " VoucherNumber = @OldVoucherNumber " +
                 " And " +
                 " CompanyTransactionKindNo = @OldCompanyTransactionKindNo " +
                 " And " +
                 " TransactionKindNo = @OldTransactionKindNo " +
                 " And " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CompanyYear = @CompanyYear " +
                 " And " +
                 " RowNumber = @RowNumber " +
                 " And " +
                 " ChequeNumber = @ChequeNumber " +
                 " And " +
                 " sChequeDate = @sChequeDate " +
                 " And " +
                 " ChequeAmount = @ChequeAmount " +
                 " And " +
                 " AccountNumberThird = @AccountNumberThird "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@OldVoucherNumber", OldVoucherNumber)
                 , new SqlParameter("@OldCompanyTransactionKindNo", OldCompanyTransactionKindNo)
                 , new SqlParameter("@OldTransactionKindNo", OldTransactionKindNo)
                 , new SqlParameter("@OldVHI", OldVHI)
                 , new SqlParameter("@ChequeCase", ChequeCase)
                 , new SqlParameter("@Remark", Remark)
                 , new SqlParameter("@InsUserID", InsUserID)
                 , new SqlParameter("@InsDateTime", InsDateTime)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                 , new SqlParameter("@RowNumber", RowNumber)
                 , new SqlParameter("@ChequeNumber", ChequeNumber)
                 , new SqlParameter("@sChequeDate", sChequeDate)
                 , new SqlParameter("@ChequeAmount", ChequeAmount)
                 , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                 );
        }
        public void UpdateCaseNumber(int CompanyID, int CompanyYear, int RowNumber, string OldVoucherNumber, int OldCompanyTransactionKindNo,
                                               int OldTransactionKindNo, int OldVHI, string CaseNumber, string InsUserID, DateTime InsDateTime,
                                               string ChequeNumber, string sChequeDate, double ChequeAmount, string AccountNumberThird)
        {
            _context.Database.ExecuteSqlCommand(
                 " Update Papers " +
                 " Set " +
                 " CaseNumber = @CaseNumber, " +
                 " InsUserID = @InsUserID, " +
                 " InsDateTime = @InsDateTime " +
                 " Where " +
                 " VoucherNumber = @OldVoucherNumber " +
                 " And " +
                 " CompanyTransactionKindNo = @OldCompanyTransactionKindNo " +
                 " And " +
                 " TransactionKindNo = @OldTransactionKindNo " +
                 " And " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CompanyYear = @CompanyYear " +
                 " And " +
                 " RowNumber = @RowNumber " +
                 " And " +
                 " ChequeNumber = @ChequeNumber " +
                 " And " +
                 " sChequeDate = @sChequeDate " +
                 " And " +
                 " ChequeAmount = @ChequeAmount " +
                 " And " +
                 " AccountNumberThird = @AccountNumberThird "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@OldVoucherNumber", OldVoucherNumber)
                 , new SqlParameter("@OldCompanyTransactionKindNo", OldCompanyTransactionKindNo)
                 , new SqlParameter("@OldTransactionKindNo", OldTransactionKindNo)
                 , new SqlParameter("@OldVHI", OldVHI)
                 , new SqlParameter("@CaseNumber", CaseNumber)
                 , new SqlParameter("@InsUserID", InsUserID)
                 , new SqlParameter("@InsDateTime", InsDateTime)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                 , new SqlParameter("@RowNumber", RowNumber)
                 , new SqlParameter("@ChequeNumber", ChequeNumber)
                 , new SqlParameter("@sChequeDate", sChequeDate)
                 , new SqlParameter("@ChequeAmount", ChequeAmount)
                 , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                 );
        }
        public void UpdatePostdatedCheque(int CompanyID, int CompanyYear, int RowNumber, string OldVoucherNumber, int OldCompanyTransactionKindNo, int OldTransactionKindNo, int OldVHI,
                                int CompanyTransactionKindNo, int TransactionKindNo, DateTime VoucherDate, string VoucherNumber, int VHI, int ChequeCase,
                                string Remark, string InsUserID, DateTime InsDateTime, string ChequeNumber, string sChequeDate, double ChequeAmount, string AccountNumberThird)
        {
            _context.Database.ExecuteSqlCommand(
                 " Update Papers " +
                 " Set " +
                 " OldVoucherNumber = @OldVoucherNumber, " +
                 " OldCompanyTransactionKindNo = @OldCompanyTransactionKindNo, " +
                 " OldTransactionKindNo = @OldTransactionKindNo, " +
                 " OldVHI = @OldVHI, " +
                 " CompanyTransactionKindNo = @CompanyTransactionKindNo, " +
                 " TransactionKindNo = @TransactionKindNo, " +
                 " VoucherDate = @VoucherDate, " +
                 " VoucherNumber = @VoucherNumber, " +
                 " VHI = @VHI, " +
                 " ChequeCase = @ChequeCase, " +
                 " Remark = @Remark, " +
                 " InsUserID = @InsUserID, " +
                 " InsDateTime = @InsDateTime " +
                 " Where " +
                 " VoucherNumber = @OldVoucherNumber " +
                 " And " +
                 " CompanyTransactionKindNo = @OldCompanyTransactionKindNo " +
                 " And " +
                 " TransactionKindNo = @OldTransactionKindNo " +
                 " And " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CompanyYear = @CompanyYear " +
                 " And " +
                 " RowNumber = @RowNumber " +
                 " And " +
                 " ChequeNumber = @ChequeNumber " +
                 " And " +
                 " sChequeDate = @sChequeDate " +
                 " And " +
                 " ChequeAmount = @ChequeAmount " +
                 " And " +
                 " AccountNumberThird = @AccountNumberThird "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@OldVoucherNumber", OldVoucherNumber)
                 , new SqlParameter("@OldCompanyTransactionKindNo", OldCompanyTransactionKindNo)
                 , new SqlParameter("@OldTransactionKindNo", OldTransactionKindNo)
                 , new SqlParameter("@OldVHI", OldVHI)
                 , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                 , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                 , new SqlParameter("@VoucherDate", VoucherDate)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                 , new SqlParameter("@VHI", VHI)
                 , new SqlParameter("@ChequeCase", ChequeCase)
                 , new SqlParameter("@Remark", Remark)
                 , new SqlParameter("@InsUserID", InsUserID)
                 , new SqlParameter("@InsDateTime", InsDateTime)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                 , new SqlParameter("@RowNumber", RowNumber)
                 , new SqlParameter("@ChequeNumber", ChequeNumber)
                 , new SqlParameter("@sChequeDate", sChequeDate)
                 , new SqlParameter("@ChequeAmount", ChequeAmount)
                 , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                 );
        }
        public void UpdateReturnPaidPostdatedCheque(int CompanyID, int CompanyYear, int RowNumber, string OldVoucherNumber, int OldCompanyTransactionKindNo, int OldTransactionKindNo, int OldVHI,
                                int CompanyTransactionKindNo, int TransactionKindNo, DateTime VoucherDate, string VoucherNumber, int VHI, int ChequeCase,
                                string Remark, string InsUserID, DateTime InsDateTime, string ChequeNumber, string sChequeDate, double ChequeAmount, string AccountNumberThird, string PaymentPaidReturnNote)
        {
            _context.Database.ExecuteSqlCommand(
                 " Update Papers " +
                 " Set " +
                 " OldVoucherNumber = @OldVoucherNumber, " +
                 " OldCompanyTransactionKindNo = @OldCompanyTransactionKindNo, " +
                 " OldTransactionKindNo = @OldTransactionKindNo, " +
                 " OldVHI = @OldVHI, " +
                 " CompanyTransactionKindNo = @CompanyTransactionKindNo, " +
                 " TransactionKindNo = @TransactionKindNo, " +
                 " VoucherDate = @VoucherDate, " +
                 " VoucherNumber = @VoucherNumber, " +
                 " VHI = @VHI, " +
                 " ChequeCase = @ChequeCase, " +
                 " Remark = @Remark, " +
                 " PaymentPaidReturnNote = @PaymentPaidReturnNote, " +
                 " InsUserID = @InsUserID, " +
                 " InsDateTime = @InsDateTime " +
                 " Where " +
                 " VoucherNumber = @OldVoucherNumber " +
                 " And " +
                 " CompanyTransactionKindNo = @OldCompanyTransactionKindNo " +
                 " And " +
                 " TransactionKindNo = @OldTransactionKindNo " +
                 " And " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CompanyYear = @CompanyYear " +
                 " And " +
                 " RowNumber = @RowNumber " +
                 " And " +
                 " ChequeNumber = @ChequeNumber " +
                 " And " +
                 " sChequeDate = @sChequeDate " +
                 " And " +
                 " ChequeAmount = @ChequeAmount " +
                 " And " +
                 " AccountNumberThird = @AccountNumberThird "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@OldVoucherNumber", OldVoucherNumber)
                 , new SqlParameter("@OldCompanyTransactionKindNo", OldCompanyTransactionKindNo)
                 , new SqlParameter("@OldTransactionKindNo", OldTransactionKindNo)
                 , new SqlParameter("@OldVHI", OldVHI)
                 , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                 , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                 , new SqlParameter("@VoucherDate", VoucherDate)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                 , new SqlParameter("@VHI", VHI)
                 , new SqlParameter("@ChequeCase", ChequeCase)
                 , new SqlParameter("@Remark", Remark)
                 , new SqlParameter("@InsUserID", InsUserID)
                 , new SqlParameter("@InsDateTime", InsDateTime)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                 , new SqlParameter("@RowNumber", RowNumber)
                 , new SqlParameter("@ChequeNumber", ChequeNumber)
                 , new SqlParameter("@sChequeDate", sChequeDate)
                 , new SqlParameter("@ChequeAmount", ChequeAmount)
                 , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                 , new SqlParameter("@PaymentPaidReturnNote", PaymentPaidReturnNote)
                 );
        }
        public void UpdateReturnPostdatedCheque(int CompanyID, int CompanyYear, int RowNumber, string OldVoucherNumber, int OldCompanyTransactionKindNo, int OldTransactionKindNo, int OldVHI,
                                int CompanyTransactionKindNo, int TransactionKindNo, DateTime VoucherDate, string VoucherNumber, int VHI, int ChequeCase,
                                string Remark, string InsUserID, DateTime InsDateTime, string ChequeNumber, string sChequeDate, double ChequeAmount, string AccountNumberThird, string PaymentReturnNote)
        {
            _context.Database.ExecuteSqlCommand(
                 " Update Papers " +
                 " Set " +
                 " OldVoucherNumber = @OldVoucherNumber, " +
                 " OldCompanyTransactionKindNo = @OldCompanyTransactionKindNo, " +
                 " OldTransactionKindNo = @OldTransactionKindNo, " +
                 " OldVHI = @OldVHI, " +
                 " CompanyTransactionKindNo = @CompanyTransactionKindNo, " +
                 " TransactionKindNo = @TransactionKindNo, " +
                 " VoucherDate = @VoucherDate, " +
                 " VoucherNumber = @VoucherNumber, " +
                 " VHI = @VHI, " +
                 " ChequeCase = @ChequeCase, " +
                 " Remark = @Remark, " +
                 " PaymentReturnNote = @PaymentReturnNote, " +
                 " InsUserID = @InsUserID, " +
                 " InsDateTime = @InsDateTime " +
                 " Where " +
                 " VoucherNumber = @OldVoucherNumber " +
                 " And " +
                 " CompanyTransactionKindNo = @OldCompanyTransactionKindNo " +
                 " And " +
                 " TransactionKindNo = @OldTransactionKindNo " +
                 " And " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CompanyYear = @CompanyYear " +
                 " And " +
                 " RowNumber = @RowNumber " +
                 " And " +
                 " ChequeNumber = @ChequeNumber " +
                 " And " +
                 " sChequeDate = @sChequeDate " +
                 " And " +
                 " ChequeAmount = @ChequeAmount " +
                 " And " +
                 " AccountNumberThird = @AccountNumberThird "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@OldVoucherNumber", OldVoucherNumber)
                 , new SqlParameter("@OldCompanyTransactionKindNo", OldCompanyTransactionKindNo)
                 , new SqlParameter("@OldTransactionKindNo", OldTransactionKindNo)
                 , new SqlParameter("@OldVHI", OldVHI)
                 , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                 , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                 , new SqlParameter("@VoucherDate", VoucherDate)
                 , new SqlParameter("@VoucherNumber", VoucherNumber)
                 , new SqlParameter("@VHI", VHI)
                 , new SqlParameter("@ChequeCase", ChequeCase)
                 , new SqlParameter("@Remark", Remark)
                 , new SqlParameter("@InsUserID", InsUserID)
                 , new SqlParameter("@InsDateTime", InsDateTime)
                 , new SqlParameter("@CompanyYear", CompanyYear)
                 , new SqlParameter("@RowNumber", RowNumber)
                 , new SqlParameter("@ChequeNumber", ChequeNumber)
                 , new SqlParameter("@sChequeDate", sChequeDate)
                 , new SqlParameter("@ChequeAmount", ChequeAmount)
                 , new SqlParameter("@AccountNumberThird", AccountNumberThird)
                 , new SqlParameter("@PaymentReturnNote", PaymentReturnNote)
                 );
        }

        public DefinitionAssetSiteVM CheckDefinitionAssetSite(int CompanyID, int SerialID)
        {
            try
            {
                return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                 " Select * From DefinitionAssetSites " +
                 " Where " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " Id = @SerialID "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@SerialID", SerialID)

            ).FirstOrDefault();
            }
            catch
            {
                return new DefinitionAssetSiteVM();
            }


        }
        public IEnumerable<DefinitionAssetSiteVM> GetAssetSiteReport(int CompanyID, Boolean ApproveDeliveryDate, Boolean ApproveTransferDate, DateTime FromTransferDate,
            DateTime ToTransferDate, DateTime FromDeliveryDate, DateTime ToDeliveryDate)
        {
            if (ApproveTransferDate)
            {
                try
                {
                    return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                    " Select Distinct DAS.*, A.AssetCost, A.CombinedConsum, A.BookValue From( " +
                    " SELECT DAS.Id As SerialID, DAS.CompanyID, DAS.AssetID, DAS.AssetTypeID, DAS.AdministrationID, DAS.CircleID, DAS.SectionID, " +
                    " DAS.SiteID, DAS.TransferDate, DAS.TrusteeID, DAS.DeliveryDate, " +
                    " ( " +
                       " Select A.AssetName " +
                       " From Assets A " +
                       " Where " +
                       " A.AssetID = DAS.AssetID " +
                       " And " +
                       " A.CompanyID = DAS.CompanyID " +
                     " ) As AssetName, " +
                     " ( " +
                       " Select ATS.[Name] " +
                       " From AssetTypes ATS " +
                       " Where " +
                       " ATS.AssetTypeID = DAS.AssetTypeID " +
                       " And " +
                       " ATS.CompanyID = DAS.CompanyID " +
                     " ) As AssetTypeName, " +
                     " ( " +
                       " Select AA.AdministrationName " +
                       " From AssetAdministrations AA " +
                       " Where " +
                       " AA.AdministrationID = DAS.AdministrationID " +
                       " And " +
                       " AA.CompanyID = DAS.CompanyID " +
                     " ) As AdministrationName, " +
                     " ( " +
                       " Select AC.CircleName " +
                       " From AssetCircles AC " +
                       " Where " +
                       " AC.CircleID = DAS.CircleID " +
                       " And " +
                       " AC.CompanyID = DAS.CompanyID " +
                     " ) As CircleName, " +
                     " ( " +
                       " Select ASS.SectionName " +
                       " From AssetSections ASS " +
                       " Where " +
                       " ASS.SectionID = DAS.SectionID " +
                       " And " +
                       " ASS.CompanyID = DAS.CompanyID " +
                     " ) As SectionName, " +
                     " ( " +
                       " Select ASS.SiteName " +
                       " From AssetSites ASS " +
                       " Where " +
                       " ASS.SiteID = DAS.SiteID " +
                       " And " +
                       " ASS.CompanyID = DAS.CompanyID " +
                     " ) As SiteName, " +
                     " ( " +
                       " Select ATT.TrusteeName " +
                       " From AssetTrustees ATT " +
                       " Where " +
                       " ATT.TrusteeID = DAS.TrusteeID " +
                       " And " +
                       " ATT.CompanyID = DAS.CompanyID " +
                     " )  As TrusteeName, " +
                     " ( " +
                       " Select A.UserName " +
                       " From AspNetUsers A " +
                       " Where " +
                       " A.fCompanyId = DAS.CompanyID " +
                       " And " +
                       " A.Id = DAS.InsUserID " +
                     " ) As DefinitionUserName, " +
                     " ( " +
                       " Select A.UserName " +
                       " From AspNetUsers A " +
                       " Where " +
                       " A.fCompanyId = DAS.CompanyID " +
                       " And " +
                       " A.Id = DAS.DeliveryInsUserID " +
                     " ) As DeliveryUserName " +
                     " From DefinitionAssetSites DAS, " +
                     " ( " +
                       " SELECT MAX(DASS.TransferDate) as TransferDate FROM DefinitionAssetSites DASS Group by AssetID, CompanyID) DASS " +
                       " where " +
                       " DAS.TransferDate = DASS.TransferDate " +
                      " ) As DAS, Assets A, " +
                      " ( " +
                         " SELECT MAX(DASS.Id) as Id FROM DefinitionAssetSites DASS Group by AssetID, CompanyID, TransferDate " +
                      " ) DASS " +
                      " Where " +
                      " DAS.SerialID = DASS.Id " +
                      " And " +
                      " DAS.CompanyID = @CompanyID " +
                      " And " +
                      " A.CompanyID = DAS.CompanyID " +
                      " And " +
                      " A.AssetID = DAS.AssetID " +
                      " And " +
                      " A.FAssetTypeID = DAS.AssetTypeID " +
                      " And " +
                      " cast (datediff (day, 0, DAS.TransferDate) as datetime) >= @FromTransferDate " +
                      " And " +
                      " cast (datediff (day, 0, DAS.TransferDate) as datetime) <= @ToTransferDate " +
                      " Order By DAS.AssetID "
                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@FromTransferDate", FromTransferDate)
                   , new SqlParameter("@ToTransferDate", ToTransferDate)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<DefinitionAssetSiteVM>();
                }
            }
            else if (ApproveDeliveryDate)
            {
                try
                {
                    return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                    " Select Distinct DAS.*, A.AssetCost, A.CombinedConsum, A.BookValue From( " +
                    " SELECT DAS.Id As SerialID, DAS.CompanyID, DAS.AssetID, DAS.AssetTypeID, DAS.AdministrationID, DAS.CircleID, DAS.SectionID, " +
                    " DAS.SiteID, DAS.TransferDate, DAS.TrusteeID, DAS.DeliveryDate, " +
                    " ( " +
                       " Select A.AssetName " +
                       " From Assets A " +
                       " Where " +
                       " A.AssetID = DAS.AssetID " +
                       " And " +
                       " A.CompanyID = DAS.CompanyID " +
                     " ) As AssetName, " +
                     " ( " +
                       " Select ATS.[Name] " +
                       " From AssetTypes ATS " +
                       " Where " +
                       " ATS.AssetTypeID = DAS.AssetTypeID " +
                       " And " +
                       " ATS.CompanyID = DAS.CompanyID " +
                     " ) As AssetTypeName, " +
                     " ( " +
                       " Select AA.AdministrationName " +
                       " From AssetAdministrations AA " +
                       " Where " +
                       " AA.AdministrationID = DAS.AdministrationID " +
                       " And " +
                       " AA.CompanyID = DAS.CompanyID " +
                     " ) As AdministrationName, " +
                     " ( " +
                       " Select AC.CircleName " +
                       " From AssetCircles AC " +
                       " Where " +
                       " AC.CircleID = DAS.CircleID " +
                       " And " +
                       " AC.CompanyID = DAS.CompanyID " +
                     " ) As CircleName, " +
                     " ( " +
                       " Select ASS.SectionName " +
                       " From AssetSections ASS " +
                       " Where " +
                       " ASS.SectionID = DAS.SectionID " +
                       " And " +
                       " ASS.CompanyID = DAS.CompanyID " +
                     " ) As SectionName, " +
                     " ( " +
                       " Select ASS.SiteName " +
                       " From AssetSites ASS " +
                       " Where " +
                       " ASS.SiteID = DAS.SiteID " +
                       " And " +
                       " ASS.CompanyID = DAS.CompanyID " +
                     " ) As SiteName, " +
                     " ( " +
                       " Select ATT.TrusteeName " +
                       " From AssetTrustees ATT " +
                       " Where " +
                       " ATT.TrusteeID = DAS.TrusteeID " +
                       " And " +
                       " ATT.CompanyID = DAS.CompanyID " +
                     " )  As TrusteeName, " +
                     " ( " +
                       " Select A.UserName " +
                       " From AspNetUsers A " +
                       " Where " +
                       " A.fCompanyId = DAS.CompanyID " +
                       " And " +
                       " A.Id = DAS.InsUserID " +
                     " ) As DefinitionUserName, " +
                     " ( " +
                       " Select A.UserName " +
                       " From AspNetUsers A " +
                       " Where " +
                       " A.fCompanyId = DAS.CompanyID " +
                       " And " +
                       " A.Id = DAS.DeliveryInsUserID " +
                     " ) As DeliveryUserName " +
                     " From DefinitionAssetSites DAS, " +
                     " ( " +
                       " SELECT MAX(DASS.TransferDate) as TransferDate FROM DefinitionAssetSites DASS Group by AssetID, CompanyID) DASS " +
                       " where " +
                       " DAS.TransferDate = DASS.TransferDate " +
                      " ) As DAS, Assets A, " +
                      " ( " +
                         " SELECT MAX(DASS.Id) as Id FROM DefinitionAssetSites DASS Group by AssetID, CompanyID, TransferDate " +
                      " ) DASS " +
                      " Where " +
                      " DAS.SerialID = DASS.Id " +
                      " And " +
                      " DAS.CompanyID = @CompanyID " +
                      " And " +
                      " A.CompanyID = DAS.CompanyID " +
                      " And " +
                      " A.AssetID = DAS.AssetID " +
                      " And " +
                      " A.FAssetTypeID = DAS.AssetTypeID " +
                      " And " +
                      " cast (datediff (day, 0, DAS.DeliveryDate) as datetime) >= @FromDeliveryDate " +
                      " And " +
                      " cast (datediff (day, 0, DAS.DeliveryDate) as datetime) <= @ToDeliveryDate " +
                      " Order By DAS.AssetID "
                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@FromDeliveryDate", FromDeliveryDate)
                   , new SqlParameter("@ToDeliveryDate", ToDeliveryDate)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<DefinitionAssetSiteVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                    " Select Distinct DAS.*, A.AssetCost, A.CombinedConsum, A.BookValue From( " +
                    " SELECT DAS.Id As SerialID, DAS.CompanyID, DAS.AssetID, DAS.AssetTypeID, DAS.AdministrationID, DAS.CircleID, DAS.SectionID, " +
                    " DAS.SiteID, DAS.TransferDate, DAS.TrusteeID, DAS.DeliveryDate, " +
                    " ( " +
                       " Select A.AssetName " +
                       " From Assets A " +
                       " Where " +
                       " A.AssetID = DAS.AssetID " +
                       " And " +
                       " A.CompanyID = DAS.CompanyID " +
                     " ) As AssetName, " +
                     " ( " +
                       " Select ATS.[Name] " +
                       " From AssetTypes ATS " +
                       " Where " +
                       " ATS.AssetTypeID = DAS.AssetTypeID " +
                       " And " +
                       " ATS.CompanyID = DAS.CompanyID " +
                     " ) As AssetTypeName, " +
                     " ( " +
                       " Select AA.AdministrationName " +
                       " From AssetAdministrations AA " +
                       " Where " +
                       " AA.AdministrationID = DAS.AdministrationID " +
                       " And " +
                       " AA.CompanyID = DAS.CompanyID " +
                     " ) As AdministrationName, " +
                     " ( " +
                       " Select AC.CircleName " +
                       " From AssetCircles AC " +
                       " Where " +
                       " AC.CircleID = DAS.CircleID " +
                       " And " +
                       " AC.CompanyID = DAS.CompanyID " +
                     " ) As CircleName, " +
                     " ( " +
                       " Select ASS.SectionName " +
                       " From AssetSections ASS " +
                       " Where " +
                       " ASS.SectionID = DAS.SectionID " +
                       " And " +
                       " ASS.CompanyID = DAS.CompanyID " +
                     " ) As SectionName, " +
                     " ( " +
                       " Select ASS.SiteName " +
                       " From AssetSites ASS " +
                       " Where " +
                       " ASS.SiteID = DAS.SiteID " +
                       " And " +
                       " ASS.CompanyID = DAS.CompanyID " +
                     " ) As SiteName, " +
                     " ( " +
                       " Select ATT.TrusteeName " +
                       " From AssetTrustees ATT " +
                       " Where " +
                       " ATT.TrusteeID = DAS.TrusteeID " +
                       " And " +
                       " ATT.CompanyID = DAS.CompanyID " +
                     " )  As TrusteeName, " +
                     " ( " +
                       " Select A.UserName " +
                       " From AspNetUsers A " +
                       " Where " +
                       " A.fCompanyId = DAS.CompanyID " +
                       " And " +
                       " A.Id = DAS.InsUserID " +
                     " ) As DefinitionUserName, " +
                     " ( " +
                       " Select A.UserName " +
                       " From AspNetUsers A " +
                       " Where " +
                       " A.fCompanyId = DAS.CompanyID " +
                       " And " +
                       " A.Id = DAS.DeliveryInsUserID " +
                     " ) As DeliveryUserName " +
                     " From DefinitionAssetSites DAS, " +
                     " ( " +
                       " SELECT MAX(DASS.TransferDate) as TransferDate FROM DefinitionAssetSites DASS Group by AssetID, CompanyID) DASS " +
                       " where " +
                       " DAS.TransferDate = DASS.TransferDate " +
                      " ) As DAS, Assets A, " +
                      " ( " +
                         " SELECT MAX(DASS.Id) as Id FROM DefinitionAssetSites DASS Group by AssetID, CompanyID, TransferDate " +
                      " ) DASS " +
                      " Where " +
                      " DAS.SerialID = DASS.Id " +
                      " And " +
                      " DAS.CompanyID = @CompanyID " +
                      " And " +
                      " A.CompanyID = DAS.CompanyID " +
                      " And " +
                      " A.AssetID = DAS.AssetID " +
                      " And " +
                      " A.FAssetTypeID = DAS.AssetTypeID " +
                      " Order By DAS.AssetID "
                   , new SqlParameter("@CompanyID", CompanyID)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<DefinitionAssetSiteVM>();
                }
            }
        }
        public IEnumerable<DefinitionAssetSiteVM> GetAssetsTransferMovementsReport(int CompanyID, Boolean ApproveDeliveryDate, Boolean ApproveTransferDate, DateTime FromTransferDate,
            DateTime ToTransferDate, DateTime FromDeliveryDate, DateTime ToDeliveryDate)
        {
            if (ApproveTransferDate)
            {
                try
                {
                    return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                    " SELECT DAS.Id As SerialID, DAS.CompanyID, DAS.AssetID, DAS.AssetTypeID, DAS.AdministrationID, DAS.CircleID, DAS.SectionID, " +
                    " DAS.SiteID, DAS.TransferDate, DAS.TrusteeID, DAS.DeliveryDate, " +
                    " ( " +
                       " Select A.AssetName " +
                       " From Assets A " +
                       " Where " +
                       " A.AssetID = DAS.AssetID " +
                       " And " +
                       " A.CompanyID = DAS.CompanyID " +
                     " ) As AssetName, " +
                     " ( " +
                       " Select ATS.[Name] " +
                       " From AssetTypes ATS " +
                       " Where " +
                       " ATS.AssetTypeID = DAS.AssetTypeID " +
                       " And " +
                       " ATS.CompanyID = DAS.CompanyID " +
                     " ) As AssetTypeName, " +
                     " ( " +
                       " Select AA.AdministrationName " +
                       " From AssetAdministrations AA " +
                       " Where " +
                       " AA.AdministrationID = DAS.AdministrationID " +
                       " And " +
                       " AA.CompanyID = DAS.CompanyID " +
                     " ) As AdministrationName, " +
                     " ( " +
                       " Select AC.CircleName " +
                       " From AssetCircles AC " +
                       " Where " +
                       " AC.CircleID = DAS.CircleID " +
                       " And " +
                       " AC.CompanyID = DAS.CompanyID " +
                     " ) As CircleName, " +
                     " ( " +
                       " Select ASS.SectionName " +
                       " From AssetSections ASS " +
                       " Where " +
                       " ASS.SectionID = DAS.SectionID " +
                       " And " +
                       " ASS.CompanyID = DAS.CompanyID " +
                     " ) As SectionName, " +
                     " ( " +
                       " Select ASS.SiteName " +
                       " From AssetSites ASS " +
                       " Where " +
                       " ASS.SiteID = DAS.SiteID " +
                       " And " +
                       " ASS.CompanyID = DAS.CompanyID " +
                     " ) As SiteName, " +
                     " ( " +
                       " Select ATT.TrusteeName " +
                       " From AssetTrustees ATT " +
                       " Where " +
                       " ATT.TrusteeID = DAS.TrusteeID " +
                       " And " +
                       " ATT.CompanyID = DAS.CompanyID " +
                     " )  As TrusteeName, " +
                     " ( " +
                       " Select A.UserName " +
                       " From AspNetUsers A " +
                       " Where " +
                       " A.fCompanyId = DAS.CompanyID " +
                       " And " +
                       " A.Id = DAS.InsUserID " +
                     " ) As DefinitionUserName, " +
                     " ( " +
                       " Select A.UserName " +
                       " From AspNetUsers A " +
                       " Where " +
                       " A.fCompanyId = DAS.CompanyID " +
                       " And " +
                       " A.Id = DAS.DeliveryInsUserID " +
                     " ) As DeliveryUserName " +
                     " From DefinitionAssetSites DAS " +
                      " Where " +
                      " DAS.CompanyID = @CompanyID " +
                      " And " +
                      " cast (datediff (day, 0, DAS.TransferDate) as datetime) >= @FromTransferDate " +
                      " And " +
                      " cast (datediff (day, 0, DAS.TransferDate) as datetime) <= @ToTransferDate " +
                      " Order By DAS.AssetID,DAS.TransferDate "
                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@FromTransferDate", FromTransferDate)
                   , new SqlParameter("@ToTransferDate", ToTransferDate)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<DefinitionAssetSiteVM>();
                }
            }
            else if (ApproveDeliveryDate)
            {
                try
                {
                    return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                    " SELECT DAS.Id As SerialID, DAS.CompanyID, DAS.AssetID, DAS.AssetTypeID, DAS.AdministrationID, DAS.CircleID, DAS.SectionID, " +
                    " DAS.SiteID, DAS.TransferDate, DAS.TrusteeID, DAS.DeliveryDate, " +
                    " ( " +
                       " Select A.AssetName " +
                       " From Assets A " +
                       " Where " +
                       " A.AssetID = DAS.AssetID " +
                       " And " +
                       " A.CompanyID = DAS.CompanyID " +
                     " ) As AssetName, " +
                     " ( " +
                       " Select ATS.[Name] " +
                       " From AssetTypes ATS " +
                       " Where " +
                       " ATS.AssetTypeID = DAS.AssetTypeID " +
                       " And " +
                       " ATS.CompanyID = DAS.CompanyID " +
                     " ) As AssetTypeName, " +
                     " ( " +
                       " Select AA.AdministrationName " +
                       " From AssetAdministrations AA " +
                       " Where " +
                       " AA.AdministrationID = DAS.AdministrationID " +
                       " And " +
                       " AA.CompanyID = DAS.CompanyID " +
                     " ) As AdministrationName, " +
                     " ( " +
                       " Select AC.CircleName " +
                       " From AssetCircles AC " +
                       " Where " +
                       " AC.CircleID = DAS.CircleID " +
                       " And " +
                       " AC.CompanyID = DAS.CompanyID " +
                     " ) As CircleName, " +
                     " ( " +
                       " Select ASS.SectionName " +
                       " From AssetSections ASS " +
                       " Where " +
                       " ASS.SectionID = DAS.SectionID " +
                       " And " +
                       " ASS.CompanyID = DAS.CompanyID " +
                     " ) As SectionName, " +
                     " ( " +
                       " Select ASS.SiteName " +
                       " From AssetSites ASS " +
                       " Where " +
                       " ASS.SiteID = DAS.SiteID " +
                       " And " +
                       " ASS.CompanyID = DAS.CompanyID " +
                     " ) As SiteName, " +
                     " ( " +
                       " Select ATT.TrusteeName " +
                       " From AssetTrustees ATT " +
                       " Where " +
                       " ATT.TrusteeID = DAS.TrusteeID " +
                       " And " +
                       " ATT.CompanyID = DAS.CompanyID " +
                     " )  As TrusteeName, " +
                     " ( " +
                       " Select A.UserName " +
                       " From AspNetUsers A " +
                       " Where " +
                       " A.fCompanyId = DAS.CompanyID " +
                       " And " +
                       " A.Id = DAS.InsUserID " +
                     " ) As DefinitionUserName, " +
                     " ( " +
                       " Select A.UserName " +
                       " From AspNetUsers A " +
                       " Where " +
                       " A.fCompanyId = DAS.CompanyID " +
                       " And " +
                       " A.Id = DAS.DeliveryInsUserID " +
                     " ) As DeliveryUserName " +
                     " From DefinitionAssetSites DAS " +
                      " Where " +
                      " DAS.CompanyID = @CompanyID " +
                      " And " +
                      " cast (datediff (day, 0, DAS.DeliveryDate) as datetime) >= @FromDeliveryDate " +
                      " And " +
                      " cast (datediff (day, 0, DAS.DeliveryDate) as datetime) <= @ToDeliveryDate " +
                      " Order By DAS.AssetID,DAS.TransferDate "
                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@FromDeliveryDate", FromDeliveryDate)
                   , new SqlParameter("@ToDeliveryDate", ToDeliveryDate)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<DefinitionAssetSiteVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                    " SELECT DAS.Id As SerialID, DAS.CompanyID, DAS.AssetID, DAS.AssetTypeID, DAS.AdministrationID, DAS.CircleID, DAS.SectionID, " +
                    " DAS.SiteID, DAS.TransferDate, DAS.TrusteeID, DAS.DeliveryDate, " +
                    " ( " +
                       " Select A.AssetName " +
                       " From Assets A " +
                       " Where " +
                       " A.AssetID = DAS.AssetID " +
                       " And " +
                       " A.CompanyID = DAS.CompanyID " +
                     " ) As AssetName, " +
                     " ( " +
                       " Select ATS.[Name] " +
                       " From AssetTypes ATS " +
                       " Where " +
                       " ATS.AssetTypeID = DAS.AssetTypeID " +
                       " And " +
                       " ATS.CompanyID = DAS.CompanyID " +
                     " ) As AssetTypeName, " +
                     " ( " +
                       " Select AA.AdministrationName " +
                       " From AssetAdministrations AA " +
                       " Where " +
                       " AA.AdministrationID = DAS.AdministrationID " +
                       " And " +
                       " AA.CompanyID = DAS.CompanyID " +
                     " ) As AdministrationName, " +
                     " ( " +
                       " Select AC.CircleName " +
                       " From AssetCircles AC " +
                       " Where " +
                       " AC.CircleID = DAS.CircleID " +
                       " And " +
                       " AC.CompanyID = DAS.CompanyID " +
                     " ) As CircleName, " +
                     " ( " +
                       " Select ASS.SectionName " +
                       " From AssetSections ASS " +
                       " Where " +
                       " ASS.SectionID = DAS.SectionID " +
                       " And " +
                       " ASS.CompanyID = DAS.CompanyID " +
                     " ) As SectionName, " +
                     " ( " +
                       " Select ASS.SiteName " +
                       " From AssetSites ASS " +
                       " Where " +
                       " ASS.SiteID = DAS.SiteID " +
                       " And " +
                       " ASS.CompanyID = DAS.CompanyID " +
                     " ) As SiteName, " +
                     " ( " +
                       " Select ATT.TrusteeName " +
                       " From AssetTrustees ATT " +
                       " Where " +
                       " ATT.TrusteeID = DAS.TrusteeID " +
                       " And " +
                       " ATT.CompanyID = DAS.CompanyID " +
                     " )  As TrusteeName, " +
                     " ( " +
                       " Select A.UserName " +
                       " From AspNetUsers A " +
                       " Where " +
                       " A.fCompanyId = DAS.CompanyID " +
                       " And " +
                       " A.Id = DAS.InsUserID " +
                     " ) As DefinitionUserName, " +
                     " ( " +
                       " Select A.UserName " +
                       " From AspNetUsers A " +
                       " Where " +
                       " A.fCompanyId = DAS.CompanyID " +
                       " And " +
                       " A.Id = DAS.DeliveryInsUserID " +
                     " ) As DeliveryUserName " +
                     " From DefinitionAssetSites DAS " +
                      " Where " +
                      " DAS.CompanyID = @CompanyID " +
                      " Order By DAS.AssetID,DAS.TransferDate "
                   , new SqlParameter("@CompanyID", CompanyID)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<DefinitionAssetSiteVM>();
                }
            }
        }
        public IEnumerable<DefinitionAssetSiteVM> GetAssetsReport(int CompanyID, Boolean ApproveCombinedtDate, Boolean ApproveConsStartDate, DateTime FromCombinedtDate,
            DateTime ToCombinedtDate, DateTime FromConsStartDate, DateTime ToConsStartDate)
        {
            if (ApproveCombinedtDate)
            {
                if (Resources.Resource.CurLang == "Arb")
                {
                    try
                    {
                        return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                            " Select * From " +
                            " ( " +
                                " Select 0 As SerialID, A.CompanyID, A.AssetID, A.FAssetTypeID  As AssetTypeID, 0 As AdministrationID, 0 As CircleID, 0 As SectionID, 0 As SiteID, 0 As TrusteeID, A.AssetName, " +
                                " ( " +
                                  " Select ATS.[Name] " +
                                  " From AssetTypes ATS " +
                                  " Where " +
                                  " ATS.AssetTypeID = A.FAssetTypeID " +
                                  " And " +
                                  " ATS.CompanyID = A.CompanyID " +
                                " ) As AssetTypeName, '' As AdministrationName, '' As CircleName, '' As SectionName, '' As SiteName, '' AS TrusteeName, " +
                                " A.ConsStartDate, A.AssetCost, A.AssetConsumRatio, A.CombinedConsum, A.BookValue, A.CombinedtDate, " +
                                " A.DebitAccountNo, A.CreditAccountNo, A.DebitCostNo, A.CreditCostNo, A.AssetBarCode, A.AssetSerialNo, A.Note, A.GuaranteedDate, " +
                                " ( " +
                                  " Select C.ArabicName " +
                                  " From ChartOfAccounts C " +
                                  " Where " +
                                  " A.DebitAccountNo = C.AccountNumber " +
                                  " And " +
                                  " A.CompanyID = C.CompanyID " +
                               " ) As DebitAccountName, " +
                              " ( " +
                               " Select C.ArabicName " +
                               " From ChartOfAccounts C " +
                               " Where " +
                               " A.CreditAccountNo = C.AccountNumber " +
                               " And " +
                               " A.CompanyID = C.CompanyID " +
                             " ) As CreditAccountName, " +
                              " ( " +
                                " Select CC.ArabicName " +
                                " From CostCenters CC " +
                                " Where " +
                                " A.DebitCostNo = CC.CostNumber " +
                                " And " +
                                " A.CompanyID = CC.CompanyID " +
                              " ) As DebitCostName, " +
                              " ( " +
                                " Select CC.ArabicName " +
                                " From CostCenters CC " +
                                " Where " +
                                " A.CreditCostNo = CC.CostNumber " +
                                " And " +
                               " A.CompanyID = CC.CompanyID " +
                          " ) As CreditCostName " +
                         " From Assets A " +
                         " Where " +
                         " A.AssetID Not In( " +
                             " Select DAS.AssetID From DefinitionAssetSites DAS Where A.CompanyID = DAS.CompanyID And A.FAssetTypeID = DAS.AssetTypeID And A.AssetID = DAS.AssetID " +
                         " ) " +
                         " Union All " +
                         " Select Distinct DAS.*, A.ConsStartDate, A.AssetCost, A.AssetConsumRatio, A.CombinedConsum, A.BookValue, A.CombinedtDate, " +
                         " A.DebitAccountNo, A.CreditAccountNo, A.DebitCostNo, A.CreditCostNo, A.AssetBarCode, A.AssetSerialNo, A.Note, A.GuaranteedDate, " +
                         " ( " +
                           " Select C.ArabicName " +
                           " From ChartOfAccounts C " +
                           " Where " +
                           " A.DebitAccountNo = C.AccountNumber " +
                           " And " +
                           " A.CompanyID = C.CompanyID " +
                         " ) As DebitAccountName, " +
                         " ( " +
                           " Select C.ArabicName " +
                           " From ChartOfAccounts C " +
                           " Where " +
                           " A.CreditAccountNo = C.AccountNumber " +
                           " And " +
                           " A.CompanyID = C.CompanyID " +
                         " ) As CreditAccountName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " A.DebitCostNo = CC.CostNumber " +
                           " And " +
                           " A.CompanyID = CC.CompanyID " +
                         " ) As DebitCostName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " A.CreditCostNo = CC.CostNumber " +
                           " And " +
                           " A.CompanyID = CC.CompanyID " +
                         " ) As CreditCostName " +
                         " From( " +
                           " SELECT DAS.Id As SerialID, DAS.CompanyID, DAS.AssetID, DAS.AssetTypeID, DAS.AdministrationID, DAS.CircleID, DAS.SectionID, " +
                           " DAS.SiteID, DAS.TrusteeID, " +
                           " ( " +
                             " Select A.AssetName " +
                             " From Assets A " +
                             " Where " +
                             " A.AssetID = DAS.AssetID " +
                             " And " +
                             " A.CompanyID = DAS.CompanyID " +
                           " ) As AssetName, " +
                           " ( " +
                             " Select ATS.[Name] " +
                             " From AssetTypes ATS " +
                             " Where " +
                             " ATS.AssetTypeID = DAS.AssetTypeID " +
                             " And " +
                             " ATS.CompanyID = DAS.CompanyID " +
                           " ) As AssetTypeName, " +
                           " ( " +
                             " Select AA.AdministrationName " +
                             " From AssetAdministrations AA " +
                             " Where " +
                             " AA.AdministrationID = DAS.AdministrationID " +
                             " And " +
                             " AA.CompanyID = DAS.CompanyID " +
                           " ) As AdministrationName, " +
                           " ( " +
                             " Select AC.CircleName " +
                             " From AssetCircles AC " +
                             " Where " +
                             " AC.CircleID = DAS.CircleID " +
                             " And " +
                             " AC.CompanyID = DAS.CompanyID " +
                           " ) As CircleName, " +
                           " ( " +
                             " Select ASS.SectionName " +
                             " From AssetSections ASS " +
                             " Where " +
                             " ASS.SectionID = DAS.SectionID " +
                             " And " +
                             " ASS.CompanyID = DAS.CompanyID " +
                           " ) As SectionName, " +
                           " ( " +
                             " Select ASS.SiteName " +
                             " From AssetSites ASS " +
                             " Where " +
                             " ASS.SiteID = DAS.SiteID " +
                             " And " +
                             " ASS.CompanyID = DAS.CompanyID " +
                           " ) As SiteName, " +
                           " ( " +
                             " Select ATT.TrusteeName " +
                             " From AssetTrustees ATT " +
                             " Where " +
                             " ATT.TrusteeID = DAS.TrusteeID " +
                             " And " +
                             " ATT.CompanyID = DAS.CompanyID " +
                           " )  As TrusteeName " +
                           " From DefinitionAssetSites DAS, " +
                           " ( " +
                             " SELECT MAX(DASS.TransferDate) as TransferDate FROM DefinitionAssetSites DASS Group by AssetID, CompanyID) DASS " +
                             " where " +
                             " DAS.TransferDate = DASS.TransferDate " +
                           " ) As DAS, Assets A, " +
                           " ( " +
                             " SELECT MAX(DASS.Id) as Id FROM DefinitionAssetSites DASS Group by AssetID, CompanyID, TransferDate " +
                           " ) DASS " +
                           " Where " +
                           " DAS.SerialID = DASS.Id " +
                           " And " +
                           " A.CompanyID = DAS.CompanyID " +
                           " And " +
                           " A.AssetID = DAS.AssetID " +
                           " And " +
                           " A.FAssetTypeID = DAS.AssetTypeID " +
                            " ) As AllData " +
                            " Where " +
                            " CompanyID = @CompanyID " +
                            " And " +
                          " cast (datediff (day, 0, CombinedtDate) as datetime) >= @FromCombinedtDate " +
                          " And " +
                          " cast (datediff (day, 0, CombinedtDate) as datetime) <= @ToCombinedtDate " +
                          " Order By AssetID "
                       , new SqlParameter("@CompanyID", CompanyID)
                       , new SqlParameter("@FromCombinedtDate", FromCombinedtDate)
                       , new SqlParameter("@ToCombinedtDate", ToCombinedtDate)
                    ).ToList();
                    }
                    catch (Exception ex)
                    {
                        string error = ex.Message;
                        return new List<DefinitionAssetSiteVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                            " Select * From " +
                            " ( " +
                                " Select 0 As SerialID, A.CompanyID, A.AssetID, A.FAssetTypeID  As AssetTypeID, 0 As AdministrationID, 0 As CircleID, 0 As SectionID, 0 As SiteID, 0 As TrusteeID, A.AssetName, " +
                                " ( " +
                                  " Select ATS.[Name] " +
                                  " From AssetTypes ATS " +
                                  " Where " +
                                  " ATS.AssetTypeID = A.FAssetTypeID " +
                                  " And " +
                                  " ATS.CompanyID = A.CompanyID " +
                                " ) As AssetTypeName, '' As AdministrationName, '' As CircleName, '' As SectionName, '' As SiteName, '' AS TrusteeName, " +
                                " A.ConsStartDate, A.AssetCost, A.AssetConsumRatio, A.CombinedConsum, A.BookValue, A.CombinedtDate, " +
                                " A.DebitAccountNo, A.CreditAccountNo, A.DebitCostNo, A.CreditCostNo, A.AssetBarCode, A.AssetSerialNo, A.Note, A.GuaranteedDate, " +
                                " ( " +
                                  " Select C.EnglishName " +
                                  " From ChartOfAccounts C " +
                                  " Where " +
                                  " A.DebitAccountNo = C.AccountNumber " +
                                  " And " +
                                  " A.CompanyID = C.CompanyID " +
                               " ) As DebitAccountName, " +
                              " ( " +
                               " Select C.EnglishName " +
                               " From ChartOfAccounts C " +
                               " Where " +
                               " A.CreditAccountNo = C.AccountNumber " +
                               " And " +
                               " A.CompanyID = C.CompanyID " +
                             " ) As CreditAccountName, " +
                              " ( " +
                                " Select CC.EnglishName " +
                                " From CostCenters CC " +
                                " Where " +
                                " A.DebitCostNo = CC.CostNumber " +
                                " And " +
                                " A.CompanyID = CC.CompanyID " +
                              " ) As DebitCostName, " +
                              " ( " +
                                " Select CC.EnglishName " +
                                " From CostCenters CC " +
                                " Where " +
                                " A.CreditCostNo = CC.CostNumber " +
                                " And " +
                               " A.CompanyID = CC.CompanyID " +
                          " ) As CreditCostName " +
                         " From Assets A " +
                         " Where " +
                         " A.AssetID Not In( " +
                             " Select DAS.AssetID From DefinitionAssetSites DAS Where A.CompanyID = DAS.CompanyID And A.FAssetTypeID = DAS.AssetTypeID And A.AssetID = DAS.AssetID " +
                         " ) " +
                         " Union All " +
                         " Select Distinct DAS.*, A.ConsStartDate, A.AssetCost, A.AssetConsumRatio, A.CombinedConsum, A.BookValue, A.CombinedtDate, " +
                         " A.DebitAccountNo, A.CreditAccountNo, A.DebitCostNo, A.CreditCostNo, A.AssetBarCode, A.AssetSerialNo, A.Note, A.GuaranteedDate, " +
                         " ( " +
                           " Select C.EnglishName " +
                           " From ChartOfAccounts C " +
                           " Where " +
                           " A.DebitAccountNo = C.AccountNumber " +
                           " And " +
                           " A.CompanyID = C.CompanyID " +
                         " ) As DebitAccountName, " +
                         " ( " +
                           " Select C.EnglishName " +
                           " From ChartOfAccounts C " +
                           " Where " +
                           " A.CreditAccountNo = C.AccountNumber " +
                           " And " +
                           " A.CompanyID = C.CompanyID " +
                         " ) As CreditAccountName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " A.DebitCostNo = CC.CostNumber " +
                           " And " +
                           " A.CompanyID = CC.CompanyID " +
                         " ) As DebitCostName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " A.CreditCostNo = CC.CostNumber " +
                           " And " +
                           " A.CompanyID = CC.CompanyID " +
                         " ) As CreditCostName " +
                         " From( " +
                           " SELECT DAS.Id As SerialID, DAS.CompanyID, DAS.AssetID, DAS.AssetTypeID, DAS.AdministrationID, DAS.CircleID, DAS.SectionID, " +
                           " DAS.SiteID, DAS.TrusteeID, " +
                           " ( " +
                             " Select A.AssetName " +
                             " From Assets A " +
                             " Where " +
                             " A.AssetID = DAS.AssetID " +
                             " And " +
                             " A.CompanyID = DAS.CompanyID " +
                           " ) As AssetName, " +
                           " ( " +
                             " Select ATS.[Name] " +
                             " From AssetTypes ATS " +
                             " Where " +
                             " ATS.AssetTypeID = DAS.AssetTypeID " +
                             " And " +
                             " ATS.CompanyID = DAS.CompanyID " +
                           " ) As AssetTypeName, " +
                           " ( " +
                             " Select AA.AdministrationName " +
                             " From AssetAdministrations AA " +
                             " Where " +
                             " AA.AdministrationID = DAS.AdministrationID " +
                             " And " +
                             " AA.CompanyID = DAS.CompanyID " +
                           " ) As AdministrationName, " +
                           " ( " +
                             " Select AC.CircleName " +
                             " From AssetCircles AC " +
                             " Where " +
                             " AC.CircleID = DAS.CircleID " +
                             " And " +
                             " AC.CompanyID = DAS.CompanyID " +
                           " ) As CircleName, " +
                           " ( " +
                             " Select ASS.SectionName " +
                             " From AssetSections ASS " +
                             " Where " +
                             " ASS.SectionID = DAS.SectionID " +
                             " And " +
                             " ASS.CompanyID = DAS.CompanyID " +
                           " ) As SectionName, " +
                           " ( " +
                             " Select ASS.SiteName " +
                             " From AssetSites ASS " +
                             " Where " +
                             " ASS.SiteID = DAS.SiteID " +
                             " And " +
                             " ASS.CompanyID = DAS.CompanyID " +
                           " ) As SiteName, " +
                           " ( " +
                             " Select ATT.TrusteeName " +
                             " From AssetTrustees ATT " +
                             " Where " +
                             " ATT.TrusteeID = DAS.TrusteeID " +
                             " And " +
                             " ATT.CompanyID = DAS.CompanyID " +
                           " )  As TrusteeName " +
                           " From DefinitionAssetSites DAS, " +
                           " ( " +
                             " SELECT MAX(DASS.TransferDate) as TransferDate FROM DefinitionAssetSites DASS Group by AssetID, CompanyID) DASS " +
                             " where " +
                             " DAS.TransferDate = DASS.TransferDate " +
                           " ) As DAS, Assets A, " +
                           " ( " +
                             " SELECT MAX(DASS.Id) as Id FROM DefinitionAssetSites DASS Group by AssetID, CompanyID, TransferDate " +
                           " ) DASS " +
                           " Where " +
                           " DAS.SerialID = DASS.Id " +
                           " And " +
                           " A.CompanyID = DAS.CompanyID " +
                           " And " +
                           " A.AssetID = DAS.AssetID " +
                           " And " +
                           " A.FAssetTypeID = DAS.AssetTypeID " +
                            " ) As AllData " +
                            " Where " +
                            " CompanyID = @CompanyID " +
                            " And " +
                          " cast (datediff (day, 0, CombinedtDate) as datetime) >= @FromCombinedtDate " +
                          " And " +
                          " cast (datediff (day, 0, CombinedtDate) as datetime) <= @ToCombinedtDate " +
                          " Order By AssetID "
                       , new SqlParameter("@CompanyID", CompanyID)
                       , new SqlParameter("@FromCombinedtDate", FromCombinedtDate)
                       , new SqlParameter("@ToCombinedtDate", ToCombinedtDate)
                    ).ToList();
                    }
                    catch (Exception ex)
                    {
                        string error = ex.Message;
                        return new List<DefinitionAssetSiteVM>();
                    }
                }

            }
            else if (ApproveConsStartDate)
            {
                if (Resources.Resource.CurLang == "Arb")
                {
                    try
                    {
                        return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                            " Select * From " +
                            " ( " +
                                " Select 0 As SerialID, A.CompanyID, A.AssetID, A.FAssetTypeID  As AssetTypeID, 0 As AdministrationID, 0 As CircleID, 0 As SectionID, 0 As SiteID, 0 As TrusteeID, A.AssetName, " +
                                " ( " +
                                  " Select ATS.[Name] " +
                                  " From AssetTypes ATS " +
                                  " Where " +
                                  " ATS.AssetTypeID = A.FAssetTypeID " +
                                  " And " +
                                  " ATS.CompanyID = A.CompanyID " +
                                " ) As AssetTypeName, '' As AdministrationName, '' As CircleName, '' As SectionName, '' As SiteName, '' AS TrusteeName, " +
                                " A.ConsStartDate, A.AssetCost, A.AssetConsumRatio, A.CombinedConsum, A.BookValue, A.CombinedtDate, " +
                                " A.DebitAccountNo, A.CreditAccountNo, A.DebitCostNo, A.CreditCostNo, A.AssetBarCode, A.AssetSerialNo, A.Note, A.GuaranteedDate, " +
                                " ( " +
                                  " Select C.ArabicName " +
                                  " From ChartOfAccounts C " +
                                  " Where " +
                                  " A.DebitAccountNo = C.AccountNumber " +
                                  " And " +
                                  " A.CompanyID = C.CompanyID " +
                               " ) As DebitAccountName, " +
                              " ( " +
                               " Select C.ArabicName " +
                               " From ChartOfAccounts C " +
                               " Where " +
                               " A.CreditAccountNo = C.AccountNumber " +
                               " And " +
                               " A.CompanyID = C.CompanyID " +
                             " ) As CreditAccountName, " +
                              " ( " +
                                " Select CC.ArabicName " +
                                " From CostCenters CC " +
                                " Where " +
                                " A.DebitCostNo = CC.CostNumber " +
                                " And " +
                                " A.CompanyID = CC.CompanyID " +
                              " ) As DebitCostName, " +
                              " ( " +
                                " Select CC.ArabicName " +
                                " From CostCenters CC " +
                                " Where " +
                                " A.CreditCostNo = CC.CostNumber " +
                                " And " +
                               " A.CompanyID = CC.CompanyID " +
                          " ) As CreditCostName " +
                         " From Assets A " +
                         " Where " +
                         " A.AssetID Not In( " +
                             " Select DAS.AssetID From DefinitionAssetSites DAS Where A.CompanyID = DAS.CompanyID And A.FAssetTypeID = DAS.AssetTypeID And A.AssetID = DAS.AssetID " +
                         " ) " +
                         " Union All " +
                         " Select Distinct DAS.*, A.ConsStartDate, A.AssetCost, A.AssetConsumRatio, A.CombinedConsum, A.BookValue, A.CombinedtDate, " +
                         " A.DebitAccountNo, A.CreditAccountNo, A.DebitCostNo, A.CreditCostNo, A.AssetBarCode, A.AssetSerialNo, A.Note, A.GuaranteedDate, " +
                         " ( " +
                           " Select C.ArabicName " +
                           " From ChartOfAccounts C " +
                           " Where " +
                           " A.DebitAccountNo = C.AccountNumber " +
                           " And " +
                           " A.CompanyID = C.CompanyID " +
                         " ) As DebitAccountName, " +
                         " ( " +
                           " Select C.ArabicName " +
                           " From ChartOfAccounts C " +
                           " Where " +
                           " A.CreditAccountNo = C.AccountNumber " +
                           " And " +
                           " A.CompanyID = C.CompanyID " +
                         " ) As CreditAccountName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " A.DebitCostNo = CC.CostNumber " +
                           " And " +
                           " A.CompanyID = CC.CompanyID " +
                         " ) As DebitCostName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " A.CreditCostNo = CC.CostNumber " +
                           " And " +
                           " A.CompanyID = CC.CompanyID " +
                         " ) As CreditCostName " +
                         " From( " +
                           " SELECT DAS.Id As SerialID, DAS.CompanyID, DAS.AssetID, DAS.AssetTypeID, DAS.AdministrationID, DAS.CircleID, DAS.SectionID, " +
                           " DAS.SiteID, DAS.TrusteeID, " +
                           " ( " +
                             " Select A.AssetName " +
                             " From Assets A " +
                             " Where " +
                             " A.AssetID = DAS.AssetID " +
                             " And " +
                             " A.CompanyID = DAS.CompanyID " +
                           " ) As AssetName, " +
                           " ( " +
                             " Select ATS.[Name] " +
                             " From AssetTypes ATS " +
                             " Where " +
                             " ATS.AssetTypeID = DAS.AssetTypeID " +
                             " And " +
                             " ATS.CompanyID = DAS.CompanyID " +
                           " ) As AssetTypeName, " +
                           " ( " +
                             " Select AA.AdministrationName " +
                             " From AssetAdministrations AA " +
                             " Where " +
                             " AA.AdministrationID = DAS.AdministrationID " +
                             " And " +
                             " AA.CompanyID = DAS.CompanyID " +
                           " ) As AdministrationName, " +
                           " ( " +
                             " Select AC.CircleName " +
                             " From AssetCircles AC " +
                             " Where " +
                             " AC.CircleID = DAS.CircleID " +
                             " And " +
                             " AC.CompanyID = DAS.CompanyID " +
                           " ) As CircleName, " +
                           " ( " +
                             " Select ASS.SectionName " +
                             " From AssetSections ASS " +
                             " Where " +
                             " ASS.SectionID = DAS.SectionID " +
                             " And " +
                             " ASS.CompanyID = DAS.CompanyID " +
                           " ) As SectionName, " +
                           " ( " +
                             " Select ASS.SiteName " +
                             " From AssetSites ASS " +
                             " Where " +
                             " ASS.SiteID = DAS.SiteID " +
                             " And " +
                             " ASS.CompanyID = DAS.CompanyID " +
                           " ) As SiteName, " +
                           " ( " +
                             " Select ATT.TrusteeName " +
                             " From AssetTrustees ATT " +
                             " Where " +
                             " ATT.TrusteeID = DAS.TrusteeID " +
                             " And " +
                             " ATT.CompanyID = DAS.CompanyID " +
                           " )  As TrusteeName " +
                           " From DefinitionAssetSites DAS, " +
                           " ( " +
                             " SELECT MAX(DASS.TransferDate) as TransferDate FROM DefinitionAssetSites DASS Group by AssetID, CompanyID) DASS " +
                             " where " +
                             " DAS.TransferDate = DASS.TransferDate " +
                           " ) As DAS, Assets A, " +
                           " ( " +
                             " SELECT MAX(DASS.Id) as Id FROM DefinitionAssetSites DASS Group by AssetID, CompanyID, TransferDate " +
                           " ) DASS " +
                           " Where " +
                           " DAS.SerialID = DASS.Id " +
                           " And " +
                           " A.CompanyID = DAS.CompanyID " +
                           " And " +
                           " A.AssetID = DAS.AssetID " +
                           " And " +
                           " A.FAssetTypeID = DAS.AssetTypeID " +
                            " ) As AllData " +
                            " Where " +
                            " CompanyID = @CompanyID " +
                            " And " +
                          " cast (datediff (day, 0, ConsStartDate) as datetime) >= @FromConsStartDate " +
                          " And " +
                          " cast (datediff (day, 0, ConsStartDate) as datetime) <= @ToConsStartDate " +
                          " Order By AssetID "
                       , new SqlParameter("@CompanyID", CompanyID)
                       , new SqlParameter("@FromConsStartDate", FromConsStartDate)
                       , new SqlParameter("@ToConsStartDate", ToConsStartDate)
                    ).ToList();
                    }
                    catch (Exception ex)
                    {
                        string error = ex.Message;
                        return new List<DefinitionAssetSiteVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                            " Select * From " +
                            " ( " +
                                " Select 0 As SerialID, A.CompanyID, A.AssetID, A.FAssetTypeID  As AssetTypeID, 0 As AdministrationID, 0 As CircleID, 0 As SectionID, 0 As SiteID, 0 As TrusteeID, A.AssetName, " +
                                " ( " +
                                  " Select ATS.[Name] " +
                                  " From AssetTypes ATS " +
                                  " Where " +
                                  " ATS.AssetTypeID = A.FAssetTypeID " +
                                  " And " +
                                  " ATS.CompanyID = A.CompanyID " +
                                " ) As AssetTypeName, '' As AdministrationName, '' As CircleName, '' As SectionName, '' As SiteName, '' AS TrusteeName, " +
                                " A.ConsStartDate, A.AssetCost, A.AssetConsumRatio, A.CombinedConsum, A.BookValue, A.CombinedtDate, " +
                                " A.DebitAccountNo, A.CreditAccountNo, A.DebitCostNo, A.CreditCostNo, A.AssetBarCode, A.AssetSerialNo, A.Note, A.GuaranteedDate, " +
                                " ( " +
                                  " Select C.EnglishName " +
                                  " From ChartOfAccounts C " +
                                  " Where " +
                                  " A.DebitAccountNo = C.AccountNumber " +
                                  " And " +
                                  " A.CompanyID = C.CompanyID " +
                               " ) As DebitAccountName, " +
                              " ( " +
                               " Select C.EnglishName " +
                               " From ChartOfAccounts C " +
                               " Where " +
                               " A.CreditAccountNo = C.AccountNumber " +
                               " And " +
                               " A.CompanyID = C.CompanyID " +
                             " ) As CreditAccountName, " +
                              " ( " +
                                " Select CC.EnglishName " +
                                " From CostCenters CC " +
                                " Where " +
                                " A.DebitCostNo = CC.CostNumber " +
                                " And " +
                                " A.CompanyID = CC.CompanyID " +
                              " ) As DebitCostName, " +
                              " ( " +
                                " Select CC.EnglishName " +
                                " From CostCenters CC " +
                                " Where " +
                                " A.CreditCostNo = CC.CostNumber " +
                                " And " +
                               " A.CompanyID = CC.CompanyID " +
                          " ) As CreditCostName " +
                         " From Assets A " +
                         " Where " +
                         " A.AssetID Not In( " +
                             " Select DAS.AssetID From DefinitionAssetSites DAS Where A.CompanyID = DAS.CompanyID And A.FAssetTypeID = DAS.AssetTypeID And A.AssetID = DAS.AssetID " +
                         " ) " +
                         " Union All " +
                         " Select Distinct DAS.*, A.ConsStartDate, A.AssetCost, A.AssetConsumRatio, A.CombinedConsum, A.BookValue, A.CombinedtDate, " +
                         " A.DebitAccountNo, A.CreditAccountNo, A.DebitCostNo, A.CreditCostNo, A.AssetBarCode, A.AssetSerialNo, A.Note, A.GuaranteedDate, " +
                         " ( " +
                           " Select C.EnglishName " +
                           " From ChartOfAccounts C " +
                           " Where " +
                           " A.DebitAccountNo = C.AccountNumber " +
                           " And " +
                           " A.CompanyID = C.CompanyID " +
                         " ) As DebitAccountName, " +
                         " ( " +
                           " Select C.EnglishName " +
                           " From ChartOfAccounts C " +
                           " Where " +
                           " A.CreditAccountNo = C.AccountNumber " +
                           " And " +
                           " A.CompanyID = C.CompanyID " +
                         " ) As CreditAccountName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " A.DebitCostNo = CC.CostNumber " +
                           " And " +
                           " A.CompanyID = CC.CompanyID " +
                         " ) As DebitCostName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " A.CreditCostNo = CC.CostNumber " +
                           " And " +
                           " A.CompanyID = CC.CompanyID " +
                         " ) As CreditCostName " +
                         " From( " +
                           " SELECT DAS.Id As SerialID, DAS.CompanyID, DAS.AssetID, DAS.AssetTypeID, DAS.AdministrationID, DAS.CircleID, DAS.SectionID, " +
                           " DAS.SiteID, DAS.TrusteeID, " +
                           " ( " +
                             " Select A.AssetName " +
                             " From Assets A " +
                             " Where " +
                             " A.AssetID = DAS.AssetID " +
                             " And " +
                             " A.CompanyID = DAS.CompanyID " +
                           " ) As AssetName, " +
                           " ( " +
                             " Select ATS.[Name] " +
                             " From AssetTypes ATS " +
                             " Where " +
                             " ATS.AssetTypeID = DAS.AssetTypeID " +
                             " And " +
                             " ATS.CompanyID = DAS.CompanyID " +
                           " ) As AssetTypeName, " +
                           " ( " +
                             " Select AA.AdministrationName " +
                             " From AssetAdministrations AA " +
                             " Where " +
                             " AA.AdministrationID = DAS.AdministrationID " +
                             " And " +
                             " AA.CompanyID = DAS.CompanyID " +
                           " ) As AdministrationName, " +
                           " ( " +
                             " Select AC.CircleName " +
                             " From AssetCircles AC " +
                             " Where " +
                             " AC.CircleID = DAS.CircleID " +
                             " And " +
                             " AC.CompanyID = DAS.CompanyID " +
                           " ) As CircleName, " +
                           " ( " +
                             " Select ASS.SectionName " +
                             " From AssetSections ASS " +
                             " Where " +
                             " ASS.SectionID = DAS.SectionID " +
                             " And " +
                             " ASS.CompanyID = DAS.CompanyID " +
                           " ) As SectionName, " +
                           " ( " +
                             " Select ASS.SiteName " +
                             " From AssetSites ASS " +
                             " Where " +
                             " ASS.SiteID = DAS.SiteID " +
                             " And " +
                             " ASS.CompanyID = DAS.CompanyID " +
                           " ) As SiteName, " +
                           " ( " +
                             " Select ATT.TrusteeName " +
                             " From AssetTrustees ATT " +
                             " Where " +
                             " ATT.TrusteeID = DAS.TrusteeID " +
                             " And " +
                             " ATT.CompanyID = DAS.CompanyID " +
                           " )  As TrusteeName " +
                           " From DefinitionAssetSites DAS, " +
                           " ( " +
                             " SELECT MAX(DASS.TransferDate) as TransferDate FROM DefinitionAssetSites DASS Group by AssetID, CompanyID) DASS " +
                             " where " +
                             " DAS.TransferDate = DASS.TransferDate " +
                           " ) As DAS, Assets A, " +
                           " ( " +
                             " SELECT MAX(DASS.Id) as Id FROM DefinitionAssetSites DASS Group by AssetID, CompanyID, TransferDate " +
                           " ) DASS " +
                           " Where " +
                           " DAS.SerialID = DASS.Id " +
                           " And " +
                           " A.CompanyID = DAS.CompanyID " +
                           " And " +
                           " A.AssetID = DAS.AssetID " +
                           " And " +
                           " A.FAssetTypeID = DAS.AssetTypeID " +
                            " ) As AllData " +
                            " Where " +
                            " CompanyID = @CompanyID " +
                            " And " +
                          " cast (datediff (day, 0, ConsStartDate) as datetime) >= @FromConsStartDate " +
                          " And " +
                          " cast (datediff (day, 0, ConsStartDate) as datetime) <= @ToConsStartDate " +
                          " Order By AssetID "
                       , new SqlParameter("@CompanyID", CompanyID)
                       , new SqlParameter("@FromConsStartDate", FromConsStartDate)
                       , new SqlParameter("@ToConsStartDate", ToConsStartDate)
                    ).ToList();
                    }
                    catch (Exception ex)
                    {
                        string error = ex.Message;
                        return new List<DefinitionAssetSiteVM>();
                    }
                }
            }
            else
            {
                if (Resources.Resource.CurLang == "Arb")
                {
                    try
                    {
                        return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                            " Select * From " +
                            " ( " +
                                " Select 0 As SerialID, A.CompanyID, A.AssetID, A.FAssetTypeID  As AssetTypeID, 0 As AdministrationID, 0 As CircleID, 0 As SectionID, 0 As SiteID, 0 As TrusteeID, A.AssetName, " +
                                " ( " +
                                  " Select ATS.[Name] " +
                                  " From AssetTypes ATS " +
                                  " Where " +
                                  " ATS.AssetTypeID = A.FAssetTypeID " +
                                  " And " +
                                  " ATS.CompanyID = A.CompanyID " +
                                " ) As AssetTypeName, '' As AdministrationName, '' As CircleName, '' As SectionName, '' As SiteName, '' AS TrusteeName, " +
                                " A.ConsStartDate, A.AssetCost, A.AssetConsumRatio, A.CombinedConsum, A.BookValue, A.CombinedtDate, " +
                                " A.DebitAccountNo, A.CreditAccountNo, A.DebitCostNo, A.CreditCostNo, A.AssetBarCode, A.AssetSerialNo, A.Note, A.GuaranteedDate, " +
                                " ( " +
                                  " Select C.ArabicName " +
                                  " From ChartOfAccounts C " +
                                  " Where " +
                                  " A.DebitAccountNo = C.AccountNumber " +
                                  " And " +
                                  " A.CompanyID = C.CompanyID " +
                               " ) As DebitAccountName, " +
                              " ( " +
                               " Select C.ArabicName " +
                               " From ChartOfAccounts C " +
                               " Where " +
                               " A.CreditAccountNo = C.AccountNumber " +
                               " And " +
                               " A.CompanyID = C.CompanyID " +
                             " ) As CreditAccountName, " +
                              " ( " +
                                " Select CC.ArabicName " +
                                " From CostCenters CC " +
                                " Where " +
                                " A.DebitCostNo = CC.CostNumber " +
                                " And " +
                                " A.CompanyID = CC.CompanyID " +
                              " ) As DebitCostName, " +
                              " ( " +
                                " Select CC.ArabicName " +
                                " From CostCenters CC " +
                                " Where " +
                                " A.CreditCostNo = CC.CostNumber " +
                                " And " +
                               " A.CompanyID = CC.CompanyID " +
                          " ) As CreditCostName " +
                         " From Assets A " +
                         " Where " +
                         " A.AssetID Not In( " +
                             " Select DAS.AssetID From DefinitionAssetSites DAS Where A.CompanyID = DAS.CompanyID And A.FAssetTypeID = DAS.AssetTypeID And A.AssetID = DAS.AssetID " +
                         " ) " +
                         " Union All " +
                         " Select Distinct DAS.*, A.ConsStartDate, A.AssetCost, A.AssetConsumRatio, A.CombinedConsum, A.BookValue, A.CombinedtDate, " +
                         " A.DebitAccountNo, A.CreditAccountNo, A.DebitCostNo, A.CreditCostNo, A.AssetBarCode, A.AssetSerialNo, A.Note, A.GuaranteedDate, " +
                         " ( " +
                           " Select C.ArabicName " +
                           " From ChartOfAccounts C " +
                           " Where " +
                           " A.DebitAccountNo = C.AccountNumber " +
                           " And " +
                           " A.CompanyID = C.CompanyID " +
                         " ) As DebitAccountName, " +
                         " ( " +
                           " Select C.ArabicName " +
                           " From ChartOfAccounts C " +
                           " Where " +
                           " A.CreditAccountNo = C.AccountNumber " +
                           " And " +
                           " A.CompanyID = C.CompanyID " +
                         " ) As CreditAccountName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " A.DebitCostNo = CC.CostNumber " +
                           " And " +
                           " A.CompanyID = CC.CompanyID " +
                         " ) As DebitCostName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " A.CreditCostNo = CC.CostNumber " +
                           " And " +
                           " A.CompanyID = CC.CompanyID " +
                         " ) As CreditCostName " +
                         " From( " +
                           " SELECT DAS.Id As SerialID, DAS.CompanyID, DAS.AssetID, DAS.AssetTypeID, DAS.AdministrationID, DAS.CircleID, DAS.SectionID, " +
                           " DAS.SiteID, DAS.TrusteeID, " +
                           " ( " +
                             " Select A.AssetName " +
                             " From Assets A " +
                             " Where " +
                             " A.AssetID = DAS.AssetID " +
                             " And " +
                             " A.CompanyID = DAS.CompanyID " +
                           " ) As AssetName, " +
                           " ( " +
                             " Select ATS.[Name] " +
                             " From AssetTypes ATS " +
                             " Where " +
                             " ATS.AssetTypeID = DAS.AssetTypeID " +
                             " And " +
                             " ATS.CompanyID = DAS.CompanyID " +
                           " ) As AssetTypeName, " +
                           " ( " +
                             " Select AA.AdministrationName " +
                             " From AssetAdministrations AA " +
                             " Where " +
                             " AA.AdministrationID = DAS.AdministrationID " +
                             " And " +
                             " AA.CompanyID = DAS.CompanyID " +
                           " ) As AdministrationName, " +
                           " ( " +
                             " Select AC.CircleName " +
                             " From AssetCircles AC " +
                             " Where " +
                             " AC.CircleID = DAS.CircleID " +
                             " And " +
                             " AC.CompanyID = DAS.CompanyID " +
                           " ) As CircleName, " +
                           " ( " +
                             " Select ASS.SectionName " +
                             " From AssetSections ASS " +
                             " Where " +
                             " ASS.SectionID = DAS.SectionID " +
                             " And " +
                             " ASS.CompanyID = DAS.CompanyID " +
                           " ) As SectionName, " +
                           " ( " +
                             " Select ASS.SiteName " +
                             " From AssetSites ASS " +
                             " Where " +
                             " ASS.SiteID = DAS.SiteID " +
                             " And " +
                             " ASS.CompanyID = DAS.CompanyID " +
                           " ) As SiteName, " +
                           " ( " +
                             " Select ATT.TrusteeName " +
                             " From AssetTrustees ATT " +
                             " Where " +
                             " ATT.TrusteeID = DAS.TrusteeID " +
                             " And " +
                             " ATT.CompanyID = DAS.CompanyID " +
                           " )  As TrusteeName " +
                           " From DefinitionAssetSites DAS, " +
                           " ( " +
                             " SELECT MAX(DASS.TransferDate) as TransferDate FROM DefinitionAssetSites DASS Group by AssetID, CompanyID) DASS " +
                             " where " +
                             " DAS.TransferDate = DASS.TransferDate " +
                           " ) As DAS, Assets A, " +
                           " ( " +
                             " SELECT MAX(DASS.Id) as Id FROM DefinitionAssetSites DASS Group by AssetID, CompanyID, TransferDate " +
                           " ) DASS " +
                           " Where " +
                           " DAS.SerialID = DASS.Id " +
                           " And " +
                           " A.CompanyID = DAS.CompanyID " +
                           " And " +
                           " A.AssetID = DAS.AssetID " +
                           " And " +
                           " A.FAssetTypeID = DAS.AssetTypeID " +
                            " ) As AllData " +
                            " Where " +
                            " CompanyID = @CompanyID " +
                          " Order By AssetID "
                       , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                    }
                    catch (Exception ex)
                    {
                        string error = ex.Message;
                        return new List<DefinitionAssetSiteVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                            " Select * From " +
                            " ( " +
                                " Select 0 As SerialID, A.CompanyID, A.AssetID, A.FAssetTypeID  As AssetTypeID, 0 As AdministrationID, 0 As CircleID, 0 As SectionID, 0 As SiteID, 0 As TrusteeID, A.AssetName, " +
                                " ( " +
                                  " Select ATS.[Name] " +
                                  " From AssetTypes ATS " +
                                  " Where " +
                                  " ATS.AssetTypeID = A.FAssetTypeID " +
                                  " And " +
                                  " ATS.CompanyID = A.CompanyID " +
                                " ) As AssetTypeName, '' As AdministrationName, '' As CircleName, '' As SectionName, '' As SiteName, '' AS TrusteeName, " +
                                " A.ConsStartDate, A.AssetCost, A.AssetConsumRatio, A.CombinedConsum, A.BookValue, A.CombinedtDate, " +
                                " A.DebitAccountNo, A.CreditAccountNo, A.DebitCostNo, A.CreditCostNo, A.AssetBarCode, A.AssetSerialNo, A.Note, A.GuaranteedDate, " +
                                " ( " +
                                  " Select C.EnglishName " +
                                  " From ChartOfAccounts C " +
                                  " Where " +
                                  " A.DebitAccountNo = C.AccountNumber " +
                                  " And " +
                                  " A.CompanyID = C.CompanyID " +
                               " ) As DebitAccountName, " +
                              " ( " +
                               " Select C.EnglishName " +
                               " From ChartOfAccounts C " +
                               " Where " +
                               " A.CreditAccountNo = C.AccountNumber " +
                               " And " +
                               " A.CompanyID = C.CompanyID " +
                             " ) As CreditAccountName, " +
                              " ( " +
                                " Select CC.EnglishName " +
                                " From CostCenters CC " +
                                " Where " +
                                " A.DebitCostNo = CC.CostNumber " +
                                " And " +
                                " A.CompanyID = CC.CompanyID " +
                              " ) As DebitCostName, " +
                              " ( " +
                                " Select CC.EnglishName " +
                                " From CostCenters CC " +
                                " Where " +
                                " A.CreditCostNo = CC.CostNumber " +
                                " And " +
                               " A.CompanyID = CC.CompanyID " +
                          " ) As CreditCostName " +
                         " From Assets A " +
                         " Where " +
                         " A.AssetID Not In( " +
                             " Select DAS.AssetID From DefinitionAssetSites DAS Where A.CompanyID = DAS.CompanyID And A.FAssetTypeID = DAS.AssetTypeID And A.AssetID = DAS.AssetID " +
                         " ) " +
                         " Union All " +
                         " Select Distinct DAS.*, A.ConsStartDate, A.AssetCost, A.AssetConsumRatio, A.CombinedConsum, A.BookValue, A.CombinedtDate, " +
                         " A.DebitAccountNo, A.CreditAccountNo, A.DebitCostNo, A.CreditCostNo, A.AssetBarCode, A.AssetSerialNo, A.Note, A.GuaranteedDate, " +
                         " ( " +
                           " Select C.EnglishName " +
                           " From ChartOfAccounts C " +
                           " Where " +
                           " A.DebitAccountNo = C.AccountNumber " +
                           " And " +
                           " A.CompanyID = C.CompanyID " +
                         " ) As DebitAccountName, " +
                         " ( " +
                           " Select C.EnglishName " +
                           " From ChartOfAccounts C " +
                           " Where " +
                           " A.CreditAccountNo = C.AccountNumber " +
                           " And " +
                           " A.CompanyID = C.CompanyID " +
                         " ) As CreditAccountName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " A.DebitCostNo = CC.CostNumber " +
                           " And " +
                           " A.CompanyID = CC.CompanyID " +
                         " ) As DebitCostName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " A.CreditCostNo = CC.CostNumber " +
                           " And " +
                           " A.CompanyID = CC.CompanyID " +
                         " ) As CreditCostName " +
                         " From( " +
                           " SELECT DAS.Id As SerialID, DAS.CompanyID, DAS.AssetID, DAS.AssetTypeID, DAS.AdministrationID, DAS.CircleID, DAS.SectionID, " +
                           " DAS.SiteID, DAS.TrusteeID, " +
                           " ( " +
                             " Select A.AssetName " +
                             " From Assets A " +
                             " Where " +
                             " A.AssetID = DAS.AssetID " +
                             " And " +
                             " A.CompanyID = DAS.CompanyID " +
                           " ) As AssetName, " +
                           " ( " +
                             " Select ATS.[Name] " +
                             " From AssetTypes ATS " +
                             " Where " +
                             " ATS.AssetTypeID = DAS.AssetTypeID " +
                             " And " +
                             " ATS.CompanyID = DAS.CompanyID " +
                           " ) As AssetTypeName, " +
                           " ( " +
                             " Select AA.AdministrationName " +
                             " From AssetAdministrations AA " +
                             " Where " +
                             " AA.AdministrationID = DAS.AdministrationID " +
                             " And " +
                             " AA.CompanyID = DAS.CompanyID " +
                           " ) As AdministrationName, " +
                           " ( " +
                             " Select AC.CircleName " +
                             " From AssetCircles AC " +
                             " Where " +
                             " AC.CircleID = DAS.CircleID " +
                             " And " +
                             " AC.CompanyID = DAS.CompanyID " +
                           " ) As CircleName, " +
                           " ( " +
                             " Select ASS.SectionName " +
                             " From AssetSections ASS " +
                             " Where " +
                             " ASS.SectionID = DAS.SectionID " +
                             " And " +
                             " ASS.CompanyID = DAS.CompanyID " +
                           " ) As SectionName, " +
                           " ( " +
                             " Select ASS.SiteName " +
                             " From AssetSites ASS " +
                             " Where " +
                             " ASS.SiteID = DAS.SiteID " +
                             " And " +
                             " ASS.CompanyID = DAS.CompanyID " +
                           " ) As SiteName, " +
                           " ( " +
                             " Select ATT.TrusteeName " +
                             " From AssetTrustees ATT " +
                             " Where " +
                             " ATT.TrusteeID = DAS.TrusteeID " +
                             " And " +
                             " ATT.CompanyID = DAS.CompanyID " +
                           " )  As TrusteeName " +
                           " From DefinitionAssetSites DAS, " +
                           " ( " +
                             " SELECT MAX(DASS.TransferDate) as TransferDate FROM DefinitionAssetSites DASS Group by AssetID, CompanyID) DASS " +
                             " where " +
                             " DAS.TransferDate = DASS.TransferDate " +
                           " ) As DAS, Assets A, " +
                           " ( " +
                             " SELECT MAX(DASS.Id) as Id FROM DefinitionAssetSites DASS Group by AssetID, CompanyID, TransferDate " +
                           " ) DASS " +
                           " Where " +
                           " DAS.SerialID = DASS.Id " +
                           " And " +
                           " A.CompanyID = DAS.CompanyID " +
                           " And " +
                           " A.AssetID = DAS.AssetID " +
                           " And " +
                           " A.FAssetTypeID = DAS.AssetTypeID " +
                            " ) As AllData " +
                            " Where " +
                            " CompanyID = @CompanyID " +
                          " Order By AssetID "
                       , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                    }
                    catch (Exception ex)
                    {
                        string error = ex.Message;
                        return new List<DefinitionAssetSiteVM>();
                    }
                }
            }
        }
        public IEnumerable<DefinitionAssetSiteVM> GetConsumptionByTypeReport(int CompanyID, Boolean ApproveConsStartDate, DateTime FromConsStartDate, DateTime ToConsStartDate)
        {
            if (ApproveConsStartDate)
            {
                try
                {
                    return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                         " Select TypeData.*, ATT.[Name] As AssetTypeName From " +
                         " ( " +
                           " Select Sum(AssetCost) As AssetCost, Sum(CombinedConsum) As CombinedConsum, Sum(BookValue) As BookValue, " +
                           " Sum(AnnualConsumption) As AnnualConsumption, FAssetTypeID As AssetTypeID, CompanyID " +
                           " From Assets " +
                           " Where " +
                           " CompanyID = @CompanyID " +
                          " And " +
                          " cast (datediff (day, 0, ConsStartDate) as datetime) >= @FromConsStartDate " +
                          " And " +
                          " cast (datediff (day, 0, ConsStartDate) as datetime) <= @ToConsStartDate " +
                           " Group By FAssetTypeID, CompanyID " +
                         " ) As TypeData, AssetTypes ATT " +
                         " Where " +
                         " ATT.AssetTypeID = TypeData.AssetTypeID " +
                         " And " +
                         " ATT.CompanyID = TypeData.CompanyID " +
                         " Order By TypeData.AssetTypeID "
                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@FromConsStartDate", FromConsStartDate)
                   , new SqlParameter("@ToConsStartDate", ToConsStartDate)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<DefinitionAssetSiteVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                         " Select TypeData.*, ATT.[Name] As AssetTypeName From " +
                         " ( " +
                           " Select Sum(AssetCost) As AssetCost, Sum(CombinedConsum) As CombinedConsum, Sum(BookValue) As BookValue, " +
                           " Sum(AnnualConsumption) As AnnualConsumption, FAssetTypeID As AssetTypeID, CompanyID " +
                           " From Assets " +
                           " Where " +
                           " CompanyID = @CompanyID " +
                           " Group By FAssetTypeID, CompanyID " +
                         " ) As TypeData, AssetTypes ATT " +
                         " Where " +
                         " ATT.AssetTypeID = TypeData.AssetTypeID " +
                         " And " +
                         " ATT.CompanyID = TypeData.CompanyID " +
                         " Order By TypeData.AssetTypeID "
                   , new SqlParameter("@CompanyID", CompanyID)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<DefinitionAssetSiteVM>();
                }
            }
        }
        public IEnumerable<DefinitionAssetSiteVM> GetAllAssetsHeader(int CompanyID, DateTime FromVouchrDate, DateTime ToVouchrDate)
        {
            try
            {
                return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                     " Select VouchrNo,VouchrDate,Total From AssetHeaders " +
                     " Where " +
                     " CompanyID = @CompanyID " +
                     " And " +
                     " cast (datediff (day, 0, VouchrDate) as datetime) >= @FromVouchrDate " +
                     " And " +
                     " cast (datediff (day, 0, VouchrDate) as datetime) <= @ToVouchrDate " +
                     " Order By VouchrNo "
               , new SqlParameter("@CompanyID", CompanyID)
               , new SqlParameter("@FromVouchrDate", FromVouchrDate)
               , new SqlParameter("@ToVouchrDate", ToVouchrDate)
            ).ToList();
            }
            catch (Exception ex)
            {
                string error = ex.Message;
                return new List<DefinitionAssetSiteVM>();
            }
        }
        public IEnumerable<DefinitionAssetSiteVM> GetAssetDepreciationTransactionReport(int CompanyID, int VouchrNo, Boolean ApproveLastConsumptionDate, Boolean ApproveConsumptionDate,
                                                               DateTime FromLastConsumptionDate, DateTime ToLastConsumptionDate, DateTime FromConsumptionDate, DateTime ToConsumptionDate)
        {
            if (ApproveLastConsumptionDate)
            {
                try
                {
                    return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                        " Select AssetID, AssetCost, AssetConsumRatio, CombinedConsum, BookValue, ValueofConsumption, AnnualConsumption, PreviousConsumption, LastConsumptionDate, AssetTypeID, " +
                        " AssetName, VouchrDate, Total, AssetTypeName, ConsumptionDate,VouchrNo " +
                        " From " +
                        " ( " +
                            " Select ATT.AssetID, ATT.AssetCost, ATT.AssetConsumRatio, ATT.CombinedConsum, ATT.BookValue, ATT.ValueofConsumption, ATT.AnnualConsumption, ATT.PreviousConsumption, " +
                            " ATT.LastConsumptionDate As ConsumptionDate, A.fAssetTypeID As AssetTypeID, A.AssetName, cast(AH.VouchrDate as datetime) As VouchrDate, AH.Total,AH.VouchrNo, " +
                           " ( " +
                              " Select ATT.[Name] " +
                              " From AssetTypes ATT " +
                              " Where " +
                              " ATT.CompanyID = A.CompanyID " +
                              " And " +
                              " A.fAssetTypeID = ATT.AssetTypeID " +
                            " ) As AssetTypeName, " +
                            " ( " +
                              " CASE when " +
                              " ( " +
                                " SELECT IsNull(cast(Max(ATTS.LastConsumptionDate) as datetime), cast('1900-01-01' as datetime))  As LastConsumptionDate " +
                                " FROM AssetTransActions ATTS " +
                                " WHERE " +
                                " ATTS.VouchrNo < @VouchrNo " +
                                " And " +
                                " ATT.CompanyID = ATTS.CompanyID " +
                                " And " +
                                " ATT.AssetID = ATTS.AssetID " +
                               " ) = cast(datediff(day, 0, '1900-01-01') as datetime) " +
                               " THEN " +
                               " A.ConsStartDate" +
                               " ELSE " +
                               " ( " +
                                " SELECT IsNull(cast(Max(ATTS.LastConsumptionDate) as datetime), cast('1900-01-01' as datetime))  As LastConsumptionDate " +
                                " FROM AssetTransActions ATTS " +
                                " WHERE " +
                                " ATTS.VouchrNo < @VouchrNo " +
                                " And " +
                                " ATT.CompanyID = ATTS.CompanyID " +
                                " And " +
                                " ATT.AssetID = ATTS.AssetID " +
                               " ) " +
                               " END " +
                            " ) As LastConsumptionDate " +
                            " From AssetTransActions ATT,Assets A, AssetHeaders AH " +
                            " Where " +
                            " ATT.VouchrNo = @VouchrNo " +
                            " And " +
                            " A.AssetID = ATT.AssetID " +
                            " And " +
                            " A.CompanyID = ATT.CompanyID " +
                            " And " +
                            " AH.CompanyID = ATT.CompanyID " +
                            " And " +
                            " AH.VouchrNo = ATT.VouchrNo " +
                            " And " +
                            " ATT.CompanyID = @CompanyID " +
                        " ) As AllData " +
                        " Where " +
                        " cast (datediff (day, 0, LastConsumptionDate) as datetime) >= @FromLastConsumptionDate " +
                        " And " +
                        " cast (datediff (day, 0, LastConsumptionDate) as datetime) <= @ToLastConsumptionDate " +
                        " Order By AssetID "
                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@VouchrNo", VouchrNo)
                   , new SqlParameter("@FromLastConsumptionDate", FromLastConsumptionDate)
                   , new SqlParameter("@ToLastConsumptionDate", ToLastConsumptionDate)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<DefinitionAssetSiteVM>();
                }
            }
            else if (ApproveConsumptionDate)
            {
                try
                {
                    return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                        " Select AssetID, AssetCost, AssetConsumRatio, CombinedConsum, BookValue, ValueofConsumption, AnnualConsumption, PreviousConsumption, LastConsumptionDate, AssetTypeID, " +
                        " AssetName, VouchrDate, Total, AssetTypeName, ConsumptionDate,VouchrNo " +
                        " From " +
                        " ( " +
                            " Select ATT.AssetID, ATT.AssetCost, ATT.AssetConsumRatio, ATT.CombinedConsum, ATT.BookValue, ATT.ValueofConsumption, ATT.AnnualConsumption, ATT.PreviousConsumption, " +
                            " ATT.LastConsumptionDate As ConsumptionDate, A.fAssetTypeID As AssetTypeID, A.AssetName, cast(AH.VouchrDate as datetime) As VouchrDate, AH.Total,AH.VouchrNo, " +
                           " ( " +
                              " Select ATT.[Name] " +
                              " From AssetTypes ATT " +
                              " Where " +
                              " ATT.CompanyID = A.CompanyID " +
                              " And " +
                              " A.fAssetTypeID = ATT.AssetTypeID " +
                            " ) As AssetTypeName, " +
                            " ( " +
                              " CASE when " +
                              " ( " +
                                " SELECT IsNull(cast(Max(ATTS.LastConsumptionDate) as datetime), cast('1900-01-01' as datetime))  As LastConsumptionDate " +
                                " FROM AssetTransActions ATTS " +
                                " WHERE " +
                                " ATTS.VouchrNo < @VouchrNo " +
                                " And " +
                                " ATT.CompanyID = ATTS.CompanyID " +
                                " And " +
                                " ATT.AssetID = ATTS.AssetID " +
                               " ) = cast(datediff(day, 0, '1900-01-01') as datetime) " +
                               " THEN " +
                               " A.ConsStartDate" +
                               " ELSE " +
                               " ( " +
                                " SELECT IsNull(cast(Max(ATTS.LastConsumptionDate) as datetime), cast('1900-01-01' as datetime))  As LastConsumptionDate " +
                                " FROM AssetTransActions ATTS " +
                                " WHERE " +
                                " ATTS.VouchrNo < @VouchrNo " +
                                " And " +
                                " ATT.CompanyID = ATTS.CompanyID " +
                                " And " +
                                " ATT.AssetID = ATTS.AssetID " +
                               " ) " +
                               " END " +
                            " ) As LastConsumptionDate " +
                            " From AssetTransActions ATT,Assets A, AssetHeaders AH " +
                            " Where " +
                            " ATT.VouchrNo = @VouchrNo " +
                            " And " +
                            " A.AssetID = ATT.AssetID " +
                            " And " +
                            " A.CompanyID = ATT.CompanyID " +
                            " And " +
                            " AH.CompanyID = ATT.CompanyID " +
                            " And " +
                            " AH.VouchrNo = ATT.VouchrNo " +
                            " And " +
                            " ATT.CompanyID = @CompanyID " +
                        " ) As AllData " +
                        " Where " +
                        " cast (datediff (day, 0, ConsumptionDate) as datetime) >= @FromConsumptionDate " +
                        " And " +
                        " cast (datediff (day, 0, ConsumptionDate) as datetime) <= @ToConsumptionDate " +
                        " Order By AssetID "
                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@VouchrNo", VouchrNo)
                   , new SqlParameter("@FromConsumptionDate", FromConsumptionDate)
                   , new SqlParameter("@ToConsumptionDate", ToConsumptionDate)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<DefinitionAssetSiteVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<DefinitionAssetSiteVM>(
                        " Select AssetID, AssetCost, AssetConsumRatio, CombinedConsum, BookValue, ValueofConsumption, AnnualConsumption, PreviousConsumption, LastConsumptionDate, AssetTypeID, " +
                        " AssetName, VouchrDate, Total, AssetTypeName, ConsumptionDate,VouchrNo " +
                        " From " +
                        " ( " +
                            " Select ATT.AssetID, ATT.AssetCost, ATT.AssetConsumRatio, ATT.CombinedConsum, ATT.BookValue, ATT.ValueofConsumption, ATT.AnnualConsumption, ATT.PreviousConsumption, " +
                            " ATT.LastConsumptionDate As ConsumptionDate, A.fAssetTypeID As AssetTypeID, A.AssetName, cast(AH.VouchrDate as datetime) As VouchrDate, AH.Total,AH.VouchrNo, " +
                           " ( " +
                              " Select ATT.[Name] " +
                              " From AssetTypes ATT " +
                              " Where " +
                              " ATT.CompanyID = A.CompanyID " +
                              " And " +
                              " A.fAssetTypeID = ATT.AssetTypeID " +
                            " ) As AssetTypeName, " +
                            " ( " +
                              " CASE when " +
                              " ( " +
                                " SELECT IsNull(cast(Max(ATTS.LastConsumptionDate) as datetime), cast('1900-01-01' as datetime))  As LastConsumptionDate " +
                                " FROM AssetTransActions ATTS " +
                                " WHERE " +
                                " ATTS.VouchrNo < @VouchrNo " +
                                " And " +
                                " ATT.CompanyID = ATTS.CompanyID " +
                                " And " +
                                " ATT.AssetID = ATTS.AssetID " +
                               " ) = cast(datediff(day, 0, '1900-01-01') as datetime) " +
                               " THEN " +
                               " A.ConsStartDate" +
                               " ELSE " +
                               " ( " +
                                " SELECT IsNull(cast(Max(ATTS.LastConsumptionDate) as datetime), cast('1900-01-01' as datetime))  As LastConsumptionDate " +
                                " FROM AssetTransActions ATTS " +
                                " WHERE " +
                                " ATTS.VouchrNo < @VouchrNo " +
                                " And " +
                                " ATT.CompanyID = ATTS.CompanyID " +
                                " And " +
                                " ATT.AssetID = ATTS.AssetID " +
                               " ) " +
                               " END " +
                            " ) As LastConsumptionDate " +
                            " From AssetTransActions ATT,Assets A, AssetHeaders AH " +
                            " Where " +
                            " ATT.VouchrNo = @VouchrNo " +
                            " And " +
                            " A.AssetID = ATT.AssetID " +
                            " And " +
                            " A.CompanyID = ATT.CompanyID " +
                            " And " +
                            " AH.CompanyID = ATT.CompanyID " +
                            " And " +
                            " AH.VouchrNo = ATT.VouchrNo " +
                            " And " +
                            " ATT.CompanyID = @CompanyID " +
                        " ) As AllData " +
                        " Order By AssetID "
                   , new SqlParameter("@CompanyID", CompanyID)
                   , new SqlParameter("@VouchrNo", VouchrNo)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<DefinitionAssetSiteVM>();
                }
            }

        }
        public IEnumerable<TempPrepaidAndRevenueReceivedVM> GetTempRevenueReport(int CompanyID, Boolean All, Boolean Collector, Boolean NotCollected, DateTime FromCollectionDate, DateTime ToCollectionDate)
        {
            if (All)
            {
                if (Resources.Resource.CurLang == "Arb")
                {
                    try
                    {
                        return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                         " Select TD.VoucherNumber, TD.VoucherDate, TD.CollectionDate, TD.Amount, TD.Note, TD.FromAccountNumber As RevenueReceivedAccountNumber, " +
                         " TD.ToAccountNumber As RevenueAccountNumber,A.UserName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.FromAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As RevenueReceivedAccountName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.ToAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As RevenueAccountName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.FromCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) RevenueReceivedCostName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.ToCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) RevenueCostName, " +
                         " (Case " +
                           " When TD.Exported = 0 Then N'غير محصل' " +
                           " Else N'محصل' " +
                           " End) As Exported " +
                         " From TempPrepaidAndRevenueReceivedDetails  TD,AspNetUsers A " +
                         " Where " +
                         " TD.TransactionKindNo = 18 " +
                         " And " +
                         " TD.CompanyID = @CompanyID " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) >= @FromCollectionDate " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) <= @ToCollectionDate " +
                         " And " +
                         " TD.InsUserID = A.Id " +
                         " And " +
                         " TD.CompanyID = A.fCompanyId "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromCollectionDate", FromCollectionDate)
                        , new SqlParameter("@ToCollectionDate", ToCollectionDate)
                       ).ToList();
                    }
                    catch
                    {
                        return new List<TempPrepaidAndRevenueReceivedVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                         " Select TD.VoucherNumber, TD.VoucherDate, TD.CollectionDate, TD.Amount, TD.Note, TD.FromAccountNumber As RevenueReceivedAccountNumber, " +
                         " TD.ToAccountNumber As RevenueAccountNumber,A.UserName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.FromAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As RevenueReceivedAccountName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.ToAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As RevenueAccountName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.FromCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) RevenueReceivedCostName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.ToCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) RevenueCostName, " +
                         " (Case " +
                           " When TD.Exported = 0 Then 'Not Collected' " +
                           " Else 'Collector' " +
                           " End) As Exported " +
                         " From TempPrepaidAndRevenueReceivedDetails  TD,AspNetUsers A " +
                         " Where " +
                         " TD.TransactionKindNo = 18 " +
                         " And " +
                         " TD.CompanyID = @CompanyID " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) >= @FromCollectionDate " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) <= @ToCollectionDate " +
                         " And " +
                         " TD.InsUserID = A.Id " +
                         " And " +
                         " TD.CompanyID = A.fCompanyId "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromCollectionDate", FromCollectionDate)
                        , new SqlParameter("@ToCollectionDate", ToCollectionDate)
                        ).ToList();
                    }
                    catch
                    {
                        return new List<TempPrepaidAndRevenueReceivedVM>();
                    }
                }
            }
            else if (Collector)
            {
                if (Resources.Resource.CurLang == "Arb")
                {
                    try
                    {
                        return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                         " Select TD.VoucherNumber, TD.VoucherDate, TD.CollectionDate, TD.Amount, TD.Note, TD.FromAccountNumber As RevenueReceivedAccountNumber, " +
                         " TD.ToAccountNumber As RevenueAccountNumber,A.UserName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.FromAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As RevenueReceivedAccountName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.ToAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As RevenueAccountName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.FromCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) RevenueReceivedCostName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.ToCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) RevenueCostName, " +
                         " (Case " +
                           " When TD.Exported = 0 Then N'غير محصل' " +
                           " Else N'محصل' " +
                           " End) As Exported " +
                         " From TempPrepaidAndRevenueReceivedDetails  TD,AspNetUsers A " +
                         " Where " +
                         " TD.TransactionKindNo = 18 " +
                         " And " +
                         " TD.Exported = 1 " +
                         " And " +
                         " TD.CompanyID = @CompanyID " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) >= @FromCollectionDate " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) <= @ToCollectionDate " +
                         " And " +
                         " TD.InsUserID = A.Id " +
                         " And " +
                         " TD.CompanyID = A.fCompanyId "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromCollectionDate", FromCollectionDate)
                        , new SqlParameter("@ToCollectionDate", ToCollectionDate)
                        ).ToList();
                    }
                    catch
                    {
                        return new List<TempPrepaidAndRevenueReceivedVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                         " Select TD.VoucherNumber, TD.VoucherDate, TD.CollectionDate, TD.Amount, TD.Note, TD.FromAccountNumber As RevenueReceivedAccountNumber, " +
                         " TD.ToAccountNumber As RevenueAccountNumber,A.UserName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.FromAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As RevenueReceivedAccountName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.ToAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As RevenueAccountName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.FromCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) RevenueReceivedCostName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.ToCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) RevenueCostName, " +
                         " (Case " +
                           " When TD.Exported = 0 Then 'Not Collected' " +
                           " Else 'Collector' " +
                           " End) As Exported " +
                         " From TempPrepaidAndRevenueReceivedDetails  TD,AspNetUsers A " +
                         " Where " +
                         " TD.TransactionKindNo = 18 " +
                         " And " +
                         " TD.Exported = 1 " +
                         " And " +
                         " TD.CompanyID = @CompanyID " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) >= @FromCollectionDate " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) <= @ToCollectionDate " +
                         " And " +
                         " TD.InsUserID = A.Id " +
                         " And " +
                         " TD.CompanyID = A.fCompanyId "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromCollectionDate", FromCollectionDate)
                        , new SqlParameter("@ToCollectionDate", ToCollectionDate)
                        ).ToList();
                    }
                    catch
                    {
                        return new List<TempPrepaidAndRevenueReceivedVM>();
                    }
                }
            }
            else if (NotCollected)
            {
                if (Resources.Resource.CurLang == "Arb")
                {
                    try
                    {
                        return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                         " Select TD.VoucherNumber, TD.VoucherDate, TD.CollectionDate, TD.Amount, TD.Note, TD.FromAccountNumber As RevenueReceivedAccountNumber, " +
                         " TD.ToAccountNumber As RevenueAccountNumber,A.UserName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.FromAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As RevenueReceivedAccountName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.ToAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As RevenueAccountName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.FromCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) RevenueReceivedCostName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.ToCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) RevenueCostName, " +
                         " (Case " +
                           " When TD.Exported = 0 Then N'غير محصل' " +
                           " Else N'محصل' " +
                           " End) As Exported " +
                         " From TempPrepaidAndRevenueReceivedDetails  TD,AspNetUsers A " +
                         " Where " +
                         " TD.TransactionKindNo = 18 " +
                         " And " +
                         " TD.Exported = 0 " +
                         " And " +
                         " TD.CompanyID = @CompanyID " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) >= @FromCollectionDate " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) <= @ToCollectionDate " +
                         " And " +
                         " TD.InsUserID = A.Id " +
                         " And " +
                         " TD.CompanyID = A.fCompanyId "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromCollectionDate", FromCollectionDate)
                        , new SqlParameter("@ToCollectionDate", ToCollectionDate)
                        ).ToList();
                    }
                    catch
                    {
                        return new List<TempPrepaidAndRevenueReceivedVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                         " Select TD.VoucherNumber, TD.VoucherDate, TD.CollectionDate, TD.Amount, TD.Note, TD.FromAccountNumber As RevenueReceivedAccountNumber, " +
                         " TD.ToAccountNumber As RevenueAccountNumber,A.UserName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.FromAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As RevenueReceivedAccountName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.ToAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As RevenueAccountName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.FromCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) RevenueReceivedCostName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.ToCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) RevenueCostName, " +
                         " (Case " +
                           " When TD.Exported = 0 Then 'Not Collected' " +
                           " Else 'Collector' " +
                           " End) As Exported " +
                         " From TempPrepaidAndRevenueReceivedDetails  TD,AspNetUsers A " +
                         " Where " +
                         " TD.TransactionKindNo = 18 " +
                         " And " +
                         " TD.Exported = 0 " +
                         " And " +
                         " TD.CompanyID = @CompanyID " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) >= @FromCollectionDate " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) <= @ToCollectionDate " +
                         " And " +
                         " TD.InsUserID = A.Id " +
                         " And " +
                         " TD.CompanyID = A.fCompanyId "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromCollectionDate", FromCollectionDate)
                        , new SqlParameter("@ToCollectionDate", ToCollectionDate)
                        ).ToList();
                    }
                    catch
                    {
                        return new List<TempPrepaidAndRevenueReceivedVM>();
                    }
                }
            }
            else
            {
                if (Resources.Resource.CurLang == "Arb")
                {
                    try
                    {
                        return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                         " Select TD.VoucherNumber, TD.VoucherDate, TD.CollectionDate, TD.Amount, TD.Note, TD.FromAccountNumber As RevenueReceivedAccountNumber, " +
                         " TD.ToAccountNumber As RevenueAccountNumber,A.UserName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.FromAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As RevenueReceivedAccountName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.ToAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As RevenueAccountName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.FromCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) RevenueReceivedCostName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.ToCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) RevenueCostName, " +
                         " (Case " +
                           " When TD.Exported = 0 Then N'غير محصل' " +
                           " Else N'محصل' " +
                           " End) As Exported " +
                         " From TempPrepaidAndRevenueReceivedDetails  TD,AspNetUsers A " +
                         " Where " +
                         " TD.TransactionKindNo = 18 " +
                         " And " +
                         " TD.CompanyID = @CompanyID " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) >= @FromCollectionDate " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) <= @ToCollectionDate " +
                         " And " +
                         " TD.InsUserID = A.Id " +
                         " And " +
                         " TD.CompanyID = A.fCompanyId "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromCollectionDate", FromCollectionDate)
                        , new SqlParameter("@ToCollectionDate", ToCollectionDate)
                       ).ToList();
                    }
                    catch
                    {
                        return new List<TempPrepaidAndRevenueReceivedVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                         " Select TD.VoucherNumber, TD.VoucherDate, TD.CollectionDate, TD.Amount, TD.Note, TD.FromAccountNumber As RevenueReceivedAccountNumber, " +
                         " TD.ToAccountNumber As RevenueAccountNumber,A.UserName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.FromAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As RevenueReceivedAccountName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.ToAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As RevenueAccountName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.FromCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) RevenueReceivedCostName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.ToCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) RevenueCostName, " +
                         " (Case " +
                           " When TD.Exported = 0 Then 'Not Collected' " +
                           " Else 'Collector' " +
                           " End) As Exported " +
                         " From TempPrepaidAndRevenueReceivedDetails  TD,AspNetUsers A " +
                         " Where " +
                         " TD.TransactionKindNo = 18 " +
                         " And " +
                         " TD.CompanyID = @CompanyID " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) >= @FromCollectionDate " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) <= @ToCollectionDate " +
                         " And " +
                         " TD.InsUserID = A.Id " +
                         " And " +
                         " TD.CompanyID = A.fCompanyId "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromCollectionDate", FromCollectionDate)
                        , new SqlParameter("@ToCollectionDate", ToCollectionDate)
                        ).ToList();
                    }
                    catch
                    {
                        return new List<TempPrepaidAndRevenueReceivedVM>();
                    }
                }
            }
        }
        public IEnumerable<TempPrepaidAndRevenueReceivedVM> GetTempPrepaidReport(int CompanyID, Boolean All, Boolean Collector, Boolean NotCollected, DateTime FromCollectionDate, DateTime ToCollectionDate)
        {
            if (All)
            {
                if (Resources.Resource.CurLang == "Arb")
                {
                    try
                    {
                        return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                         " Select TD.VoucherNumber, TD.VoucherDate, TD.CollectionDate, TD.Amount, TD.Note, TD.FromAccountNumber As ExpenseAccountNumber, " +
                         " TD.ToAccountNumber As PrepaidExpenseAccountNumber,A.UserName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.FromAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As ExpenseAccountName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.ToAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As PrepaidExpenseAccountName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.FromCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) ExpenseCostName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.ToCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) PrepaidExpenseCostName, " +
                         " (Case " +
                           " When TD.Exported = 0 Then N'غير محصل' " +
                           " Else N'محصل' " +
                           " End) As Exported " +
                         " From TempPrepaidAndRevenueReceivedDetails  TD,AspNetUsers A " +
                         " Where " +
                         " TD.TransactionKindNo = 17 " +
                         " And " +
                         " TD.CompanyID = @CompanyID " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) >= @FromCollectionDate " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) <= @ToCollectionDate " +
                         " And " +
                         " TD.InsUserID = A.Id " +
                         " And " +
                         " TD.CompanyID = A.fCompanyId "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromCollectionDate", FromCollectionDate)
                        , new SqlParameter("@ToCollectionDate", ToCollectionDate)
                       ).ToList();
                    }
                    catch
                    {
                        return new List<TempPrepaidAndRevenueReceivedVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                         " Select TD.VoucherNumber, TD.VoucherDate, TD.CollectionDate, TD.Amount, TD.Note, TD.FromAccountNumber As ExpenseAccountNumber, " +
                         " TD.ToAccountNumber As PrepaidExpenseAccountNumber,A.UserName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.FromAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As ExpenseAccountName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.ToAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As PrepaidExpenseAccountName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.FromCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) ExpenseCostName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.ToCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) PrepaidExpenseCostName, " +
                         " (Case " +
                           " When TD.Exported = 0 Then N'غير محصل' " +
                           " Else N'محصل' " +
                           " End) As Exported " +
                         " From TempPrepaidAndRevenueReceivedDetails  TD,AspNetUsers A " +
                         " Where " +
                         " TD.TransactionKindNo = 17 " +
                         " And " +
                         " TD.CompanyID = @CompanyID " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) >= @FromCollectionDate " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) <= @ToCollectionDate " +
                         " And " +
                         " TD.InsUserID = A.Id " +
                         " And " +
                         " TD.CompanyID = A.fCompanyId "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromCollectionDate", FromCollectionDate)
                        , new SqlParameter("@ToCollectionDate", ToCollectionDate)
                        ).ToList();
                    }
                    catch
                    {
                        return new List<TempPrepaidAndRevenueReceivedVM>();
                    }
                }
            }
            else if (Collector)
            {
                if (Resources.Resource.CurLang == "Arb")
                {
                    try
                    {
                        return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                         " Select TD.VoucherNumber, TD.VoucherDate, TD.CollectionDate, TD.Amount, TD.Note, TD.FromAccountNumber As ExpenseAccountNumber, " +
                         " TD.ToAccountNumber As PrepaidExpenseAccountNumber,A.UserName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.FromAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As ExpenseAccountName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.ToAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As PrepaidExpenseAccountName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.FromCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) ExpenseCostName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.ToCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) PrepaidExpenseCostName, " +
                         " (Case " +
                           " When TD.Exported = 0 Then N'غير محصل' " +
                           " Else N'محصل' " +
                           " End) As Exported " +
                         " From TempPrepaidAndRevenueReceivedDetails  TD,AspNetUsers A " +
                         " Where " +
                         " TD.TransactionKindNo = 17 " +
                         " And " +
                         " TD.Exported = 1 " +
                         " And " +
                         " TD.CompanyID = @CompanyID " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) >= @FromCollectionDate " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) <= @ToCollectionDate " +
                         " And " +
                         " TD.InsUserID = A.Id " +
                         " And " +
                         " TD.CompanyID = A.fCompanyId "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromCollectionDate", FromCollectionDate)
                        , new SqlParameter("@ToCollectionDate", ToCollectionDate)
                       ).ToList();
                    }
                    catch
                    {
                        return new List<TempPrepaidAndRevenueReceivedVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                         " Select TD.VoucherNumber, TD.VoucherDate, TD.CollectionDate, TD.Amount, TD.Note, TD.FromAccountNumber As ExpenseAccountNumber, " +
                         " TD.ToAccountNumber As PrepaidExpenseAccountNumber,A.UserName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.FromAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As ExpenseAccountName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.ToAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As PrepaidExpenseAccountName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.FromCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) ExpenseCostName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.ToCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) PrepaidExpenseCostName, " +
                         " (Case " +
                           " When TD.Exported = 0 Then N'غير محصل' " +
                           " Else N'محصل' " +
                           " End) As Exported " +
                         " From TempPrepaidAndRevenueReceivedDetails  TD,AspNetUsers A " +
                         " Where " +
                         " TD.TransactionKindNo = 17 " +
                         " And " +
                         " TD.Exported = 1 " +
                         " And " +
                         " TD.CompanyID = @CompanyID " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) >= @FromCollectionDate " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) <= @ToCollectionDate " +
                         " And " +
                         " TD.InsUserID = A.Id " +
                         " And " +
                         " TD.CompanyID = A.fCompanyId "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromCollectionDate", FromCollectionDate)
                        , new SqlParameter("@ToCollectionDate", ToCollectionDate)
                        ).ToList();
                    }
                    catch
                    {
                        return new List<TempPrepaidAndRevenueReceivedVM>();
                    }
                }
            }
            else if (NotCollected)
            {
                if (Resources.Resource.CurLang == "Arb")
                {
                    try
                    {
                        return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                         " Select TD.VoucherNumber, TD.VoucherDate, TD.CollectionDate, TD.Amount, TD.Note, TD.FromAccountNumber As ExpenseAccountNumber, " +
                         " TD.ToAccountNumber As PrepaidExpenseAccountNumber,A.UserName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.FromAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As ExpenseAccountName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.ToAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As PrepaidExpenseAccountName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.FromCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) ExpenseCostName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.ToCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) PrepaidExpenseCostName, " +
                         " (Case " +
                           " When TD.Exported = 0 Then N'غير محصل' " +
                           " Else N'محصل' " +
                           " End) As Exported " +
                         " From TempPrepaidAndRevenueReceivedDetails  TD,AspNetUsers A " +
                         " Where " +
                         " TD.TransactionKindNo = 17 " +
                         " And " +
                         " TD.Exported = 0 " +
                         " And " +
                         " TD.CompanyID = @CompanyID " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) >= @FromCollectionDate " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) <= @ToCollectionDate " +
                         " And " +
                         " TD.InsUserID = A.Id " +
                         " And " +
                         " TD.CompanyID = A.fCompanyId "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromCollectionDate", FromCollectionDate)
                        , new SqlParameter("@ToCollectionDate", ToCollectionDate)
                       ).ToList();
                    }
                    catch
                    {
                        return new List<TempPrepaidAndRevenueReceivedVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                         " Select TD.VoucherNumber, TD.VoucherDate, TD.CollectionDate, TD.Amount, TD.Note, TD.FromAccountNumber As ExpenseAccountNumber, " +
                         " TD.ToAccountNumber As PrepaidExpenseAccountNumber,A.UserName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.FromAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As ExpenseAccountName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.ToAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As PrepaidExpenseAccountName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.FromCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) ExpenseCostName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.ToCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) PrepaidExpenseCostName, " +
                         " (Case " +
                           " When TD.Exported = 0 Then N'غير محصل' " +
                           " Else N'محصل' " +
                           " End) As Exported " +
                         " From TempPrepaidAndRevenueReceivedDetails  TD,AspNetUsers A " +
                         " Where " +
                         " TD.TransactionKindNo = 17 " +
                         " And " +
                         " TD.Exported = 0 " +
                         " And " +
                         " TD.CompanyID = @CompanyID " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) >= @FromCollectionDate " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) <= @ToCollectionDate " +
                         " And " +
                         " TD.InsUserID = A.Id " +
                         " And " +
                         " TD.CompanyID = A.fCompanyId "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromCollectionDate", FromCollectionDate)
                        , new SqlParameter("@ToCollectionDate", ToCollectionDate)
                        ).ToList();
                    }
                    catch
                    {
                        return new List<TempPrepaidAndRevenueReceivedVM>();
                    }
                }
            }
            else
            {
                if (Resources.Resource.CurLang == "Arb")
                {
                    try
                    {
                        return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                         " Select TD.VoucherNumber, TD.VoucherDate, TD.CollectionDate, TD.Amount, TD.Note, TD.FromAccountNumber As ExpenseAccountNumber, " +
                         " TD.ToAccountNumber As PrepaidExpenseAccountNumber,A.UserName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.FromAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As ExpenseAccountName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.ToAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As PrepaidExpenseAccountName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.FromCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) ExpenseCostName, " +
                         " ( " +
                           " Select CC.ArabicName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.ToCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) PrepaidExpenseCostName, " +
                         " (Case " +
                           " When TD.Exported = 0 Then N'غير محصل' " +
                           " Else N'محصل' " +
                           " End) As Exported " +
                         " From TempPrepaidAndRevenueReceivedDetails  TD,AspNetUsers A " +
                         " Where " +
                         " TD.TransactionKindNo = 17 " +
                         " And " +
                         " TD.CompanyID = @CompanyID " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) >= @FromCollectionDate " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) <= @ToCollectionDate " +
                         " And " +
                         " TD.InsUserID = A.Id " +
                         " And " +
                         " TD.CompanyID = A.fCompanyId "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromCollectionDate", FromCollectionDate)
                        , new SqlParameter("@ToCollectionDate", ToCollectionDate)
                       ).ToList();
                    }
                    catch
                    {
                        return new List<TempPrepaidAndRevenueReceivedVM>();
                    }
                }
                else
                {
                    try
                    {
                        return _context.Database.SqlQuery<TempPrepaidAndRevenueReceivedVM>(
                         " Select TD.VoucherNumber, TD.VoucherDate, TD.CollectionDate, TD.Amount, TD.Note, TD.FromAccountNumber As ExpenseAccountNumber, " +
                         " TD.ToAccountNumber As PrepaidExpenseAccountNumber,A.UserName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.FromAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As ExpenseAccountName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From ChartOfAccounts CC " +
                           " Where " +
                           " TD.ToAccountNumber = CC.AccountNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) As PrepaidExpenseAccountName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.FromCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) ExpenseCostName, " +
                         " ( " +
                           " Select CC.EnglishName " +
                           " From CostCenters CC " +
                           " Where " +
                           " TD.ToCostCenter = CC.CostNumber " +
                           " And " +
                           " TD.CompanyID = CC.CompanyID " +
                         " ) PrepaidExpenseCostName, " +
                         " (Case " +
                           " When TD.Exported = 0 Then N'غير محصل' " +
                           " Else N'محصل' " +
                           " End) As Exported " +
                         " From TempPrepaidAndRevenueReceivedDetails  TD,AspNetUsers A " +
                         " Where " +
                         " TD.TransactionKindNo = 17 " +
                         " And " +
                         " TD.CompanyID = @CompanyID " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) >= @FromCollectionDate " +
                         " And " +
                         " cast (datediff (day, 0, TD.CollectionDate) as datetime) <= @ToCollectionDate " +
                         " And " +
                         " TD.InsUserID = A.Id " +
                         " And " +
                         " TD.CompanyID = A.fCompanyId "
                        , new SqlParameter("@CompanyID", CompanyID)
                        , new SqlParameter("@FromCollectionDate", FromCollectionDate)
                        , new SqlParameter("@ToCollectionDate", ToCollectionDate)
                        ).ToList();
                    }
                    catch
                    {
                        return new List<TempPrepaidAndRevenueReceivedVM>();
                    }
                }
            }
        }
        public void DeleteDefinitionAsset(int CompanyID, int AssetID)
        {
            _context.Database.ExecuteSqlCommand(
                 " Delete  From DefinitionAssetSites " +
                 " where CompanyID=@CompanyID and AssetID=@AssetID "

                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@AssetID", AssetID)


                 );
        }
        public int CheckCurrency(int CompanyID, int CurrencyID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct CurrencyID From( " +
                " Select CurrencyID From ChartOfAccounts " +
                " Where " +
                " CompanyID =@CompanyID " +
                " And " +
                " CurrencyID =@CurrencyID " +
                " Union All " +
                " Select fCurrencyID As CurrencyID From Headers " +
                " Where " +
                " CompanyID =@CompanyID " +
                " And " +
                " fCurrencyID =@CurrencyID " +
                " Union All " +
                " Select fCurrencyID As CurrencyID From Papers " +
                " Where " +
                " CompanyID =@CompanyID " +
                " And " +
                " fCurrencyID =@CurrencyID " +
                " Union All " +
                " Select fCurrencyID As CurrencyID From TracingPapers " +
                " Where " +
                " CompanyID =@CompanyID " +
                " And " +
                " fCurrencyID =@CurrencyID " +
                " Union All " +
                " Select CurrencyID From CurrencyValues " +
                " Where " +
                " CompanyID =@CompanyID " +
                " And " +
                " CurrencyID =@CurrencyID " +
                " ) As CurrencyID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@CurrencyID", CurrencyID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckSale(int CompanyID, int SaleID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct SalesID From( " +
                " Select SalesID From ChartOfAccounts " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SalesID = @SaleID " +
                " Union All " +
                " Select SaleManNo As SalesID From HeaderServiceBills " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SaleManNo = @SaleID " +
                " Union All " +
                " Select  SaleID As SalesID  From Headers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SaleID = @SaleID " +
                " Union All " +
                " Select  SaleID As SalesID   From Papers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SaleID = @SaleID " +
                " Union All " +
                " Select  SaleID As SalesID   From TracingPapers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SaleID = @SaleID " +
                " Union All " +
                " Select  SaleID As SalesID   From St_Header " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SaleID = @SaleID " +
                " ) As SalesID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@SaleID", SaleID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckCompanyTransactionKind(int CompanyID, int CompanyTransactionKindID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct CompanyTransactionKindNo From( " +
                " Select CompanyTransactionKindNo From HeaderServiceBills " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindID " +
                " Union All " +
                " Select CompanyTransactionKindNo From TransActionServiceBills " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindID " +
                " Union All " +
                " Select  CompanyTransactionKindNo  From TempPrepaidAndRevenueReceivedDetails " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindID " +
                " Union All " +
                " Select  CompanyTransactionKindNo  From Transactions " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindID " +
                " Union All " +
                " Select  CompanyTransactionKindNo  From Headers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindID " +
                " Union All " +
                " Select  CompanyTransactionKindNo  From Papers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindID " +
                " Union All " +
                " Select  CompanyTransactionKindNo  From TracingPapers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindID " +
                " Union All " +
                " Select  CompanyTransactionKindNo  From St_Transaction " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindID " +
                " Union All " +
                " Select  CompanyTransactionKindNo  From St_Header " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindID " +
                " Union All " +
                " Select  CompanyTransactionKindNo  From St_TransactionH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindID " +
                " Union All " +
                " Select  CompanyTransactionKindNo  From St_HeaderH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindID " +
               " ) As CompanyTransactionKindNo "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@CompanyTransactionKindID", CompanyTransactionKindID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckServiceGroup(int CompanyID, int ServiceGroupID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct ServiceGroupID From[Services] " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ServiceGroupID = @ServiceGroupID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@ServiceGroupID", ServiceGroupID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckService(int CompanyID, int ServicID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct ServiceNo From TransActionServiceBills " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ServiceNo = @ServicID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@ServicID", ServicID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public string CheckDefinitionBank(int CompanyID, string AccountNumber)
        {
            try
            {
                string Checked = _context.Database.SqlQuery<string>(
                " Select Distinct AccountNumber From " +
                " ( " +
                " Select AccountNumberFirst As AccountNumber From Papers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberFirst = @AccountNumber " +
                " Union All " +
                " Select AccountNumberSecond As AccountNumber From Papers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberSecond = @AccountNumber " +
                " Union All " +
                " Select AccountNumberThird As AccountNumber From Papers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberThird = @AccountNumber " +
                " Union All " +
                " Select AccountNumberFourth As AccountNumber From Papers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberFourth = @AccountNumber " +
                " Union All " +
                " Select AccountNumberFifth As AccountNumber From Papers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberFifth = @AccountNumber " +
                " ) As AccountNumber "

                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@AccountNumber", AccountNumber)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return "";
            }

        }
        public int CheckAssetAdministration(int CompanyID, int AdministrationID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct AdministrationID From DefinitionAssetSites " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AdministrationID = @AdministrationID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@AdministrationID", AdministrationID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckAssetCircle(int CompanyID, int CircleID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct CircleID From DefinitionAssetSites " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CircleID = @CircleID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@CircleID", CircleID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckAssetSection(int CompanyID, int SectionID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct SectionID From DefinitionAssetSites " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SectionID = @SectionID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@SectionID", SectionID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckAssetSite(int CompanyID, int SiteID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct SiteID From DefinitionAssetSites " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SiteID = @SiteID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@SiteID", SiteID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckAssetTrustee(int CompanyID, int TrusteeID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct TrusteeID From DefinitionAssetSites " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " TrusteeID = @TrusteeID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@TrusteeID", TrusteeID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckCustomerArea(int CompanyID, int AreaID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct AreaID From CustomerInformations " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AreaID = @AreaID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@AreaID", AreaID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckCustomerCity(int CompanyID, int CityID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct CityID From CustomerInformations " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CityID = @CityID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@CityID", CityID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckSupplierBank(int CompanyID, int SupplierBankID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct SupplierBankID From SupplierInformations " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SupplierBankID = @SupplierBankID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@SupplierBankID", SupplierBankID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckSupplierBranchBank(int CompanyID, int SupplierBranchBankID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct SupplierBranchBankID From SupplierInformations " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SupplierBranchBankID = @SupplierBranchBankID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@SupplierBranchBankID", SupplierBranchBankID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckSupplierCityBank(int CompanyID, int SupplierCityBankID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct SupplierCityBankID From SupplierInformations " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SupplierCityBankID = @SupplierCityBankID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@SupplierCityBankID", SupplierCityBankID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckSupplierCity(int CompanyID, int SupplierCityID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct SupplierCityID From SupplierInformations " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SupplierCityID = @SupplierCityID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@SupplierCityID", SupplierCityID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckSupplierCountryBank(int CompanyID, int SupplierCountryBankID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct SupplierCountryBankID From SupplierInformations " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SupplierCountryBankID = @SupplierCountryBankID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@SupplierCountryBankID", SupplierCountryBankID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckSupplierCountry(int CompanyID, int SupplierCountryID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct SupplierCountryID From SupplierInformations " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SupplierCountryID = @SupplierCountryID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@SupplierCountryID", SupplierCountryID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckCustomerCityInArea(int CompanyID, int CustomerCityID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct CustomerCityID From CustomerAreas " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CustomerCityID = @CustomerCityID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@CustomerCityID", CustomerCityID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckSupplierBankInBranchBank(int CompanyID, int SupplierBankID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct SupplierBankID From SupplierBranchBanks " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SupplierBankID = @SupplierBankID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@SupplierBankID", SupplierBankID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckSupplierCountryBankInCityBank(int CompanyID, int SupplierCountryBankID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct SupplierCountryBankID From SupplierCityBanks " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SupplierCountryBankID = @SupplierCountryBankID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@SupplierCountryBankID", SupplierCountryBankID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckSupplierCountryInCity(int CompanyID, int SupplierCountryID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct SupplierCountryID From SupplierCities " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SupplierCountryID = @SupplierCountryID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@SupplierCountryID", SupplierCountryID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckAssetType(int CompanyID, int AssetTypeID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct AssetTypeID From( " +
                " Select Distinct FAssetTypeID As AssetTypeID From AssetMaintenances " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " FAssetTypeID = @AssetTypeID " +
                " Union All " +
                " Select FAssetTypeID As AssetTypeID From Assets " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " FAssetTypeID = @AssetTypeID " +
                " Union All " +
                " Select  AssetTypeID From DefinitionAssetSites " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AssetTypeID = @AssetTypeID " +
                " ) As AssetTypeID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@AssetTypeID", AssetTypeID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public int CheckAsset(int CompanyID, int AssetID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct AssetID From( " +
                " Select Distinct AssetID From AssetTransActions " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AssetID = @AssetID " +
                " Union All " +
                " Select AssetID From AssetMaintenances " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AssetID = @AssetID " +
                " Union All " +
                " Select  AssetID From AssetSaleConsums " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AssetID = @AssetID " +
                " ) As AssetID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@AssetID", AssetID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public string CheckAccountNumber(int CompanyID, string AccountNumber)
        {
            try
            {
                string Checked = _context.Database.SqlQuery<string>(
                " Select Distinct AccountNumber From( " +
                " Select Distinct AccountNumber From Transactions " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct AccountNumberFirst As AccountNumber From Papers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberFirst = @AccountNumber " +
                " Union All " +
                " Select Distinct AccountNumberSecond As AccountNumber From Papers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberSecond = @AccountNumber " +
                " Union All " +
                " Select Distinct AccountNumberThird As AccountNumber From Papers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberThird = @AccountNumber " +
                " Union All " +
                " Select Distinct AccountNumberFourth As AccountNumber From Papers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberFourth = @AccountNumber " +
                " Union All " +
                " Select Distinct AccountNumberFifth As AccountNumber From Papers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberFifth = @AccountNumber " +
                " Union All " +
                " Select Distinct BankAccountNumber As AccountNumber From DefinitionBanks " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " BankAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct PostdatedChequeAccountNumber As AccountNumber From DefinitionBanks " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " PostdatedChequeAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct ChequeUnderCollectionAccountNumber As AccountNumber From DefinitionBanks " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ChequeUnderCollectionAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct BillsOfExchangeAccountNumber As AccountNumber From DefinitionBanks " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " BillsOfExchangeAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct DebitAccountNo As AccountNumber From Assets " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " DebitAccountNo = @AccountNumber " +
                " Union All " +
                " Select Distinct CreditAccountNo As AccountNumber From Assets " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CreditAccountNo = @AccountNumber " +
                " Union All " +
                " Select Distinct CreditAccountNo As AccountNumber From AssetMaintenances " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CreditAccountNo = @AccountNumber " +
                " Union All " +
                " Select Distinct AccountNumber From EstimatedBudgets " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct AccountNumber From HeaderServiceBills " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct DebitAccountNumber As AccountNumber From HeaderServiceBills " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " DebitAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct CreditAccountNumber As AccountNumber From HeaderServiceBills " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CreditAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct TaxAccountNumber As AccountNumber From HeaderServiceBills " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " TaxAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct ChequeFundAccountNumber As AccountNumber From OtherAccounts " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ChequeFundAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct ExpensesAccountNumber As AccountNumber From OtherAccounts " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ExpensesAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct PaidExpensesAccountNumber As AccountNumber From OtherAccounts " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " PaidExpensesAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct CashFundsAccountNumber As AccountNumber From OtherAccounts " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CashFundsAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct RevenuesAccountNumber As AccountNumber From OtherAccounts " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " RevenuesAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct RevenuesReceivedAccountNumber As AccountNumber From OtherAccounts " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " RevenuesReceivedAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct SalesTaxAccountNumber As AccountNumber From OtherAccounts " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SalesTaxAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct PurchasesTaxAccountNumber As AccountNumber From OtherAccounts " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " PurchasesTaxAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct FromAccountNumber As AccountNumber From TempPrepaidAndRevenueReceivedDetails " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " FromAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct ToAccountNumber As AccountNumber From TempPrepaidAndRevenueReceivedDetails " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ToAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct AccountNumberFirst As AccountNumber From TracingPapers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberFirst = @AccountNumber " +
                " Union All " +
                " Select Distinct AccountNumberSecond As AccountNumber From TracingPapers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberSecond = @AccountNumber " +
                " Union All " +
                " Select Distinct AccountNumberThird As AccountNumber From TracingPapers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberThird = @AccountNumber " +
                " Union All " +
                " Select Distinct AccountNumberFourth As AccountNumber From TracingPapers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberFourth = @AccountNumber " +
                " Union All " +
                " Select Distinct AccountNumberFifth As AccountNumber From TracingPapers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberFifth = @AccountNumber " +
                " Union All " +
                " Select Distinct AccountNumber From TransActionServiceBills " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct BankAccountNumber As AccountNumber From St_BankH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " BankAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct FundAccountNumber As AccountNumber From St_BranchAccountH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " FundAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct SalesAccountNumber As AccountNumber From St_BranchAccountH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SalesAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct MaintenanceCardAccountNumber As AccountNumber From St_BranchAccountH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " MaintenanceCardAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct ReturnCardAccountNumber As AccountNumber From St_BranchAccountH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ReturnCardAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct TransferFeesAndInstallationAccountNumber As AccountNumber From St_BranchAccountH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " TransferFeesAndInstallationAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct ChequeFundAccountNumber As AccountNumber From St_BranchAccountH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ChequeFundAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct RelocationAccountNumber As AccountNumber From St_BranchAccountH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " RelocationAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct VisaAccountNumber As AccountNumber From St_BranchAccountH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " VisaAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct MasterAccountNumber As AccountNumber From St_BranchAccountH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " MasterAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct AmericanAccountNumber As AccountNumber From St_BranchAccountH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AmericanAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct ArabiCashAccountNumber As AccountNumber From St_BranchAccountH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ArabiCashAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct ExpenseAccountNumber As AccountNumber From St_BranchExpenseAccountH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ExpenseAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct OtherExpenseAccountNumber As AccountNumber From St_BranchOtherExpenseAccountH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " OtherExpenseAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct CommissionAccount As AccountNumber From St_FundingAgencyH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CommissionAccount = @AccountNumber " +
                " Union All " +
                " Select Distinct CustomerOrSupplierAccountNumber As AccountNumber From St_HeaderH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CustomerOrSupplierAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct SupplierAccountNumber As AccountNumber From St_ItemCard " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SupplierAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct SupplierAccountNumber As AccountNumber From St_ItemCardH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SupplierAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct SalesTaxAccountNumber As AccountNumber From St_OtherAccount " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SalesTaxAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct SalesTaxReturnAccountNumber As AccountNumber From St_OtherAccount " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SalesTaxReturnAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct PurchaseTaxAccountNumber As AccountNumber From St_OtherAccount " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " PurchaseTaxAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct PurchaseTaxReturnAccountNumber As AccountNumber From St_OtherAccount " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " PurchaseTaxReturnAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct ForeignPurchaseAccountNumber As AccountNumber From St_OtherAccount " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ForeignPurchaseAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct DirectAccountNumber As AccountNumber From St_OtherAccount " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " DirectAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct DifferenceAccountNumber As AccountNumber From St_OtherAccount " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " DifferenceAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct SalesTaxAccountNumber As AccountNumber From St_OtherAccountH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SalesTaxAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct PurchaseTaxAccountNumber As AccountNumber From St_OtherAccountH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " PurchaseTaxAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct PurchaseAccountNumber As AccountNumber From St_OtherAccountH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " PurchaseAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct ForeignPurchaseAccountNumber As AccountNumber From St_OtherAccountH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ForeignPurchaseAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct DirectAccountNumber As AccountNumber From St_OtherAccountH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " DirectAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct DifferenceAccountNumber As AccountNumber From St_OtherAccountH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " DifferenceAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct AccountNumber From St_Warehouse " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct SalesFundAccountNumber As AccountNumber From St_WarehouseAccount " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SalesFundAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct SalesAccountNumber As AccountNumber From St_WarehouseAccount " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SalesAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct CostOfGoodsAccountNumber As AccountNumber From St_WarehouseAccount " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CostOfGoodsAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct SalesRefundFundAccountNumber As AccountNumber From St_WarehouseAccount " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SalesRefundFundAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct SalesReturnAccountNumber As AccountNumber From St_WarehouseAccount " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SalesReturnAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct ReturnCostOfGoodsAccountNumber As AccountNumber From St_WarehouseAccount " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ReturnCostOfGoodsAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct PurchaseFundAccountNumber As AccountNumber From St_WarehouseAccount " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " PurchaseFundAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct PurchaseAccountNumber As AccountNumber From St_WarehouseAccount " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " PurchaseAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct PurchaseFundReturnAccountNumber As AccountNumber From St_WarehouseAccount " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " PurchaseFundReturnAccountNumber = @AccountNumber " +
                " Union All " +
                " Select Distinct PurchaseReturnAccountNumber As AccountNumber From St_WarehouseAccount " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " PurchaseReturnAccountNumber = @AccountNumber " +
                 " Union All " +
                " Select Distinct HrID As AccountNumber From St_CarpenterH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " HrID = @AccountNumber " +
                  " Union All " +
                " Select Distinct HrID As AccountNumber From St_DelegateReceivingH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " HrID = @AccountNumber " +
                " Union All " +
                " Select AccountNumber  From St_Header " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumber = @AccountNumber " +
                " Union All " +
                " Select OtherExpensesAccountNumber As AccountNumber  From St_Header " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " OtherExpensesAccountNumber = @AccountNumber " +
                  " Union All " +
                " Select HrID As AccountNumber  From St_SalesManH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " HrID = @AccountNumber " +
                  " Union All " +
                " Select  AccountNumber  From AccreditationInformations " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumber = @AccountNumber " +
                 " Union All " +
                " Select  AccountNumber  From SupplierInformations " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumber = @AccountNumber " +
                " Union All " +
                " Select BankAccountNumber As AccountNumber  From SupplierInformations " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " BankAccountNumber = @AccountNumber " +
                 " Union All " +
                " Select  AccountNumberFirst As AccountNumber  From TracingPapers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberFirst = @AccountNumber " +
                " Union All " +
                " Select AccountNumberSecond As AccountNumber  From TracingPapers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberSecond = @AccountNumber " +
                " Union All " +
                " Select AccountNumberThird As AccountNumber  From TracingPapers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberThird = @AccountNumber " +
                      " Union All " +
                " Select AccountNumberFourth As AccountNumber  From TracingPapers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberFourth = @AccountNumber " +
                " Union All " +
                " Select AccountNumberFifth As AccountNumber  From TracingPapers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberFifth = @AccountNumber " +
                " Union All " +
                " Select BillCustomerAccountNumber As AccountNumber  From TracingPapers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " BillCustomerAccountNumber = @AccountNumber " +
                 " Union All " +
                " Select   AccountNumber  From TransActionServiceBills " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumber = @AccountNumber " +
                    " Union All " +
                " Select CustomerNo As AccountNumber  From Headers " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CustomerNo = @AccountNumber " +
                  " Union All " +
                " Select   AccountNumber  From O_TransactionH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumber = @AccountNumber " +
                " Union All " +
                " Select   AccountNumber  From O_TransactionHistoryH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumber = @AccountNumber " +
                  " Union All " +
                " Select   AccountNumberFirst As AccountNumber  From O_PaperH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberFirst = @AccountNumber " +
                " Union All " +
                " Select   AccountNumberSecond As AccountNumber  From O_PaperH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberSecond = @AccountNumber " +
                " Union All " +
                " Select   AccountNumberThird As AccountNumber  From O_PaperH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberThird = @AccountNumber " +
                " Union All " +
                " Select   AccountNumberFourth As AccountNumber  From O_PaperH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberFourth = @AccountNumber " +
                " Union All " +
                " Select   AccountNumberFifth As AccountNumber  From O_PaperH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AccountNumberFifth = @AccountNumber " +
                " Union All " +
                " Select   BillCustomerAccountNumber As AccountNumber  From O_PaperH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " BillCustomerAccountNumber = @AccountNumber " +
                " Union All " +
                " Select   CustomerNo As AccountNumber  From O_HeaderH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CustomerNo = @AccountNumber " +
                " Union All " +
                " Select   BillNumber As AccountNumber  From O_HeaderH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " BillNumber = @AccountNumber " +
                " Union All " +
                " Select   OrderNumber As AccountNumber  From O_HeaderH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " OrderNumber = @AccountNumber " +
                 " Union All " +
                " Select   CustomerNo As AccountNumber  From O_HeaderHistoryH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CustomerNo = @AccountNumber " +
                " Union All " +
                " Select   BillNumber As AccountNumber  From O_HeaderHistoryH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " BillNumber = @AccountNumber " +
                " Union All " +
                " Select   OrderNumber As AccountNumber  From O_HeaderHistoryH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " OrderNumber = @AccountNumber " +
                " Union All " +
                " Select   CustomerAccountNumber As AccountNumber  From O_ReceiptBillHeaderH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CustomerAccountNumber = @AccountNumber " +
                " Union All " +
                " Select   BillAccountNumber As AccountNumber  From O_ReceiptBillHeaderH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " BillAccountNumber = @AccountNumber " +
                " Union All " +
                " Select   CustomerAccountNumber As AccountNumber  From O_ReceiptBillHeaderHistoryH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CustomerAccountNumber = @AccountNumber " +
                " Union All " +
                " Select   BillAccountNumber As AccountNumber  From O_ReceiptBillHeaderHistoryH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " BillAccountNumber = @AccountNumber " +
                " ) As AccountNumber "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@AccountNumber", AccountNumber)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return "";
            }

        }
        public string CheckCostCenter(int CompanyID, string CostNumber)
        {
            try
            {
                string Checked = _context.Database.SqlQuery<string>(
                 " Select Distinct CostNumber From( " +
                 " Select Distinct CostCenter As CostNumber From Transactions " +
                 " Where " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CostCenter = @CostNumber " +
                 " Union All " +
                 " Select Distinct DebitCostNo As CostNumber From Assets " +
                 " Where " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " DebitCostNo = @CostNumber " +
                 " Union All " +
                 " Select Distinct CreditCostNo As CostNumber From Assets " +
                 " Where " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CreditCostNo = @CostNumber " +
                 " Union All " +
                 " Select Distinct CostCenterNumber As CostNumber From EstimatedBudgets " +
                 " Where " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CostCenterNumber = @CostNumber " +
                 " Union All " +
                 " Select Distinct DebitCostNumber As CostNumber From HeaderServiceBills " +
                 " Where " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " DebitCostNumber = @CostNumber " +
                 " Union All " +
                 " Select Distinct CreditCostNumber As CostNumber From HeaderServiceBills " +
                 " Where " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CreditCostNumber = @CostNumber " +
                 " Union All " +
                 " Select Distinct TaxCostNumber As CostNumber From HeaderServiceBills " +
                 " Where " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " TaxCostNumber = @CostNumber " +
                 " Union All " +
                 " Select Distinct FromCostCenter As CostNumber From TempPrepaidAndRevenueReceivedDetails " +
                 " Where " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " FromCostCenter = @CostNumber " +
                 " Union All " +
                 " Select Distinct ToCostCenter As CostNumber From TempPrepaidAndRevenueReceivedDetails " +
                 " Where " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " ToCostCenter = @CostNumber " +
                 " Union All " +
                 " Select Distinct CostNumber From TransActionServiceBills " +
                 " Where " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CostNumber = @CostNumber " +
                 " Union All " +
                 " Select Distinct CostCenterNumber As CostNumber From St_Warehouse " +
                 " Where " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " CostCenterNumber = @CostNumber " +
                 " ) As CostNumber "

                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@CostNumber", CostNumber)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return "";
            }

        }
        public IEnumerable<FreezeTransactionVM> GetAllFreezeTransaction(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<FreezeTransactionVM>(
                    " Select MN.ArabicName As[MonthName], MN.Id As MonthID, " +
                    " ( " +
                      " Case When  " +
                      " MN.Id in (Select FT.MonthID From FreezeTransactions FT Where FT.CompanyID = @CompanyID )  " +
                      " Then " +
                      " N'مجمد' " +
                      " else " +
                      " N'غير مجمد' " +
                      " End " +
                    " ) As MonthCase, " +
                    " ( " +
                      " Case When " +
                      " MN.Id in (Select FT.MonthID From FreezeTransactions FT Where FT.CompanyID = @CompanyID ) " +
                      " Then " +
                      " 1 " +
                      " else " +
                      " 0 " +
                      " End " +
                    " ) As MonthCaseID " +
                    " From MonthNames MN "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<FreezeTransactionVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<FreezeTransactionVM>(
                    " Select MN.EnglishName As[MonthName], MN.Id As MonthID, " +
                    " ( " +
                      " Case When  " +
                      " MN.Id in (Select FT.MonthID From FreezeTransactions FT Where FT.CompanyID = @CompanyID )  " +
                      " Then " +
                      " 'Freeze' " +
                      " else " +
                      " 'UnFreeze' " +
                      " End " +
                    " ) As MonthCase, " +
                    " ( " +
                      " Case When " +
                      " MN.Id in (Select FT.MonthID From FreezeTransactions FT Where FT.CompanyID = @CompanyID ) " +
                      " Then " +
                      " 1 " +
                      " else " +
                      " 0 " +
                      " End " +
                    " ) As MonthCaseID " +
                    " From MonthNames MN "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<FreezeTransactionVM>();
                }
            }

        }
        public double GetTotalUnpaidChequesReceived(int CompanyID, DateTime Fromdate, DateTime ToDate, string Acc)
        {
            try
            {
                return _context.Database.SqlQuery<Double>(
                    " Select ISNull(Sum(ChequeAmount), 0) As ChequeAmount From Papers " +
                    " Where " +
                    " ChequeCase in (1, 2) " +
                    " And " +
                    " ( " +
                     " AccountNumberSecond = @Acc " +
                     " Or " +
                     " AccountNumberFourth = @Acc " +
                     " Or " +
                     " BillCustomerAccountNumber = @Acc " +
                    " ) " +
                    " And " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " cast (datediff (day, 0, VoucherDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, VoucherDate) as datetime) <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@Acc", Acc)
             ).FirstOrDefault();

            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }


        }
        public IEnumerable<PaperFilterVM> GetUnpaidChequesReceived(int CompanyID, DateTime Fromdate, DateTime ToDate, string Acc)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                     " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, " +
                     " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                     " P.CompanyYear, P.sChequeDate, P.TransactionKindNo, P.VoucherDate, P.DrawerName, " +
                     " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber, P.VHI, " +
                     " ( " +
                       " Select C.ArabicName From ChartOfAccounts C " +
                       " Where " +
                       " P.CompanyID = C.CompanyID " +
                       " And " +
                       " P.AccountNumberSecond = C.AccountNumber " +
                     " ) As CustomerName, " +
                     " ( " +
                         " Select DB.ArabicName From DrawnBanks DB " +
                         " Where " +
                         " P.AccountNumberThird = DB.BankID " +
                         " And " +
                         " P.CompanyID = DB.CompanyID " +
                     " ) As BankName, " +
                     " ( " +
                       " Select C.ArabicName From ChartOfAccounts C " +
                       " Where " +
                       " P.CompanyID = C.CompanyID " +
                       " And " +
                       " P.AccountNumberFirst = C.AccountNumber " +
                     " ) As ChequeBoxName, " +
                      " ( " +
                        " Select C.ArabicName From ChartOfAccounts C " +
                        " Where " +
                        " P.CompanyID = C.CompanyID " +
                        " And " +
                        " P.BillCustomerAccountNumber = C.AccountNumber " +
                      " ) As BillCustomerName " +
                      " From Papers P " +
                      " Where " +
                      " P.ChequeCase in(1, 2) " +
                      " And " +
                      " P.CompanyID = @CompanyID " +
                    " And " +
                    " ( " +
                      " P.AccountNumberSecond = @Acc " +
                      " Or " +
                     " P.AccountNumberFourth = @Acc " +
                     " Or " +
                     " P.BillCustomerAccountNumber = @Acc " +
                     " ) " +
                     " And " +
                     " cast (datediff (day, 0, P.VoucherDate) as datetime) >= @FromDate " +
                     " And " +
                     " cast (datediff (day, 0, P.VoucherDate) as datetime) <= @ToDate " +
                     " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@Acc", Acc)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, " +
                     " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                     " P.CompanyYear, P.sChequeDate, P.TransactionKindNo, P.VoucherDate, P.DrawerName, " +
                     " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber, P.VHI, " +
                     " ( " +
                       " Select C.EnglishName From ChartOfAccounts C " +
                       " Where " +
                       " P.CompanyID = C.CompanyID " +
                       " And " +
                       " P.AccountNumberSecond = C.AccountNumber " +
                     " ) As CustomerName, " +
                     " ( " +
                         " Select DB.EnglishName From DrawnBanks DB " +
                         " Where " +
                         " P.AccountNumberThird = DB.BankID " +
                         " And " +
                         " P.CompanyID = DB.CompanyID " +
                     " ) As BankName, " +
                     " ( " +
                       " Select C.EnglishName From ChartOfAccounts C " +
                       " Where " +
                       " P.CompanyID = C.CompanyID " +
                       " And " +
                       " P.AccountNumberFirst = C.AccountNumber " +
                     " ) As ChequeBoxName, " +
                      " ( " +
                        " Select C.EnglishName From ChartOfAccounts C " +
                        " Where " +
                        " P.CompanyID = C.CompanyID " +
                        " And " +
                        " P.BillCustomerAccountNumber = C.AccountNumber " +
                      " ) As BillCustomerName " +
                      " From Papers P " +
                      " Where " +
                      " P.ChequeCase in(1, 2) " +
                      " And " +
                      " P.CompanyID = @CompanyID " +
                    " And " +
                    " ( " +
                      " P.AccountNumberSecond = @Acc " +
                      " Or " +
                     " P.AccountNumberFourth = @Acc " +
                     " Or " +
                     " P.BillCustomerAccountNumber = @Acc " +
                     " ) " +
                     " And " +
                     " cast (datediff (day, 0, P.VoucherDate) as datetime) >= @FromDate " +
                     " And " +
                     " cast (datediff (day, 0, P.VoucherDate) as datetime) <= @ToDate " +
                     " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@Acc", Acc)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }

        }
        public IEnumerable<PaperFilterVM> GetUnpaidFundCheques(int CompanyID, DateTime dToday)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                     " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, " +
                     " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                     " P.CompanyYear, P.sChequeDate, P.TransactionKindNo, P.VoucherDate, P.DrawerName, " +
                     " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber, P.VHI, " +
                     " ( " +
                       " Select C.ArabicName From ChartOfAccounts C " +
                       " Where " +
                       " P.CompanyID = C.CompanyID " +
                       " And " +
                       " P.AccountNumberSecond = C.AccountNumber " +
                     " ) As CustomerName, " +
                     " ( " +
                         " Select DB.ArabicName From DrawnBanks DB " +
                         " Where " +
                         " P.AccountNumberThird = DB.BankID " +
                         " And " +
                         " P.CompanyID = DB.CompanyID " +
                     " ) As BankName, " +
                     " ( " +
                       " Select C.ArabicName From ChartOfAccounts C " +
                       " Where " +
                       " P.CompanyID = C.CompanyID " +
                       " And " +
                       " P.AccountNumberFirst = C.AccountNumber " +
                     " ) As ChequeBoxName, " +
                      " ( " +
                        " Select C.ArabicName From ChartOfAccounts C " +
                        " Where " +
                        " P.CompanyID = C.CompanyID " +
                        " And " +
                        " P.BillCustomerAccountNumber = C.AccountNumber " +
                      " ) As BillCustomerName " +
                      " From Papers P " +
                      " Where " +
                      " P.ChequeCase = 1 " +
                      " And " +
                      " P.CompanyID = @CompanyID " +
                    " And " +
                     " cast (datediff (day, 0, P.ChequeDate) as datetime) = @dToday " +
                     " Order By P.ChequeDate "
                    , new SqlParameter("@dToday", dToday)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, " +
                     " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                     " P.CompanyYear, P.sChequeDate, P.TransactionKindNo, P.VoucherDate, P.DrawerName, " +
                     " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber, P.VHI, " +
                     " ( " +
                       " Select C.EnglishName From ChartOfAccounts C " +
                       " Where " +
                       " P.CompanyID = C.CompanyID " +
                       " And " +
                       " P.AccountNumberSecond = C.AccountNumber " +
                     " ) As CustomerName, " +
                     " ( " +
                         " Select DB.EnglishName From DrawnBanks DB " +
                         " Where " +
                         " P.AccountNumberThird = DB.BankID " +
                         " And " +
                         " P.CompanyID = DB.CompanyID " +
                     " ) As BankName, " +
                     " ( " +
                       " Select C.EnglishName From ChartOfAccounts C " +
                       " Where " +
                       " P.CompanyID = C.CompanyID " +
                       " And " +
                       " P.AccountNumberFirst = C.AccountNumber " +
                     " ) As ChequeBoxName, " +
                      " ( " +
                        " Select C.EnglishName From ChartOfAccounts C " +
                        " Where " +
                        " P.CompanyID = C.CompanyID " +
                        " And " +
                        " P.BillCustomerAccountNumber = C.AccountNumber " +
                      " ) As BillCustomerName " +
                      " From Papers P " +
                      " Where " +
                      " P.ChequeCase = 1 " +
                      " And " +
                      " P.CompanyID = @CompanyID " +
                    " And " +
                     " cast (datediff (day, 0, P.ChequeDate) as datetime) = @dToday " +
                     " Order By P.ChequeDate "
                    , new SqlParameter("@dToday", dToday)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }

        }
        public IEnumerable<PaperFilterVM> GetUnpaidUnderCollectionCheques(int CompanyID, DateTime dToday)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                     " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, " +
                     " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                     " P.CompanyYear, P.sChequeDate, P.TransactionKindNo, P.VoucherDate, P.DrawerName, " +
                     " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber, P.VHI, " +
                     " ( " +
                       " Select C.ArabicName From ChartOfAccounts C " +
                       " Where " +
                       " P.CompanyID = C.CompanyID " +
                       " And " +
                       " P.AccountNumberSecond = C.AccountNumber " +
                     " ) As CustomerName, " +
                     " ( " +
                         " Select DB.ArabicName From DrawnBanks DB " +
                         " Where " +
                         " P.AccountNumberThird = DB.BankID " +
                         " And " +
                         " P.CompanyID = DB.CompanyID " +
                     " ) As BankName, " +
                     " ( " +
                       " Select C.ArabicName From ChartOfAccounts C " +
                       " Where " +
                       " P.CompanyID = C.CompanyID " +
                       " And " +
                       " P.AccountNumberFirst = C.AccountNumber " +
                     " ) As ChequeBoxName, " +
                      " ( " +
                        " Select C.ArabicName From ChartOfAccounts C " +
                        " Where " +
                        " P.CompanyID = C.CompanyID " +
                        " And " +
                        " P.BillCustomerAccountNumber = C.AccountNumber " +
                      " ) As BillCustomerName " +
                      " From Papers P " +
                      " Where " +
                      " P.ChequeCase = 2 " +
                      " And " +
                      " P.CompanyID = @CompanyID " +
                    " And " +
                     " cast (datediff (day, 0, P.ChequeDate) as datetime) = @dToday " +
                     " Order By P.ChequeDate "
                    , new SqlParameter("@dToday", dToday)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, " +
                     " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                     " P.CompanyYear, P.sChequeDate, P.TransactionKindNo, P.VoucherDate, P.DrawerName, " +
                     " P.IsBill, P.BillCustomerAccountNumber As BillCustomerNumber, P.VHI, " +
                     " ( " +
                       " Select C.EnglishName From ChartOfAccounts C " +
                       " Where " +
                       " P.CompanyID = C.CompanyID " +
                       " And " +
                       " P.AccountNumberSecond = C.AccountNumber " +
                     " ) As CustomerName, " +
                     " ( " +
                         " Select DB.EnglishName From DrawnBanks DB " +
                         " Where " +
                         " P.AccountNumberThird = DB.BankID " +
                         " And " +
                         " P.CompanyID = DB.CompanyID " +
                     " ) As BankName, " +
                     " ( " +
                       " Select C.EnglishName From ChartOfAccounts C " +
                       " Where " +
                       " P.CompanyID = C.CompanyID " +
                       " And " +
                       " P.AccountNumberFirst = C.AccountNumber " +
                     " ) As ChequeBoxName, " +
                      " ( " +
                        " Select C.EnglishName From ChartOfAccounts C " +
                        " Where " +
                        " P.CompanyID = C.CompanyID " +
                        " And " +
                        " P.BillCustomerAccountNumber = C.AccountNumber " +
                      " ) As BillCustomerName " +
                      " From Papers P " +
                      " Where " +
                      " P.ChequeCase = 2 " +
                      " And " +
                      " P.CompanyID = @CompanyID " +
                    " And " +
                     " cast (datediff (day, 0, P.ChequeDate) as datetime) = @dToday " +
                     " Order By P.ChequeDate "
                    , new SqlParameter("@dToday", dToday)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }

        }
        public double GetTotalUnpaidChequesPayment(int CompanyID, DateTime Fromdate, DateTime ToDate, string Acc)
        {
            try
            {
                return _context.Database.SqlQuery<Double>(
                    " Select ISNull(Sum(ChequeAmount), 0) As ChequeAmount From Papers " +
                    " Where " +
                    " ChequeCase = 14 " +
                    " And " +
                    " AccountNumberFirst = @Acc " +
                    " And " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " cast (datediff (day, 0, VoucherDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, VoucherDate) as datetime) <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@Acc", Acc)
             ).FirstOrDefault();

            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }
        }
        public IEnumerable<PaperFilterVM> GetUnpaidChequesPayment(int CompanyID, DateTime Fromdate, DateTime ToDate, string Acc)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                     " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, P.DrawerName,P.VHI, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As PostdatedChequeName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberThird = C.AccountNumber " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As PaidToAccount " +
                    " From Papers P " +
                    " Where " +
                    " P.ChequeCase = 14 " +
                    " And " +
                    " P.AccountNumberFirst = @Acc " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " cast (datediff (day, 0, P.VoucherDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.VoucherDate) as datetime) <= @ToDate " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@Acc", Acc)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                     " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, P.DrawerName,P.VHI, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As PostdatedChequeName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberThird = C.AccountNumber " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As PaidToAccount " +
                    " From Papers P " +
                    " Where " +
                    " P.ChequeCase = 14 " +
                    " And " +
                    " P.AccountNumberFirst = @Acc " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " cast (datediff (day, 0, P.VoucherDate) as datetime) >= @FromDate " +
                    " And " +
                    " cast (datediff (day, 0, P.VoucherDate) as datetime) <= @ToDate " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@Acc", Acc)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }

        }
        public IEnumerable<PaperFilterVM> GetUnpaidPostdatedCheque(int CompanyID, DateTime dToday)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                     " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, P.DrawerName,P.VHI, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As PostdatedChequeName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberThird = C.AccountNumber " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As PaidToAccount " +
                    " From Papers P " +
                    " Where " +
                    " P.ChequeCase = 14 " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) = @dToday " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@dToday", dToday)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<PaperFilterVM>(
                    " Select Distinct P.CompanyTransactionKindNo, P.AccountNumberFirst, P.AccountNumberSecond, P.AccountNumberThird, " +
                    " P.ChequeAmount, P.ChequeDate, P.ChequeNumber, P.RowNumber, P.VoucherNumber, P.FCurrencyID, P.ConversionFactor, " +
                    " P.CompanyYear, P.sChequeDate,P.TransactionKindNo, P.VoucherDate, P.DrawerName,P.VHI, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberSecond = C.AccountNumber " +
                    " ) As PostdatedChequeName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberThird = C.AccountNumber " +
                    " ) As BankName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " P.CompanyID = C.CompanyID " +
                      " And " +
                      " P.AccountNumberFirst = C.AccountNumber " +
                    " ) As PaidToAccount " +
                    " From Papers P " +
                    " Where " +
                    " P.ChequeCase = 14 " +
                    " And " +
                    " P.CompanyID = @CompanyID " +
                    " And " +
                    " cast (datediff (day, 0, P.ChequeDate) as datetime) = @dToday " +
                    " Order By P.ChequeDate "
                    , new SqlParameter("@dToday", dToday)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<PaperFilterVM>();
                }
            }

        }
        public AssetVM GetAssetByID(int CompanyID, int AssetID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<AssetVM>(
                    " Select A.FAssetTypeID, A.CompanyID, A.AssetID, A.AssetName, A.AssetBarCode, A.AssetCost, A.AssetConsumRatio, A.ConsStartDate, A.CombinedConsum, " +
                    " A.CombinedtDate, A.BookValue, A.Note, A.DebitAccountNo, A.CreditAccountNo, A.DebitCostNo, A.CreditCostNo, A.SupplierAccountNo, A.PurchaseOrderNo, " +
                    " A.PurchaseinvoiceNo, A.PurchaseInvDate, A.GuaranteedDate, A.LastMaintenanceDate, A.AssetSerialNo, A.SupplierNote, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " A.DebitAccountNo = C.AccountNumber " +
                      " And " +
                      " A.CompanyID = C.CompanyID " +
                    " ) As DebitAccountName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " A.CreditAccountNo = C.AccountNumber " +
                      " And " +
                      " A.CompanyID = C.CompanyID " +
                    " ) As CreditAccountName, " +
                    " ( " +
                      " Select C.ArabicName From ChartOfAccounts C " +
                      " Where " +
                      " A.SupplierAccountNo = C.AccountNumber " +
                      " And " +
                      " A.CompanyID = C.CompanyID " +
                    " ) As SupplierAccountName, " +
                    " ( " +
                      " Select CC.ArabicName From CostCenters CC " +
                      " Where " +
                      " A.DebitCostNo = CC.CostNumber " +
                      " And " +
                      " A.CompanyID = CC.CompanyID " +
                    " ) As DebitCostName, " +
                    " ( " +
                      " Select CC.ArabicName From CostCenters CC " +
                      " Where " +
                      " A.CreditCostNo = CC.CostNumber " +
                      " And " +
                      " A.CompanyID = CC.CompanyID " +
                    " ) As CreditCostName " +
                    " From Assets A " +
                    " Where " +
                    " A.CompanyID = @CompanyID " +
                    " And " +
                    " A.AssetID = @AssetID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AssetID", AssetID)

                ).FirstOrDefault();
                }
                catch
                {
                    return new AssetVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<AssetVM>(
                    " Select A.FAssetTypeID, A.CompanyID, A.AssetID, A.AssetName, A.AssetBarCode, A.AssetCost, A.AssetConsumRatio, A.ConsStartDate, A.CombinedConsum, " +
                    " A.CombinedtDate, A.BookValue, A.Note, A.DebitAccountNo, A.CreditAccountNo, A.DebitCostNo, A.CreditCostNo, A.SupplierAccountNo, A.PurchaseOrderNo, " +
                    " A.PurchaseinvoiceNo, A.PurchaseInvDate, A.GuaranteedDate, A.LastMaintenanceDate, A.AssetSerialNo, A.SupplierNote, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " A.DebitAccountNo = C.AccountNumber " +
                      " And " +
                      " A.CompanyID = C.CompanyID " +
                    " ) As DebitAccountName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " A.CreditAccountNo = C.AccountNumber " +
                      " And " +
                      " A.CompanyID = C.CompanyID " +
                    " ) As CreditAccountName, " +
                    " ( " +
                      " Select C.EnglishName From ChartOfAccounts C " +
                      " Where " +
                      " A.SupplierAccountNo = C.AccountNumber " +
                      " And " +
                      " A.CompanyID = C.CompanyID " +
                    " ) As SupplierAccountName, " +
                    " ( " +
                      " Select CC.EnglishName From CostCenters CC " +
                      " Where " +
                      " A.DebitCostNo = CC.CostNumber " +
                      " And " +
                      " A.CompanyID = CC.CompanyID " +
                    " ) As DebitCostName, " +
                    " ( " +
                      " Select CC.EnglishName From CostCenters CC " +
                      " Where " +
                      " A.CreditCostNo = CC.CostNumber " +
                      " And " +
                      " A.CompanyID = CC.CompanyID " +
                    " ) As CreditCostName " +
                    " From Assets A " +
                    " Where " +
                    " A.CompanyID = @CompanyID " +
                    " And " +
                    " A.AssetID = @AssetID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@AssetID", AssetID)

                ).FirstOrDefault();
                }
                catch
                {
                    return new AssetVM();
                }
            }

        }
        public int CheckIfMonthlySerial(int CompanyID, int CompanyTransactionKindID)
        {
            try
            {
                int ID = _context.Database.SqlQuery<int>(
                " Select CompanyTransactionKindID From CompanyTransactionKinds " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CompanyTransactionKindID = @CompanyTransactionKindID " +
                " And " +
                " MonthlySerial = 1 "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@CompanyTransactionKindID", CompanyTransactionKindID)
                ).First();
                return ID;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public IEnumerable<DefinitionBanksFilterVM> CheckBankAccountNumber(int CompanyID, string BankAccountNumber)

        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<DefinitionBanksFilterVM>(
                    " Select DB.BankAccountNumber,DB.ChequeUnderCollectionAccountNumber, " +
                    " DB.PostdatedChequeAccountNumber,DB.BillsOfExchangeAccountNumber, " +
                    " ( " +
                        " Select CA.ArabicName " +
                        " From ChartOfAccounts CA " +
                        " Where " +
                        " DB.BankAccountNumber = CA.AccountNumber " +
                        " And " +
                        " DB.CompanyID = CA.CompanyID " +
                    " ) As BankAccountName, " +
                    " ( " +
                        " Case When DB.BankAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                          " Select CA.StoppedAccount " +
                          " From ChartOfAccounts CA " +
                          " Where " +
                          " DB.BankAccountNumber = CA.AccountNumber " +
                          " And " +
                          " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                    " ) As StoppedAccountBank, " +
                    " ( " +
                        " Case When DB.ChequeUnderCollectionAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                             " Select CA.StoppedAccount " +
                             " From ChartOfAccounts CA " +
                             " Where " +
                             " DB.ChequeUnderCollectionAccountNumber = CA.AccountNumber " +
                             " And " +
                             " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                     " ) As StoppedAccountChequeUnderCollection, " +
                     " ( " +
                        " Case When DB.PostdatedChequeAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                             " Select CA.StoppedAccount " +
                             " From ChartOfAccounts CA " +
                             " Where " +
                             " DB.PostdatedChequeAccountNumber = CA.AccountNumber " +
                             " And " +
                             " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                     " ) As StoppedAccountPostdatedCheque, " +
                     " ( " +
                        " Case When DB.BillsOfExchangeAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                             " Select CA.StoppedAccount " +
                             " From ChartOfAccounts CA " +
                             " Where " +
                             " DB.BillsOfExchangeAccountNumber = CA.AccountNumber " +
                             " And " +
                             " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                     " ) As StoppedAccountBillsOfExchange " +
                    " From DefinitionBanks DB " +
                    " Where " +
                    " DB.CompanyID = @CompanyID " +
                    " And " +
                    " DB.IsDeleted = 0 " +
                    " And " +
                    " DB.BankAccountNumber = @BankAccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@BankAccountNumber", BankAccountNumber)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<DefinitionBanksFilterVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<DefinitionBanksFilterVM>(
                    " Select DB.BankAccountNumber,DB.ChequeUnderCollectionAccountNumber, " +
                    " DB.PostdatedChequeAccountNumber,DB.BillsOfExchangeAccountNumber, " +
                    " ( " +
                        " Select CA.EnglishName " +
                        " From ChartOfAccounts CA " +
                        " Where " +
                        " DB.BankAccountNumber = CA.AccountNumber " +
                        " And " +
                        " DB.CompanyID = CA.CompanyID " +
                    " ) As BankAccountName, " +
                    " ( " +
                        " Case When DB.BankAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                          " Select CA.StoppedAccount " +
                          " From ChartOfAccounts CA " +
                          " Where " +
                          " DB.BankAccountNumber = CA.AccountNumber " +
                          " And " +
                          " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                    " ) As StoppedAccountBank, " +
                    " ( " +
                        " Case When DB.ChequeUnderCollectionAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                             " Select CA.StoppedAccount " +
                             " From ChartOfAccounts CA " +
                             " Where " +
                             " DB.ChequeUnderCollectionAccountNumber = CA.AccountNumber " +
                             " And " +
                             " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                     " ) As StoppedAccountChequeUnderCollection, " +
                     " ( " +
                        " Case When DB.PostdatedChequeAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                             " Select CA.StoppedAccount " +
                             " From ChartOfAccounts CA " +
                             " Where " +
                             " DB.PostdatedChequeAccountNumber = CA.AccountNumber " +
                             " And " +
                             " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                     " ) As StoppedAccountPostdatedCheque, " +
                     " ( " +
                        " Case When DB.BillsOfExchangeAccountNumber Is Null Then 'False' " +
                        " Else " +
                        " ( " +
                             " Select CA.StoppedAccount " +
                             " From ChartOfAccounts CA " +
                             " Where " +
                             " DB.BillsOfExchangeAccountNumber = CA.AccountNumber " +
                             " And " +
                             " DB.CompanyID = CA.CompanyID " +
                        " ) " +
                        " End " +
                     " ) As StoppedAccountBillsOfExchange " +
                    " From DefinitionBanks DB " +
                    " Where " +
                    " DB.CompanyID = @CompanyID " +
                    " And " +
                    " DB.IsDeleted = 0 " +
                    " And " +
                    " DB.BankAccountNumber = @BankAccountNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@BankAccountNumber", BankAccountNumber)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<DefinitionBanksFilterVM>();
                }
            }
        }
        public IEnumerable<St_SectionsOfFactoryHVM> GetAllSt_SectionsOfFactoryH(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_SectionsOfFactoryHVM>(
                      " Select F.ArabicName As FactoryName, SF.FactoryID, SF.SectionsOfFactoryID, SF.ArabicName As SectionsOfFactoryName " +
                      " From St_FactoryH F, St_SectionsOfFactoryH SF " +
                      " Where " +
                      " F.CompanyID = SF.CompanyID " +
                      " And " +
                      " F.FactoryID = SF.FactoryID " +
                      " And " +
                      " F.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_SectionsOfFactoryHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_SectionsOfFactoryHVM>(
                    " Select F.EnglishName As FactoryName, SF.FactoryID, SF.SectionsOfFactoryID, SF.EnglishName As SectionsOfFactoryName " +
                      " From St_FactoryH F, St_SectionsOfFactoryH SF " +
                      " Where " +
                      " F.CompanyID = SF.CompanyID " +
                      " And " +
                      " F.FactoryID = SF.FactoryID " +
                      " And " +
                      " F.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_SectionsOfFactoryHVM>();
                }
            }
        }
        public St_SectionsOfFactoryHVM GetSt_SectionsOfFactoryHByID(int CompanyID, int SectionsOfFactoryID)
        {
            try
            {
                return _context.Database.SqlQuery<St_SectionsOfFactoryHVM>(
                " Select * " +
                " From St_SectionsOfFactoryH " +
                " Where " +
                " SectionsOfFactoryID = @SectionsOfFactoryID " +
                " And " +
                " CompanyID = @CompanyID "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@SectionsOfFactoryID", SectionsOfFactoryID)
            ).FirstOrDefault();
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return new St_SectionsOfFactoryHVM();
            }
        }
        public string GetSt_FactoryHName(int CompanyID, int FactoryID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    string FactoryName = _context.Database.SqlQuery<string>("select ArabicName from St_FactoryH " +
                    "where  CompanyID =@CompanyID  and  FactoryID=@FactoryID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@FactoryID", FactoryID)

                    ).First();

                    return FactoryName;
                }
                catch
                {
                    return "";
                }
            }
            else
            {
                try
                {
                    string FactoryName = _context.Database.SqlQuery<string>("select EnglishName from St_FactoryH " +
                    "where  CompanyID =@CompanyID  and  FactoryID=@FactoryID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@FactoryID", FactoryID)

                    ).First();

                    return FactoryName;
                }
                catch
                {
                    return "";
                }
            }

        }
        public int GetSt_RegisterValueByRegisterID(int CompanyID, int RegisterID)
        {
            int Case = _context.Database.SqlQuery<int>(
                " Select RegisterCase From St_Register " +
                " Where " +
                " RegisterID = @RegisterID " +
                " And " +
                " CompanyID = @CompanyID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@RegisterID", RegisterID)
                ).FirstOrDefault();

            return Case;
        }
        public IEnumerable<St_WarehouseVM> GetAllSt_Warehouse(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseVM>(
                     " Select W.StockCode, W.ArabicName As StockName, W.Telephone, " +
                     " ( " +
                       " Select CA.ArabicName  From ChartOfAccounts CA " +
                       " Where " +
                       " CA.AccountNumber = W.AccountNumber " +
                       " And " +
                       " CA.CompanyID = W.CompanyID " +
                    " ) As AccountName, " +
                    " ( " +
                      " Select CC.ArabicName  From CostCenters CC " +
                      " Where " +
                      "  CC.CostNumber = W.CostCenterNumber " +
                      " And " +
                      " CC.CompanyID = W.CompanyID " +
                    " ) As CostCenterName " +
                    " From St_Warehouse W " +
                    " Where " +
                    " W.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_WarehouseVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseVM>(
                    " Select W.StockCode, W.ArabicName As StockName, W.Telephone, " +
                     " ( " +
                       " Select CA.ArabicName  From ChartOfAccounts CA " +
                       " Where " +
                       " CA.AccountNumber = W.AccountNumber " +
                       " And " +
                       " CA.CompanyID = W.CompanyID " +
                    " ) As AccountName, " +
                    " ( " +
                      " Select CC.ArabicName  From CostCenters CC " +
                      " Where " +
                      "  CC.CostNumber = W.CostCenterNumber " +
                      " And " +
                      " CC.CompanyID = W.CompanyID " +
                    " ) As CostCenterName " +
                    " From St_Warehouse W " +
                    " Where " +
                    " W.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_WarehouseVM>();
                }
            }
        }
        public IEnumerable<St_WarehouseHVM> GetAllSt_WarehouseH(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseHVM>(
                     " Select W.StockCode, W.ArabicName As StockName, W.Telephone " +
                    " From St_WarehouseH W " +
                    " Where " +
                    " W.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_WarehouseHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseHVM>(
                    " Select W.StockCode, W.ArabicName As StockName, W.Telephone " +
                    " From St_WarehouseH W " +
                    " Where " +
                    " W.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_WarehouseHVM>();
                }
            }
        }
        public IEnumerable<St_WarehouseHVM> GetAllSt_WarehouseHByItemCode(int CompanyID, string ItemCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseHVM>(
                     " Select W.StockCode, W.ArabicName As StockName, " +
                     " ( " +
                       " Case When " +
                       " W.StockCode in " +
                       " ( " +
                         " Select IW.StockCode  " +
                         " From St_ItemWarehouseH IW  " +
                         " Where  " +
                         " W.StockCode = IW.StockCode " +
                         " And " +
                         " IW.ItemCode = @ItemCode " +
                         " And " +
                         " W.CompanyID = IW.CompanyID " +
                       " ) " +
                       " Then 1 " +
                       " Else 0 " +
                       " End " +
                     " ) As StockCase " +
                     " From St_WarehouseH W " +
                     " Where " +
                     " W.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_WarehouseHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseHVM>(
                    " Select W.StockCode, W.EnglishName As StockName, " +
                     " ( " +
                       " Case When " +
                       " W.StockCode in " +
                       " ( " +
                         " Select IW.StockCode  " +
                         " From St_ItemWarehouseH IW  " +
                         " Where  " +
                         " W.StockCode = IW.StockCode " +
                         " And " +
                         " IW.ItemCode = @ItemCode " +
                         " And " +
                         " W.CompanyID = IW.CompanyID " +
                       " ) " +
                       " Then 1 " +
                       " Else 0 " +
                       " End " +
                     " ) As StockCase " +
                     " From St_WarehouseH W " +
                     " Where " +
                     " W.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)

                ).ToList();
                }
                catch
                {
                    return new List<St_WarehouseHVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardHVM> GetAllSt_WarehouseHByItemCodeView(int CompanyID, string ItemCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                    " Select W.StockCode, W.ArabicName As StockName " +
                    " From St_WarehouseH W, St_ItemWarehouseH IW " +
                    " Where " +
                    " W.CompanyID = @CompanyID " +
                    " And " +
                    " W.StockCode = IW.StockCode " +
                    " And " +
                    " IW.ItemCode = @ItemCode " +
                    " And " +
                    " W.CompanyID = IW.CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_ItemCardHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                    " Select W.StockCode, W.EnglishName As StockName " +
                    " From St_WarehouseH W, St_ItemWarehouseH IW " +
                    " Where " +
                    " W.CompanyID = @CompanyID " +
                    " And " +
                    " W.StockCode = IW.StockCode " +
                    " And " +
                    " IW.ItemCode = @ItemCode " +
                    " And " +
                    " W.CompanyID = IW.CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)

                ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardHVM>();
                }
            }
        }
        public IEnumerable<St_WarehouseVM> GetAllSt_WarehouseByItemCode(int CompanyID, string ItemCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseVM>(
                     " Select W.StockCode, W.ArabicName As StockName, " +
                     " ( " +
                       " Case When " +
                       " W.StockCode in " +
                       " ( " +
                         " Select IW.StockCode " +
                         " From St_ItemWarehouse IW " +
                         " Where " +
                         " W.StockCode = IW.StockCode " +
                         " And " +
                         " IW.ItemCode = @ItemCode " +
                         " And " +
                         " W.CompanyID = IW.CompanyID " +
                       " ) " +
                       " Then 1 " +
                       " Else 0 " +
                       " End " +
                     " ) As StockCase, " +
                     " ( " +
                       " Case When " +
                       " W.StockCode in " +
                       " ( " +
                         " Select IW.StockCode " +
                         " From St_ItemWarehouse IW " +
                         " Where " +
                         " W.StockCode = IW.StockCode " +
                         " And " +
                         " IW.ItemCode = @ItemCode " +
                         " And " +
                         " W.CompanyID = IW.CompanyID " +
                       " ) " +
                       " Then " +
                       " ( " +
                           " Select SIW.StockMinimumItemNo From St_ItemWarehouse SIW " +
                           " Where " +
                           " W.StockCode = SIW.StockCode " +
                           " And " +
                           " SIW.ItemCode = @ItemCode " +
                           " And " +
                           " W.CompanyID = SIW.CompanyID " +
                       " ) " +
                       " Else 0 " +
                       " End " +
                     " ) As StockMinimumItemNo, " +
                     " ( " +
                         " Case When " +
                         " W.StockCode in " +
                         " ( " +
                           " Select IW.StockCode " +
                           " From St_ItemWarehouse IW " +
                           " Where " +
                           " W.StockCode = IW.StockCode " +
                           " And " +
                           " IW.ItemCode = @ItemCode " +
                           " And " +
                           " W.CompanyID = IW.CompanyID " +
                         " ) " +
                         " Then " +
                         " ( " +
                           " Select SIW.StockMaximumItemNo From St_ItemWarehouse SIW " +
                           " Where " +
                           " W.StockCode = SIW.StockCode " +
                           " And " +
                           " SIW.ItemCode = @ItemCode " +
                           " And " +
                           " W.CompanyID = SIW.CompanyID " +
                        " ) " +
                        " Else 0 " +
                        " End " +
                      " ) As StockMaximumItemNo " +
                      " From St_Warehouse W " +
                      " Where " +
                      " W.CompanyID = @CompanyID " 
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_WarehouseVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseVM>(
                    " Select W.StockCode, W.EnglishName As StockName, " +
                     " ( " +
                       " Case When " +
                       " W.StockCode in " +
                       " ( " +
                         " Select IW.StockCode " +
                         " From St_ItemWarehouse IW " +
                         " Where " +
                         " W.StockCode = IW.StockCode " +
                         " And " +
                         " IW.ItemCode = @ItemCode " +
                         " And " +
                         " W.CompanyID = IW.CompanyID " +
                       " ) " +
                       " Then 1 " +
                       " Else 0 " +
                       " End " +
                     " ) As StockCase, " +
                     " ( " +
                       " Case When " +
                       " W.StockCode in " +
                       " ( " +
                         " Select IW.StockCode " +
                         " From St_ItemWarehouse IW " +
                         " Where " +
                         " W.StockCode = IW.StockCode " +
                         " And " +
                         " IW.ItemCode = @ItemCode " +
                         " And " +
                         " W.CompanyID = IW.CompanyID " +
                       " ) " +
                       " Then " +
                       " ( " +
                           " Select SIW.StockMinimumItemNo From St_ItemWarehouse SIW " +
                           " Where " +
                           " W.StockCode = SIW.StockCode " +
                           " And " +
                           " SIW.ItemCode = @ItemCode " +
                           " And " +
                           " W.CompanyID = SIW.CompanyID " +
                       " ) " +
                       " Else 0 " +
                       " End " +
                     " ) As StockMinimumItemNo, " +
                     " ( " +
                         " Case When " +
                         " W.StockCode in " +
                         " ( " +
                           " Select IW.StockCode " +
                           " From St_ItemWarehouse IW " +
                           " Where " +
                           " W.StockCode = IW.StockCode " +
                           " And " +
                           " IW.ItemCode = @ItemCode " +
                           " And " +
                           " W.CompanyID = IW.CompanyID " +
                         " ) " +
                         " Then " +
                         " ( " +
                           " Select SIW.StockMaximumItemNo From St_ItemWarehouse SIW " +
                           " Where " +
                           " W.StockCode = SIW.StockCode " +
                           " And " +
                           " SIW.ItemCode = @ItemCode " +
                           " And " +
                           " W.CompanyID = SIW.CompanyID " +
                        " ) " +
                        " Else 0 " +
                        " End " +
                      " ) As StockMaximumItemNo " +
                      " From St_Warehouse W " +
                      " Where " +
                      " W.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)

                ).ToList();
                }
                catch
                {
                    return new List<St_WarehouseVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardVM> GetAllSt_WarehouseByItemCodeView(int CompanyID, string ItemCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardVM>(
                    " Select W.StockCode, W.ArabicName As StockName " +
                    " From St_Warehouse W, St_ItemWarehouse IW " +
                    " Where " +
                    " W.CompanyID = @CompanyID " +
                    " And " +
                    " W.StockCode = IW.StockCode " +
                    " And " +
                    " IW.ItemCode = @ItemCode " +
                    " And " +
                    " W.CompanyID = IW.CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_ItemCardVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardVM>(
                    " Select W.StockCode, W.EnglishName As StockName " +
                    " From St_Warehouse W, St_ItemWarehouse IW " +
                    " Where " +
                    " W.CompanyID = @CompanyID " +
                    " And " +
                    " W.StockCode = IW.StockCode " +
                    " And " +
                    " IW.ItemCode = @ItemCode " +
                    " And " +
                    " W.CompanyID = IW.CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)

                ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardVM>();
                }
            }
        }
        public IEnumerable<St_SubItemColorHVM> GetAllSt_SubItemColorH(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_SubItemColorHVM>(
                    " Select SubItemColorCode, ArabicName As SubItemColorName " +
                    " From St_SubItemColorH " +
                    " Where " +
                    " CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_SubItemColorHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_SubItemColorHVM>(
                    " Select SubItemColorCode, EnglishName As SubItemColorName " +
                    " From St_SubItemColorH " +
                    " Where " +
                    " CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_SubItemColorHVM>();
                }
            }
        }
        public IEnumerable<St_SubItemColorHVM> GetAllSt_SubColorHByItemCode(int CompanyID, string ItemCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_SubItemColorHVM>(
                     " Select SIC.SubItemColorCode, SIC.ArabicName As SubItemColorName, " +
                     " ( " +
                        " Case When " +
                        " SIC.SubItemColorCode in " +
                        " ( " +
                          " Select SCI.SubItemColorCode " +
                          " From St_SubColorsItemH SCI " +
                          " Where " +
                          " SIC.SubItemColorCode = SCI.SubItemColorCode " +
                          " And " +
                          " SCI.ItemCode = @ItemCode " +
                          " And " +
                          " SIC.CompanyID = SCI.CompanyID " +
                       " ) " +
                       " Then 1 " +
                       " Else 0 " +
                       " End " +
                      " ) As ColorCase " +
                     " From St_SubItemColorH  SIC " +
                     " Where " +
                     " SIC.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_SubItemColorHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_SubItemColorHVM>(
                     " Select SIC.SubItemColorCode, SIC.EnglishName As SubItemColorName, " +
                     " ( " +
                        " Case When " +
                        " SIC.SubItemColorCode in " +
                        " ( " +
                          " Select SCI.SubItemColorCode " +
                          " From St_SubColorsItemH SCI " +
                          " Where " +
                          " SIC.SubItemColorCode = SCI.SubItemColorCode " +
                          " And " +
                          " SCI.ItemCode = @ItemCode " +
                          " And " +
                          " SIC.CompanyID = SCI.CompanyID " +
                       " ) " +
                       " Then 1 " +
                       " Else 0 " +
                       " End " +
                      " ) As ColorCase " +
                     " From St_SubItemColorH  SIC " +
                     " Where " +
                     " SIC.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_SubItemColorHVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardHVM> GetAllSt_SubColorHByItemCodeView(int CompanyID, string ItemCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                    " Select SIC.SubItemColorCode, SIC.ArabicName As SubItemColorName " +
                    " From St_SubItemColorH  SIC, St_SubColorsItemH SCI " +
                    " Where " +
                    " SIC.CompanyID = @CompanyID " +
                    " And " +
                    " SIC.SubItemColorCode = SCI.SubItemColorCode " +
                    " And " +
                    " SCI.ItemCode = @ItemCode " +
                    " And " +
                    " SIC.CompanyID = SCI.CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_ItemCardHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                    " Select SIC.SubItemColorCode, SIC.EnglishName As SubItemColorName " +
                    " From St_SubItemColorH  SIC, St_SubColorsItemH SCI " +
                    " Where " +
                    " SIC.CompanyID = @CompanyID " +
                    " And " +
                    " SIC.SubItemColorCode = SCI.SubItemColorCode " +
                    " And " +
                    " SCI.ItemCode = @ItemCode " +
                    " And " +
                    " SIC.CompanyID = SCI.CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_ItemCardHVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardHVM> GetAllSt_RelatedItemHByItemCodeView(int CompanyID, string ItemCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                     " Select RI.RelatedItemCode, IC.ArabicName As RelatedItemName " +
                     " From St_RelatedItemH  RI, St_ItemCardH IC " +
                     " Where " +
                     " RI.CompanyID = @CompanyID " +
                     " And " +
                     " RI.ItemCode = IC.ItemCode " +
                     " And " +
                     " RI.ItemCode = @ItemCode " +
                     " And " +
                     " RI.CompanyID = IC.CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_ItemCardHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                    " Select RI.RelatedItemCode, IC.EnglishName As RelatedItemName " +
                     " From St_RelatedItemH  RI, St_ItemCardH IC " +
                     " Where " +
                     " RI.CompanyID = @CompanyID " +
                     " And " +
                     " RI.ItemCode = IC.ItemCode " +
                     " And " +
                     " RI.ItemCode = @ItemCode " +
                     " And " +
                     " RI.CompanyID = IC.CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_ItemCardHVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardHVM> GetAllSt_SimilarItemHByItemCodeView(int CompanyID, string ItemCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                     " Select SI.SimilarItemCode, IC.ArabicName As SimilarItemName " +
                     " From St_SimilarItemH  SI, St_ItemCardH IC " +
                     " Where " +
                     " SI.CompanyID = @CompanyID " +
                     " And " +
                     " SI.ItemCode = IC.ItemCode " +
                     " And " +
                     " SI.ItemCode = @ItemCode " +
                     " And " +
                     " SI.CompanyID = IC.CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_ItemCardHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                    " Select SI.SimilarItemCode, IC.EnglishName As SimilarItemName " +
                     " From St_SimilarItemH  SI, St_ItemCardH IC " +
                     " Where " +
                     " SI.CompanyID = @CompanyID " +
                     " And " +
                     " SI.ItemCode = IC.ItemCode " +
                     " And " +
                     " SI.ItemCode = @ItemCode " +
                     " And " +
                     " SI.CompanyID = IC.CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_ItemCardHVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardHVM> GetAllSt_ManufacturingStagesHByItemCodeView(int CompanyID, string ItemCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                     " Select MS.FactoryNo As ManufacturingStageFactoryNo, F.ArabicName As ManufacturingStageFactoryName,MS.NumberOfDays " +
                     " From St_ManufacturingStageH  MS, St_Factory F " +
                     " Where " +
                     " MS.CompanyID = @CompanyID " +
                     " And " +
                     " MS.FactoryNo = F.FactoryID " +
                     " And " +
                     " MS.ItemCode = @ItemCode " +
                     " And " +
                     " MS.CompanyID = F.CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_ItemCardHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                    " Select MS.FactoryNo As ManufacturingStageFactoryNo, F.EnglishName As ManufacturingStageFactoryName,MS.NumberOfDays " +
                     " From St_ManufacturingStageH  MS, St_Factory F " +
                     " Where " +
                     " MS.CompanyID = @CompanyID " +
                     " And " +
                     " MS.FactoryNo = F.FactoryID " +
                     " And " +
                     " MS.ItemCode = @ItemCode " +
                     " And " +
                     " MS.CompanyID = F.CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_ItemCardHVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardHVM> GetAllSt_RawMaterialHByItemCodeView(int CompanyID, string ItemCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                     " Select RM.RawMaterialCode, IC.ArabicName As RawMaterialName, RM.Quantity, Rm.Cost, RM.Total " +
                     " From St_RawMaterialH  RM, St_ItemCardH IC " +
                     " Where " +
                     " RM.CompanyID = @CompanyID " +
                     " And " +
                     " RM.ItemCode = IC.ItemCode " +
                     " And " +
                     " RM.ItemCode = @ItemCode " +
                     " And " +
                     " RM.CompanyID = IC.CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_ItemCardHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                    " Select RM.RawMaterialCode, IC.EnglishName As RawMaterialName, RM.Quantity, Rm.Cost, RM.Total " +
                     " From St_RawMaterialH  RM, St_ItemCardH IC " +
                     " Where " +
                     " RM.CompanyID = @CompanyID " +
                     " And " +
                     " RM.ItemCode = IC.ItemCode " +
                     " And " +
                     " RM.ItemCode = @ItemCode " +
                     " And " +
                     " RM.CompanyID = IC.CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_ItemCardHVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardVM> GetAllSt_SimilarItemByItemCodeView(int CompanyID, string ItemCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardVM>(
                     " Select S.SimilarItemCode, " +
                     " ( " +
                       " Select IU.ArabicName " +
                       " From St_ItemUnit IU " +
                       " Where " +
                       " IU.ItemUnitCode = S.SimilarItemUnitCode " +
                       " And " +
                       " IU.CompanyID = S.CompanyID " +
                     " ) As SimilarUnitName " +
                     " From St_SimilarItem S " +
                     " Where " +
                     " S.CompanyID = @CompanyID " +
                     " And " +
                     " S.ItemCode = @ItemCode " +
                     " And " +
                     " S.SimilarItemCode <> S.ItemCode " +
                     " Order By S.RowNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_ItemCardVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardVM>(
                    " Select S.SimilarItemCode, " +
                     " ( " +
                       " Select IU.EnglishName " +
                       " From St_ItemUnit IU " +
                       " Where " +
                       " IU.ItemUnitCode = S.SimilarItemUnitCode " +
                       " And " +
                       " IU.CompanyID = S.CompanyID " +
                     " ) As SimilarUnitName " +
                     " From St_SimilarItem S " +
                     " Where " +
                     " S.CompanyID = @CompanyID " +
                     " And " +
                     " S.ItemCode = @ItemCode " +
                     " And " +
                     " S.SimilarItemCode <> S.ItemCode " +
                     " Order By S.RowNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_ItemCardVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardVM> GetAllSt_AlternativeItemByItemCodeView(int CompanyID, string ItemCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardVM>(
                     " Select A.AlternativeItemCode,IC.ArabicName  As AlternativeItemName, " +
                    " IC.Saleprice As AlternativeSalePrice, " +
                    " ( " +
                       " Select IU.ArabicName " +
                       " From St_ItemUnit IU " +
                       " Where " +
                       " IU.ItemUnitCode = IC.ItemUnitNo " +
                       " And " +
                       " IU.CompanyID = IC.CompanyID " +
                     " ) As AlternativeUnit, " +
                     " ( " +
                        " Select COF.ArabicName " +
                        " From St_CountryOfOrigin COF " +
                        " Where " +
                        " COF.CountryOfOriginID = IC.CountryOfOriginNo " +
                        " And " +
                        " COF.CompanyID = IC.CompanyID " +
                      " ) As AlternativeCountryOfOrigin, " +
                      " ( " +
                        " Select MC.ArabicName " +
                        " From St_ManufacturerCompany MC " +
                        " Where " +
                        " MC.ManufacturerCompanyID = MC.ManufacturerCompanyID " +
                        " And " +
                        " MC.CompanyID = IC.CompanyID " +
                      " ) As AlternativeManufacturerCompany " +
                     " From St_AlternativeItem A ,St_ItemCard IC " +
                     " Where " +
                     " A.CompanyID = @CompanyID " +
                     " And " +
                     " A.ItemCode = @ItemCode " +
                     " And " +
                     " A.AlternativeItemCode = IC.ItemCode " +
                     " And " +
                     " A.CompanyID = IC.CompanyID " +
                     " Order By A.RowNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_ItemCardVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardVM>(
                    " Select A.AlternativeItemCode,IC.EnglishName  As AlternativeItemName, " +
                    " IC.Saleprice As AlternativeSalePrice, " +
                    " ( " +
                       " Select IU.EnglishName " +
                       " From St_ItemUnit IU " +
                       " Where " +
                       " IU.ItemUnitCode = IC.ItemUnitNo " +
                       " And " +
                       " IU.CompanyID = IC.CompanyID " +
                     " ) As AlternativeUnit, " +
                     " ( " +
                        " Select COF.EnglishName " +
                        " From St_CountryOfOrigin COF " +
                        " Where " +
                        " COF.CountryOfOriginID = IC.CountryOfOriginNo " +
                        " And " +
                        " COF.CompanyID = IC.CompanyID " +
                      " ) As AlternativeCountryOfOrigin, " +
                      " ( " +
                        " Select MC.EnglishName " +
                        " From St_ManufacturerCompany MC " +
                        " Where " +
                        " MC.ManufacturerCompanyID = MC.ManufacturerCompanyID " +
                        " And " +
                        " MC.CompanyID = IC.CompanyID " +
                      " ) As AlternativeManufacturerCompany " +
                     " From St_AlternativeItem A ,St_ItemCard IC " +
                     " Where " +
                     " A.CompanyID = @CompanyID " +
                     " And " +
                     " A.ItemCode = @ItemCode " +
                     " And " +
                     " A.AlternativeItemCode = IC.ItemCode " +
                     " And " +
                     " A.CompanyID = IC.CompanyID " +
                     " Order By A.RowNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_ItemCardVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardVM> GetAllSt_ItemOtherUnitByItemCodeView(int CompanyID, string ItemCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardVM>(
                    " Select IOU.OtherUnitNumber, IU.ArabicName As OtherUnitName, " +
                    " IOU.OtherUnitQuantity, IOU.OtherUnitSalePrice, IOU.OtherUnitPurchasePrice, IOU.OtherUnitBarcode " +
                    " From St_ItemOtherUnit IOU, St_ItemUnit IU " +
                    " Where " +
                    " IOU.ItemCode = @ItemCode " +
                    " And " +
                    " IOU.CompanyID = @CompanyID " +
                    " And " +
                    " IOU.CompanyID = IU.CompanyID " +
                    " And " +
                    " IOU.OtherUnitNumber = IU.ItemUnitCode " +
                    " Order By IOU.RowNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_ItemCardVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardVM>(
                    " Select IOU.OtherUnitNumber, IU.EnglishName As OtherUnitName, " +
                    " IOU.OtherUnitQuantity, IOU.OtherUnitSalePrice, IOU.OtherUnitPurchasePrice, IOU.OtherUnitBarcode " +
                    " From St_ItemOtherUnit IOU, St_ItemUnit IU " +
                    " Where " +
                    " IOU.ItemCode = @ItemCode " +
                    " And " +
                    " IOU.CompanyID = @CompanyID " +
                    " And " +
                    " IOU.CompanyID = IU.CompanyID " +
                    " And " +
                    " IOU.OtherUnitNumber = IU.ItemUnitCode " +
                    " Order By IOU.RowNumber "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_ItemCardVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardVM> GetAllSt_ItemOffer1ByItemCodeView(int CompanyID, string ItemCode)
        {
            try
            {
                return _context.Database.SqlQuery<St_ItemCardVM>(
                 " Select ItemOfferQuantitySold, ItemOfferBonus " +
                 " From St_ItemOffer " +
                 " Where " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " ItemCode = @ItemCode " +
                 " Order By RowNumber "
                , new SqlParameter("@ItemCode", ItemCode)
                , new SqlParameter("@CompanyID", CompanyID)
                ).ToList();
            }
            catch
            {
                return new List<St_ItemCardVM>();
            }
        }
        public IEnumerable<St_ItemCardVM> GetAllSt_ItemOffer2ByItemCodeView(int CompanyID, string ItemCode)
        {
            try
            {
                return _context.Database.SqlQuery<St_ItemCardVM>(
                 " Select ItemOfferQuantitySold,ItemOfferUnitPrice,ItemOfferTotalPrice " +
                 " From St_ItemOffer " +
                 " Where " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " ItemCode = @ItemCode " +
                 " Order By RowNumber "
                , new SqlParameter("@ItemCode", ItemCode)
                , new SqlParameter("@CompanyID", CompanyID)
                ).ToList();
            }
            catch
            {
                return new List<St_ItemCardVM>();
            }
        }
        public IEnumerable<St_BranchHVM> GetAllSt_BranchH(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_BranchHVM>(
                    " Select B.ArabicName As BranchName, B.BranchCode, B.Telephone, B.MainStockCode, B.BranchStockCode, " +
                    " ( " +
                      " Select W.ArabicName " +
                      " From St_WarehouseH W " +
                      " Where " +
                      " B.MainStockCode = W.StockCode " +
                      " And " +
                      " B.CompanyID = W.CompanyID " +
                    " ) As MainStockName, " +
                    " ( " +
                      " Select W.ArabicName " +
                      " From St_WarehouseH W " +
                      " Where " +
                      " B.BranchStockCode = W.StockCode " +
                      " And " +
                      " B.CompanyID = W.CompanyID " +
                    " ) As BranchStockName" +
                    " From St_BranchH B " +
                    " Where " +
                    " B.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_BranchHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_BranchHVM>(
                    " Select B.EnglishName As BranchName, B.BranchCode, B.Telephone, B.MainStockCode, B.BranchStockCode, " +
                    " ( " +
                      " Select W.EnglishName " +
                      " From St_WarehouseH W " +
                      " Where " +
                      " B.MainStockCode = W.StockCode " +
                      " And " +
                      " B.CompanyID = W.CompanyID " +
                    " ) As MainStockName, " +
                    " ( " +
                      " Select W.EnglishName " +
                      " From St_WarehouseH W " +
                      " Where " +
                      " B.BranchStockCode = W.StockCode " +
                      " And " +
                      " B.CompanyID = W.CompanyID " +
                    " ) As BranchStockName" +
                    " From St_BranchH B " +
                    " Where " +
                    " B.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_BranchHVM>();
                }
            }
        }
        public St_BranchHVM GetSt_BranchHByID(int CompanyID, string BranchCode)
        {
            try
            {
                return _context.Database.SqlQuery<St_BranchHVM>(
                " Select * " +
                " From St_BranchH " +
                " Where " +
                " BranchCode = @BranchCode " +
                " And " +
                " CompanyID = @CompanyID "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@BranchCode", BranchCode)
            ).FirstOrDefault();
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return new St_BranchHVM();
            }
        }
        public string GetSt_WarehouseName(int CompanyID, string StockCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    string StockName = _context.Database.SqlQuery<string>("select ArabicName from St_Warehouse " +
                    "where  CompanyID =@CompanyID  and  StockCode=@StockCode "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@StockCode", StockCode)

                    ).First();

                    return StockName;
                }
                catch
                {
                    return "";
                }
            }
            else
            {
                try
                {
                    string StockName = _context.Database.SqlQuery<string>("select EnglishName from St_Warehouse " +
                    "where  CompanyID =@CompanyID  and  StockCode=@StockCode "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@StockCode", StockCode)

                    ).First();

                    return StockName;
                }
                catch
                {
                    return "";
                }
            }

        }
        public string GetSt_WarehouseNameH(int CompanyID, string StockCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    string StockName = _context.Database.SqlQuery<string>("select ArabicName from St_WarehouseH " +
                    "where  CompanyID =@CompanyID  and  StockCode=@StockCode "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@StockCode", StockCode)

                    ).First();

                    return StockName;
                }
                catch
                {
                    return "";
                }
            }
            else
            {
                try
                {
                    string StockName = _context.Database.SqlQuery<string>("select EnglishName from St_WarehouseH " +
                    "where  CompanyID =@CompanyID  and  StockCode=@StockCode "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@StockCode", StockCode)

                    ).First();

                    return StockName;
                }
                catch
                {
                    return "";
                }
            }

        }
        public string GetSt_WarehouseHName(int CompanyID, string StockCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    string StockName = _context.Database.SqlQuery<string>("select ArabicName from St_WarehouseH " +
                    "where  CompanyID =@CompanyID  and  StockCode=@StockCode "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@StockCode", StockCode)

                    ).First();

                    return StockName;
                }
                catch
                {
                    return "";
                }
            }
            else
            {
                try
                {
                    string StockName = _context.Database.SqlQuery<string>("select EnglishName from St_WarehouseH " +
                    "where  CompanyID =@CompanyID  and  StockCode=@StockCode "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@StockCode", StockCode)

                    ).First();

                    return StockName;
                }
                catch
                {
                    return "";
                }
            }

        }
        public int CheckSt_FactoryHBeforDelete(int CompanyID, int FactoryID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct FactoryID From St_SectionsOfFactory " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " FactoryID = @FactoryID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@FactoryID", FactoryID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }
        }
        public string CheckSt_WarehouseH(int CompanyID, string StockCode)
        {
            try
            {
                string sStockCode = _context.Database.SqlQuery<string>(
                " Select Distinct StockCode From " +
                " ( " +
                    " Select  MainStockCode As StockCode " +
                    " From St_BranchH " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " MainStockCode = @StockCode " +
                    "  Union All " +
                    "  Select  BranchStockCode As StcokCode " +
                    " From St_BranchH " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " BranchStockCode = @StockCode " +
                " ) As StockCode "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@StockCode", StockCode)
                ).FirstOrDefault();
                return sStockCode;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return "";
            }

        }
        public IEnumerable<TransActionServiceBillVM> GetTransActionServiceBillsData(int CompanyID, int VoucherNumber, int CompanyTransactionKindNo, int TransactionKindNo , int CompanyYear)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<TransActionServiceBillVM>(
                    " Select TS.*, S.ArabicName As ServiceName, " +
                    " ( " +
                        " Select CC.ArabicName " +
                        " From ChartOfAccounts CC " +
                        " Where " +
                        " CC.CompanyID = TS.CompanyID " +
                        " And " +
                        " CC.AccountNumber = TS.AccountNumber " +
                    " ) As AccountName, " +
                    " ( " +
                        " Select CC.ArabicName " +
                        " From CostCenters CC " +
                        " Where " +
                        " CC.CompanyID = TS.CompanyID " +
                        " And " +
                        " CC.CostNumber = TS.CostNumber " +
                    " ) As CostName " +
                    " From TransActionServiceBills TS,[Services] S " +
                    " Where " +
                    " TS.ServiceNo = S.ServiceID " +
                    " And " +
                    " TS.CompanyID = S.CompanyID " +
                    " And " +
                    " TS.CompanyID = @CompanyID " +
                    " And " +
                    " TS.BillID = @VoucherNumber " +
                    " And " +
                    " TS.CompanyYear = @CompanyYear " +
                    " And " +
                    " CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " TransactionKindNo = @TransactionKindNo "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)

                ).ToList();
                }
                catch
                {
                    return new List<TransActionServiceBillVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<TransActionServiceBillVM>(
                    " Select TS.*, S.EnglishName As ServiceName, " +
                    " ( " +
                        " Select CC.EnglishName " +
                        " From ChartOfAccounts CC " +
                        " Where " +
                        " CC.CompanyID = TS.CompanyID " +
                        " And " +
                        " CC.AccountNumber = TS.AccountNumber " +
                    " ) As AccountName, " +
                    " ( " +
                        " Select CC.EnglishName " +
                        " From CostCenters CC " +
                        " Where " +
                        " CC.CompanyID = TS.CompanyID " +
                        " And " +
                        " CC.CostNumber = TS.CostNumber " +
                    " ) As CostName " +
                    " From TransActionServiceBills TS,[Services] S " +
                    " Where " +
                    " TS.ServiceNo = S.ServiceID " +
                    " And " +
                    " TS.CompanyID = S.CompanyID " +
                    " And " +
                    " TS.CompanyID = @CompanyID " +
                    " And " +
                    " TS.BillID = @VoucherNumber " + 
                    " And " +
                    " TS.CompanyYear = @CompanyYear " +
                    " And " +
                    " CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " TransactionKindNo = @TransactionKindNo "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)

                ).ToList();
                }
                catch
                {
                    return new List<TransActionServiceBillVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardHVM> GetRelatedItemByItemCardH(string ItemCode, int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                     " Select R.RelatedItemCode, R.RowNumber As RelatedItemRowNumber, " +
                     " ( " +
                       " Select IC.ArabicName " +
                       " From St_ItemCardH IC " +
                       " Where " +
                       " R.RelatedItemCode = IC.ItemCode " +
                       " And " +
                       " R.CompanyID = IC.CompanyID " +
                     " ) As RelatedItemName " +
                     " From St_RelatedItemH R " +
                     " Where " +
                     " R.CompanyID = @CompanyID " +
                     " And " +
                     " R.ItemCode = @ItemCode " +
                     " Order By R.RowNumber "
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                     " Select R.RelatedItemCode, R.RowNumber As RelatedItemRowNumber, " +
                     " ( " +
                       " Select IC.EnglishName " +
                       " From St_ItemCardH IC " +
                       " Where " +
                       " R.RelatedItemCode = IC.ItemCode " +
                       " And " +
                       " R.CompanyID = IC.CompanyID " +
                     " ) As RelatedItemName " +
                     " From St_RelatedItemH R " +
                     " Where " +
                     " R.CompanyID = @CompanyID " +
                     " And " +
                     " R.ItemCode = @ItemCode " +
                     " Order By R.RowNumber "
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardHVM>();
                }
            }
        }
        public IEnumerable<St_WarehouseSearchHVM> CheckItemCodeH(int CompanyID, string ItemCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_WarehouseSearchHVM>(
                    " Select ItemCode, ArabicName As ItemName,StopItem,CostRate,TaxRate,SalePrice " +
                    " From St_ItemCardH " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " ItemCode = @ItemCode "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_WarehouseSearchHVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_WarehouseSearchHVM>(
                    " Select ItemCode, EnglishName As ItemName,StopItem,CostRate,TaxRate,SalePrice " +
                    " From St_ItemCardH " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " ItemCode = @ItemCode "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_WarehouseSearchHVM>();
                }
            }
        }
        public IEnumerable<St_WarehouseSearchVM> CheckItemCode(int CompanyID, string ItemCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_WarehouseSearchVM>(
                    " Select IC.ItemCode, IC.ArabicName As ItemName,IC.StopItem,IC.CostRate,IC.SalePrice,IC.TaxRate, " +
                    " ( " +
                        " CASE " +
                        " WHEN(Select ISNULL(Max(T.PricePieceLocalBeforDiscount), 0) From St_Transaction T Where T.CompanyID = IC.CompanyID And T.ItemCode = IC.ItemCode And T.TransactionKindNo = 501) != 0 " +
                        " Then(Select ISNULL(Max(T.PricePieceLocalBeforDiscount), 0) From St_Transaction T Where T.CompanyID = IC.CompanyID And T.ItemCode = IC.ItemCode And T.TransactionKindNo = 501) " +
                        " Else IC.LocalCost " +
                        " End " +
                      " ) As PurchasePrice, " +
                    " ( " +
                         " Select IU.ArabicName " +
                         " From St_ItemUnit IU " +
                         " Where " +
                         " IC.ItemUnitNo = IU.ItemUnitCode " +
                         " And " +
                         " IC.CompanyID = IU.CompanyID " +
                      " ) As ItemUnitName, " +
                      " ( " +
                         " Select CO.ArabicName " +
                         " From St_CountryOfOrigin CO " +
                         " Where " +
                         " IC.CountryOfOriginNo = CO.CountryOfOriginID " +
                         " And " +
                         " IC.CompanyID = CO.CompanyID " +
                      " ) As CountryOfOriginName, " +
                      " ( " +
                         " Select MC.ArabicName " +
                         " From St_ManufacturerCompany MC " +
                         " Where " +
                         " IC.ManufacturerCompanyNo = MC.ManufacturerCompanyID " +
                         " And " +
                         " IC.CompanyID = MC.CompanyID " +
                      " ) As ManufacturerCompanyName " +
                    " From St_ItemCard IC " +
                    " Where " +
                    " IC.CompanyID = @CompanyID " +
                    " And " +
                    " IC.ItemCode = (Select SI.ItemCode from St_SimilarItem SI where SI.SimilarItemCode = @ItemCode) "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_WarehouseSearchVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_WarehouseSearchVM>(
                    " Select IC.ItemCode, IC.EnglishName As ItemName,IC.StopItem,IC.CostRate,IC.SalePrice,IC.TaxRate, " +
                    " ( " +
                        " CASE " +
                        " WHEN(Select ISNULL(Max(T.PricePieceLocalBeforDiscount), 0) From St_Transaction T Where T.CompanyID = IC.CompanyID And T.ItemCode = IC.ItemCode And T.TransactionKindNo = 501) != 0 " +
                        " Then(Select ISNULL(Max(T.PricePieceLocalBeforDiscount), 0) From St_Transaction T Where T.CompanyID = IC.CompanyID And T.ItemCode = IC.ItemCode And T.TransactionKindNo = 501) " +
                        " Else IC.LocalCost " +
                        " End " +
                      " ) As PurchasePrice, " +
                    " ( " +
                         " Select IU.EnglishName " +
                         " From St_ItemUnit IU " +
                         " Where " +
                         " IC.ItemUnitNo = IU.ItemUnitCode " +
                         " And " +
                         " IC.CompanyID = IU.CompanyID " +
                      " ) As ItemUnitName, " +
                      " ( " +
                         " Select CO.EnglishName " +
                         " From St_CountryOfOrigin CO " +
                         " Where " +
                         " IC.CountryOfOriginNo = CO.CountryOfOriginID " +
                         " And " +
                         " IC.CompanyID = CO.CompanyID " +
                      " ) As CountryOfOriginName, " +
                      " ( " +
                         " Select MC.EnglishName " +
                         " From St_ManufacturerCompany MC " +
                         " Where " +
                         " IC.ManufacturerCompanyNo = MC.ManufacturerCompanyID " +
                         " And " +
                         " IC.CompanyID = MC.CompanyID " +
                      " ) As ManufacturerCompanyName " +
                    " From St_ItemCard IC " +
                    " Where " +
                    " IC.CompanyID = @CompanyID " +
                    " And " +
                    " IC.ItemCode = (Select SI.ItemCode from St_SimilarItem SI where SI.SimilarItemCode = @ItemCode) "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_WarehouseSearchVM>();
                }
            }
        }
        public IEnumerable<St_WarehouseSearchVM> CheckItemUnit(int CompanyID, int ItemUnitCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_WarehouseSearchVM>(
                    " Select ItemUnitCode, ArabicName As ItemUnitName " +
                    " From St_ItemUnit " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " ItemUnitCode = @ItemUnitCode "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemUnitCode", ItemUnitCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_WarehouseSearchVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_WarehouseSearchVM>(
                   " Select ItemUnitCode, EnglishName As ItemUnitName " +
                    " From St_ItemUnit " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " ItemUnitCode = @ItemUnitCode "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemUnitCode", ItemUnitCode)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_WarehouseSearchVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardHVM> GetSimilarItemByItemCardH(string ItemCode, int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                     " Select S.SimilarItemCode, S.RowNumber As SimilarItemRowNumber, " +
                     " ( " +
                       " Select IC.ArabicName " +
                       " From St_ItemCardH IC " +
                       " Where " +
                       " S.SimilarItemCode = IC.ItemCode " +
                       " And " +
                       " S.CompanyID = IC.CompanyID " +
                     " ) As SimilarItemName " +
                     " From St_SimilarItemH S " +
                     " Where " +
                     " S.CompanyID = @CompanyID " +
                     " And " +
                     " S.ItemCode = @ItemCode " +
                     " Order By S.RowNumber "
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                     " Select S.SimilarItemCode, S.RowNumber As SimilarItemRowNumber, " +
                     " ( " +
                       " Select IC.EnglishName " +
                       " From St_ItemCardH IC " +
                       " Where " +
                       " S.SimilarItemCode = IC.ItemCode " +
                       " And " +
                       " S.CompanyID = IC.CompanyID " +
                     " ) As SimilarItemName " +
                     " From St_SimilarItemH S " +
                     " Where " +
                     " S.CompanyID = @CompanyID " +
                     " And " +
                     " S.ItemCode = @ItemCode " +
                     " Order By S.RowNumber "
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardHVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardHVM> GetSubColorsItemByItemCardH(string ItemCode, int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                      " Select S.SubItemColorCode, S.RowNumber As SubItemColorRowNumber, " +
                      " ( " +
                        " Select SC.ArabicName " +
                        " From St_SubItemColor SC " +
                        " Where " +
                        " S.SubItemColorCode = SC.SubItemColorCode " +
                        " And " +
                        " S.CompanyID = SC.CompanyID " +
                      " ) As SubItemColorName " +
                      " From St_SubColorsItemH S " +
                      " Where " +
                      " S.CompanyID = @CompanyID " +
                      " And " +
                      " S.ItemCode = @ItemCode " +
                      " Order By S.RowNumber "
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                      " Select S.SubItemColorCode, S.RowNumber As SubItemColorRowNumber, " +
                      " ( " +
                        " Select SC.EnglishName " +
                        " From St_SubItemColor SC " +
                        " Where " +
                        " S.SubItemColorCode = SC.SubItemColorCode " +
                        " And " +
                        " S.CompanyID = SC.CompanyID " +
                      " ) As SubItemColorName " +
                      " From St_SubColorsItemH S " +
                      " Where " +
                      " S.CompanyID = @CompanyID " +
                      " And " +
                      " S.ItemCode = @ItemCode " +
                      " Order By S.RowNumber "
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardHVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardHVM> GetManufacturingStageByItemCardH(string ItemCode, int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                    " Select SM.FactoryNo As ManufacturingStageFactoryNo, SM.NumberOfDays, SM.RowNumber As ManufacturingStageRowNumber, " +
                    " ( " +
                      " Select SF.ArabicName " +
                      " From St_Factory SF " +
                      " Where " +
                      " SM.CompanyID = SF.CompanyID " +
                      " And " +
                      " SM.FactoryNo = SF.FactoryID " +
                    " ) As ManufacturingStageFactoryName " +
                    " From St_ManufacturingStageH SM " +
                    " Where " +
                    " SM.CompanyID = @CompanyID " +
                    " And " +
                    " SM.ItemCode = @ItemCode " +
                    " Order By SM.RowNumber "
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                     " Select SM.FactoryNo As ManufacturingStageFactoryNo, SM.NumberOfDays, SM.RowNumber As ManufacturingStageRowNumber, " +
                    " ( " +
                      " Select SF.EnglishName " +
                      " From St_Factory SF " +
                      " Where " +
                      " SM.CompanyID = SF.CompanyID " +
                      " And " +
                      " SM.FactoryNo = SF.FactoryID " +
                    " ) As ManufacturingStageFactoryName " +
                    " From St_ManufacturingStageH SM " +
                    " Where " +
                    " SM.CompanyID = @CompanyID " +
                    " And " +
                    " SM.ItemCode = @ItemCode " +
                    " Order By SM.RowNumber "
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardHVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardHVM> GetRawMaterialByItemCardH(string ItemCode, int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                    " Select SRM.RawMaterialCode As RawMaterialCode, SRM.Quantity, SRM.Cost, SRM.Total, RowNumber As RawMaterialRowNumber, " +
                     " ( " +
                       " Select IC.ArabicName " +
                       " From St_ItemCardH IC " +
                       " Where " +
                       " SRM.CompanyID = IC.CompanyID " +
                       " And " +
                       " SRM.ItemCode = IC.ItemCode " +
                     " ) As RawMaterialName " +
                     " From St_RawMaterialH SRM " +
                     " Where " +
                     " SRM.CompanyID = @CompanyID " +
                     " And " +
                     " SRM.ItemCode = @ItemCode " +
                     " Order By SRM.RowNumber "
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardHVM>(
                     " Select SRM.RawMaterialCode As RawMaterialCode, SRM.Quantity, SRM.Cost, SRM.Total, RowNumber As RawMaterialRowNumber, " +
                     " ( " +
                       " Select IC.EnglishName " +
                       " From St_ItemCardH IC " +
                       " Where " +
                       " SRM.CompanyID = IC.CompanyID " +
                       " And " +
                       " SRM.ItemCode = IC.ItemCode " +
                     " ) As RawMaterialName " +
                     " From St_RawMaterialH SRM " +
                     " Where " +
                     " SRM.CompanyID = @CompanyID " +
                     " And " +
                     " SRM.ItemCode = @ItemCode " +
                     " Order By SRM.RowNumber "
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardHVM>();
                }
            }
        }
        public IEnumerable<St_WarehouseSearchHVM> GetAllSt_FactoryH(int CompanyID)

        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_WarehouseSearchHVM>(
                    " Select FactoryID,ArabicName As FactoryName " +
                    " From St_FactoryH " +
                    " Where " +
                    " CompanyID =@CompanyID " +
                    " Order By FactoryID "
                    , new SqlParameter("@CompanyID", CompanyID)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_WarehouseSearchHVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_WarehouseSearchHVM>(
                    " Select FactoryID,EnglishName As FactoryName " +
                    " From St_FactoryH " +
                    " Where " +
                    " CompanyID =@CompanyID " +
                    " Order By FactoryID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_WarehouseSearchHVM>();
                }
            }
        }
        public IEnumerable<St_WarehouseSearchVM> GetAllSt_ItemUnit(int CompanyID)

        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_WarehouseSearchVM>(
                    " Select ItemUnitCode,ArabicName As ItemUnitName " +
                    " From St_ItemUnit " +
                    " Where " +
                    " CompanyID =@CompanyID " +
                    " Order By ItemUnitCode "
                    , new SqlParameter("@CompanyID", CompanyID)
                ).ToList();
                }
                catch (Exception ex)
                {
                    string error = ex.Message;
                    return new List<St_WarehouseSearchVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_WarehouseSearchVM>(
                    " Select ItemUnitCode,EnglishName As ItemUnitName " +
                    " From St_ItemUnit " +
                    " Where " +
                    " CompanyID =@CompanyID " +
                    " Order By ItemUnitCode "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_WarehouseSearchVM>();
                }
            }
        }
        public St_WarehouseSearchHVM CheckSt_FactoryH(int CompanyID, int FactoryID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseSearchHVM>(
                    " Select FactoryID, ArabicName As FactoryName From St_FactoryH " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " FactoryID = @FactoryID " +
                    " Order By FactoryID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@FactoryID", FactoryID)

                ).FirstOrDefault();
                }
                catch
                {
                    return new St_WarehouseSearchHVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseSearchHVM>(
                    " Select FactoryID, EnglishName As FactoryName From St_FactoryH " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " FactoryID = @FactoryID " +
                    " Order By FactoryID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@FactoryID", FactoryID)
                ).FirstOrDefault();
                }
                catch
                {
                    return new St_WarehouseSearchHVM();
                }
            }
        }
        public int GetOpeningDateH(int CompanyID, string ItemCode)
        {
            try
            {
                int DifferenceDate = _context.Database.SqlQuery<int>(
                    " Select DATEDIFF(day, OpeningDate, GETDATE()) AS DifferenceDate " +
                    " From St_ItemCardH " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " ItemCode = @ItemCode "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@ItemCode", ItemCode)

                ).First();

                return DifferenceDate;
            }
            catch
            {
                return 0;
            }
        }
        public int GetOpeningDate(int CompanyID, string ItemCode)
        {
            try
            {
                int DifferenceDate = _context.Database.SqlQuery<int>(
                    " Select DATEDIFF(day, OpeningDate, GETDATE()) AS DifferenceDate " +
                    " From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " ItemCode = @ItemCode "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@ItemCode", ItemCode)

                ).First();

                return DifferenceDate;
            }
            catch
            {
                return 0;
            }
        }
        public void DeleteSt_ItemCardH(int CompanyID, string ItemCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_ItemCardH " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ItemCode = @ItemCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@ItemCode", ItemCode)
            );
        }
        public void DeleteSt_SimilarItemH(int CompanyID, string ItemCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_SimilarItemH " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ItemCode = @ItemCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@ItemCode", ItemCode)
            );
        }
        public void DeleteSt_RelatedItemH(int CompanyID, string ItemCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_RelatedItemH " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ItemCode = @ItemCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@ItemCode", ItemCode)
            );
        }
        public void DeleteSt_ManufacturingStageH(int CompanyID, string ItemCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_ManufacturingStageH " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ItemCode = @ItemCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@ItemCode", ItemCode)
            );
        }
        public void DeleteSt_RawMaterialH(int CompanyID, string ItemCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_RawMaterialH " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ItemCode = @ItemCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@ItemCode", ItemCode)
            );
        }
        public void DeleteSt_SubColorsItemH(int CompanyID, string ItemCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_SubColorsItemH " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ItemCode = @ItemCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@ItemCode", ItemCode)
            );
        }
        public void DeleteSt_ItemWarehouseH(int CompanyID, string ItemCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_ItemWarehouseH " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ItemCode = @ItemCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@ItemCode", ItemCode)
            );
        }
        public void DeleteSt_ItemWarehouseHByStockCode(int CompanyID, string StockCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_ItemWarehouseH " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " StockCode = @StockCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@StockCode", StockCode)
            );
        }
        public void DeleteSt_ItemCard(int CompanyID, string ItemCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_ItemCard " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ItemCode = @ItemCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@ItemCode", ItemCode)
            );
        }
        public void DeleteSt_SimilarItem(int CompanyID, string ItemCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_SimilarItem " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ItemCode = @ItemCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@ItemCode", ItemCode)
            );
        }
        public void DeleteSt_ItemWarehouse(int CompanyID, string ItemCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_ItemWarehouse " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ItemCode = @ItemCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@ItemCode", ItemCode)
            );
        }
        public void DeleteSt_ItemWarehouseByStockCode(int CompanyID, string StockCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_ItemWarehouse " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " StockCode = @StockCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@StockCode", StockCode)
            );
        }
        public void DeleteSt_AlternativeItem(int CompanyID, string ItemCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_AlternativeItem " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ItemCode = @ItemCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@ItemCode", ItemCode)
            );
        }
        public void DeleteSt_ItemOtherUnit(int CompanyID, string ItemCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_ItemOtherUnit " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ItemCode = @ItemCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@ItemCode", ItemCode)
            );
        }
        public void DeleteSt_ItemOffer(int CompanyID, string ItemCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_ItemOffer " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ItemCode = @ItemCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@ItemCode", ItemCode)
            );
        }
        public void DeleteSt_ItemAdvertisingRepresentative(int CompanyID, string ItemCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_ItemAdvertisingRepresentative " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ItemCode = @ItemCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@ItemCode", ItemCode)
            );
        }
        public void DeleteSt_ItemAdvertisingRepresentativeByAdvertisingRepresentativeID(int CompanyID, int AdvertisingRepresentativeID)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_ItemAdvertisingRepresentative " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " AdvertisingRepresentativeID = @AdvertisingRepresentativeID "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@AdvertisingRepresentativeID", AdvertisingRepresentativeID)
            );
        }
        public void DeleteSt_ItemGallary(int CompanyID, string ItemCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_ItemGallary " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ItemCode = @ItemCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@ItemCode", ItemCode)
            );
        }
        public int CheckDateIsFreezeDate(int CompanyID, DateTime dDate)
        {
            try
            {
                var CheckCase = _context.Database.SqlQuery<int>(
                " Select Count(*) As CheckCase " +
                " From FreezeTransactions " +
                "  Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " cast(datediff(day, 0, MinmumDate) as datetime) <= @dDate " +
                " And " +
                " cast(datediff(day, 0, MaximumDate) as datetime) >= @dDate "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@dDate", dDate)
                ).FirstOrDefault();
                return CheckCase;
            }
            catch (Exception ex)
            {
                string error = ex.Message;
                return 0;
            }

        }
        public IEnumerable<St_DescriptionDetailVM> GetAllSt_DescriptionDetail(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_DescriptionDetailVM>(
                    " Select SD.ArabicName As DescriptionName, SDD.DescriptionDetailID, SDD.DescriptionID, SDD.ArabicName As DescriptionDetailName " +
                     " From St_Description SD, St_DescriptionDetail SDD " +
                     " Where " +
                     " SD.CompanyID = SDD.CompanyID " +
                     " And " +
                     " SD.DescriptionID = SDD.DescriptionID " +
                     " And " +
                     " SD.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_DescriptionDetailVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_DescriptionDetailVM>(
                     " Select SD.EnglishName As DescriptionName, SDD.DescriptionDetailID, SDD.DescriptionID, SDD.EnglishName As DescriptionDetailName " +
                     " From St_Description SD, St_DescriptionDetail SDD " +
                     " Where " +
                     " SD.CompanyID = SDD.CompanyID " +
                     " And " +
                     " SD.DescriptionID = SDD.DescriptionID " +
                     " And " +
                     " SD.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_DescriptionDetailVM>();
                }
            }
        }
        public IEnumerable<St_BankHVM> GetAllBank(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_BankHVM>(
                    " Select SB.BankID, SB.ArabicName As BankName, SB.FundingAgencyID, SFA.ArabicName As FundingAgencyName, " +
                    " ( " +
                      " Select CA.ArabicName " +
                      " From ChartOfAccounts CA " +
                      " Where " +
                      " SB.CompanyID = CA.CompanyID " +
                      " And " +
                      " SB.BankAccountNumber = CA.AccountNumber " +
                    " ) As BankAccountName " +
                    " From St_BankH SB, St_FundingAgencyH SFA " +
                    " Where " +
                    " SB.CompanyID = SFA.CompanyID " +
                    " And " +
                    " SB.BankID = SFA.FundingAgencyID " +
                    " And " +
                    " SB.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_BankHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_BankHVM>(
                        " Select SB.BankID, SB.EnglishName As BankName, SB.FundingAgencyID, SFA.EnglishName As FundingAgencyName, " +
                        " ( " +
                          " Select CA.EnglishName " +
                          " From ChartOfAccounts CA " +
                          " Where " +
                          " SB.CompanyID = CA.CompanyID " +
                          " And " +
                          " SB.BankAccountNumber = CA.AccountNumber " +
                        " ) As BankAccountName " +
                        " From St_BankH SB, St_FundingAgencyH SFA " +
                        " Where " +
                        " SB.CompanyID = SFA.CompanyID " +
                        " And " +
                        " SB.BankID = SFA.FundingAgencyID " +
                        " And " +
                        " SB.CompanyID = @CompanyID "
                        , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_BankHVM>();
                }
            }
        }
        public IEnumerable<St_MeasurementDetailVM> GetAllSt_MeasurementDetail(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_MeasurementDetailVM>(
                    " Select SM.ArabicName As MeasurementName, SMD.MeasurementDetailID, SMD.MeasurementID, SMD.ArabicName As MeasurementDetailName " +
                      " From St_Measurement SM, St_MeasurementDetail SMD " +
                      " Where " +
                      " SM.CompanyID = SMD.CompanyID " +
                      " And " +
                      " SM.MeasurementID = SMD.MeasurementID " +
                      " And " +
                      " SM.CompanyID = @CompanyID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_MeasurementDetailVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_MeasurementDetailVM>(
                      " Select SM.EnglishName As MeasurementName, SMD.MeasurementDetailID, SMD.MeasurementID, SMD.EnglishName As MeasurementDetailName " +
                      " From St_Measurement SM, St_MeasurementDetail SMD " +
                      " Where " +
                      " SM.CompanyID = SMD.CompanyID " +
                      " And " +
                      " SM.MeasurementID = SMD.MeasurementID " +
                      " And " +
                      " SM.CompanyID = @CompanyID " 
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_MeasurementDetailVM>();
                }
            }
        }
        public IEnumerable<St_Measurement> GetAllSt_Measurement(int CompanyID)
        {
            try
            {
                return _context.Database.SqlQuery<St_Measurement>(
                " Select * " +
                  " From St_Measurement " +
                  " Where " +
                  " CompanyID = @CompanyID "
                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<St_Measurement>();
            }
        }
        public void DeleteSt_CompanyTransactionKind(int CompanyID, string StockCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_CompanyTransactionKind " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " StockCode = @StockCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@StockCode", StockCode)
            );
        }
        public void DeleteSt_CompanyTransactionKindH(int CompanyID, string StockCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_CompanyTransactionKindH " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " StockCode = @StockCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@StockCode", StockCode)
            );
        }
        public string GetSt_TransactionKindName(int St_TransactionKindID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    string St_TransactionKindName = _context.Database.SqlQuery<string>(
                        " Select ArabicName from St_TransactionKind " +
                        " Where " +
                        " St_TransactionKindID  = @St_TransactionKindID "  
                    , new SqlParameter("@St_TransactionKindID", St_TransactionKindID)
                    ).First();
                    return St_TransactionKindName;
                }
                catch
                {
                    return "";
                }
            }
            else
            {
                try
                {
                    string St_TransactionKindName = _context.Database.SqlQuery<string>(
                        " Select EnglishName from St_TransactionKind " +
                        " Where " +
                        " St_TransactionKindID  = @St_TransactionKindID "
                    , new SqlParameter("@St_TransactionKindID", St_TransactionKindID)
                    ).First();
                    return St_TransactionKindName;
                }
                catch
                {
                    return "";
                }
            }

        }
        public string GetSt_TransactionKindHName(int St_TransactionKindID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    string St_TransactionKindName = _context.Database.SqlQuery<string>(
                        " Select ArabicName from St_TransactionKindH " +
                        " Where " +
                        " St_TransactionKindID  = @St_TransactionKindID "
                    , new SqlParameter("@St_TransactionKindID", St_TransactionKindID)
                    ).First();
                    return St_TransactionKindName;
                }
                catch
                {
                    return "";
                }
            }
            else
            {
                try
                {
                    string St_TransactionKindName = _context.Database.SqlQuery<string>(
                        " Select EnglishName from St_TransactionKindH " +
                        " Where " +
                        " St_TransactionKindID  = @St_TransactionKindID "
                    , new SqlParameter("@St_TransactionKindID", St_TransactionKindID)
                    ).First();
                    return St_TransactionKindName;
                }
                catch
                {
                    return "";
                }
            }

        }
        public IEnumerable<St_TransactionKindHVM> GetSt_TransactionKindH()
        {
            try
            {
                return _context.Database.SqlQuery<St_TransactionKindHVM>(
                " Select St_TransactionKindID " +
                " From St_TransactionKindH  " +
                " Where " +
                " St_TransactionKindID in (501,503,507,508,511,512,513,514,515,516,517,523,524,525) " 
            ).ToList();
            }
            catch (Exception ex)
            {
                string error = ex.Message;
                return new List<St_TransactionKindHVM>();
            }
        }
        public IEnumerable<St_TransactionKindHVM> GetSt_TransactionKindHAllStockTransaction(int CompanyID)
        {
            try
            {
                return _context.Database.SqlQuery<St_TransactionKindHVM>(
                "  Select T.St_TransactionKindID " +
                " From St_TransactionKindH T, St_CompanyTransactionKindH CT " +
                " Where " +
                " T.St_TransactionKindID in (501,503,507,508,511,512,513,514,515,516,517,523,524,525) " +
                " And " +
                " T.St_TransactionKindID = CT.St_TransactionKindID " +
                " And " +
                " CT.CompanyID = @CompanyID "
                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch (Exception ex)
            {
                string error = ex.Message;
                return new List<St_TransactionKindHVM>();
            }
        }
        public IEnumerable<St_TransactionKindHVM> GetSt_TransactionKindHWithoutAllStockTransaction()
        {
            try
            {
                return _context.Database.SqlQuery<St_TransactionKindHVM>(
                " Select St_TransactionKindID " +
                " From St_TransactionKindH " +
                " Where " +
                " St_TransactionKindID Not in (501,503,507,508,511,512,513,514,515,516,517,523,524,525) "
            ).ToList();
            }
            catch (Exception ex)
            {
                string error = ex.Message;
                return new List<St_TransactionKindHVM>();
            }
        }
        public IEnumerable<St_TransactionKindVM> GetSt_TransactionKind()
        {
            try
            {
                return _context.Database.SqlQuery<St_TransactionKindVM>(
                " Select St_TransactionKindID " +
                " From St_TransactionKind  " +
                " Where " +
                " St_TransactionKindID in (507, 508,511,512, 513, 514, 515, 516 ) "
            ).ToList();
            }
            catch
            {
                return new List<St_TransactionKindVM>();
            }
        }
        public IEnumerable<St_TransactionKindVM> GetSt_TransactionKindAllStockTransaction(int CompanyID)
        {
            try
            {
                return _context.Database.SqlQuery<St_TransactionKindVM>(
                " Select T.St_TransactionKindID " +
                " From St_TransactionKind T, St_CompanyTransactionKind CT " +
                " Where " +
                " T.St_TransactionKindID in (507, 508,511,512, 513, 514, 515, 516 ) " +
                " And " +
                " T.St_TransactionKindID = CT.St_TransactionKindID " +
                " And " +
                " CT.CompanyID = @CompanyID "
                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch
            {
                return new List<St_TransactionKindVM>();
            }
        }
        public IEnumerable<St_TransactionKindVM> GetSt_TransactionKindWithoutAllStockTransaction()
        {
            try
            {
                return _context.Database.SqlQuery<St_TransactionKindVM>(
                " Select St_TransactionKindID " +
                " From St_TransactionKind " +
                " Where " +
                " St_TransactionKindID Not in (507, 508,511,512, 513, 514, 515, 516) "
            ).ToList();
            }
            catch
            {
                return new List<St_TransactionKindVM>();
            }
        }
        public St_WarehouseAccountVM GetSt_WarehouseAccountByStock(int CompanyID, string StockCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseAccountVM>(
                    " Select WA.SalesAccountNumber, WA.SalesFundAccountNumber, WA.CostOfGoodsAccountNumber, " +
                    " WA.SalesRefundFundAccountNumber, WA.SalesReturnAccountNumber, WA.ReturnCostOfGoodsAccountNumber, " +
                    " WA.PurchaseAccountNumber, WA.PurchaseFundAccountNumber, " +
                    " WA.PurchaseFundReturnAccountNumber, WA.PurchaseReturnAccountNumber, " +
                    " ( " +
                      " Select CC.ArabicName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.SalesAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As SalesAccountName, " +
                    " ( " +
                      " Select CC.ArabicName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.SalesFundAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As SalesFundAccountName, " +
                    " ( " +
                      " Select CC.ArabicName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.CostOfGoodsAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As CostOfGoodsAccountName, " +
                    " ( " +
                      " Select CC.ArabicName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.SalesRefundFundAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As SalesRefundFundAccountName, " +
                    " ( " +
                      " Select CC.ArabicName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.SalesReturnAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As SalesReturnAccountName, " +
                    " ( " +
                      " Select CC.ArabicName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.ReturnCostOfGoodsAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As ReturnCostOfGoodsAccountName, " +
                    " ( " +
                      " Select CC.ArabicName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.PurchaseAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As PurchaseAccountName, " +
                    " ( " +
                      " Select CC.ArabicName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.PurchaseFundAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As PurchaseFundAccountName, " +
                    " ( " +
                      " Select CC.ArabicName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.PurchaseFundReturnAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As PurchaseFundReturnAccountName, " +
                    " ( " +
                      " Select CC.ArabicName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.PurchaseReturnAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As PurchaseReturnAccountName " +
                    " From St_WarehouseAccount WA " +
                    " Where " +
                    " WA.CompanyID = @CompanyID " +
                    " And " +
                    " WA.StockCode = @StockCode "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@StockCode", StockCode)

                ).FirstOrDefault();
                }
                catch
                {
                    return new St_WarehouseAccountVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_WarehouseAccountVM>(
                    " Select WA.SalesAccountNumber, WA.SalesFundAccountNumber, WA.CostOfGoodsAccountNumber, " +
                    " WA.SalesRefundFundAccountNumber, WA.SalesReturnAccountNumber, WA.ReturnCostOfGoodsAccountNumber, " +
                    " WA.PurchaseAccountNumber, WA.PurchaseFundAccountNumber, " +
                    " WA.PurchaseFundReturnAccountNumber, WA.PurchaseReturnAccountNumber, " +
                    " ( " +
                      " Select CC.EnglishName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.SalesAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As SalesAccountName, " +
                    " ( " +
                      " Select CC.EnglishName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.SalesFundAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As SalesFundAccountName, " +
                    " ( " +
                      " Select CC.EnglishName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.CostOfGoodsAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As CostOfGoodsAccountName, " +
                    " ( " +
                      " Select CC.EnglishName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.SalesRefundFundAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As SalesRefundFundAccountName, " +
                    " ( " +
                      " Select CC.EnglishName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.SalesReturnAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As SalesReturnAccountName, " +
                    " ( " +
                      " Select CC.EnglishName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.ReturnCostOfGoodsAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As ReturnCostOfGoodsAccountName, " +
                    " ( " +
                      " Select CC.EnglishName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.PurchaseAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As PurchaseAccountName, " +
                    " ( " +
                      " Select CC.EnglishName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.PurchaseFundAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As PurchaseFundAccountName, " +
                    " ( " +
                      " Select CC.EnglishName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.PurchaseFundReturnAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As PurchaseFundReturnAccountName, " +
                    " ( " +
                      " Select CC.EnglishName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " WA.PurchaseReturnAccountNumber = CC.AccountNumber " +
                      " And " +
                      " WA.CompanyID = CC.CompanyID " +
                    " ) As PurchaseReturnAccountName " +
                    " From St_WarehouseAccount WA " +
                    " Where " +
                    " WA.CompanyID = @CompanyID " +
                    " And " +
                    " WA.StockCode = @StockCode "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@StockCode", StockCode)

                ).FirstOrDefault();
                }
                catch
                {
                    return new St_WarehouseAccountVM();
                }
            }
        }
        public IEnumerable<St_ItemCardHVM> GetSt_ItemWarehouseH(int CompanyID)
        {
            try
            {
                return _context.Database.SqlQuery<St_ItemCardHVM>(
                " Select Distinct ItemCode,max(RowNumber) As ItemWarehouseRowNumber From St_ItemWarehouseH " +
                " Where " +
                " CompanyID = @CompanyID " +
                " group By ItemCode "
                , new SqlParameter("@CompanyID", CompanyID)

            ).ToList();
            }
            catch (Exception ex)
            {
                string error = ex.Message;
                return new List<St_ItemCardHVM>();
            }
        }
        public IEnumerable<St_CarpenterHVM> GetAllSt_CarpenterH(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_CarpenterHVM>(
                    " Select CarpenterID, ArabicName As CarpenterName, HrID, " +
                    " ( " +
                      " Case When ActiveInHR = 1 " +
                      " Then N'فعال' " +
                      " Else N'موقوف' " +
                      " End " +
                    " ) As HrIDCaseName " +
                    " From St_CarpenterH " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " Order By CarpenterID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_CarpenterHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_CarpenterHVM>(
                    " Select CarpenterID, EnglishName As CarpenterName, HrID, " +
                    " ( " +
                      " Case When ActiveInHR = 1 " +
                      " Then 'Active' " +
                      " Else 'Stopped' " +
                      " End " +
                    " ) As HrIDCaseName " +
                    " From St_CarpenterH " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " Order By CarpenterID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_CarpenterHVM>();
                }

            }
        }
        public IEnumerable<St_DelegateReceivingHVM> GetAllSt_DelegateReceivingH(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_DelegateReceivingHVM>(
                   "   Select DelegateReceivingID, ArabicName As DelegateReceivingName, HrID , Telephone ," +
                    "  ( " +
                     "  Case When ActiveInHR = 1 " +
                     "  Then N'فعال' " +
                       " Else N'موقوف' " +
                      "  End " +
                    "  ) As HrIDCaseName " +
                    "  From St_DelegateReceivingH " +
                    "  Where " +
                    "  CompanyID = 4 " +
                    "  Order By DelegateReceivingID " 
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_DelegateReceivingHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_DelegateReceivingHVM>(
                    "   Select DelegateReceivingID, EnglishName As DelegateReceivingName, HrID , Telephone , " +
                    "  ( " +
                     "  Case When ActiveInHR = 1 " +
                     "  Then N'فعال' " +
                       " Else N'موقوف' " +
                      "  End " +
                    "  ) As HrIDCaseName " +
                    "  From St_DelegateReceivingH " +
                    "  Where " +
                    "  CompanyID = 4 " +
                    "  Order By DelegateReceivingID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_DelegateReceivingHVM>();
                }

            }
        }
        public IEnumerable<St_SalesManHVM> GetAllSt_SalesManH(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_SalesManHVM>(
                    " Select SalesManID, ArabicName As SalesManName, HrID, " +
                    " ( " +
                      " Case When ActiveInHR = 1 " +
                      " Then N'فعال' " +
                      " Else N'موقوف' " +
                      " End " +
                    " ) As HrIDCaseName " +
                    " From St_SalesManH " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " Order By SalesManID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_SalesManHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_SalesManHVM>(
                    " Select SalesManID, EnglishName As SalesManName, HrID, " +
                    " ( " +
                      " Case When ActiveInHR = 1 " +
                      " Then 'Active' " +
                      " Else 'Stopped' " +
                      " End " +
                    " ) As HrIDCaseName " +
                    " From St_SalesManH " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " Order By SalesManID "
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_SalesManHVM>();
                }

            }
        }
        public IEnumerable<St_BranchAccountHVM> GetBranchExpensesAccountH(string BranchCode, int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_BranchAccountHVM>(
                     " Select BEA.ExpenseAccountNumber, BEA.RowNumber As ExpenseAccountRowNumber, " +
                     " ( " +
                       " Select CC.ArabicName " +
                       " From ChartOfAccounts CC " +
                       " Where " +
                       " BEA.ExpenseAccountNumber = CC.AccountNumber " +
                       " And " +
                       " BEA.CompanyID = CC.CompanyID " +
                     " ) As ExpenseAccountName " +
                     " From St_BranchExpenseAccountH BEA " +
                     " Where " +
                     " BEA.CompanyID = @CompanyID " +
                     " And " +
                     " BEA.BranchCode = @BranchCode " +
                     " Order By BEA.RowNumber "
                    , new SqlParameter("@BranchCode", BranchCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_BranchAccountHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_BranchAccountHVM>(
                     " Select BEA.ExpenseAccountNumber, BEA.RowNumber As ExpenseAccountRowNumber, " +
                     " ( " +
                       " Select CA.EnglishName " +
                       " From ChartOfAccounts CA " +
                       " Where " +
                       " BEA.ExpenseAccountNumber = CA.AccountNumber " +
                       " And " +
                       " BEA.CompanyID = CA.CompanyID " +
                     " ) As ExpenseAccountName " +
                     " From St_BranchExpenseAccountH BEA " +
                     " Where " +
                     " BEA.CompanyID = @CompanyID " +
                     " And " +
                     " BEA.BranchCode = @BranchCode " +
                     " Order By BEA.RowNumber "
                    , new SqlParameter("@BranchCode", BranchCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_BranchAccountHVM>();
                }
            }
        }
        public IEnumerable<St_BranchAccountHVM> GetBranchOtherExpensesAccountH(string BranchCode, int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_BranchAccountHVM>(
                     " Select BOEA.OtherExpenseAccountNumber, BOEA.RowNumber As OtherExpenseAccountRowNumber, " +
                     " ( " +
                       " Select CA.ArabicName " +
                       " From ChartOfAccounts CA " +
                       " Where " +
                       " BOEA.OtherExpenseAccountNumber = CA.AccountNumber " +
                       " And " +
                       " BOEA.CompanyID = CA.CompanyID " +
                     " ) As OtherExpenseAccountName " +
                     " From St_BranchOtherExpenseAccountH BOEA " +
                     " Where " +
                     " BOEA.CompanyID = @CompanyID " +
                     " And " +
                     " BOEA.BranchCode = @BranchCode " +
                     " Order By BOEA.RowNumber "
                    , new SqlParameter("@BranchCode", BranchCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_BranchAccountHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_BranchAccountHVM>(
                     " Select BOEA.OtherExpenseAccountNumber, BOEA.RowNumber As OtherExpenseAccountRowNumber, " +
                     " ( " +
                       " Select CA.EnglishName " +
                       " From ChartOfAccounts CA " +
                       " Where " +
                       " BOEA.OtherExpenseAccountNumber = CA.AccountNumber " +
                       " And " +
                       " BOEA.CompanyID = CA.CompanyID " +
                     " ) As OtherExpenseAccountName " +
                     " From St_BranchOtherExpenseAccountH BOEA " +
                     " Where " +
                     " BOEA.CompanyID = @CompanyID " +
                     " And " +
                     " BOEA.BranchCode = @BranchCode " +
                     " Order By BOEA.RowNumber "
                    , new SqlParameter("@BranchCode", BranchCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_BranchAccountHVM>();
                }
            }
        }
        public void DeleteSt_BranchExpenseAccountH(int CompanyID, string BranchCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_BranchExpenseAccountH " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " BranchCode = @BranchCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@BranchCode", BranchCode)
            );
        }
        public void DeleteSt_BranchOtherExpenseAccountH(int CompanyID, string BranchCode)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_BranchOtherExpenseAccountH " +
                " where " +
                " CompanyID = @CompanyID " +
                " And " +
                " BranchCode = @BranchCode "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@BranchCode", BranchCode)
            );
        }
        public IEnumerable<St_BranchAccountHVM> GetAllSt_BranchAccountH(int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_BranchAccountHVM>(
                    " Select BA.BranchCode, B.ArabicName As BranchName From " +
                    " St_BranchAccountH BA, St_BranchH B " +
                    " Where " +
                    " BA.CompanyID = B.CompanyID " +
                    " And " +
                    " BA.CompanyID = @CompanyID " +
                    " And " +
                    " BA.BranchCode = B.BranchCode " +
                    " Order By BA.BranchCode "
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_BranchAccountHVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_BranchAccountHVM>(
                    " Select BA.BranchCode, B.EnglishName As BranchName From " +
                    " St_BranchAccountH BA, St_BranchH B " +
                    " Where " +
                    " BA.CompanyID = B.CompanyID " +
                    " And " +
                    " BA.CompanyID = @CompanyID " +
                    " And " +
                    " BA.BranchCode = B.BranchCode " +
                    " Order By BA.BranchCode "
                        , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_BranchAccountHVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardVM> GetSimilarItemByItemCard(string ItemCode, int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardVM>(
                     " Select S.SimilarItemCode, S.RowNumber As SimilarItemRowNumber,S.SimilarItemType,1 As OldSimilarItemRowNumber, " +
                     " ( " +
                       " Select IU.ArabicName " +
                       " From St_ItemUnit IU " +
                       " Where " +
                       " IU.ItemUnitCode = S.SimilarItemUnitCode " +
                       " And " +
                       " IU.CompanyID = S.CompanyID " +
                     " ) As SimilarUnitName " +
                     " From St_SimilarItem S " +
                     " Where " +
                     " S.CompanyID = @CompanyID " +
                     " And " +
                     " S.ItemCode = @ItemCode " +
                     " And " +
                     " S.SimilarItemCode <> S.ItemCode " +
                     " Order By S.RowNumber "
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardVM>(
                     " Select S.SimilarItemCode, S.RowNumber As SimilarItemRowNumber,S.SimilarItemType,1 As OldSimilarItemRowNumber, " +
                     " ( " +
                       " Select IU.EnglishName " +
                       " From St_ItemUnit IU " +
                       " Where " +
                       " IU.ItemUnitCode = S.SimilarItemUnitCode " +
                       " And " +
                       " IU.CompanyID = S.CompanyID " +
                     " ) As SimilarUnitName " +
                     " From St_SimilarItem S " +
                     " Where " +
                     " S.CompanyID = @CompanyID " +
                     " And " +
                     " S.ItemCode = @ItemCode " +
                     " And " +
                     " S.SimilarItemCode <> S.ItemCode " +
                     " Order By S.RowNumber "
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardVM> GetAlternativeItemByItemCard(string ItemCode, int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardVM>(
                    " Select A.AlternativeItemCode, A.RowNumber As AlternativeItemRowNumber, IC.ArabicName  As AlternativeItemName, " +
                    " IC.Saleprice As AlternativeSalePrice, " +
                    " ( " +
                       " Select IU.ArabicName " +
                       " From St_ItemUnit IU " +
                       " Where " +
                       " IU.ItemUnitCode = IC.ItemUnitNo " +
                       " And " +
                       " IU.CompanyID = IC.CompanyID " +
                     " ) As AlternativeUnit, " +
                     " ( " +
                       " Select COF.ArabicName " +
                       " From St_CountryOfOrigin COF " +
                       " Where " +
                       " COF.CountryOfOriginID = IC.CountryOfOriginNo " +
                       " And " +
                       " COF.CompanyID = IC.CompanyID " +
                     " ) As AlternativeCountryOfOrigin, " +
                     " ( " +
                        " Select MC.ArabicName " +
                        " From St_ManufacturerCompany MC " +
                        " Where " +
                        " MC.ManufacturerCompanyID = MC.ManufacturerCompanyID " +
                        " And " +
                        " MC.CompanyID = IC.CompanyID " +
                      " ) As AlternativeManufacturerCompany " +
                     " From St_AlternativeItem A ,St_ItemCard IC " +
                     " Where " +
                     " A.CompanyID = @CompanyID " +
                     " And " +
                     " A.ItemCode = @ItemCode " +
                     " And " +
                     " A.AlternativeItemCode = IC.ItemCode " +
                     " And " +
                     " A.CompanyID = IC.CompanyID " +
                     " Order By A.RowNumber "
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardVM>(
                    " Select A.AlternativeItemCode, A.RowNumber As AlternativeItemRowNumber, IC.EnglishName  As AlternativeItemName, " +
                    " IC.Saleprice As AlternativeSalePrice, " +
                    " ( " +
                       " Select IU.EnglishName " +
                       " From St_ItemUnit IU " +
                       " Where " +
                       " IU.ItemUnitCode = IC.ItemUnitNo " +
                       " And " +
                       " IU.CompanyID = IC.CompanyID " +
                     " ) As AlternativeUnit, " +
                     " ( " +
                       " Select COF.EnglishName " +
                       " From St_CountryOfOrigin COF " +
                       " Where " +
                       " COF.CountryOfOriginID = IC.CountryOfOriginNo " +
                       " And " +
                       " COF.CompanyID = IC.CompanyID " +
                     " ) As AlternativeCountryOfOrigin, " +
                     " ( " +
                        " Select MC.EnglishName " +
                        " From St_ManufacturerCompany MC " +
                        " Where " +
                        " MC.ManufacturerCompanyID = MC.ManufacturerCompanyID " +
                        " And " +
                        " MC.CompanyID = IC.CompanyID " +
                     " ) As AlternativeManufacturerCompany " +
                     " From St_AlternativeItem A ,St_ItemCard IC " +
                     " Where " +
                     " A.CompanyID = @CompanyID " +
                     " And " +
                     " A.ItemCode = @ItemCode " +
                     " And " +
                     " A.AlternativeItemCode = IC.ItemCode " +
                     " And " +
                     " A.CompanyID = IC.CompanyID " +
                     " Order By A.RowNumber "
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardVM>();
                }
            }
        }
        public IEnumerable<St_ItemCardVM> GetItemOffer1ByItemCard(string ItemCode, int CompanyID)
        {
            try
            {
                return _context.Database.SqlQuery<St_ItemCardVM>(
                 " Select RowNumber As ItemOfferRowNumber, ItemOfferQuantitySold, ItemOfferBonus " +
                 " From St_ItemOffer " +
                 " Where " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " ItemCode = @ItemCode " +
                 " Order By RowNumber "
                , new SqlParameter("@ItemCode", ItemCode)
                , new SqlParameter("@CompanyID", CompanyID)
                ).ToList();
            }
            catch
            {
                return new List<St_ItemCardVM>();
            }
        }
        public IEnumerable<St_ItemCardVM> GetItemOffer2ByItemCard(string ItemCode, int CompanyID)
        {
            try
            {
                return _context.Database.SqlQuery<St_ItemCardVM>(
                 " Select RowNumber As ItemOfferRowNumber,ItemOfferQuantitySold,ItemOfferUnitPrice,ItemOfferTotalPrice " +
                 " From St_ItemOffer " +
                 " Where " +
                 " CompanyID = @CompanyID " +
                 " And " +
                 " ItemCode = @ItemCode " +
                 " Order By RowNumber "
                , new SqlParameter("@ItemCode", ItemCode)
                , new SqlParameter("@CompanyID", CompanyID)
                ).ToList();
            }
            catch
            {
                return new List<St_ItemCardVM>();
            }
        }
        public IEnumerable<St_ItemCardVM> GetOtherItemUnitByItemCard(string ItemCode, int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardVM>(
                    " Select IOU.RowNumber As OtherUnitRowNumber, IOU.OtherUnitNumber, IU.ArabicName As OtherUnitName, " +
                    " IOU.OtherUnitQuantity, IOU.OtherUnitSalePrice, IOU.OtherUnitPurchasePrice, IOU.OtherUnitBarcode,1 As OldOtherUnitRowNumber " +
                    " From St_ItemOtherUnit IOU, St_ItemUnit IU " +
                    " Where " +
                    " IOU.ItemCode = @ItemCode " +
                    " And " +
                    " IOU.CompanyID = @CompanyID " +
                    " And " +
                    " IOU.CompanyID = IU.CompanyID " +
                    " And " +
                    " IOU.OtherUnitNumber = IU.ItemUnitCode " +
                    " Order By IOU.RowNumber " 
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardVM>(
                    " Select IOU.RowNumber As OtherUnitRowNumber, IOU.OtherUnitNumber, IU.EnglishName As OtherUnitName, " +
                    " IOU.OtherUnitQuantity, IOU.OtherUnitSalePrice, IOU.OtherUnitPurchasePrice, IOU.OtherUnitBarcode,1 As OldOtherUnitRowNumber " +
                    " From St_ItemOtherUnit IOU, St_ItemUnit IU " +
                    " Where " +
                    " IOU.ItemCode = @ItemCode " +
                    " And " +
                    " IOU.CompanyID = @CompanyID " +
                    " And " +
                    " IOU.CompanyID = IU.CompanyID " +
                    " And " +
                    " IOU.OtherUnitNumber = IU.ItemUnitCode " +
                    " Order By IOU.RowNumber "
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@CompanyID", CompanyID)
                    ).ToList();
                }
                catch
                {
                    return new List<St_ItemCardVM>();
                }
            }
        }
        public string CheckIfItemCodeExisting(int CompanyID, string ItemCode)
        {
            try
            {
                string Checked = _context.Database.SqlQuery<string>(
                 " Select IC.ItemCode " +
                 " From St_ItemCard IC " +
                 " Where " +
                 " IC.CompanyID = @CompanyID " +
                 " And " +
                 " IC.ItemCode = (Select SI.ItemCode from St_SimilarItem SI where SI.SimilarItemCode = @ItemCode) " 
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@ItemCode", ItemCode)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return "";
            }

        }
        public string CheckIfItemCodeExistingInSimilar(int CompanyID, string ItemCode)
        {
            try
            {
                string Checked = _context.Database.SqlQuery<string>(
                 " Select SimilarItemCode " +
                 " From St_SimilarItem " +
                 " Where " +
                 " SimilarItemCode = @ItemCode " +
                 " And " +
                 " CompanyID = @CompanyID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@ItemCode", ItemCode)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return "";
            }

        }
        public St_ItemCardVM GetSt_ItemWarehouseByItemAndStock(int CompanyID, string ItemCode, string StockCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardVM>(
                    " Select IW.ItemCode, IC.ArabicName As ItemName, IW.StockCode, ISNULL(IW.StockMinimumItemNo, 0) As StockMinimumItemNo, " +
                    " ISNULL(IW.StockMaximumItemNo, 0) As StockMaximumItemNo, W.ArabicName As StockName " +
                    " From St_ItemWarehouse IW, St_ItemCard IC, St_Warehouse W " +
                    " Where " +
                    " IC.CompanyID = IW.CompanyID " +
                    " And " +
                    " IC.ItemCode = IW.ItemCode " +
                    " And " +
                    " IW.STockCode = @StockCode " +
                    " And " +
                    " IC.ItemCode = @ItemCode " +
                    " And " +
                    " IC.CompanyID = @CompanyID " +
                    " And " +
                    " IC.CompanyID = W.CompanyID " +
                    " And " +
                    " IW.STockCode = W.STockCode "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@StockCode", StockCode)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).FirstOrDefault();
                }
                catch
                {
                    return new St_ItemCardVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardVM>(
                    " Select IW.ItemCode, IC.EnglishName As ItemName, IW.StockCode, ISNULL(IW.StockMinimumItemNo, 0) As StockMinimumItemNo, " +
                    " ISNULL(IW.StockMaximumItemNo, 0) As StockMaximumItemNo, W.EnglishName As StockName " +
                    " From St_ItemWarehouse IW, St_ItemCard IC, St_Warehouse W " +
                    " Where " +
                    " IC.CompanyID = IW.CompanyID " +
                    " And " +
                    " IC.ItemCode = IW.ItemCode " +
                    " And " +
                    " IW.STockCode = @StockCode " +
                    " And " +
                    " IC.ItemCode = @ItemCode " +
                    " And " +
                    " IC.CompanyID = @CompanyID " +
                    " And " +
                    " IC.CompanyID = W.CompanyID " +
                    " And " +
                    " IW.STockCode = W.STockCode "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@StockCode", StockCode)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).FirstOrDefault();
                }
                catch
                {
                    return new St_ItemCardVM();
                }
            }
        }
        public St_ItemCardVM GetSt_InitialInventoryByItemAndStock(int CompanyID, string ItemCode, string StockCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardVM>(
                     " Select IW.ItemCode, IC.ArabicName As ItemName, IW.StockCode, W.ArabicName As StockName,ISNULL(ST.Quantity, 0) As Quantity, " +
                     " ( " +
                       " Case When ISNULL(ST.CostPieceLocal, 0) = 0 " +
                       " Then IC.LocalCost " +
                       " Else ST.CostPieceLocal " +
                       " End " +
                     " ) As CostRate " +
                     " From St_ItemCard IC, St_Warehouse W, St_ItemWarehouse IW " +
                     " left Join St_Transaction ST " +
                     " On " +
                     " IW.StockCode = ST.StockCode " +
                     " And " +
                     " IW.ItemCode = ST.ItemCode " +
                     " And " +
                     " IW.CompanyID = ST.CompanyID " +
                     " And " +
                     " ST.TransactionKindNo = 517 " +
                     " Where " +
                     " IC.CompanyID = IW.CompanyID " +
                     " And " +
                     " IC.ItemCode = IW.ItemCode " +
                     " And " +
                     " IW.STockCode = @StockCode " +
                     " And " +
                     " IC.ItemCode = @ItemCode " +
                     " And " +
                     " IC.CompanyID = @CompanyID " +
                     " And " +
                     " IC.CompanyID = W.CompanyID " +
                     " And " +
                     " IW.STockCode = W.STockCode " 
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@StockCode", StockCode)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).FirstOrDefault();
                }
                catch
                {
                    return new St_ItemCardVM();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemCardVM>(
                    " Select IW.ItemCode, IC.EnglishName As ItemName, IW.StockCode, W.EnglishName As StockName,ISNULL(ST.Quantity, 0) As Quantity, " +
                     " ( " +
                       " Case When ISNULL(ST.CostPieceLocal, 0) = 0 " +
                       " Then IC.LocalCost " +
                       " Else ST.CostPieceLocal " +
                       " End " +
                     " ) As CostRate " +
                     " From St_ItemCard IC, St_Warehouse W, St_ItemWarehouse IW " +
                     " left Join St_Transaction ST " +
                     " On " +
                     " IW.StockCode = ST.StockCode " +
                     " And " +
                     " IW.ItemCode = ST.ItemCode " +
                     " And " +
                     " IW.CompanyID = ST.CompanyID " +
                     " And " +
                     " ST.TransactionKindNo = 517 " +
                     " Where " +
                     " IC.CompanyID = IW.CompanyID " +
                     " And " +
                     " IC.ItemCode = IW.ItemCode " +
                     " And " +
                     " IW.STockCode = @StockCode " +
                     " And " +
                     " IC.ItemCode = @ItemCode " +
                     " And " +
                     " IC.CompanyID = @CompanyID " +
                     " And " +
                     " IC.CompanyID = W.CompanyID " +
                     " And " +
                     " IW.STockCode = W.STockCode "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@StockCode", StockCode)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).FirstOrDefault();
                }
                catch
                {
                    return new St_ItemCardVM();
                }
            }
        }
        public IEnumerable<St_PurchaseOrderVM> GetSt_PurchaseOrderTransactionLocal(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo, int CompanyYear)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_PurchaseOrderVM>(
                    " Select POT.ItemCode, POT.SimilarItemCode, POT.Quantity, IC.ArabicName As ItemName, IC.ItemUnitNo,POT.RowNumber,POT.Price,POT.Total, " +
                    " ( " +
                      " Select IU.ArabicName " +
                      " From St_ItemUnit IU " +
                      " Where " +
                      " IU.CompanyID = IC.CompanyID " +
                      " And " +
                      " IU.ItemUnitCode = IC.ItemUnitNo " +
                    " ) As ItemUnitName " +
                    " From St_PurchaseOrderTransaction POT,St_ItemCard IC " +
                    " Where " +
                    " POT.CompanyID = IC.CompanyID " +
                    " And " +
                    " POT.ItemCode = IC.ItemCode " +
                    " And " +
                    " POT.CompanyID = @CompanyID " +
                    " And " +
                    " POT.CompanyYear = @CompanyYear " +
                    " And " +
                    " POT.CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " POT.TransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " POT.VoucherNumber = @VoucherNumber " +
                    " Order By POT.RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<St_PurchaseOrderVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_PurchaseOrderVM>(
                    " Select POT.ItemCode, POT.SimilarItemCode, POT.Quantity, IC.EnglishName As ItemName, IC.ItemUnitNo,POT.RowNumber,POT.Price,POT.Total, " +
                    " ( " +
                      " Select IU.EnglishName " +
                      " From St_ItemUnit IU " +
                      " Where " +
                      " IU.CompanyID = IC.CompanyID " +
                      " And " +
                      " IU.ItemUnitCode = IC.ItemUnitNo " +
                    " ) As ItemUnitName " +
                    " From St_PurchaseOrderTransaction POT,St_ItemCard IC " +
                    " Where " +
                    " POT.CompanyID = IC.CompanyID " +
                    " And " +
                    " POT.ItemCode = IC.ItemCode " +
                    " And " +
                    " POT.CompanyID = @CompanyID " +
                    " And " +
                    " POT.CompanyYear = @CompanyYear " +
                    " And " +
                    " POT.CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " POT.TransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " POT.VoucherNumber = @VoucherNumber " +
                    " Order By POT.RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<St_PurchaseOrderVM>();
                }
            }
        }
        public IEnumerable<St_PurchaseOrderVM> GetAllGetAllSt_PurchaseOrder(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_PurchaseOrderVM>(
                    " Select POH.VoucherNumber, POH.VoucherDate, POH.SupplierAccountNumber, POH.LinkWithVoucher,A.UserName,POH.TotalQuantity,POH.NetTotal, " +
                    " POH.TaxType, POH.VoucherCase, POH.CompanyTransactionKindNo, POH.TransactionKindNo, POH.CompanyYear, " +
                    " ( " +
                      " Select CC.ArabicName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " POH.CompanyID = CC.CompanyID " +
                      " And " +
                      " POH.SupplierAccountNumber = CC.AccountNumber " +
                    " ) As SupplierAccountName, " +
                    " ( " +
                      " Case When POH.TaxType = 1 " +
                      " Then N'خاضع' " +
                      " When POH.TaxType = 2 " +
                      " Then N'خاضع بنسبة صفر' " +
                      " Else N'معفي' " +
                      " End " +
                    " ) As TaxTypeName, " +
                    " ( " +
                      " Case When POH.LinkWithVoucher = 0 " +
                      " Then N'غير مرتبط' " +
                      " Else N'مرتبط' " +
                      " End " +
                    " ) As LinkWithVoucherName, " +
                    " ( " +
                      " Case When POH.VoucherCase = 1 " +
                      " Then N'نقدا' " +
                      " Else N'ذمم' " +
                      " End " +
                    " ) As VoucherCaseName " +
                    " From St_PurchaseOrderHeader POH,AspNetUsers A " +
                    " Where " +
                    " POH.CompanyID = @CompanyID " +
                    " And " +
                    " POH.CompanyID = A.fCompanyId " +
                    " And " +
                    " POH.InsUserID = A.Id " +
                    " And " +
                    " POH.TransactionKindNo = 513 " +
                    " And " +
                    " POH.VoucherDate >= @FromDate " +
                    " And " +
                    " POH.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_PurchaseOrderVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_PurchaseOrderVM>(
                    " Select POH.VoucherNumber, POH.VoucherDate, POH.SupplierAccountNumber, POH.LinkWithVoucher,A.UserName,POH.TotalQuantity,POH.NetTotal, " +
                    " POH.TaxType, POH.VoucherCase, POH.CompanyTransactionKindNo, POH.TransactionKindNo, POH.CompanyYear, " +
                    " ( " +
                      " Select CC.EnglishName " +
                      " From ChartOfAccounts CC " +
                      " Where " +
                      " POH.CompanyID = CC.CompanyID " +
                      " And " +
                      " POH.SupplierAccountNumber = CC.AccountNumber " +
                    " ) As SupplierAccountName, " +
                    " ( " +
                      " Case When POH.TaxType = 1 " +
                      " Then 'Taxable' " +
                      " When POH.TaxType = 2 " +
                      " Then 'Taxable By Zero' " +
                      " Else 'Tax Exempt' " +
                      " End " +
                    " ) As TaxTypeName, " +
                    " ( " +
                      " Case When POH.LinkWithVoucher = 0 " +
                      " Then 'Not Related' " +
                      " Else 'Relate' " +
                      " End " +
                    " ) As LinkWithVoucherName, " +
                    " ( " +
                      " Case When POH.VoucherCase = 1 " +
                      " Then 'Cash' " +
                      " Else 'Credit' " +
                      " End " +
                    " ) As VoucherCaseName " +
                    " From St_PurchaseOrderHeader POH,AspNetUsers A " +
                    " Where " +
                    " POH.CompanyID = @CompanyID " +
                    " And " +
                    " POH.CompanyID = A.fCompanyId " +
                    " And " +
                    " POH.InsUserID = A.Id " +
                    " And " +
                    " POH.TransactionKindNo = 513 " +
                    " And " +
                    " POH.VoucherDate >= @FromDate " +
                    " And " +
                    " POH.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_PurchaseOrderVM>();
                }
            }
        }
        public IEnumerable<St_OfferPriceVM> GetAllSt_OfferPrice(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_OfferPriceVM>(
                    "   Select SOH.VoucherNumber, SOH.VoucherDate, SOH.CustomerAccountNumber, SOH.LinkWithVoucher, A.UserName, SOH.TotalQuantity, SOH.NetTotal, " +
                  "  SOH.TaxType, SOH.VoucherCase, SOH.CompanyTransactionKindNo, SOH.TransactionKindNo, SOH.CompanyYear, " +
                  "  ( " +
                   "   Select CC.ArabicName " +
                     "  From ChartOfAccounts CC " +
                      "  Where " +
                    "   SOH.CompanyID = CC.CompanyID " +
                   "    And " +
                   "   SOH.CustomerAccountNumber = CC.AccountNumber " +
                    "  ) As CustomerAccountName, " +
                   "  ( " +
                  "     Case When SOH.TaxType = 1 " +
                     "  Then N'خاضع' " +
                    "   When SOH.TaxType = 2 " +
                     "  Then N'خاضع بنسبة صفر' " +
                      "  Else N'معفي' " +
                    "   End " +
                    "  ) As TaxTypeName, " +
                   "  (  " +
                  "    Case When SOH.LinkWithVoucher = 0 " +
                   "   Then N'غير مرتبط' " +
                   "    Else N'مرتبط' " +
                    "   End " +
                   "  ) As LinkWithVoucherName, " +
                 "   ( " +
                   "    Case When SOH.VoucherCase = 1 " +
                   "    Then N'نقدا' " +
                    "   Else N'ذمم' " +
                   "    End " +
                  "   ) As VoucherCaseName " +
                   "  From St_OfferPriceHeader SOH,AspNetUsers A " +
                  "  Where " +
                  "  SOH.CompanyID = @CompanyID " +
                  "  And " +
                  "   SOH.CompanyID = A.fCompanyId " +
                  "   And " +
                 "    SOH.InsUserID = A.Id " +
                  "   And " +
                  "   SOH.TransactionKindNo = 511 " +
                    " And " +
                    " SOH.VoucherDate >= @FromDate " +
                    " And " +
                    " SOH.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_OfferPriceVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_OfferPriceVM>(
                 "   Select SOH.VoucherNumber, SOH.VoucherDate, SOH.CustomerAccountNumber, SOH.LinkWithVoucher, A.UserName, SOH.TotalQuantity, SOH.NetTotal, " +
                  "  SOH.TaxType, SOH.VoucherCase, SOH.CompanyTransactionKindNo, SOH.TransactionKindNo, SOH.CompanyYear, " +
                  "  ( " +
                   "   Select CC.ArabicName " +
                     "  From ChartOfAccounts CC " +
                      "  Where " +
                    "   SOH.CompanyID = CC.CompanyID " +
                   "    And " +
                   "   SOH.CustomerAccountNumber = CC.AccountNumber " +
                    "  ) As CustomerAccountName, " +
                   "  ( " +
                  "     Case When SOH.TaxType = 1 " +
                     "  Then N'خاضع' " +
                    "   When SOH.TaxType = 2 " +
                     "  Then N'خاضع بنسبة صفر' " +
                      "  Else N'معفي' " +
                    "   End " +
                    "  ) As TaxTypeName, " +
                   "  (  " +
                  "    Case When SOH.LinkWithVoucher = 0 " +
                   "   Then N'غير مرتبط' " +
                   "    Else N'مرتبط' " +
                    "   End " +
                   "  ) As LinkWithVoucherName, " +
                 "   ( " +
                   "    Case When SOH.VoucherCase = 1 " +
                   "    Then N'نقدا' " +
                    "   Else N'ذمم' " +
                   "    End " +
                  "   ) As VoucherCaseName " +
                   "  From St_OfferPriceHeader SOH,AspNetUsers A " +
                  "  Where " +
                  "  SOH.CompanyID = @CompanyID " +
                  "  And " +
                  "   SOH.CompanyID = A.fCompanyId " +
                  "   And " +
                 "    SOH.InsUserID = A.Id " +
                  "   And " +
                  "   SOH.TransactionKindNo = 511 " +
                    " And " +
                    " SOH.VoucherDate >= @FromDate " +
                    " And " +
                    " SOH.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_OfferPriceVM>();
                }
            }
        }
        public IEnumerable<St_SaleOrderVM> GetAllSt_SaleOrder(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_SaleOrderVM>(
                    " Select SOH.VoucherNumber, SOH.VoucherDate, SOH.CustomerAccountNumber, SOH.LinkWithVoucher, A.UserName, SOH.TotalQuantity, SOH.NetTotal, " +
                  "  SOH.TaxType, SOH.VoucherCase, SOH.CompanyTransactionKindNo, SOH.TransactionKindNo, SOH.CompanyYear, " +
                  "  ( " +
                   "   Select CC.ArabicName " +
                     "  From ChartOfAccounts CC " +
                      "  Where " +
                    "   SOH.CompanyID = CC.CompanyID " +
                   "    And " +
                   "   SOH.CustomerAccountNumber = CC.AccountNumber " +
                    "  ) As CustomerAccountName, " +
                   "  ( " +
                  "     Case When SOH.TaxType = 1 " +
                     "  Then N'خاضع' " +
                    "   When SOH.TaxType = 2 " +
                     "  Then N'خاضع بنسبة صفر' " +
                      "  Else N'معفي' " +
                    "   End " +
                    "  ) As TaxTypeName, " +
                   "  (  " +
                  "    Case When SOH.LinkWithVoucher = 0 " +
                   "   Then N'غير مرتبط' " +
                   "    Else N'مرتبط' " +
                    "   End " +
                   "  ) As LinkWithVoucherName, " +
                 "   ( " +
                   "    Case When SOH.VoucherCase = 1 " +
                   "    Then N'نقدا' " +
                    "   Else N'ذمم' " +
                   "    End " +
                  "   ) As VoucherCaseName " +
                   "  From St_SalesOrderHeader SOH,AspNetUsers A " +
                  "  Where " +
                  "  SOH.CompanyID = @CompanyID " +
                  "  And " +
                  "   SOH.CompanyID = A.fCompanyId " +
                  "   And " +
                 "    SOH.InsUserID = A.Id " +
                  "   And " +
                  "   SOH.TransactionKindNo = 512 " +
                    " And " +
                    " SOH.VoucherDate >= @FromDate " +
                    " And " +
                    " SOH.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_SaleOrderVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_SaleOrderVM>(
                 "   Select SOH.VoucherNumber, SOH.VoucherDate, SOH.CustomerAccountNumber, SOH.LinkWithVoucher, A.UserName, SOH.TotalQuantity, SOH.NetTotal, " +
                  "  SOH.TaxType, SOH.VoucherCase, SOH.CompanyTransactionKindNo, SOH.TransactionKindNo, SOH.CompanyYear, " +
                  "  ( " +
                   "   Select CC.ArabicName " +
                     "  From ChartOfAccounts CC " +
                      "  Where " +
                    "   SOH.CompanyID = CC.CompanyID " +
                   "    And " +
                   "   SOH.CustomerAccountNumber = CC.AccountNumber " +
                    "  ) As CustomerAccountName, " +
                   "  ( " +
                  "     Case When SOH.TaxType = 1 " +
                     "  Then N'خاضع' " +
                    "   When SOH.TaxType = 2 " +
                     "  Then N'خاضع بنسبة صفر' " +
                      "  Else N'معفي' " +
                    "   End " +
                    "  ) As TaxTypeName, " +
                   "  (  " +
                  "    Case When SOH.LinkWithVoucher = 0 " +
                   "   Then N'غير مرتبط' " +
                   "    Else N'مرتبط' " +
                    "   End " +
                   "  ) As LinkWithVoucherName, " +
                 "   ( " +
                   "    Case When SOH.VoucherCase = 1 " +
                   "    Then N'نقدا' " +
                    "   Else N'ذمم' " +
                   "    End " +
                  "   ) As VoucherCaseName " +
                   "  From St_SalesOrderHeader SOH,AspNetUsers A " +
                  "  Where " +
                  "  SOH.CompanyID = @CompanyID " +
                  "  And " +
                  "   SOH.CompanyID = A.fCompanyId " +
                  "   And " +
                 "    SOH.InsUserID = A.Id " +
                  "   And " +
                  "   SOH.TransactionKindNo = 512 " +
                    " And " +
                    " SOH.VoucherDate >= @FromDate " +
                    " And " +
                    " SOH.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_SaleOrderVM>();
                }
            }
        }
        public void DeleteSt_PurchaseOrderTransactionLocal(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo, int CompanyYear)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_PurchaseOrderTransaction " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " VoucherNumber = @VoucherNumber " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                " And " +
                " TransactionKindNo = @TransactionKindNo " +
                " And " +
                " CompanyYear = @CompanyYear "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@VoucherNumber", VoucherNumber)
                , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                , new SqlParameter("@CompanyYear", CompanyYear)
            );
        }
        public IEnumerable<St_HeaderVM> GetSt_Transacation(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo, int CompanyYear,string StockCode)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                    " Select T.ItemCode, T.SimilarItemCode, T.Quantity, T.Bonus, T.TaxRate, " +
                    " T.TotalLocalBeforDiscount, T.TotalForeignBeforDiscount, T.TotalLineDiscountLocal, " +
                    " T.TotalLineDiscountForeign, T.TotalLocalAfterLineDiscount, T.TotalForeignAfterLineDiscount, " +
                    " T.LineDiscountPercentage, T.TotalTaxAfterLineDiscountLocal, T.TotalTaxAfterLineDiscounForeign, " +
                    " T.TotalAfterLineDiscountBeforDiscountAllLocal,T.TotalAfterLineDiscountBeforDiscountAllForeign, " +
                    " T.TotalDiscountLocal, T.TotalDiscountForeign, T.TotalLocalAfterDiscount, T.TotalForeignAfterDiscount, " +
                    " T.TotalTaxLocal, T.TotalTaxForeign, T.TotalLocal, T.TotalForeign, T.TotalCostLocal, T.TotalCostForeign, " +
                    " T.PricePieceLocalBeforDiscount, T.PricePieceForeignBeforDiscount, T.PricePieceLineDiscountLocal, " +
                    " T.PricePieceLineDiscountForeign, T.PricePieceLocalAfterLineDiscount, T.PricePieceForeignAfterLineDiscount, " +
                    " T.PricePieceTaxAfterLineDiscountLocal, T.PricePieceTaxAfterLineDiscounForeign,T.PricePieceAfterLineDiscountBeforDiscountAllLocal, " +
                    " T.PricePieceAfterLineDiscountBeforDiscountAllForeign,T.PricePieceDiscountLocal, " +
                    " T.PricePieceDiscountForeign, T.PricePieceLocalAfterDiscount, T.PricePieceForeignAfterDiscount, T.PricePieceTaxLocal, " +
                    " T.PricePieceTaxForeign, T.PricePieceTotalLocal, T.PricePieceTotalForeign, T.CostPieceLocal, T.CostPieceForeign, " +
                    " IC.ArabicName As ItemName, T.TaxRate, IC.ItemUnitNo,T.RowNumber, " +
                    " ( " +
                      " Select IU.ArabicName " +
                      " From St_ItemUnit IU " +
                      " Where " +
                      " IC.CompanyID = IU.CompanyID " +
                      " And " +
                      " IC.ItemUnitNo = IU.ItemUnitCode " +
                    " ) As ItemUnitName " +
                    " From St_Transaction T,ST_ItemCard IC " +
                    " Where " +
                    " T.CompanyID = IC.CompanyID " +
                    " And " +
                    " T.ItemCode = IC.ItemCode " +
                    " And " +
                    " T.CompanyID = @CompanyID " +
                    " And " +
                    " T.CompanyTransactionKindNo = @CompanyTransactionKindNo" +
                    " And " +
                    " T.TransactionKindNo =@TransactionKindNo " +
                    " And " +
                    " T.VoucherNumber = @VoucherNumber" +
                    " And " +
                    " T.StockCode = @StockCode" +
                    " Order By T.RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    , new SqlParameter("@StockCode", StockCode)
                    ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                    " Select T.ItemCode, T.SimilarItemCode, T.Quantity, T.Bonus, T.TaxRate, " +
                    " T.TotalLocalBeforDiscount, T.TotalForeignBeforDiscount, T.TotalLineDiscountLocal, " +
                    " T.TotalLineDiscountForeign, T.TotalLocalAfterLineDiscount, T.TotalForeignAfterLineDiscount, " +
                    " T.LineDiscountPercentage, T.TotalTaxAfterLineDiscountLocal, T.TotalTaxAfterLineDiscounForeign, " +
                    " T.TotalAfterLineDiscountBeforDiscountAllLocal,T.TotalAfterLineDiscountBeforDiscountAllForeign, " +
                    " T.TotalDiscountLocal, T.TotalDiscountForeign, T.TotalLocalAfterDiscount, T.TotalForeignAfterDiscount, " +
                    " T.TotalTaxLocal, T.TotalTaxForeign, T.TotalLocal, T.TotalForeign, T.TotalCostLocal, T.TotalCostForeign, " +
                    " T.PricePieceLocalBeforDiscount, T.PricePieceForeignBeforDiscount, T.PricePieceLineDiscountLocal, " +
                    " T.PricePieceLineDiscountForeign, T.PricePieceLocalAfterLineDiscount, T.PricePieceForeignAfterLineDiscount, " +
                    " T.PricePieceTaxAfterLineDiscountLocal, T.PricePieceTaxAfterLineDiscounForeign,T.PricePieceAfterLineDiscountBeforDiscountAllLocal, " +
                    " T.PricePieceAfterLineDiscountBeforDiscountAllForeign,T.PricePieceDiscountLocal, " +
                    " T.PricePieceDiscountForeign, T.PricePieceLocalAfterDiscount, T.PricePieceForeignAfterDiscount, T.PricePieceTaxLocal, " +
                    " T.PricePieceTaxForeign, T.PricePieceTotalLocal, T.PricePieceTotalForeign, T.CostPieceLocal, T.CostPieceForeign, " +
                    " IC.EnglishName As ItemName, T.TaxRate, IC.ItemUnitNo,T.RowNumber, " +
                    " ( " +
                      " Select IU.EnglishName " +
                      " From St_ItemUnit IU " +
                      " Where " +
                      " IC.CompanyID = IU.CompanyID " +
                      " And " +
                      " IC.ItemUnitNo = IU.ItemUnitCode " +
                    " ) As ItemUnitName " +
                    " From St_Transaction T,ST_ItemCard IC " +
                    " Where " +
                    " T.CompanyID = IC.CompanyID " +
                    " And " +
                    " T.ItemCode = IC.ItemCode " +
                    " And " +
                    " T.CompanyID = @CompanyID " +
                    " And " +
                    " T.CompanyTransactionKindNo = @CompanyTransactionKindNo" +
                    " And " +
                    " T.TransactionKindNo =@TransactionKindNo " +
                    " And " +
                    " T.VoucherNumber = @VoucherNumber" +
                    " And " +
                    " T.StockCode = @StockCode" +
                    " Order By T.RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    , new SqlParameter("@StockCode", StockCode)
                    ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
        }
        public int CheckSt_CompanyTransactionKind(int CompanyID, int CompanyTransactionKindID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select Distinct CompanyTransactionKindNo From( " +
                " Select CompanyTransactionKindNo From St_Header " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindID " +
                " Union All " +
                " Select CompanyTransactionKindNo From St_Transaction " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindID " +
               " ) As CompanyTransactionKindNo "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@CompanyTransactionKindID", CompanyTransactionKindID)
                ).First();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }

        }
        public IEnumerable<St_HeaderVM> GetAllSt_PurchaseVoucher(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                     " Select H.VoucherNumber, H.VoucherDate, H.AccountNumber, H.StockCode, A.UserName, H.NetTotalLocal, " +
                     " H.NetTotalLocalAfterLineDiscount,H.NetTotalDiscountLocal,H.NetTotalLocalAfterDiscount,H.NetTotalTaxLocal, " +
                     " H.TaxType, H.VoucherCase, H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear,H.Exported,H.OriginalVoucherNumber, " +
                     " ( " +
                       " Select CC.ArabicName " +
                       " From ChartOfAccounts CC " +
                       " Where " +
                       " H.CompanyID = CC.CompanyID " +
                       " And " +
                       " H.AccountNumber = CC.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select W.ArabicName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " H.CompanyID = W.CompanyID " +
                       " And " +
                       " H.StockCode = W.StockCode " +
                     " ) As StockName, " +
                     " ( " +
                       " Case When H.TaxType = 1 " +
                       " Then N'خاضع' " +
                       " When H.TaxType = 2 " +
                       " Then N'خاضع بنسبة صفر' " +
                       " Else N'معفي' " +
                       " End " +
                     " ) As TaxTypeName, " +
                     " ( " +
                       " Case When H.VoucherCase = 1 " +
                       " Then N'نقدا' " +
                       " Else N'ذمم' " +
                       " End " +
                     " ) As VoucherCaseName, " +
                     " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN N'غير مرحل' " +
                      " ELSE N'مرحل' " +
                      " END " +
                    ") As Export, " +
                    " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                     " From St_Header H,AspNetUsers A " +
                     " Where " +
                     " H.CompanyID = @CompanyID " +
                     " And " +
                     " H.CompanyID = A.fCompanyId " +
                     " And " +
                     " H.InsUserID = A.Id " +
                     " And " +
                     " H.TransactionKindNo = 501 " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                     " Select H.VoucherNumber, H.VoucherDate, H.AccountNumber, H.StockCode, A.UserName, H.NetTotalLocal, " +
                     " H.NetTotalLocalAfterLineDiscount,H.NetTotalDiscountLocal,H.NetTotalLocalAfterDiscount,H.NetTotalTaxLocal, " +
                     " H.TaxType, H.VoucherCase, H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear,H.Exported,H.OriginalVoucherNumber, " +
                     " ( " +
                       " Select CC.EnglishName " +
                       " From ChartOfAccounts CC " +
                       " Where " +
                       " H.CompanyID = CC.CompanyID " +
                       " And " +
                       " H.AccountNumber = CC.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select W.EnglishName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " H.CompanyID = W.CompanyID " +
                       " And " +
                       " H.StockCode = W.StockCode " +
                     " ) As StockName, " +
                     " ( " +
                      " Case When POH.TaxType = 1 " +
                      " Then 'Taxable' " +
                      " When POH.TaxType = 2 " +
                      " Then 'Taxable By Zero' " +
                      " Else 'Tax Exempt' " +
                      " End " +
                    " ) As TaxTypeName, " +
                    " ( " +
                      " Case When POH.VoucherCase = 1 " +
                      " Then 'Cash' " +
                      " Else 'Credit' " +
                      " End " +
                    " ) As VoucherCaseName, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN 'UnExport' " +
                      " ELSE 'Export' " +
                      " END " +
                    ") As Export, " +
                    " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                     " From St_Header H,AspNetUsers A " +
                     " Where " +
                     " H.CompanyID = @CompanyID " +
                     " And " +
                     " H.CompanyID = A.fCompanyId " +
                     " And " +
                     " H.InsUserID = A.Id " +
                     " And " +
                     " H.TransactionKindNo = 501 " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
        }
        public IEnumerable<St_HeaderVM> GetAllSt_SaleVoucher(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                     " Select H.VoucherNumber, H.VoucherDate, H.AccountNumber, H.StockCode, A.UserName, H.NetTotalLocal, " +
                     " H.NetTotalLocalAfterLineDiscount,H.NetTotalDiscountLocal,H.NetTotalLocalAfterDiscount,H.NetTotalTaxLocal,H.SaleID, " +
                     " H.TaxType, H.VoucherCase, H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear,H.Exported,H.OriginalVoucherNumber, " +
                     " ( " +
                      " Select S.SalesName From Sales S " +
                      " Where " +
                      " H.CompanyID = S.CompanyID " +
                      " And " +
                      " H.SaleID = S.SalesID " +
                    " ) As SaleName, " +
                     " ( " +
                       " Select CC.ArabicName " +
                       " From ChartOfAccounts CC " +
                       " Where " +
                       " H.CompanyID = CC.CompanyID " +
                       " And " +
                       " H.AccountNumber = CC.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select W.ArabicName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " H.CompanyID = W.CompanyID " +
                       " And " +
                       " H.StockCode = W.StockCode " +
                     " ) As StockName, " +
                     " ( " +
                       " Case When H.TaxType = 1 " +
                       " Then N'خاضع' " +
                       " When H.TaxType = 2 " +
                       " Then N'خاضع بنسبة صفر' " +
                       " Else N'معفي' " +
                       " End " +
                     " ) As TaxTypeName, " +
                     " ( " +
                       " Case When H.VoucherCase = 1 " +
                       " Then N'نقدا' " +
                       " Else N'ذمم' " +
                       " End " +
                     " ) As VoucherCaseName, " +
                     " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN N'غير مرحل' " +
                      " ELSE N'مرحل' " +
                      " END " +
                    ") As Export, " +
                    " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                     " From St_Header H,AspNetUsers A " +
                     " Where " +
                     " H.CompanyID = @CompanyID " +
                     " And " +
                     " H.CompanyID = A.fCompanyId " +
                     " And " +
                     " H.InsUserID = A.Id " +
                     " And " +
                     " H.TransactionKindNo = 500 " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                     " Select H.VoucherNumber, H.VoucherDate, H.AccountNumber, H.StockCode, A.UserName, H.NetTotalLocal, " +
                     " H.NetTotalLocalAfterLineDiscount,H.NetTotalDiscountLocal,H.NetTotalLocalAfterDiscount,H.NetTotalTaxLocal,H.SaleID, " +
                     " H.TaxType, H.VoucherCase, H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear,H.Exported,H.OriginalVoucherNumber, " +
                     " ( " +
                      " Select S.SalesName From Sales S " +
                      " Where " +
                      " H.CompanyID = S.CompanyID " +
                      " And " +
                      " H.SaleID = S.SalesID " +
                    " ) As SaleName, " +
                     " ( " +
                       " Select CC.EnglishName " +
                       " From ChartOfAccounts CC " +
                       " Where " +
                       " H.CompanyID = CC.CompanyID " +
                       " And " +
                       " H.AccountNumber = CC.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select W.EnglishName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " H.CompanyID = W.CompanyID " +
                       " And " +
                       " H.StockCode = W.StockCode " +
                     " ) As StockName, " +
                     " ( " +
                      " Case When POH.TaxType = 1 " +
                      " Then 'Taxable' " +
                      " When POH.TaxType = 2 " +
                      " Then 'Taxable By Zero' " +
                      " Else 'Tax Exempt' " +
                      " End " +
                    " ) As TaxTypeName, " +
                    " ( " +
                      " Case When POH.VoucherCase = 1 " +
                      " Then 'Cash' " +
                      " Else 'Credit' " +
                      " End " +
                    " ) As VoucherCaseName, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN 'UnExport' " +
                      " ELSE 'Export' " +
                      " END " +
                    ") As Export, " +
                    " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                     " From St_Header H,AspNetUsers A " +
                     " Where " +
                     " H.CompanyID = @CompanyID " +
                     " And " +
                     " H.CompanyID = A.fCompanyId " +
                     " And " +
                     " H.InsUserID = A.Id " +
                     " And " +
                     " H.TransactionKindNo = 500 " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
        }
        public IEnumerable<St_HeaderVM> GetAllSt_ReturnPurchaseVoucher(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                     " Select H.VoucherNumber, H.VoucherDate, H.AccountNumber, H.StockCode, A.UserName, H.NetTotalLocal, " +
                     " H.NetTotalLocalAfterLineDiscount,H.NetTotalDiscountLocal,H.NetTotalLocalAfterDiscount,H.NetTotalTaxLocal, " +
                     " H.TaxType, H.VoucherCase, H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear,H.Exported,H.OriginalVoucherNumber, " +
                     " ( " +
                       " Select CC.ArabicName " +
                       " From ChartOfAccounts CC " +
                       " Where " +
                       " H.CompanyID = CC.CompanyID " +
                       " And " +
                       " H.AccountNumber = CC.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select W.ArabicName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " H.CompanyID = W.CompanyID " +
                       " And " +
                       " H.StockCode = W.StockCode " +
                     " ) As StockName, " +
                     " ( " +
                       " Case When H.TaxType = 1 " +
                       " Then N'خاضع' " +
                       " When H.TaxType = 2 " +
                       " Then N'خاضع بنسبة صفر' " +
                       " Else N'معفي' " +
                       " End " +
                     " ) As TaxTypeName, " +
                     " ( " +
                       " Case When H.VoucherCase = 1 " +
                       " Then N'نقدا' " +
                       " Else N'ذمم' " +
                       " End " +
                     " ) As VoucherCaseName, " +
                     " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN N'غير مرحل' " +
                      " ELSE N'مرحل' " +
                      " END " +
                    ") As Export, " +
                    " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                     " From St_Header H,AspNetUsers A " +
                     " Where " +
                     " H.CompanyID = @CompanyID " +
                     " And " +
                     " H.CompanyID = A.fCompanyId " +
                     " And " +
                     " H.InsUserID = A.Id " +
                     " And " +
                     " H.TransactionKindNo = 503 " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                     " Select H.VoucherNumber, H.VoucherDate, H.AccountNumber, H.StockCode, A.UserName, H.NetTotalLocal, " +
                     " H.NetTotalLocalAfterLineDiscount,H.NetTotalDiscountLocal,H.NetTotalLocalAfterDiscount,H.NetTotalTaxLocal, " +
                     " H.TaxType, H.VoucherCase, H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear,H.Exported,H.OriginalVoucherNumber, " +
                     " ( " +
                       " Select CC.EnglishName " +
                       " From ChartOfAccounts CC " +
                       " Where " +
                       " H.CompanyID = CC.CompanyID " +
                       " And " +
                       " H.AccountNumber = CC.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select W.EnglishName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " H.CompanyID = W.CompanyID " +
                       " And " +
                       " H.StockCode = W.StockCode " +
                     " ) As StockName, " +
                     " ( " +
                      " Case When POH.TaxType = 1 " +
                      " Then 'Taxable' " +
                      " When POH.TaxType = 2 " +
                      " Then 'Taxable By Zero' " +
                      " Else 'Tax Exempt' " +
                      " End " +
                    " ) As TaxTypeName, " +
                    " ( " +
                      " Case When POH.VoucherCase = 1 " +
                      " Then 'Cash' " +
                      " Else 'Credit' " +
                      " End " +
                    " ) As VoucherCaseName, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN 'UnExport' " +
                      " ELSE 'Export' " +
                      " END " +
                    ") As Export, " +
                    " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                     " From St_Header H,AspNetUsers A " +
                     " Where " +
                     " H.CompanyID = @CompanyID " +
                     " And " +
                     " H.CompanyID = A.fCompanyId " +
                     " And " +
                     " H.InsUserID = A.Id " +
                     " And " +
                     " H.TransactionKindNo = 503 " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
        }
        public St_ItemOtherUnitVM GetSt_ItemOtherUnit(string ItemCode, int CompanyID,int OtherUnitNumber)
        {
            try
            {
                return _context.Database.SqlQuery<St_ItemOtherUnitVM>(
                " Select OtherUnitNumber, OtherUnitSalePrice, OtherUnitPurchasePrice, OtherUnitBarcode,OtherUnitQuantity " +
                " From St_ItemOtherUnit " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ItemCode = @ItemCode " +
                " And " +
                " OtherUnitNumber = @OtherUnitNumber " + 
                " Union All " +
                " Select ItemUnitNo As OtherUnitNumber, SalePrice As OtherUnitSalePrice, 1 As OtherUnitPurchasePrice, ItemCode As  OtherUnitBarcode, 1 As OtherUnitQuantity " +
                " From St_ItemCard " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ItemCode = @ItemCode " +
                " And " +
                " ItemUnitNo = @OtherUnitNumber "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@ItemCode", ItemCode)
                , new SqlParameter("@OtherUnitNumber", OtherUnitNumber)
            ).FirstOrDefault();
            }
            catch
            {
                return new St_ItemOtherUnitVM();
            }
        }
        public IEnumerable<St_ItemOtherUnitVM> GetAllSt_ItemOtherUnitByItem(string ItemCode, int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_ItemOtherUnitVM>(
                    " Select IC.ItemUnitNo As OtherItemUnitNumber, IU.ArabicName As OtherItemUnitName " +
                    " From St_ItemCard IC, St_ItemUnit IU " +
                    " Where " +
                    " IC.CompanyID = @CompanyID " +
                    " And " +
                    " IC.ItemCode = @ItemCode " +
                    " And " +
                    " IC.CompanyID = IU.CompanyID " +
                    " And " +
                    " IC.ItemUnitNo = IU.ItemUnitCode " +
                    " Union All " +
                    " Select IOU.OtherUnitNumber As OtherItemUnitNumber, IU.ArabicName As OtherItemUnitName " +
                    " From St_ItemOtherUnit IOU, St_ItemUnit IU " +
                    " Where " +
                    " IOU.CompanyID = @CompanyID " +
                    " And " +
                    " IOU.ItemCode = @ItemCode " +
                    " And " +
                    " IOU.CompanyID = IU.CompanyID " +
                    " And " +
                    " IOU.OtherUnitNumber = IU.ItemUnitCode " 
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch
                {
                    return new List<St_ItemOtherUnitVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_ItemOtherUnitVM>(
                    " Select IC.ItemUnitNo As OtherItemUnitNumber, IU.EnglishName As OtherItemUnitName " +
                    " From St_ItemCard IC, St_ItemUnit IU " +
                    " Where " +
                    " IC.CompanyID = @CompanyID " +
                    " And " +
                    " IC.ItemCode = @ItemCode " +
                    " And " +
                    " IC.CompanyID = IU.CompanyID " +
                    " And " +
                    " IC.ItemUnitNo = IU.ItemUnitCode " +
                    " Union All " +
                    " Select IOU.OtherUnitNumber As OtherItemUnitNumber, IU.EnglishName As OtherItemUnitName " +
                    " From St_ItemOtherUnit IOU, St_ItemUnit IU " +
                    " Where " +
                    " IOU.CompanyID = @CompanyID " +
                    " And " +
                    " IOU.ItemCode = @ItemCode " +
                    " And " +
                    " IOU.CompanyID = IU.CompanyID " +
                    " And " +
                    " IOU.OtherUnitNumber = IU.ItemUnitCode "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)

                ).ToList();
                }
                catch
                {
                    return new List<St_ItemOtherUnitVM>();
                }
            }
        }
        public IEnumerable<St_ItemOtherUnitVM> GetAllSt_ItemOtherUnit(string ItemCode, int CompanyID)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_ItemOtherUnitVM>(
                    " Select IOU.OtherUnitNumber As OtherItemUnitNumber, IU.ArabicName As OtherItemUnitName " +
                    " From St_ItemOtherUnit IOU, St_ItemUnit IU " +
                    " Where " +
                    " IOU.CompanyID = @CompanyID " +
                    " And " +
                    " IOU.ItemCode = @ItemCode " +
                    " And " +
                    " IOU.CompanyID = IU.CompanyID " +
                    " And " +
                    " IOU.OtherUnitNumber = IU.ItemUnitCode "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                ).ToList();
                }
                catch
                {
                    return new List<St_ItemOtherUnitVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_ItemOtherUnitVM>(
                    " Select IOU.OtherUnitNumber As OtherItemUnitNumber, IU.EnglishName As OtherItemUnitName " +
                    " From St_ItemOtherUnit IOU, St_ItemUnit IU " +
                    " Where " +
                    " IOU.CompanyID = @CompanyID " +
                    " And " +
                    " IOU.ItemCode = @ItemCode " +
                    " And " +
                    " IOU.CompanyID = IU.CompanyID " +
                    " And " +
                    " IOU.OtherUnitNumber = IU.ItemUnitCode "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)

                ).ToList();
                }
                catch
                {
                    return new List<St_ItemOtherUnitVM>();
                }
            }
        }
        public IEnumerable<St_OfferPriceVM> GetSt_OfferPriceTransaction(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo, int CompanyYear)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_OfferPriceVM>(
                    " Select OPT.ItemCode, OPT.SimilarItemCode, OPT.Quantity, IC.ArabicName As ItemName, IC.ItemUnitNo,OPT.RowNumber,OPT.Price,OPT.Total, " +
                    " ( " +
                      " Select IU.ArabicName " +
                      " From St_ItemUnit IU " +
                      " Where " +
                      " IU.CompanyID = IC.CompanyID " +
                      " And " +
                      " IU.ItemUnitCode = IC.ItemUnitNo " +
                    " ) As ItemUnitName " +
                    " From St_OfferPriceTransaction OPT,St_ItemCard IC " +
                    " Where " +
                    " OPT.CompanyID = IC.CompanyID " +
                    " And " +
                    " OPT.ItemCode = IC.ItemCode " +
                    " And " +
                    " OPT.CompanyID = @CompanyID " +
                    " And " +
                    " OPT.CompanyYear = @CompanyYear " +
                    " And " +
                    " OPT.CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " OPT.TransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " OPT.VoucherNumber = @VoucherNumber " +
                    " Order By OPT.RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<St_OfferPriceVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_OfferPriceVM>(
                    " Select OPT.ItemCode, OPT.SimilarItemCode, OPT.Quantity, IC.EnglishName As ItemName, IC.ItemUnitNo,OPT.RowNumber,OPT.Price,OPT.Total, " +
                    " ( " +
                      " Select IU.EnglishName " +
                      " From St_ItemUnit IU " +
                      " Where " +
                      " IU.CompanyID = IC.CompanyID " +
                      " And " +
                      " IU.ItemUnitCode = IC.ItemUnitNo " +
                    " ) As ItemUnitName " +
                    " From St_OfferPriceTransaction OPT,St_ItemCard IC " +
                    " Where " +
                    " OPT.CompanyID = IC.CompanyID " +
                    " And " +
                    " OPT.ItemCode = IC.ItemCode " +
                    " And " +
                    " OPT.CompanyID = @CompanyID " +
                    " And " +
                    " OPT.CompanyYear = @CompanyYear " +
                    " And " +
                    " OPT.CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " OPT.TransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " OPT.VoucherNumber = @VoucherNumber " +
                    " Order By OPT.RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<St_OfferPriceVM>();
                }
            }
        }
        public IEnumerable<St_SaleOrderVM> GetSt_SaleOrderTransaction(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo, int CompanyYear)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_SaleOrderVM>(
                    " Select SOT.ItemCode, SOT.SimilarItemCode, SOT.Quantity, IC.ArabicName As ItemName, IC.ItemUnitNo,SOT.RowNumber,SOT.Price,SOT.Total, " +
                    " ( " +
                      " Select IU.ArabicName " +
                      " From St_ItemUnit IU " +
                      " Where " +
                      " IU.CompanyID = IC.CompanyID " +
                      " And " +
                      " IU.ItemUnitCode = IC.ItemUnitNo " +
                    " ) As ItemUnitName " +
                    " From St_SalesOrderTransaction SOT,St_ItemCard IC " +
                    " Where " +
                    " SOT.CompanyID = IC.CompanyID " +
                    " And " +
                    " SOT.ItemCode = IC.ItemCode " +
                    " And " +
                    " SOT.CompanyID = @CompanyID " +
                    " And " +
                    " SOT.CompanyYear = @CompanyYear " +
                    " And " +
                    " SOT.CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " SOT.TransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " SOT.VoucherNumber = @VoucherNumber " +
                    " Order By SOT.RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<St_SaleOrderVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_SaleOrderVM>(
                       " Select SOT.ItemCode, SOT.SimilarItemCode, SOT.Quantity, IC.EnglishName As ItemName, IC.ItemUnitNo,SOT.RowNumber,SOT.Price,SOT.Total, " +
                    " ( " +
                      " Select IU.EnglishName " +
                      " From St_ItemUnit IU " +
                      " Where " +
                      " IU.CompanyID = IC.CompanyID " +
                      " And " +
                      " IU.ItemUnitCode = IC.ItemUnitNo " +
                    " ) As ItemUnitName " +
                    " From St_SaleOrderTransaction SOT,St_ItemCard IC " +
                    " Where " +
                    " SOT.CompanyID = IC.CompanyID " +
                    " And " +
                    " SOT.ItemCode = IC.ItemCode " +
                    " And " +
                    " SOT.CompanyID = @CompanyID " +
                    " And " +
                    " SOT.CompanyYear = @CompanyYear " +
                    " And " +
                    " SOT.CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                    " And " +
                    " SOT.TransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " SOT.VoucherNumber = @VoucherNumber " +
                    " Order By SOT.RowNumber "
                    , new SqlParameter("@VoucherNumber", VoucherNumber)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                    , new SqlParameter("@CompanyYear", CompanyYear)
                    ).ToList();
                }
                catch
                {
                    return new List<St_SaleOrderVM>();
                }
            }
        }

        public void DeleteSt_OfferPriceTransaction(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo, int CompanyYear)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_OfferPriceTransaction " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " VoucherNumber = @VoucherNumber " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                " And " +
                " TransactionKindNo = @TransactionKindNo " +
                " And " +
                " CompanyYear = @CompanyYear "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@VoucherNumber", VoucherNumber)
                , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                , new SqlParameter("@CompanyYear", CompanyYear)
            );
        }
        public void DeleteSt_SaleOrderTransaction(string VoucherNumber, int CompanyTransactionKindNo, int CompanyID, int TransactionKindNo, int CompanyYear)
        {
            _context.Database.ExecuteSqlCommand(
                " Delete  From St_SalesOrderTransaction " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " VoucherNumber = @VoucherNumber " +
                " And " +
                " CompanyTransactionKindNo = @CompanyTransactionKindNo " +
                " And " +
                " TransactionKindNo = @TransactionKindNo " +
                " And " +
                " CompanyYear = @CompanyYear "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@VoucherNumber", VoucherNumber)
                , new SqlParameter("@CompanyTransactionKindNo", CompanyTransactionKindNo)
                , new SqlParameter("@TransactionKindNo", TransactionKindNo)
                , new SqlParameter("@CompanyYear", CompanyYear)
            );
        }

        public IEnumerable<St_HeaderVM> GetAllSt_InVoucher(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                    "  Select H.VoucherNumber, H.VoucherDate, H.StockCode, A.UserName, H.NetTotalLocal, " +
                  "   H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear, H.Exported, " +
                 "   ( " +
                   "  Select W.ArabicName " +
                     " From St_Warehouse W " + 
                   "   Where " + 
                   "   H.CompanyID = W.CompanyID " + 
                     " And " +
                   "   H.StockCode = W.StockCode " + 
                  "  ) As StockName, " + 
                  "  (  " + 
                    " CASE " + 
                  "   WHEN H.Exported = 0 THEN N'غير مرحل' " +
                  "   ELSE N'مرحل' " + 
                  "   END " + 
                 " ) As Export, " + 
                 "  (  " + 
                     "  Select Count(*) As CheckCase " + 
                     "  From FreezeTransactions FT " +
                    "   Where " + 
                     "  FT.CompanyID = H.CompanyID " + 
                    "   And " + 
                   "    cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                    "   And " + 
                     "  cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " + 
                   "  ) As CheckCase " + 
                   " From St_Header H,AspNetUsers A " + 
                  "  Where " +
                 "   H.CompanyID =  @CompanyID  " +
                 "   And " +
                  "  H.CompanyID = A.fCompanyId " +
                  "  And " +
                  "  H.InsUserID = A.Id " +
                  "  And " +
                  "  H.TransactionKindNo = 504 " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                     "  Select H.VoucherNumber, H.VoucherDate, H.StockCode, A.UserName, H.NetTotalLocal, " +
                  "   H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear, H.Exported, " +
                 "   ( " +
                   "  Select W.ArabicName " +
                     " From St_Warehouse W " +
                   "   Where " +
                   "   H.CompanyID = W.CompanyID " +
                     " And " +
                   "   H.StockCode = W.StockCode " +
                  "  ) As StockName, " +
                  "  (  " +
                    " CASE " +
                  "   WHEN H.Exported = 0 THEN 'UnExport' " +
                  "   ELSE 'Export' " +
                  "   END " +
                 " ) As Export, " +
                 "  (  " +
                     "  Select Count(*) As CheckCase " +
                     "  From FreezeTransactions FT " +
                    "   Where " +
                     "  FT.CompanyID = H.CompanyID " +
                    "   And " +
                   "    cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                    "   And " +
                     "  cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                   "  ) As CheckCase " +
                   " From St_Header H,AspNetUsers A " +
                  "  Where " +
                 "   H.CompanyID = @CompanyID " +
                 "   And " +
                  "  H.CompanyID = A.fCompanyId " +
                  "  And " +
                  "  H.InsUserID = A.Id " +
                  "  And " +
                  "  H.TransactionKindNo = 504 " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
        }
        public IEnumerable<St_HeaderVM> GetAllSt_OutVoucher(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                    "  Select H.VoucherNumber, H.VoucherDate, H.StockCode, A.UserName, H.NetTotalLocal, " +
                  "   H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear, H.Exported, " +
                 "   ( " +
                   "  Select W.ArabicName " +
                     " From St_Warehouse W " + 
                   "   Where " + 
                   "   H.CompanyID = W.CompanyID " + 
                     " And " +
                   "   H.StockCode = W.StockCode " + 
                  "  ) As StockName, " + 
                  "  (  " + 
                    " CASE " + 
                  "   WHEN H.Exported = 0 THEN N'غير مرحل' " +
                  "   ELSE N'مرحل' " + 
                  "   END " + 
                 " ) As Export, " + 
                 "  (  " + 
                     "  Select Count(*) As CheckCase " + 
                     "  From FreezeTransactions FT " +
                    "   Where " + 
                     "  FT.CompanyID = H.CompanyID " + 
                    "   And " + 
                   "    cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                    "   And " + 
                     "  cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " + 
                   "  ) As CheckCase " + 
                   " From St_Header H,AspNetUsers A " + 
                  "  Where " +
                 "   H.CompanyID = @CompanyID " +
                 "   And " +
                  "  H.CompanyID = A.fCompanyId " +
                  "  And " +
                  "  H.InsUserID = A.Id " +
                  "  And " +
                  "  H.TransactionKindNo = 505 " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                     "  Select H.VoucherNumber, H.VoucherDate, H.StockCode, A.UserName, H.NetTotalLocal, " +
                  "   H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear, H.Exported, " +
                 "   ( " +
                   "  Select W.ArabicName " +
                     " From St_Warehouse W " +
                   "   Where " +
                   "   H.CompanyID = W.CompanyID " +
                     " And " +
                   "   H.StockCode = W.StockCode " +
                  "  ) As StockName, " +
                  "  (  " +
                    " CASE " +
                  "   WHEN H.Exported = 0 THEN 'UnExport' " +
                  "   ELSE 'Export' " +
                  "   END " +
                 " ) As Export, " +
                 "  (  " +
                     "  Select Count(*) As CheckCase " +
                     "  From FreezeTransactions FT " +
                    "   Where " +
                     "  FT.CompanyID = H.CompanyID " +
                    "   And " +
                   "    cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                    "   And " +
                     "  cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                   "  ) As CheckCase " +
                   " From St_Header H,AspNetUsers A " +
                  "  Where " +
                 "   H.CompanyID = @CompanyID " +
                 "   And " +
                  "  H.CompanyID = A.fCompanyId " +
                  "  And " +
                  "  H.InsUserID = A.Id " +
                  "  And " +
                  "  H.TransactionKindNo = 505 " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
        }
        public IEnumerable<St_HeaderVM> GetAllSt_ReturnSaleVoucher(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                     " Select H.VoucherNumber, H.VoucherDate, H.AccountNumber, H.StockCode, A.UserName, H.NetTotalLocal, " +
                     " H.NetTotalLocalAfterLineDiscount,H.NetTotalDiscountLocal,H.NetTotalLocalAfterDiscount,H.NetTotalTaxLocal,H.SaleID, " +
                     " H.TaxType, H.VoucherCase, H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear,H.Exported,H.OriginalVoucherNumber, " +
                     " ( " +
                      " Select S.SalesName From Sales S " +
                      " Where " +
                      " H.CompanyID = S.CompanyID " +
                      " And " +
                      " H.SaleID = S.SalesID " +
                    " ) As SaleName, " +
                     " ( " +
                       " Select CC.ArabicName " +
                       " From ChartOfAccounts CC " +
                       " Where " +
                       " H.CompanyID = CC.CompanyID " +
                       " And " +
                       " H.AccountNumber = CC.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select W.ArabicName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " H.CompanyID = W.CompanyID " +
                       " And " +
                       " H.StockCode = W.StockCode " +
                     " ) As StockName, " +
                     " ( " +
                       " Case When H.TaxType = 1 " +
                       " Then N'خاضع' " +
                       " When H.TaxType = 2 " +
                       " Then N'خاضع بنسبة صفر' " +
                       " Else N'معفي' " +
                       " End " +
                     " ) As TaxTypeName, " +
                     " ( " +
                       " Case When H.VoucherCase = 1 " +
                       " Then N'نقدا' " +
                       " Else N'ذمم' " +
                       " End " +
                     " ) As VoucherCaseName, " +
                     " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN N'غير مرحل' " +
                      " ELSE N'مرحل' " +
                      " END " +
                    ") As Export, " +
                    " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                     " From St_Header H,AspNetUsers A " +
                     " Where " +
                     " H.CompanyID = @CompanyID " +
                     " And " +
                     " H.CompanyID = A.fCompanyId " +
                     " And " +
                     " H.InsUserID = A.Id " +
                     " And " +
                     " H.TransactionKindNo = 502 " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                     " Select H.VoucherNumber, H.VoucherDate, H.AccountNumber, H.StockCode, A.UserName, H.NetTotalLocal, " +
                     " H.NetTotalLocalAfterLineDiscount,H.NetTotalDiscountLocal,H.NetTotalLocalAfterDiscount,H.NetTotalTaxLocal,H.SaleID, " +
                     " H.TaxType, H.VoucherCase, H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear,H.Exported,H.OriginalVoucherNumber, " +
                     " ( " +
                      " Select S.SalesName From Sales S " +
                      " Where " +
                      " H.CompanyID = S.CompanyID " +
                      " And " +
                      " H.SaleID = S.SalesID " +
                    " ) As SaleName, " +
                     " ( " +
                       " Select CC.EnglishName " +
                       " From ChartOfAccounts CC " +
                       " Where " +
                       " H.CompanyID = CC.CompanyID " +
                       " And " +
                       " H.AccountNumber = CC.AccountNumber " +
                     " ) As AccountName, " +
                     " ( " +
                       " Select W.EnglishName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " H.CompanyID = W.CompanyID " +
                       " And " +
                       " H.StockCode = W.StockCode " +
                     " ) As StockName, " +
                     " ( " +
                      " Case When POH.TaxType = 1 " +
                      " Then 'Taxable' " +
                      " When POH.TaxType = 2 " +
                      " Then 'Taxable By Zero' " +
                      " Else 'Tax Exempt' " +
                      " End " +
                    " ) As TaxTypeName, " +
                    " ( " +
                      " Case When POH.VoucherCase = 1 " +
                      " Then 'Cash' " +
                      " Else 'Credit' " +
                      " End " +
                    " ) As VoucherCaseName, " +
                    " ( " +
                      " CASE " +
                      " WHEN H.Exported = 0 THEN 'UnExport' " +
                      " ELSE 'Export' " +
                      " END " +
                    ") As Export, " +
                    " ( " +
                        " Select Count(*) As CheckCase " +
                        " From FreezeTransactions FT " +
                        " Where " +
                        " FT.CompanyID = H.CompanyID " +
                        " And " +
                        " cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                        " And " +
                        " cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                      " ) As CheckCase " +
                     " From St_Header H,AspNetUsers A " +
                     " Where " +
                     " H.CompanyID = @CompanyID " +
                     " And " +
                     " H.CompanyID = A.fCompanyId " +
                     " And " +
                     " H.InsUserID = A.Id " +
                     " And " +
                     " H.TransactionKindNo = 502 " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
        }
        public IEnumerable<St_HeaderVM> GetAllSt_UnExport(int CompanyID, DateTime Fromdate, DateTime ToDate,int TransactionKindNo)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                    " Select H.VoucherNumber, H.VoucherDate, H.StockCode, A.UserName, H.NetTotalLocal, " +
                    " H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear, H.Exported, " +
                    " ( " +
                      "  Select W.ArabicName " +
                      " From St_Warehouse W " +
                      " Where " +
                      " H.CompanyID = W.CompanyID " +
                      " And " +
                      " H.StockCode = W.StockCode " +
                    " ) As StockName " +
                    " From St_Header H,AspNetUsers A " +
                    " Where " +
                    " H.CompanyID =  @CompanyID  " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.TransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                    " Select H.VoucherNumber, H.VoucherDate, H.StockCode, A.UserName, H.NetTotalLocal, " +
                    " H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear, H.Exported, " +
                    " ( " +
                      "  Select W.EnglishName " +
                      " From St_Warehouse W " +
                      " Where " +
                      " H.CompanyID = W.CompanyID " +
                      " And " +
                      " H.StockCode = W.StockCode " +
                    " ) As StockName " +
                    " From St_Header H,AspNetUsers A " +
                    " Where " +
                    " H.CompanyID =  @CompanyID  " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.TransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 0 "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
        }
        public IEnumerable<St_HeaderVM> GetAllSt_Export(int CompanyID, DateTime Fromdate, DateTime ToDate, int TransactionKindNo)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                    " Select H.VoucherNumber, H.VoucherDate, H.StockCode, A.UserName, H.NetTotalLocal, " +
                    " H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear, H.Exported, " +
                    " ( " +
                      "  Select W.ArabicName " +
                      " From St_Warehouse W " +
                      " Where " +
                      " H.CompanyID = W.CompanyID " +
                      " And " +
                      " H.StockCode = W.StockCode " +
                    " ) As StockName " +
                    " From St_Header H,AspNetUsers A " +
                    " Where " +
                    " H.CompanyID =  @CompanyID  " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.TransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                    " Select H.VoucherNumber, H.VoucherDate, H.StockCode, A.UserName, H.NetTotalLocal, " +
                    " H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear, H.Exported, " +
                    " ( " +
                      "  Select W.EnglishName " +
                      " From St_Warehouse W " +
                      " Where " +
                      " H.CompanyID = W.CompanyID " +
                      " And " +
                      " H.StockCode = W.StockCode " +
                    " ) As StockName " +
                    " From St_Header H,AspNetUsers A " +
                    " Where " +
                    " H.CompanyID =  @CompanyID  " +
                    " And " +
                    " H.CompanyID = A.fCompanyId " +
                    " And " +
                    " H.InsUserID = A.Id " +
                    " And " +
                    " H.TransactionKindNo = @TransactionKindNo " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate " +
                    " And " +
                    " H.Exported = 1 "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@TransactionKindNo", TransactionKindNo)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
        }
        public IEnumerable<St_HeaderVM> GetAllSt_SpoiledVoucher(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                    "  Select H.VoucherNumber, H.VoucherDate, H.StockCode, A.UserName, H.NetTotalLocal, " +
                  "   H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear, H.Exported, " +
                 "   ( " +
                   "  Select W.ArabicName " +
                     " From St_Warehouse W " +
                   "   Where " +
                   "   H.CompanyID = W.CompanyID " +
                     " And " +
                   "   H.StockCode = W.StockCode " +
                  "  ) As StockName, " +
                  "  (  " +
                    " CASE " +
                  "   WHEN H.Exported = 0 THEN N'غير مرحل' " +
                  "   ELSE N'مرحل' " +
                  "   END " +
                 " ) As Export, " +
                 "  (  " +
                     "  Select Count(*) As CheckCase " +
                     "  From FreezeTransactions FT " +
                    "   Where " +
                     "  FT.CompanyID = H.CompanyID " +
                    "   And " +
                   "    cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                    "   And " +
                     "  cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                   "  ) As CheckCase " +
                   " From St_Header H,AspNetUsers A " +
                  "  Where " +
                 "   H.CompanyID = @CompanyID " +
                 "   And " +
                  "  H.CompanyID = A.fCompanyId " +
                  "  And " +
                  "  H.InsUserID = A.Id " +
                  "  And " +
                  "  H.TransactionKindNo = 506 " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                     "  Select H.VoucherNumber, H.VoucherDate, H.StockCode, A.UserName, H.NetTotalLocal, " +
                  "   H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear, H.Exported, " +
                 "   ( " +
                   "  Select W.ArabicName " +
                     " From St_Warehouse W " +
                   "   Where " +
                   "   H.CompanyID = W.CompanyID " +
                     " And " +
                   "   H.StockCode = W.StockCode " +
                  "  ) As StockName, " +
                  "  (  " +
                    " CASE " +
                  "   WHEN H.Exported = 0 THEN 'UnExport' " +
                  "   ELSE 'Export' " +
                  "   END " +
                 " ) As Export, " +
                 "  (  " +
                     "  Select Count(*) As CheckCase " +
                     "  From FreezeTransactions FT " +
                    "   Where " +
                     "  FT.CompanyID = H.CompanyID " +
                    "   And " +
                   "    cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                    "   And " +
                     "  cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                   "  ) As CheckCase " +
                   " From St_Header H,AspNetUsers A " +
                  "  Where " +
                 "   H.CompanyID = @CompanyID " +
                 "   And " +
                  "  H.CompanyID = A.fCompanyId " +
                  "  And " +
                  "  H.InsUserID = A.Id " +
                  "  And " +
                  "  H.TransactionKindNo = 506 " +
                    " And " +
                    " H.VoucherDate >= @FromDate " +
                    " And " +
                    " H.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
        }
        public IEnumerable<St_HeaderVM> GetAllSt_TransferVoucher(int CompanyID, DateTime Fromdate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                    " Select H.VoucherNumber, H.VoucherDate, H.StockCode, A.UserName, H.NetTotalLocal, " +
                    " H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear, H.Exported,T.StockCode,T.TransferType, " +
                    " ( " +
                     " Select W.ArabicName " +
                     " From St_Warehouse W " +
                     " Where " +
                     " T.CompanyID = W.CompanyID " +
                     " And " +
                     " T.StockCode = W.StockCode " +
                   " ) As StockName, " +
                   " ( " +
                      " Case When  T.TransferType = 1 Then N'سند إدخال' " +
                      " Else N'سند إخراج' " +
                      " End" +
                   " ) As TransferTypeName," + 
                  "  (  " +
                    " CASE " +
                  "   WHEN H.Exported = 0 THEN N'غير مرحل' " +
                  "   ELSE N'مرحل' " +
                  "   END " +
                 " ) As Export, " +
                 "  (  " +
                     "  Select Count(*) As CheckCase " +
                     "  From FreezeTransactions FT " +
                    "   Where " +
                     "  FT.CompanyID = H.CompanyID " +
                    "   And " +
                   "    cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                    "   And " +
                     "  cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                   "  ) As CheckCase " +
                   " From St_Header H,AspNetUsers A,St_Transaction T " +
                  "  Where " +
                 "   H.CompanyID =  @CompanyID  " +
                 "   And " +
                  "  H.CompanyID = A.fCompanyId " +
                  "  And " +
                  "  H.InsUserID = A.Id " +
                  "  And " +
                  "  H.TransactionKindNo = 507 " +
                  " And" +
                  " H.CompanyID = T.CompanyID" +
                  " And" +
                  " H.TransactionKindNo = T.TransactionKindNo" +
                  " And" +
                  " H.VoucherNumber = T.VoucherNumber" +
                  " And " +
                  " H.VoucherDate >= @FromDate " +
                  " And " +
                  " H.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
            else
            {
                try

                {
                    return _context.Database.SqlQuery<St_HeaderVM>(
                    " Select H.VoucherNumber, H.VoucherDate, H.StockCode, A.UserName, H.NetTotalLocal, " +
                    " H.CompanyTransactionKindNo, H.TransactionKindNo, H.CompanyYear, H.Exported,T.StockCode,T.TransferType, " +
                    " ( " +
                     " Select W.ArabicName " +
                     " From St_Warehouse W " +
                     " Where " +
                     " T.CompanyID = W.CompanyID " +
                     " And " +
                     " T.StockCode = W.StockCode " +
                   " ) As StockName, " +
                   " ( " +
                      " Case When  T.TransferType = 1 Then 'In Voucher' " +
                      " Else 'Out Voucher' " +
                      " End" +
                   " ) As TransferTypeName," +
                  "  (  " +
                    " CASE " +
                  "   WHEN H.Exported = 0 THEN 'UnExport' " +
                  "   ELSE 'Export' " +
                  "   END " +
                 " ) As Export, " +
                 "  (  " +
                     "  Select Count(*) As CheckCase " +
                     "  From FreezeTransactions FT " +
                    "   Where " +
                     "  FT.CompanyID = H.CompanyID " +
                    "   And " +
                   "    cast(datediff(day, 0, MinmumDate) as datetime) <= H.VoucherDate " +
                    "   And " +
                     "  cast(datediff(day, 0, MaximumDate) as datetime) >= H.VoucherDate " +
                   "  ) As CheckCase " +
                   " From St_Header H,AspNetUsers A,St_Transaction T " +
                  "  Where " +
                 "   H.CompanyID =  @CompanyID  " +
                 "   And " +
                  "  H.CompanyID = A.fCompanyId " +
                  "  And " +
                  "  H.InsUserID = A.Id " +
                  "  And " +
                  "  H.TransactionKindNo = 507 " +
                  " And" +
                  " H.CompanyID = T.CompanyID" +
                  " And" +
                  " H.TransactionKindNo = T.TransactionKindNo" +
                  " And" +
                  " H.VoucherNumber = T.VoucherNumber" +
                  " And " +
                  " H.VoucherDate >= @FromDate " +
                  " And " +
                  " H.VoucherDate <= @ToDate "
                    , new SqlParameter("@FromDate", Fromdate)
                    , new SqlParameter("@ToDate", ToDate)
                    , new SqlParameter("@CompanyID", CompanyID)

                ).ToList();
                }
                catch
                {
                    return new List<St_HeaderVM>();
                }
            }
        }
        public int CheckSt_DescriptionDetailBeforDelete(int CompanyID, int DescriptionDetailID, int DescriptionID)
        {
            if (DescriptionID == 1)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select Categorie_1 From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " Categorie_1 = @DescriptionDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@DescriptionDetailID", DescriptionDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else if (DescriptionID == 2)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select Categorie_2 From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " Categorie_2 = @DescriptionDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@DescriptionDetailID", DescriptionDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else if (DescriptionID == 3)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select Categorie_3 From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " Categorie_3 = @DescriptionDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@DescriptionDetailID", DescriptionDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else if (DescriptionID == 4)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select Categorie_4 From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " Categorie_4 = @DescriptionDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@DescriptionDetailID", DescriptionDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else if (DescriptionID == 5)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select Categorie_5 From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " Categorie_5 = @DescriptionDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@DescriptionDetailID", DescriptionDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else if (DescriptionID == 6)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select Categorie_6 From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " Categorie_6 = @DescriptionDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@DescriptionDetailID", DescriptionDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else if (DescriptionID == 7)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select Categorie_7 From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " Categorie_7 = @DescriptionDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@DescriptionDetailID", DescriptionDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else if (DescriptionID == 8)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select Categorie_8 From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " Categorie_8 = @DescriptionDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@DescriptionDetailID", DescriptionDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else if (DescriptionID == 9)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select Categorie_9 From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " Categorie_9 = @DescriptionDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@DescriptionDetailID", DescriptionDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else if (DescriptionID == 10)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select Categorie_10 From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " Categorie_10 = @DescriptionDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@DescriptionDetailID", DescriptionDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else if (DescriptionID == 11)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select Categorie_11 From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " Categorie_11 = @DescriptionDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@DescriptionDetailID", DescriptionDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else if (DescriptionID == 12)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select Categorie_12 From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " Categorie_12 = @DescriptionDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@DescriptionDetailID", DescriptionDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else if (DescriptionID == 13)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select Categorie_13 From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " Categorie_13 = @DescriptionDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@DescriptionDetailID", DescriptionDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else if (DescriptionID == 14)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select Categorie_14 From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " Categorie_14 = @DescriptionDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@DescriptionDetailID", DescriptionDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else if (DescriptionID == 15)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select Categorie_15 From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " Categorie_15 = @DescriptionDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@DescriptionDetailID", DescriptionDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else
            {
                return 0;
            }
        }
        public int CheckItemUnitBeforDelete(int CompanyID, int ItemUnitNo)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select ItemUnitNo From St_ItemCard " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ItemUnitNo = @ItemUnitNo " +
                " Union All " +
                " Select SimilarItemCode As ItemUnitNo From St_SimilarItem " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " SimilarItemCode = @ItemUnitNo "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@ItemUnitNo", ItemUnitNo)
                ).FirstOrDefault();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }
        }
        public int CheckCountryOfOriginBeforDelete(int CompanyID, int CountryOfOriginNo)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select CountryOfOriginNo From St_ItemCard " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " CountryOfOriginNo = @CountryOfOriginNo "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@CountryOfOriginNo", CountryOfOriginNo)
                ).FirstOrDefault();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }
        }
        public int CheckManufacturerCompanyBeforDelete(int CompanyID, int ManufacturerCompanyNo)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select ManufacturerCompanyNo From St_ItemCard " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " ManufacturerCompanyNo = @ManufacturerCompanyNo "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@ManufacturerCompanyNo", ManufacturerCompanyNo)
                ).FirstOrDefault();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }
        }
        public string CheckItemCodeBeforDelete(int CompanyID, string ItemCode)
        {
            try
            {
                string Checked = _context.Database.SqlQuery<string>(
                " Select ItemCode From St_Transaction " +
                " Where " +
                " ItemCode = @ItemCode " +
                " And " +
                " CompanyID = @CompanyID " +
                " Union All " +
                " Select AlternativeItemCode As ItemCode From St_AlternativeItem " +
                " Where " +
                " AlternativeItemCode = @ItemCode " +
                " And " +
                " CompanyID = @CompanyID " +
                " Union All " +
                " Select ItemCode From St_ItemAdvertisingRepresentative  " +
                " Where " +
                " ItemCode = @ItemCode " +
                " And " +
                " CompanyID = @CompanyID " 
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@ItemCode", ItemCode)
                ).FirstOrDefault();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return "";
            }
        }
        public int CheckSt_MeasurementDetailBeforDelete(int CompanyID, int MeasurementDetailID, int MeasurementID)
        {
            if (MeasurementID == 1)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select LengthNo From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " LengthNo = @MeasurementDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@MeasurementDetailID", MeasurementDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else if (MeasurementID == 2)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select WidthNo From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " WidthNo = @MeasurementDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@MeasurementDetailID", MeasurementDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else if (MeasurementID == 3)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select HeightNo From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " HeightNo = @MeasurementDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@MeasurementDetailID", MeasurementDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else if (MeasurementID == 4)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select SizeNo From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " SizeNo = @MeasurementDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@MeasurementDetailID", MeasurementDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else if (MeasurementID == 5)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select WeightNo From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " WeightNo = @MeasurementDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@MeasurementDetailID", MeasurementDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else if (MeasurementID == 6)
            {
                try
                {
                    int Checked = _context.Database.SqlQuery<int>(
                    " Select UnitNo From St_ItemCard " +
                    " Where " +
                    " CompanyID = @CompanyID " +
                    " And " +
                    " UnitNo = @MeasurementDetailID "
                     , new SqlParameter("@CompanyID", CompanyID)
                     , new SqlParameter("@MeasurementDetailID", MeasurementDetailID)
                    ).FirstOrDefault();
                    return Checked;
                }
                catch (Exception ex)
                {
                    string s = ex.Message;
                    return 0;
                }
            }
            else
            {
                return 0;
            }
        }
        public string CheckWarehouseBeforDelete(int CompanyID, string StockCode)
        {
            try
            {
                string Checked = _context.Database.SqlQuery<string>(
                " Select StockCode From St_Header " +
                " Where " +
                " StockCode = @StockCode " +
                " And " +
                " CompanyID = @CompanyID " +
                " Union All " +
                " Select StockCode From St_Transaction  " +
                " Where " +
                " StockCode = @StockCode " +
                " And " +
                " CompanyID = @CompanyID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@StockCode", StockCode)
                ).FirstOrDefault();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return "";
            }
        }
        public int CheckDriverBeforDelete(int CompanyID, int DriverID)
        {
            try
            {
                int Checked = _context.Database.SqlQuery<int>(
                " Select DriverID From St_Header " +
                " Where " +
                " CompanyID = @CompanyID " +
                " And " +
                " DriverID = @DriverID "
                 , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@DriverID", DriverID)
                ).FirstOrDefault();
                return Checked;
            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return 0;
            }
        }
        public IEnumerable<St_ItemTransactionReportVM> GetAverageCostByStockCode(int CompanyID, string ItemCode, string StockCode, DateTime VoucherDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemTransactionReportVM>(
                     " Select  T.CompanyID, T.ItemCode, T.VoucherNumber, T.VoucherDate, T.TransactionKindNo, T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount , T.StockCode, T.CompanyTransactionKindNo, " +
                     " T.QuantityInputOutput, T.TransactionKindName, T.StockName, T.Remark, T.Hint, T.TotalCostLocal, T.CostPieceLocal, T.QuantityIn, T.QuantityOut, T.TransferType, " +
                     " ( " +
                       " Select W.ArabicName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " W.CompanyID = H.CompanyID " +
                       " And " +
                       " W.StockCode = H.FromStockCode " +
                       " And " +
                       " T.QuantityInputOutput > 0 " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " ) As FromStockName, " +
                     " ( " +
                       " Select W.ArabicName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " W.CompanyID = H.CompanyID " +
                       " And " +
                       " W.StockCode = H.ToStockCode " +
                       " And " +
                       " T.QuantityInputOutput < 0 " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " ) As ToStockName, " +
                     " ( " +
                       " Select CA.ArabicName " +
                       " From ChartOfAccounts CA " +
                       " Where " +
                       " CA.CompanyID = H.CompanyID " +
                       " And " +
                       " CA.AccountNumber = H.AccountNumber " +
                     " ) As AccountName " +
                     " From " +
                     " ( " +
                       " Select T.CompanyID, T.ItemCode, T.VoucherNumber, T.VoucherDate, T.TransactionKindNo, T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount, T.StockCode, T.CompanyTransactionKindNo, T.TransferType, " +
                       " Sum(T.QuantityInputOutput + T.BonusInputOutput) As QuantityInputOutput, TK.ArabicName As TransactionKindName, W.ArabicName As StockName, T.Remark, T.Hint, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then T.TotalCostLocal " +
                         " Else 0 " +
                         " End " +
                       " ) As TotalCostLocal, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then T.CostPieceLocal " +
                         " Else 0 " +
                         " End " +
                       " ) As CostPieceLocal, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then Sum(T.QuantityInputOutput + T.BonusInputOutput) " +
                         " Else 0 " +
                         " End " +
                       " ) As QuantityIn, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) < 0 Then Sum(T.QuantityInputOutput + T.BonusInputOutput) * -1 " +
                         " Else 0 " +
                         " End " +
                       " ) As QuantityOut " +
                       " From St_Transaction T ,St_TransactionKind Tk, St_Warehouse W " +
                       " Where " +
                       " T.TransactionKindNo = Tk.St_TransactionKindID " +
                       " And " +
                       " T.CompanyID = W.CompanyID " +
                       " And " +
                       " T.StockCode = W.StockCode " +
                       " Group By  T.CompanyID,T.ItemCode, T.VoucherNumber,T.VoucherDate, T.TransactionKindNo, T.StockCode,T.TotalCostLocal,T.CostPieceLocal,T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount,T.TransferType, " +
                       " TK.ArabicName,W.ArabicName,T.Remark,T.Hint,T.CompanyTransactionKindNo " +
                     " ) As T, St_Header H " +
                     " Where " +
                     " H.CompanyID = T.CompanyID " +
                     " And " +
                     " H.VoucherNumber = T.VoucherNumber " +
                     " And " +
                     " H.TransactionKindNo = T.TransactionKindNo " +
                     " And " +
                     " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " And " +
                    " T.ItemCode = @ItemCode " +
                    " And " +
                    " T.StockCode = @StockCode " +
                    " And " +
                    " T.CompanyID = @CompanyID " +
                    " And " +
                    " T.VoucherDate <= @VoucherDate " +
                    " Order By T.VoucherDate,T.VoucherNumber,T.TransferType "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@StockCode", StockCode)
                    , new SqlParameter("@VoucherDate", VoucherDate)
                ).ToList();
                }
                catch
                {
                    return new List<St_ItemTransactionReportVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemTransactionReportVM>(
                     " Select  T.CompanyID, T.ItemCode, T.VoucherNumber, T.VoucherDate, T.TransactionKindNo,T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount, T.StockCode, T.CompanyTransactionKindNo, " +
                     " T.QuantityInputOutput, T.TransactionKindName, T.StockName, T.Remark, T.Hint, T.TotalCostLocal, T.CostPieceLocal, T.QuantityIn, T.QuantityOut, T.TransferType, " +
                     " ( " +
                       " Select W.EnglishName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " W.CompanyID = H.CompanyID " +
                       " And " +
                       " W.StockCode = H.FromStockCode " +
                       " And " +
                       " T.QuantityInputOutput > 0 " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " ) As FromStockName, " +
                     " ( " +
                       " Select W.EnglishName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " W.CompanyID = H.CompanyID " +
                       " And " +
                       " W.StockCode = H.ToStockCode " +
                       " And " +
                       " T.QuantityInputOutput < 0 " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " ) As ToStockName, " +
                     " ( " +
                       " Select CA.EnglishName " +
                       " From ChartOfAccounts CA " +
                       " Where " +
                       " CA.CompanyID = H.CompanyID " +
                       " And " +
                       " CA.AccountNumber = H.AccountNumber " +
                     " ) As AccountName " +
                     " From " +
                     " ( " +
                       " Select T.CompanyID, T.ItemCode, T.VoucherNumber, T.VoucherDate, T.TransactionKindNo, T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount, T.StockCode, T.CompanyTransactionKindNo, T.TransferType, " +
                       " Sum(T.QuantityInputOutput + T.BonusInputOutput) As QuantityInputOutput, TK.EnglishName As TransactionKindName, W.EnglishName As StockName, T.Remark, T.Hint, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then T.TotalCostLocal " +
                         " Else 0 " +
                         " End " +
                       " ) As TotalCostLocal, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then T.CostPieceLocal " +
                         " Else 0 " +
                         " End " +
                       " ) As CostPieceLocal, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then Sum(T.QuantityInputOutput + T.BonusInputOutput) " +
                         " Else 0 " +
                         " End " +
                       " ) As QuantityIn, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) < 0 Then Sum(T.QuantityInputOutput + T.BonusInputOutput) * -1 " +
                         " Else 0 " +
                         " End " +
                       " ) As QuantityOut " +
                       " From St_Transaction T ,St_TransactionKind Tk, St_Warehouse W " +
                       " Where " +
                       " T.TransactionKindNo = Tk.St_TransactionKindID " +
                       " And " +
                       " T.CompanyID = W.CompanyID " +
                       " And " +
                       " T.StockCode = W.StockCode " +
                       " Group By  T.CompanyID,T.ItemCode, T.VoucherNumber,T.VoucherDate, T.TransactionKindNo, T.StockCode,T.TotalCostLocal,T.CostPieceLocal,T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount,T.TransferType, " +
                       " TK.EnglishName,W.EnglishName,T.Remark,T.Hint,T.CompanyTransactionKindNo " +
                     " ) As T, St_Header H " +
                     " Where " +
                     " H.CompanyID = T.CompanyID " +
                     " And " +
                     " H.VoucherNumber = T.VoucherNumber " +
                     " And " +
                     " H.TransactionKindNo = T.TransactionKindNo " +
                     " And " +
                     " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " And " +
                    " T.ItemCode = @ItemCode " +
                    " And " +
                    " T.StockCode = @StockCode " +
                    " And " +
                    " T.CompanyID = @CompanyID " +
                    " And " +
                    " T.VoucherDate <= @VoucherDate " +
                    " Order By T.VoucherDate,T.VoucherNumber,T.TransferType "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@StockCode", StockCode)
                    , new SqlParameter("@VoucherDate", VoucherDate)
                ).ToList();
                }
                catch
                {
                    return new List<St_ItemTransactionReportVM>();
                }
            }
        }
        public IEnumerable<St_ItemTransactionReportVM> GetAverageCost(int CompanyID, string ItemCode, DateTime VoucherDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemTransactionReportVM>(
                    " Select  T.CompanyID, T.ItemCode, T.VoucherNumber, T.VoucherDate, T.TransactionKindNo, T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount, T.StockCode, T.CompanyTransactionKindNo, " +
                     " T.QuantityInputOutput, T.TransactionKindName, T.StockName, T.Remark, T.Hint, T.TotalCostLocal, T.CostPieceLocal, T.QuantityIn, T.QuantityOut, T.TransferType, " +
                     " ( " +
                       " Select W.ArabicName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " W.CompanyID = H.CompanyID " +
                       " And " +
                       " W.StockCode = H.FromStockCode " +
                       " And " +
                       " T.QuantityInputOutput > 0 " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " ) As FromStockName, " +
                     " ( " +
                       " Select W.ArabicName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " W.CompanyID = H.CompanyID " +
                       " And " +
                       " W.StockCode = H.ToStockCode " +
                       " And " +
                       " T.QuantityInputOutput < 0 " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " ) As ToStockName, " +
                     " ( " +
                       " Select CA.ArabicName " +
                       " From ChartOfAccounts CA " +
                       " Where " +
                       " CA.CompanyID = H.CompanyID " +
                       " And " +
                       " CA.AccountNumber = H.AccountNumber " +
                     " ) As AccountName " +
                     " From " +
                     " ( " +
                       " Select T.CompanyID, T.ItemCode, T.VoucherNumber, T.VoucherDate, T.TransactionKindNo, T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount, T.StockCode, T.CompanyTransactionKindNo, T.TransferType, " +
                       " Sum(T.QuantityInputOutput + T.BonusInputOutput) As QuantityInputOutput, TK.ArabicName As TransactionKindName, W.ArabicName As StockName, T.Remark, T.Hint, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then T.TotalCostLocal " +
                         " Else 0 " +
                         " End " +
                       " ) As TotalCostLocal, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then T.CostPieceLocal " +
                         " Else 0 " +
                         " End " +
                       " ) As CostPieceLocal, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then Sum(T.QuantityInputOutput + T.BonusInputOutput) " +
                         " Else 0 " +
                         " End " +
                       " ) As QuantityIn, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) < 0 Then Sum(T.QuantityInputOutput + T.BonusInputOutput) * -1 " +
                         " Else 0 " +
                         " End " +
                       " ) As QuantityOut " +
                       " From St_Transaction T ,St_TransactionKind Tk, St_Warehouse W " +
                       " Where " +
                       " T.TransactionKindNo = Tk.St_TransactionKindID " +
                       " And " +
                       " T.CompanyID = W.CompanyID " +
                       " And " +
                       " T.StockCode = W.StockCode " +
                       " Group By  T.CompanyID,T.ItemCode, T.VoucherNumber,T.VoucherDate, T.TransactionKindNo, T.StockCode,T.TotalCostLocal,T.CostPieceLocal,T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount,T.TransferType, " +
                       " TK.ArabicName,W.ArabicName,T.Remark,T.Hint,T.CompanyTransactionKindNo " +
                     " ) As T, St_Header H " +
                     " Where " +
                     " H.CompanyID = T.CompanyID " +
                     " And " +
                     " H.VoucherNumber = T.VoucherNumber " +
                     " And " +
                     " H.TransactionKindNo = T.TransactionKindNo " +
                     " And " +
                     " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " And " +
                    " T.ItemCode = @ItemCode " +
                    " And " +
                    " T.CompanyID = @CompanyID " +
                    " And " +
                    " T.VoucherDate <= @VoucherDate " +
                    " Order By T.VoucherDate,T.VoucherNumber,T.TransferType "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@VoucherDate", VoucherDate)
                ).ToList();
                }
                catch
                {
                    return new List<St_ItemTransactionReportVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemTransactionReportVM>(
                    " Select  T.CompanyID, T.ItemCode, T.VoucherNumber, T.VoucherDate, T.TransactionKindNo, T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount, T.StockCode, T.CompanyTransactionKindNo, " +
                     " T.QuantityInputOutput, T.TransactionKindName, T.StockName, T.Remark, T.Hint, T.TotalCostLocal, T.CostPieceLocal, T.QuantityIn, T.QuantityOut, T.TransferType, " +
                     " ( " +
                       " Select W.EnglishName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " W.CompanyID = H.CompanyID " +
                       " And " +
                       " W.StockCode = H.FromStockCode " +
                       " And " +
                       " T.QuantityInputOutput > 0 " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " ) As FromStockName, " +
                     " ( " +
                       " Select W.EnglishName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " W.CompanyID = H.CompanyID " +
                       " And " +
                       " W.StockCode = H.ToStockCode " +
                       " And " +
                       " T.QuantityInputOutput < 0 " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " ) As ToStockName, " +
                     " ( " +
                       " Select CA.EnglishName " +
                       " From ChartOfAccounts CA " +
                       " Where " +
                       " CA.CompanyID = H.CompanyID " +
                       " And " +
                       " CA.AccountNumber = H.AccountNumber " +
                     " ) As AccountName " +
                     " From " +
                     " ( " +
                       " Select T.CompanyID, T.ItemCode, T.VoucherNumber, T.VoucherDate, T.TransactionKindNo, T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount, T.StockCode, T.CompanyTransactionKindNo, T.TransferType, " +
                       " Sum(T.QuantityInputOutput + T.BonusInputOutput) As QuantityInputOutput, TK.EnglishName As TransactionKindName, W.EnglishName As StockName, T.Remark, T.Hint, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then T.TotalCostLocal " +
                         " Else 0 " +
                         " End " +
                       " ) As TotalCostLocal, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then T.CostPieceLocal " +
                         " Else 0 " +
                         " End " +
                       " ) As CostPieceLocal, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then Sum(T.QuantityInputOutput + T.BonusInputOutput) " +
                         " Else 0 " +
                         " End " +
                       " ) As QuantityIn, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) < 0 Then Sum(T.QuantityInputOutput + T.BonusInputOutput) * -1 " +
                         " Else 0 " +
                         " End " +
                       " ) As QuantityOut " +
                       " From St_Transaction T ,St_TransactionKind Tk, St_Warehouse W " +
                       " Where " +
                       " T.TransactionKindNo = Tk.St_TransactionKindID " +
                       " And " +
                       " T.CompanyID = W.CompanyID " +
                       " And " +
                       " T.StockCode = W.StockCode " +
                       " Group By  T.CompanyID,T.ItemCode, T.VoucherNumber,T.VoucherDate, T.TransactionKindNo, T.StockCode,T.TotalCostLocal,T.CostPieceLocal,T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount,T.TransferType, " +
                       " TK.EnglishName,W.EnglishName,T.Remark,T.Hint,T.CompanyTransactionKindNo " +
                     " ) As T, St_Header H " +
                     " Where " +
                     " H.CompanyID = T.CompanyID " +
                     " And " +
                     " H.VoucherNumber = T.VoucherNumber " +
                     " And " +
                     " H.TransactionKindNo = T.TransactionKindNo " +
                     " And " +
                     " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " And " +
                    " T.ItemCode = @ItemCode " +
                    " And " +
                    " T.CompanyID = @CompanyID " +
                    " And " +
                    " T.VoucherDate <= @VoucherDate " +
                    " Order By T.VoucherDate,T.VoucherNumber,T.TransferType "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@VoucherDate", VoucherDate)
                ).ToList();
                }
                catch
                {
                    return new List<St_ItemTransactionReportVM>();
                }
            }
        }
        public IEnumerable<St_ItemTransactionReportVM> GetAverageCostByStockCodeBetweenDate(int CompanyID, string ItemCode, string StockCode, DateTime FromDate,DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemTransactionReportVM>(
                     " Select  T.CompanyID, T.ItemCode, T.VoucherNumber, T.VoucherDate, T.TransactionKindNo, T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount , T.StockCode, T.CompanyTransactionKindNo, " +
                     " T.QuantityInputOutput, T.TransactionKindName, T.StockName, T.Remark, T.Hint, T.TotalCostLocal, T.CostPieceLocal, T.QuantityIn, T.QuantityOut, T.TransferType, " +
                     " ( " +
                       " Select W.ArabicName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " W.CompanyID = H.CompanyID " +
                       " And " +
                       " W.StockCode = H.FromStockCode " +
                       " And " +
                       " T.QuantityInputOutput > 0 " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " ) As FromStockName, " +
                     " ( " +
                       " Select W.ArabicName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " W.CompanyID = H.CompanyID " +
                       " And " +
                       " W.StockCode = H.ToStockCode " +
                       " And " +
                       " T.QuantityInputOutput < 0 " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " ) As ToStockName, " +
                     " ( " +
                       " Select CA.ArabicName " +
                       " From ChartOfAccounts CA " +
                       " Where " +
                       " CA.CompanyID = H.CompanyID " +
                       " And " +
                       " CA.AccountNumber = H.AccountNumber " +
                     " ) As AccountName " +
                     " From " +
                     " ( " +
                       " Select T.CompanyID, T.ItemCode, T.VoucherNumber, T.VoucherDate, T.TransactionKindNo, T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount, T.StockCode, T.CompanyTransactionKindNo, T.TransferType, " +
                       " Sum(T.QuantityInputOutput + T.BonusInputOutput) As QuantityInputOutput, TK.ArabicName As TransactionKindName, W.ArabicName As StockName, T.Remark, T.Hint, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then T.TotalCostLocal " +
                         " Else 0 " +
                         " End " +
                       " ) As TotalCostLocal, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then T.CostPieceLocal " +
                         " Else 0 " +
                         " End " +
                       " ) As CostPieceLocal, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then Sum(T.QuantityInputOutput + T.BonusInputOutput) " +
                         " Else 0 " +
                         " End " +
                       " ) As QuantityIn, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) < 0 Then Sum(T.QuantityInputOutput + T.BonusInputOutput) * -1 " +
                         " Else 0 " +
                         " End " +
                       " ) As QuantityOut " +
                       " From St_Transaction T ,St_TransactionKind Tk, St_Warehouse W " +
                       " Where " +
                       " T.TransactionKindNo = Tk.St_TransactionKindID " +
                       " And " +
                       " T.CompanyID = W.CompanyID " +
                       " And " +
                       " T.StockCode = W.StockCode " +
                       " Group By  T.CompanyID,T.ItemCode, T.VoucherNumber,T.VoucherDate, T.TransactionKindNo, T.StockCode,T.TotalCostLocal,T.CostPieceLocal,T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount,T.TransferType, " +
                       " TK.ArabicName,W.ArabicName,T.Remark,T.Hint,T.CompanyTransactionKindNo " +
                     " ) As T, St_Header H " +
                     " Where " +
                     " H.CompanyID = T.CompanyID " +
                     " And " +
                     " H.VoucherNumber = T.VoucherNumber " +
                     " And " +
                     " H.TransactionKindNo = T.TransactionKindNo " +
                     " And " +
                     " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " And " +
                    " T.ItemCode = @ItemCode " +
                    " And " +
                    " T.StockCode = @StockCode " +
                    " And " +
                    " T.CompanyID = @CompanyID " +
                    " And " +
                    " T.VoucherDate >= @FromDate " +
                    " And " +
                    " T.VoucherDate <= @ToDate " +
                    " Order By T.VoucherDate,T.VoucherNumber,T.TransferType "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@StockCode", StockCode)
                    , new SqlParameter("@FromDate", FromDate)
                    , new SqlParameter("@ToDate", ToDate)
                ).ToList();
                }
                catch
                {
                    return new List<St_ItemTransactionReportVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemTransactionReportVM>(
                     " Select  T.CompanyID, T.ItemCode, T.VoucherNumber, T.VoucherDate, T.TransactionKindNo,T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount, T.StockCode, T.CompanyTransactionKindNo, " +
                     " T.QuantityInputOutput, T.TransactionKindName, T.StockName, T.Remark, T.Hint, T.TotalCostLocal, T.CostPieceLocal, T.QuantityIn, T.QuantityOut, T.TransferType, " +
                     " ( " +
                       " Select W.EnglishName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " W.CompanyID = H.CompanyID " +
                       " And " +
                       " W.StockCode = H.FromStockCode " +
                       " And " +
                       " T.QuantityInputOutput > 0 " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " ) As FromStockName, " +
                     " ( " +
                       " Select W.EnglishName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " W.CompanyID = H.CompanyID " +
                       " And " +
                       " W.StockCode = H.ToStockCode " +
                       " And " +
                       " T.QuantityInputOutput < 0 " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " ) As ToStockName, " +
                     " ( " +
                       " Select CA.EnglishName " +
                       " From ChartOfAccounts CA " +
                       " Where " +
                       " CA.CompanyID = H.CompanyID " +
                       " And " +
                       " CA.AccountNumber = H.AccountNumber " +
                     " ) As AccountName " +
                     " From " +
                     " ( " +
                       " Select T.CompanyID, T.ItemCode, T.VoucherNumber, T.VoucherDate, T.TransactionKindNo, T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount, T.StockCode, T.CompanyTransactionKindNo, T.TransferType, " +
                       " Sum(T.QuantityInputOutput + T.BonusInputOutput) As QuantityInputOutput, TK.EnglishName As TransactionKindName, W.EnglishName As StockName, T.Remark, T.Hint, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then T.TotalCostLocal " +
                         " Else 0 " +
                         " End " +
                       " ) As TotalCostLocal, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then T.CostPieceLocal " +
                         " Else 0 " +
                         " End " +
                       " ) As CostPieceLocal, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then Sum(T.QuantityInputOutput + T.BonusInputOutput) " +
                         " Else 0 " +
                         " End " +
                       " ) As QuantityIn, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) < 0 Then Sum(T.QuantityInputOutput + T.BonusInputOutput) * -1 " +
                         " Else 0 " +
                         " End " +
                       " ) As QuantityOut " +
                       " From St_Transaction T ,St_TransactionKind Tk, St_Warehouse W " +
                       " Where " +
                       " T.TransactionKindNo = Tk.St_TransactionKindID " +
                       " And " +
                       " T.CompanyID = W.CompanyID " +
                       " And " +
                       " T.StockCode = W.StockCode " +
                       " Group By  T.CompanyID,T.ItemCode, T.VoucherNumber,T.VoucherDate, T.TransactionKindNo, T.StockCode,T.TotalCostLocal,T.CostPieceLocal,T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount,T.TransferType, " +
                       " TK.EnglishName,W.EnglishName,T.Remark,T.Hint,T.CompanyTransactionKindNo " +
                     " ) As T, St_Header H " +
                     " Where " +
                     " H.CompanyID = T.CompanyID " +
                     " And " +
                     " H.VoucherNumber = T.VoucherNumber " +
                     " And " +
                     " H.TransactionKindNo = T.TransactionKindNo " +
                     " And " +
                     " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " And " +
                    " T.ItemCode = @ItemCode " +
                    " And " +
                    " T.StockCode = @StockCode " +
                    " And " +
                    " T.CompanyID = @CompanyID " +
                    " And " +
                    " T.VoucherDate >= @FromDate " +
                    " And " +
                    " T.VoucherDate <= @ToDate " +
                    " Order By T.VoucherDate,T.VoucherNumber,T.TransferType "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@StockCode", StockCode)
                    , new SqlParameter("@FromDate", FromDate)
                    , new SqlParameter("@ToDate", ToDate)
                ).ToList();
                }
                catch
                {
                    return new List<St_ItemTransactionReportVM>();
                }
            }
        }
        public IEnumerable<St_ItemTransactionReportVM> GetAverageCostBetweenDate(int CompanyID, string ItemCode, DateTime FromDate, DateTime ToDate)
        {
            if (Resources.Resource.CurLang == "Arb")
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemTransactionReportVM>(
                    " Select  T.CompanyID, T.ItemCode, T.VoucherNumber, T.VoucherDate, T.TransactionKindNo, T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount, T.StockCode, T.CompanyTransactionKindNo, " +
                     " T.QuantityInputOutput, T.TransactionKindName, T.StockName, T.Remark, T.Hint, T.TotalCostLocal, T.CostPieceLocal, T.QuantityIn, T.QuantityOut, T.TransferType, " +
                     " ( " +
                       " Select W.ArabicName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " W.CompanyID = H.CompanyID " +
                       " And " +
                       " W.StockCode = H.FromStockCode " +
                       " And " +
                       " T.QuantityInputOutput > 0 " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " ) As FromStockName, " +
                     " ( " +
                       " Select W.ArabicName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " W.CompanyID = H.CompanyID " +
                       " And " +
                       " W.StockCode = H.ToStockCode " +
                       " And " +
                       " T.QuantityInputOutput < 0 " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " ) As ToStockName, " +
                     " ( " +
                       " Select CA.ArabicName " +
                       " From ChartOfAccounts CA " +
                       " Where " +
                       " CA.CompanyID = H.CompanyID " +
                       " And " +
                       " CA.AccountNumber = H.AccountNumber " +
                     " ) As AccountName " +
                     " From " +
                     " ( " +
                       " Select T.CompanyID, T.ItemCode, T.VoucherNumber, T.VoucherDate, T.TransactionKindNo, T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount, T.StockCode, T.CompanyTransactionKindNo, T.TransferType, " +
                       " Sum(T.QuantityInputOutput + T.BonusInputOutput) As QuantityInputOutput, TK.ArabicName As TransactionKindName, W.ArabicName As StockName, T.Remark, T.Hint, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then T.TotalCostLocal " +
                         " Else 0 " +
                         " End " +
                       " ) As TotalCostLocal, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then T.CostPieceLocal " +
                         " Else 0 " +
                         " End " +
                       " ) As CostPieceLocal, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then Sum(T.QuantityInputOutput + T.BonusInputOutput) " +
                         " Else 0 " +
                         " End " +
                       " ) As QuantityIn, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) < 0 Then Sum(T.QuantityInputOutput + T.BonusInputOutput) * -1 " +
                         " Else 0 " +
                         " End " +
                       " ) As QuantityOut " +
                       " From St_Transaction T ,St_TransactionKind Tk, St_Warehouse W " +
                       " Where " +
                       " T.TransactionKindNo = Tk.St_TransactionKindID " +
                       " And " +
                       " T.CompanyID = W.CompanyID " +
                       " And " +
                       " T.StockCode = W.StockCode " +
                       " Group By  T.CompanyID,T.ItemCode, T.VoucherNumber,T.VoucherDate, T.TransactionKindNo, T.StockCode,T.TotalCostLocal,T.CostPieceLocal,T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount,T.TransferType, " +
                       " TK.ArabicName,W.ArabicName,T.Remark,T.Hint,T.CompanyTransactionKindNo " +
                     " ) As T, St_Header H " +
                     " Where " +
                     " H.CompanyID = T.CompanyID " +
                     " And " +
                     " H.VoucherNumber = T.VoucherNumber " +
                     " And " +
                     " H.TransactionKindNo = T.TransactionKindNo " +
                     " And " +
                     " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " And " +
                    " T.ItemCode = @ItemCode " +
                    " And " +
                    " T.CompanyID = @CompanyID " +
                    " And " +
                    " T.VoucherDate >= @FromDate " +
                    " And " +
                    " T.VoucherDate <= @ToDate " +
                    " Order By T.VoucherDate,T.VoucherNumber,T.TransferType "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@FromDate", FromDate)
                    , new SqlParameter("@ToDate", ToDate)
                ).ToList();
                }
                catch
                {
                    return new List<St_ItemTransactionReportVM>();
                }
            }
            else
            {
                try
                {
                    return _context.Database.SqlQuery<St_ItemTransactionReportVM>(
                    " Select  T.CompanyID, T.ItemCode, T.VoucherNumber, T.VoucherDate, T.TransactionKindNo, T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount, T.StockCode, T.CompanyTransactionKindNo, " +
                     " T.QuantityInputOutput, T.TransactionKindName, T.StockName, T.Remark, T.Hint, T.TotalCostLocal, T.CostPieceLocal, T.QuantityIn, T.QuantityOut, T.TransferType, " +
                     " ( " +
                       " Select W.EnglishName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " W.CompanyID = H.CompanyID " +
                       " And " +
                       " W.StockCode = H.FromStockCode " +
                       " And " +
                       " T.QuantityInputOutput > 0 " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " ) As FromStockName, " +
                     " ( " +
                       " Select W.EnglishName " +
                       " From St_Warehouse W " +
                       " Where " +
                       " W.CompanyID = H.CompanyID " +
                       " And " +
                       " W.StockCode = H.ToStockCode " +
                       " And " +
                       " T.QuantityInputOutput < 0 " +
                       " And " +
                       " H.CompanyID = T.CompanyID " +
                       " And " +
                       " H.VoucherNumber = T.VoucherNumber " +
                       " And " +
                       " H.TransactionKindNo = T.TransactionKindNo " +
                       " And " +
                       " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " ) As ToStockName, " +
                     " ( " +
                       " Select CA.EnglishName " +
                       " From ChartOfAccounts CA " +
                       " Where " +
                       " CA.CompanyID = H.CompanyID " +
                       " And " +
                       " CA.AccountNumber = H.AccountNumber " +
                     " ) As AccountName " +
                     " From " +
                     " ( " +
                       " Select T.CompanyID, T.ItemCode, T.VoucherNumber, T.VoucherDate, T.TransactionKindNo, T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount, T.StockCode, T.CompanyTransactionKindNo, T.TransferType, " +
                       " Sum(T.QuantityInputOutput + T.BonusInputOutput) As QuantityInputOutput, TK.EnglishName As TransactionKindName, W.EnglishName As StockName, T.Remark, T.Hint, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then T.TotalCostLocal " +
                         " Else 0 " +
                         " End " +
                       " ) As TotalCostLocal, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then T.CostPieceLocal " +
                         " Else 0 " +
                         " End " +
                       " ) As CostPieceLocal, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then Sum(T.QuantityInputOutput + T.BonusInputOutput) " +
                         " Else 0 " +
                         " End " +
                       " ) As QuantityIn, " +
                       " ( " +
                         " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) < 0 Then Sum(T.QuantityInputOutput + T.BonusInputOutput) * -1 " +
                         " Else 0 " +
                         " End " +
                       " ) As QuantityOut " +
                       " From St_Transaction T ,St_TransactionKind Tk, St_Warehouse W " +
                       " Where " +
                       " T.TransactionKindNo = Tk.St_TransactionKindID " +
                       " And " +
                       " T.CompanyID = W.CompanyID " +
                       " And " +
                       " T.StockCode = W.StockCode " +
                       " Group By  T.CompanyID,T.ItemCode, T.VoucherNumber,T.VoucherDate, T.TransactionKindNo, T.StockCode,T.TotalCostLocal,T.CostPieceLocal,T.PricePieceLocalAfterDiscount,T.TotalLocalAfterDiscount,T.TransferType, " +
                       " TK.EnglishName,W.EnglishName,T.Remark,T.Hint,T.CompanyTransactionKindNo " +
                     " ) As T, St_Header H " +
                     " Where " +
                     " H.CompanyID = T.CompanyID " +
                     " And " +
                     " H.VoucherNumber = T.VoucherNumber " +
                     " And " +
                     " H.TransactionKindNo = T.TransactionKindNo " +
                     " And " +
                     " H.CompanyTransactionKindNo = T.CompanyTransactionKindNo " +
                     " And " +
                    " T.ItemCode = @ItemCode " +
                    " And " +
                    " T.CompanyID = @CompanyID " +
                    " And " +
                    " T.VoucherDate >= @FromDate " +
                    " And " +
                    " T.VoucherDate <= @ToDate " +
                    " Order By T.VoucherDate,T.VoucherNumber,T.TransferType "
                    , new SqlParameter("@CompanyID", CompanyID)
                    , new SqlParameter("@ItemCode", ItemCode)
                    , new SqlParameter("@FromDate", FromDate)
                    , new SqlParameter("@ToDate", ToDate)
                ).ToList();
                }
                catch
                {
                    return new List<St_ItemTransactionReportVM>();
                }
            }
        }
        public IEnumerable<St_AvaregCostHVM> GetAverageCostH(int CompanyID, string ItemCode, DateTime VoucherDate)
        {
            try
            {
                return _context.Database.SqlQuery<St_AvaregCostHVM>(
                " Select T.ItemCode, T.VoucherNumber, T.VoucherDate, T.TransactionKindNo, T.StockCode,T.BranchCode, Sum(T.QuantityInputOutput + T.BonusInputOutput) As QuantityInputOutput, " +
                " ( " +
                  " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then T.TotalCostLocal " +
                  " Else 0 " +
                  " End " +
                " ) As TotalCostLocal, " +
                " ( " +
                  " Case When Sum(T.QuantityInputOutput + T.BonusInputOutput) > 0 Then T.CostPieceLocal " +
                  " Else 0 " +
                  " End " +
                " ) As CostPieceLocal " +
                " From St_TransactionH T " +
                " Where " +
                " T.ItemCode = @ItemCode " +
                " And " +
                " T.CompanyID = @CompanyID " +
                " And " +
                " T.VoucherDate <= @VoucherDate " +
                " Group By T.ItemCode, T.VoucherNumber,T.VoucherDate, T.TransactionKindNo, T.StockCode,T.BranchCode,T.TotalCostLocal,T.CostPieceLocal " +
                " Order By T.VoucherDate "
                , new SqlParameter("@CompanyID", CompanyID)
                , new SqlParameter("@ItemCode", ItemCode)
                , new SqlParameter("@VoucherDate", VoucherDate)
            ).ToList();
            }
            catch
            {
                return new List<St_AvaregCostHVM>();
            }
        }
        public void SaveSt_TempCalculateAverageCost(string ItemCode, DateTime VoucherDate, string VoucherNumber,int TransactionKindNo, string StockCode, 
        double TotalCostLocal, double QuantityInputOutput, double SumTotalCostLocal, double SumQuantityInputOutput, double CostPieceLocal, double AverageCost, string InsUserID, DateTime InsDateTime,
        double PricePieceLocalAfterDiscount, double TotalLocalAfterDiscount, double QuantityIn, double QuantityOut, string TransactionKindName, string StockName, string Remark, string FromStockName, string ToStockName, string AccountName)
        {
            _context.Database.ExecuteSqlCommand(
             " Insert into St_TempCalculateAverageCost " +
             " ( " +
               " ItemCode,VoucherDate,VoucherNumber,TransactionKindNo,StockCode,TotalCostLocal,QuantityInputOutput,SumTotalCostLocal,SumQuantityInputOutput,CostPieceLocal,AverageCost,InsUserID,InsDateTime, " +
               " PricePieceLocalAfterDiscount,TotalLocalAfterDiscount,QuantityIn,QuantityOut,TransactionKindName,StockName,Remark,FromStockName,ToStockName,AccountName " +
             " ) " +
             " Values " +
             " ( " +
               " @ItemCode,@VoucherDate,@VoucherNumber,@TransactionKindNo,@StockCode,@TotalCostLocal,@QuantityInputOutput,@SumTotalCostLocal,@SumQuantityInputOutput,@CostPieceLocal,@AverageCost,@InsUserID,@InsDateTime, " +
               " @PricePieceLocalAfterDiscount,@TotalLocalAfterDiscount,@QuantityIn,@QuantityOut,@TransactionKindName,@StockName,@Remark,@FromStockName,@ToStockName,@AccountName " +
             " ) "
             , new SqlParameter("@AverageCost", AverageCost)
             , new SqlParameter("@ItemCode", ItemCode)
             , new SqlParameter("@VoucherNumber", VoucherNumber)
             , new SqlParameter("@VoucherDate", VoucherDate)
             , new SqlParameter("@TransactionKindNo", TransactionKindNo)
             , new SqlParameter("@StockCode", StockCode)
             , new SqlParameter("@TotalCostLocal", TotalCostLocal)
             , new SqlParameter("@QuantityInputOutput", QuantityInputOutput)
             , new SqlParameter("@SumTotalCostLocal", SumTotalCostLocal)
             , new SqlParameter("@SumQuantityInputOutput", SumQuantityInputOutput)
             , new SqlParameter("@CostPieceLocal", CostPieceLocal)
             , new SqlParameter("@InsUserID", InsUserID)
             , new SqlParameter("@InsDateTime", InsDateTime)
             , new SqlParameter("@PricePieceLocalAfterDiscount", PricePieceLocalAfterDiscount)
             , new SqlParameter("@TotalLocalAfterDiscount", TotalLocalAfterDiscount)
             , new SqlParameter("@QuantityIn", QuantityIn)
             , new SqlParameter("@QuantityOut", QuantityOut)
             , new SqlParameter("@TransactionKindName", TransactionKindName)
             , new SqlParameter("@StockName", StockName)
             , new SqlParameter("@Remark", Remark)
             , new SqlParameter("@FromStockName", FromStockName)
             , new SqlParameter("@ToStockName", ToStockName)
             , new SqlParameter("@AccountName", AccountName)
             );
        }
        public void SaveSt_TempCalculateAverageCostH(string ItemCode, DateTime VoucherDate, string VoucherNumber, int TransactionKindNo, string StockCode,string BranchCode,
        double TotalCostLocal, double QuantityInputOutput, double SumTotalCostLocal, double SumQuantityInputOutput, double CostPieceLocal, double AverageCost, string InsUserID, DateTime InsDateTime)
        {
            _context.Database.ExecuteSqlCommand(
             " Insert into St_TempCalculateAverageCostH " +
             " ( " +
               " ItemCode,VoucherDate,VoucherNumber,TransactionKindNo,StockCode,BranchCode,TotalCostLocal,QuantityInputOutput,SumTotalCostLocal,SumQuantityInputOutput,CostPieceLocal,AverageCost,InsUserID,InsDateTime " +
             " ) " +
             " Values " +
             " ( " +
               " @ItemCode,@VoucherDate,@VoucherNumber,@TransactionKindNo,@StockCode,@BranchCode,@TotalCostLocal,@QuantityInputOutput,@SumTotalCostLocal,@SumQuantityInputOutput,@CostPieceLocal,@AverageCost,@InsUserID,@InsDateTime  " +
             " ) "
             , new SqlParameter("@AverageCost", AverageCost)
             , new SqlParameter("@ItemCode", ItemCode)
             , new SqlParameter("@VoucherNumber", VoucherNumber)
             , new SqlParameter("@VoucherDate", VoucherDate)
             , new SqlParameter("@TransactionKindNo", TransactionKindNo)
             , new SqlParameter("@StockCode", StockCode)
             , new SqlParameter("@BranchCode", BranchCode)
             , new SqlParameter("@TotalCostLocal", TotalCostLocal)
             , new SqlParameter("@QuantityInputOutput", QuantityInputOutput)
             , new SqlParameter("@SumTotalCostLocal", SumTotalCostLocal)
             , new SqlParameter("@SumQuantityInputOutput", SumQuantityInputOutput)
             , new SqlParameter("@CostPieceLocal", CostPieceLocal)
             , new SqlParameter("@InsUserID", InsUserID)
             , new SqlParameter("@InsDateTime", InsDateTime)
             );
        }
        public void DeleteSt_TempCalculateAverageCost(string InsUserID)
        {
            _context.Database.ExecuteSqlCommand(
              " Delete from  St_TempCalculateAverageCost " +
              " where InsUserID=@InsUserID "
              , new SqlParameter("@InsUserID", InsUserID)
             );
        }
        public void DeleteSt_TempCalculateAverageCostH(string InsUserID)
        {
            _context.Database.ExecuteSqlCommand(
              " Delete from  St_TempCalculateAverageCostH " +
              " where InsUserID=@InsUserID "
              , new SqlParameter("@InsUserID", InsUserID)
             );
        }
        public IEnumerable<St_ItemTransactionReportVM> GetTempAverageCost(string UserNumber, DateTime FromDate, DateTime ToDate)
        {
            try
            {
                return _context.Database.SqlQuery<St_ItemTransactionReportVM>(
                " Select VoucherNumber,VoucherDate,SumTotalCostLocal,SumQuantityInputOutput,AverageCost,PricePieceLocalAfterDiscount,TotalLocalAfterDiscount,TransactionKindName,StockName,Remark," +
                " QuantityIn,QuantityOut,AccountName,FromStockName,ToStockName,TransactionKindNo " +
                " From St_TempCalculateAverageCost " +
                " Where " +
                " InsUserID = @UserNumber " +
                " And " +
                " VoucherDate >= @FromDate " +
                " And " +
                " VoucherDate <= @ToDate " 
                , new SqlParameter("@UserNumber", UserNumber)
                , new SqlParameter("@FromDate", FromDate)
                , new SqlParameter("@ToDate", ToDate)
            ).ToList();
            }
            catch
            {
                return new List<St_ItemTransactionReportVM>();
            }
        }


        public ResttingAccountVM GetAllAcountToRessttingByAccount(string AccountNo, int Year)
        {
            string Sql = "";

            Sql = string.Format(" Select CA.AccountNumber,CA.ArabicName,ISNULL(Sum(T.Debit - T.Credit),0) As Total From ChartOfAccounts Ca,Transactions T Where  CA.AccountNumber Not In" +
             " ( " +
             " Select AccountFather From ChartOfAccounts C Where CA.AccountNumber = C.AccountFather And CA.CompanyID = C.CompanyID " +
             " ) " +
             " And T.AccountNumber = CA.AccountNumber and CA.CompanyID = T.CompanyID   and CA.AccountNumber ='{0}'  and  T.CompanyYear={1}    " +
             " Group By CA.AccountNumber,CA.ArabicName ", AccountNo, Year);



            try

            {
                return _context.Database.SqlQuery<ResttingAccountVM>(Sql).FirstOrDefault();


            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return new ResttingAccountVM();
            }
        }

        public IEnumerable<ResttingAccountVM> GetAllAcountToResstting(string AccountType, int Type, int Year)
        {
            string Sql = "";
            if (Type == 0)
            {
                //and CA.AccountTypeID in ({0})

                Sql = string.Format(" Select CA.AccountNumber,CA.ArabicName,ISNULL(Sum(T.Debit - T.Credit),0) As Total From ChartOfAccounts Ca,Transactions T Where  CA.AccountNumber Not In" +
                                " ( " +
                                " Select AccountFather From ChartOfAccounts C Where CA.AccountNumber = C.AccountFather And CA.CompanyID = C.CompanyID " +
                                " ) " +
                                " And T.AccountNumber = CA.AccountNumber and CA.CompanyID = T.CompanyID  and  T.CompanyYear={0}   ",
                                 Year);
                if (!String.IsNullOrEmpty(AccountType))
                {
                    Sql = Sql + " and CA.AccountTypeID in ( " + AccountType + ") ";
                }
                Sql = Sql + " Group By CA.AccountNumber,CA.ArabicName  ";


            }
            else
            {
                //and CA.AccountTypeID not in ({0})
                Sql = string.Format(" Select CA.AccountNumber,CA.ArabicName,ISNULL(Sum(T.Debit - T.Credit),0) As Total From ChartOfAccounts Ca,Transactions T Where  CA.AccountNumber Not In" +
                   " ( " +
                   " Select AccountFather From ChartOfAccounts C Where CA.AccountNumber = C.AccountFather And CA.CompanyID = C.CompanyID " +
                   " ) " +
                   " And T.AccountNumber = CA.AccountNumber and CA.CompanyID = T.CompanyID and     T.CompanyYear={0}   ", Year);

                if (!String.IsNullOrEmpty(AccountType))
                {
                    Sql = Sql + " and not CA.AccountTypeID in ( " + AccountType + ") ";
                }

                Sql = Sql + " Group By CA.AccountNumber,CA.ArabicName  ";


            }


            try

            {
                return _context.Database.SqlQuery<ResttingAccountVM>(Sql).ToList();


            }
            catch (Exception ex)
            {
                string s = ex.Message;
                return new List<ResttingAccountVM>();
            }
        }

        public IEnumerable<TrialBalanceVM> GetOpenBalance(int CompanyID, DateTime FromDate, DateTime toDate)// Nana
        {
            try

            {
                if (Resources.Resource.CurLang == "Arb")
                {
                    return _context.Database.SqlQuery<TrialBalanceVM>(
                "    select T.AccountNumber,C.ArabicName as AccountName ,sum(T.Debit) as DebitBalance ,sum(T.Credit) as CreditBalance from Transactions T ,ChartOfAccounts C  " +
                " where   " +
                " T.CompanyID=@CompanyID and C.CompanyID=@CompanyID    and T.VoucherDate = @FromDate and T.TransactionKindNo=15   and C.AccountNumber=T.AccountNumber " +
                "    group by  T.AccountNumber,C.ArabicName   "
                , new SqlParameter("@CompanyID", CompanyID)
                 , new SqlParameter("@FromDate", FromDate)
                  ).ToList();
                }
                else
                {
                    return _context.Database.SqlQuery<TrialBalanceVM>(
                                    "    select T.AccountNumber,C.EnglishName as AccountName ,sum(T.Debit) as DebitBalance ,sum(T.Credit) as CreditBalance from Transactions T ,ChartOfAccounts C " +
                                   
                                    " where   " +
                                    " T.CompanyID=@CompanyID and C.CompanyID=@CompanyID   and T.VoucherDate = @FromDate and T.TransactionKindNo=15   and C.AccountNumber=T.AccountNumber " +
                                    "    group by  T.AccountNumber,C.EnglishName  "



                                    , new SqlParameter("@CompanyID", CompanyID)
                                     , new SqlParameter("@FromDate", FromDate)
                                      ).ToList();
                }
                


           
            }
            catch(Exception ex)
            {
                string s = ex.Message;
                return new List<TrialBalanceVM>();
            }
        }
    }
}
    



