@model Acc.ViewModels.DefinitionAssetSiteVM
@{
    ViewBag.Title = @Resources.Resource.ConsumptionByTypeReport;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .panel-body {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-footer {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-title {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .dt-button {
        display: none !important;
    }

    #MemberShipTypeBody1 {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }
</style>
<div class="panel card-view">
    <div class="panel-heading" style="background-color: #34495E">
        <div class="pull-left">
            <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.ConsumptionByTypeReport</h6>
        </div>
        <div class="clearfix"></div>
    </div>
    <div class="panel-body">
        <div class="col-lg-12">
            <div class="col-lg-3">
                <div class="form-group">
                    @Html.LabelFor(m => m.AssetTypeID)
                    @Html.DropDownListFor(m => m.AssetTypeID, new SelectList(Model.AssetType, "AssetTypeID", "Name"), Resources.Resource.AssetType, new { @id = "AssetTypeID", @class = "form-control", @style = "max-width:480px" })
                </div>
            </div>
            <div class="col-lg-3">
                <div class="form-group">
                    @Html.CheckBoxFor(m => m.ApproveConsStartDate, new { @id = "ApproveConsStartDate" }) @Resources.Resource.ApproveConsStartDate /@Html.LabelFor(m => m.FromConsStartDate)
                    @Html.TextBoxFor(model => model.FromConsStartDate, new { @id = "FromConsStartDate", @class = "form-control", @Value = Model.FromConsStartDate.ToString("dd/MM/yyyy"), @style = "max-width:480px" })
                </div>
            </div>
            <div class="col-lg-3">
                <div class="form-group">
                    @Html.LabelFor(m => m.ToConsStartDate)
                    @Html.TextBoxFor(model => model.ToConsStartDate, new { @id = "ToConsStartDate", @class = "form-control", @Value = Model.ToConsStartDate.ToString("dd/MM/yyyy"), @style = "max-width:480px" })
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <button type="submit" class="btn  btn-anim btnSearch" id="reload"><i class=" fa fa-search"></i><span class="btn-text">@Resources.Resource.Search</span></button>
            @if (User.IsInRole("PrintRepConsumptionByTypePrintReport") || User.IsInRole("CoOwner"))
            {
                <button type="submit" class="btn btn-warning btn-anim" id="PrintPDF"><i class=" fa fa-print"></i><span class="btn-text">@Resources.Resource.Print</span></button>
            }
            <button type="submit" class="btn btn-anim btnFav" id="AddToFav"><i class=" fa fa-star"></i><span class="btn-text">@Resources.Resource.AddToFav</span></button>
            <button type="button" class="btn btn-default btn-anim" id="CloseForm"><i class="fa fa-times"></i><span class="btn-text">@Resources.Resource.Close</span></button>
        </div>
        <div class="col-lg-12" style="margin-top : 10px">
            <div class="form-group">
                <table id="tdataTable" class="table table-hover table-bordered mb-0" width="100%">
                    <thead>
                        <tr>
                            <th>@Resources.Resource.AssetTypeID</th>
                            <th>@Resources.Resource.AnnualConsumption</th>
                            <th>@Resources.Resource.AssetCost</th>
                            <th>@Resources.Resource.CombinedConsum</th>
                            <th>@Resources.Resource.BookValue</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="panel-footer">

    </div>
</div>
@Html.TextBoxFor(m => m.TheDecimalPointForTheLocalCurrency, new { @id = "TheDecimalPointForTheLocalCurrency", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TheDecimalPointForTheForeignCurrency, new { @id = "TheDecimalPointForTheForeignCurrency", @style = "visibility : hidden;" })
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {

            var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
            var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;

            function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
                try {
                    decimalCount = Math.abs(decimalCount);
                    decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

                    const negativeSign = amount < 0 ? "-" : "";

                    let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
                    let j = (i.length > 3) ? i.length % 3 : 0;

                    return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
                } catch (e) {
                    console.log(e)
                }
            };

        function validatedate(dateString) {
            var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
            if (dateString.match(dateformat)) {
                var operator = dateString.split('/');
                var datepart = [];
                if (operator.length > 1) {
                    datepart = dateString.split('/');
                }
                var month = parseInt(datepart[1]);
                var day = parseInt(datepart[0]);
                var year = parseInt(datepart[2]);
                var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                if (month == 1 || month > 2) {
                    if (day > ListofDays[month - 1]) {
                        return false;
                    }
                } else if (month == 2) {
                    var leapYear = false;
                    if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                        leapYear = true;
                    }
                    if ((leapYear == false) && (day >= 29)) {
                        return false;
                    } else
                        if ((leapYear == true) && (day > 29)) {
                            return false;
                        }
                }
            }
            else {
                return false;
            }
            return true;
        }

        $(document).on('click', '#AddToFav', function () {

            bootbox.confirm({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                className: 'rubberBand animated',
                buttons: {
                    confirm: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                        className: 'btn-success'
                    },
                    cancel: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                        className: 'btn-danger'
                    }
                },
                callback: function (result) {
                    if (result) {
                        var dialog = bootbox.dialog({
                            title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                            message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Saving...</p>',
                            closeButton: false
                        });

                        var dataToSave = {

                            ScreenName: '@Resources.Resource.ConsumptionByTypeReport',
                            ScreenUrl: "/Asset/ConsumptionByTypeReport",
                            ScreenType: 1

                        };

                        $.ajax({
                            type: "POST",
                            url: "/FavScreen/AddToFave",
                            data: JSON.stringify(dataToSave),
                            contentType: 'application/json',
                            success: function (data) {

                                dialog.modal('hide');
                                if (data.Code == 0) {
                                    toastr.error(data.Msg);
                                }
                                else if (data.Code == 1) {
                                    toastr.success(data.Msg);
                                }

                            },
                            error: function (data) {
                                dialog.modal('hide');
                                toastr.error(data);
                            }

                        });
                    }
                }
            });


        });
        $(document).on('click', '#PrintPDF', function () {

            var AssetTypeID = $("#AssetTypeID").val();
            var FromConsStartDate = $("#FromConsStartDate").val();
            var ToConsStartDate = $("#ToConsStartDate").val();

            var ApproveConsStartDate = $("#ApproveConsStartDate:checked").val();





            if (ApproveConsStartDate) {
                ApproveConsStartDate = 1
            }
            else {
                ApproveConsStartDate = 0
            }


            var words = FromConsStartDate.split('/');
            FromConsStartDate = words[0] + words[1] + words[2];
            words = ToConsStartDate.split('/');
            ToConsStartDate = words[0] + words[1] + words[2];



            if (AssetTypeID == '' || AssetTypeID == null) {
                AssetTypeID = "0";
            }



            window.open('/PDFReport/GetConsumptionByTypeReportPDF/' + AssetTypeID + "/" + FromConsStartDate + "/" + ToConsStartDate + "/" + ApproveConsStartDate + "/0", '_blank');

        });

  
        $(document).on('click', '#CloseForm', function () {
            window.location = "/Report/ReportDash";
        });
        $("#FromConsStartDate").blur(function () {
            var dDate = document.getElementById("FromConsStartDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("FromConsStartDate").value = '01/01/' + new Date().getFullYear()
            }
        });
        $("#ToConsStartDate").blur(function () {
            var dDate = document.getElementById("ToConsStartDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("ToConsStartDate").value = '01/01/' + new Date().getFullYear()
            }
        });
        $("#FromConsStartDate").mask("99/99/9999");
        $("#ToConsStartDate").mask("99/99/9999");
        $("#FromConsStartDate").focus().select();
        $("#FromConsStartDate").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#ToConsStartDate").focus().select();
            }

        });
        $("#ToConsStartDate").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#FromConsStartDate").focus().select();
            }

        });
        $(document).on('click', '#reload', function () {
            var dDate = document.getElementById("FromConsStartDate").value;
            var dToDate = document.getElementById("ToConsStartDate").value;
                if(!validatedate(dDate)) {
                    bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
        }
            else if (!validatedate(dToDate)) {
            bootbox.alert({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                className: 'rubberBand animated',
                buttons: {
                    ok: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                        className: 'btn-primary'
                    }
                }
            });
        }
        else {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            tabelMemRef.ajax.reload();
            dialog.modal('hide');

        }
    });

         var tabelMemRef = $("#tdataTable").DataTable({
                "language": {
                    "emptyTable": '@Resources.Resource.EmptyTable',
                    "search": '@Resources.Resource.Search',
                    "loadingRecords": '@Resources.Resource.LoadingRecords',
                    "processing": '@Resources.Resource.Processing',
                    "zeroRecords": '@Resources.Resource.ZeroRecords',
                    "info": '@Resources.Resource.Info',
                    "infoEmpty": '@Resources.Resource.InfoEmpty',
                    "lengthMenu": '@Resources.Resource.LengthMenu',
                    "infoFiltered": '@Resources.Resource.InfoFiltered',
                    "paginate": {
                        "previous": '@Resources.Resource.Previous',
                        "next": '@Resources.Resource.Next',
                        "first": '@Resources.Resource.First',
                        "last": '@Resources.Resource.Last',
                    },
                    "aria": {
                        "sortAscending": '@Resources.Resource.SortAscending',
                        "sortDescending": '@Resources.Resource.SortDescending'
                    }
                },
             "scrollY": "500px",
             "scrollX": true,
                "ordering": false,
                "autoWidth": false,
                "paging": false,
                "searching": false,
                "columnDefs": [
                    {
                        "targets": [0],
                        "className": "dt-center"
                    },
                    {
                        "targets": [1],
                        "className": "dt-center"
                    },
                    {
                        "targets": [2],
                        "className": "dt-center"
                    },
                    {
                        "targets": [3],
                        "className": "dt-center"
                    },
                    {
                        "targets": [4],
                        "className": "dt-center"
                    }
                ],
                dom: 'Bfrtip',
                buttons: [
                ],
                ajax: {
                    "type": "POST",
                    url: "/Asset/GetConsumptionByTypeReport",
                    "data": function (d) {
                        d.AssetTypeID = $("#AssetTypeID").val();
                        d.ApproveConsStartDate = $("#ApproveConsStartDate:checked").val();
                        d.FromConsStartDate = $("#FromConsStartDate").val();
                        d.ToConsStartDate = $("#ToConsStartDate").val();
                    },

                    dataSrc: ""

                },
                columns: [
                    {
                        data: "AssetTypeName"

                    },
                    {
                        data: "AnnualConsumption",
                        render: function (data, type, r) {
                            return (formatMoney(data, TheDecimalPointForTheLocalCurrency))

                        }
                    },
                    {
                        data: "AssetCost",
                        render: function (data, type, r) {
                            return (formatMoney(data, TheDecimalPointForTheLocalCurrency))

                        }
                    },
                    {
                        data: "CombinedConsum",
                        render: function (data, type, r) {
                            return (formatMoney(data, TheDecimalPointForTheLocalCurrency))

                        }
                    },
                    {
                        data: "BookValue",
                        render: function (data, type, r) {
                            return (formatMoney(data, TheDecimalPointForTheLocalCurrency))

                        }
                    }
                ]

            });


    });
    </script>
}








