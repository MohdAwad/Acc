@model Acc.ViewModels.AccountLevelRepVM
@{
    ViewBag.Title = @Resources.Resource.ExpenseAnalysisReport;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/Content/jquery-ui.css" rel="stylesheet" />

<style>
    .panel-body {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-footer {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-title {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .dt-button {
        display: none !important;
    }

    #MemberShipTypeBody1 {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }
</style>
<script>
   function GetSelectedAccount(data) {
        if (data.AccountNumber != null && data.AccountNumber != '') {
              document.getElementById("AccNo").value = data.AccountNumber;
            if (@Resources.Resource.CurLang= "Arb") {
                document.getElementById("AccName").value = data.AccountName;
            }
            else {
                document.getElementById("AccName").value = data.AccountName;
            }
        }
        else {
            document.getElementById("AccNo").value = '';
            document.getElementById("AccName").value = '';
          }

    }
   function GetSelectedCostCenter(data) {

            if (data.CostNumber != null && data.AccNo != '') {
                document.getElementById("CostCenterNumber").value = data.CostNumber;
                document.getElementById("CostCenterName").value = data.CostName;
            }
            else {
                document.getElementById("CostCenterNumber").value = '';
                document.getElementById("CostCenterName").value = '';
            }

    }
      var AccNumber = [];
    $.getJSON('@Url.Action("GetAcountFather", "MultiUse")', { id: 0 }, function (Data) {
        AccNumber = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].AccountName, value: Data[i].AccountNumber, stop: Data[i].StoppedAccount };
                AccNumber.push(r);
            }
    });
    var CostNumber = [];
    $.getJSON('@Url.Action("GetCostCenter", "MultiUse")', { id: 0 }, function (Data) {
        CostNumber = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].CostName, value: Data[i].CostNumber, stop: Data[i].StoppedCost };
                CostNumber.push(r);
            }
    });
    $(function () {
        $("#AccNo").autocomplete({
            source: AccNumber,
            select: function (event, ui) {
                document.getElementById("AccNo").value = ui.item.value;
                document.getElementById("AccName").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#CostCenterNumber").autocomplete({
            source: CostNumber,
            select: function (event, ui) {
                document.getElementById("CostCenterNumber").value = ui.item.value;
                document.getElementById("CostCenterName").value = ui.item.label;
            }
        });
    });
</script>

<div class="panel card-view">
    <div class="panel-heading" style="background-color: #34495E">
        <div class="pull-left">
            <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.ExpenseAnalysisReport</h6>
        </div>
        <div class="clearfix"></div>
    </div>
    <div class="panel-body">
        <div class="col-lg-12">
            <div class="form-group">
                <div class="col-lg-3">
                    <div class="form-group">
                        @Html.LabelFor(m => m.AccountLevelDropVMID)<span style="color:red">*</span>
                        @Html.DropDownListFor(m => m.AccountLevelDropVMID, new SelectList(Model.AccountLevelDropVM, "AccountLevel", "LevelName"), Resources.Resource.Level, new { @id = "AccountLevelID", @class = "form-control input-sml" })
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        @Html.LabelFor(m => m.FromDate)
                        @Html.TextBoxFor(model => model.FromDate, new { @id = "FromDate", @class = "form-control input-sml", @Value = Model.FromDate.ToString("dd/MM/yyyy") })
                        @Html.ValidationMessageFor(m => m.FromDate)
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        @Html.LabelFor(m => m.ToDate)
                        @Html.TextBoxFor(model => model.ToDate, new { @id = "ToDate", @class = "form-control input-sml", @Value = Model.ToDate.ToString("dd/MM/yyyy") })
                        @Html.ValidationMessageFor(m => m.ToDate)
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-group">
                        @Html.LabelFor(model => model.AccountTypeID)
                        @Html.DropDownListFor(m => m.AccountTypeID, new List<SelectListItem>
                                                         {
                                                          new SelectListItem{ Text=Resources.Resource.All, Value = "0",Selected=true },
                                                          new SelectListItem{ Text=Resources.Resource. ADMINISTRATIONEXPENSES , Value = "15",Selected=false },

                                                          new SelectListItem{ Text=Resources.Resource.SALESEXPENSES , Value = "14",Selected=false },
                                                           new SelectListItem{ Text=Resources.Resource.FINANCIALEXPENSES , Value = "16",Selected=false }
                   }, new { @id = "AccountTypeID", @class = "form-control input-sml" })
                        @Html.ValidationMessageFor(model => model.AccountTypeID, "", new { @class = "text-danger" })

                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <div class="form-group">
                <div class="col-lg-3" style="display : none">
                    @Html.Label(Resources.Resource.AccountNumber)
                    <div class="form-group  input-group">
                        @Html.TextBoxFor(m => m.AccNo, new { @id = "AccNo", @class = "form-control input-sml"})
                        <span class="input-group-btn">
                            <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnAccNo">
                                <i class="fa fa-search"></i>
                            </button>
                        </span>
                    </div>
                </div>
                <div class="col-md-3" style="display : none">
                    @Html.Label(Resources.Resource.Name)
                    <div class="form-group input-group">
                        @Html.TextBoxFor(m => m.AccName, new { @id = "AccName", @class = "form-control input-sml", @readonly = "readonly" })
                        <span class="input-group-btn">
                            <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearAccNo">
                                <i class="fa fa-minus-square"></i>
                            </button>
                        </span>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group " style="margin-top:25px">
                        @Html.CheckBoxFor(m => m.ShowZeroBalance, new { @id = "ShowZeroBalance" }) @Html.Label(Resources.Resource.ShowZeroBalance)
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-group " style="margin-top:25px">
                        @Html.CheckBoxFor(m => m.Detail, new { @id = "Detail" }) @Html.Label(Resources.Resource.TrialBalanceDetailed)
                    </div>
                </div>
                @*<div class="col-md-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.OrderBy)
                            @Html.DropDownListFor(m => m.OrderBy, new List<SelectListItem>
                                                             {
                                                              new SelectListItem{ Text=Resources.Resource.AccountNumber, Value = "0",Selected=true },
                                                              new SelectListItem{ Text=Resources.Resource.Descending, Value = "1",Selected=false },
                                                              new SelectListItem{ Text=Resources.Resource.Cumulative, Value = "2",Selected=false }
                                                             }, new { @id = "OrderBy", @class = "form-control input-sml" })
                            @Html.ValidationMessageFor(model => model.CostSearchType, "", new { @class = "text-danger" })
                        </div>
                    </div>*@
            </div>
        </div>
        @if (Model.WorkWithCostCenter)
        {
            <div class="col-lg-12">
                <div class="form-group">
                    <div class="col-lg-3">
                        @Html.CheckBoxFor(m => m.ByCostCenter, new { @id = "ByCostCenter", @class = "text-danger" })
                        @Html.Label(Resources.Resource.ByCostCenter, new { @class = "text-danger" })
                        <div class="form-group  input-group">
                            @Html.TextBoxFor(m => m.CostCenterNumber, new { @id = "CostCenterNumber", @class = "form-control input-sml" })
                            <span class="input-group-btn">
                                <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnCostCenter">
                                    <i class="fa fa-search"></i>
                                </button>
                            </span>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        @Html.LabelFor(m => m.CostCenterName)
                        <div class="form-group input-group">
                            @Html.TextBoxFor(m => m.CostCenterName, new { @id = "CostCenterName", @class = "form-control input-sml", @readonly = "readonly" })
                            <span class="input-group-btn">
                                <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearCostCenter">
                                    <i class="fa fa-minus-square"></i>
                                </button>
                            </span>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            @Html.CheckBoxFor(m => m.Partofthenumber, new { @id = "Partofthenumber", @class = "text-danger" })
                            @Html.LabelFor(m => m.Partofthenumber)
                            @Html.DropDownListFor(m => m.CostSearchType, new List<SelectListItem>
                                                             {
                                                              new SelectListItem{ Text=Resources.Resource. StartWith, Value = "1",Selected=false },
                                                               new SelectListItem{ Text=Resources.Resource. EndWith, Value = "2",Selected=false },
                                                              new SelectListItem{ Text=Resources.Resource.Contain, Value = "3",Selected=false }
                                                                }, new { @id = "CostSearchType", @class = "form-control input-sml" })
                            @Html.ValidationMessageFor(model => model.CostSearchType, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
        }
        <div class="col-lg-12">
            <button type="submit" class="btn  btn-anim btnSearch" id="reload"><i class=" fa fa-search"></i><span class="btn-text">@Resources.Resource.Search</span></button>
            @if (User.IsInRole("PrintRepExpenseAnalysisPrintReport") || User.IsInRole("CoOwner"))
            {
                <button type="submit" class="btn btn-warning btn-anim" id="PrintPDF"><i class=" fa fa-print"></i><span class="btn-text">@Resources.Resource.Print</span></button>
                <button type="submit" class="btn  btn-anim btnEmail" id="SendMail"><i class=" fa fa-print"></i><span class="btn-text">@Resources.Resource.SendMail</span></button>
            }
            <button type="submit" class="btn btn-anim btnFav" id="AddToFav"><i class="fa fa-star"></i><span class="btn-text">@Resources.Resource.AddToFav</span></button>
            <button type="button" class="btn btn-default btn-anim" id="CloseForm"><i class="fa fa-times"></i><span class="btn-text">@Resources.Resource.Close</span></button>
        </div>
        <div class="col-lg-12" style="margin-top : 10px">
            <div class="form-group">
                <table id="tdataTableTransAction" class="table table-hover table-bordered mb-0" width="100%">
                    <thead>
                        <tr>
                            <th>*</th>
                            <th>@Resources.Resource.AccountNumber</th>
                            <th>@Resources.Resource.AccountName</th>
                            <th>@Resources.Resource.DebitBalance</th>
                            <th>@Resources.Resource.CreditBalance</th>
                            <th>@Resources.Resource.DebitTransAction</th>
                            <th>@Resources.Resource.CreditTransAction</th>
                            <th>@Resources.Resource.NetDebit</th>
                            <th>@Resources.Resource.NetCredit</th>
                            <th>FixDebitBalance</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                    <tfoot>
                        <tr>
                            <th style="color:black !important">*</th>
                            <th style="color:black !important">@Resources.Resource.AccountNumber</th>
                            <th style="color:black !important">@Resources.Resource.AccountName</th>
                            <th style="color:black !important">@Resources.Resource.DebitBalance</th>
                            <th style="color:black !important">@Resources.Resource.CreditBalance</th>
                            <th style="color:black !important">@Resources.Resource.DebitTransAction</th>
                            <th style="color:black !important">@Resources.Resource.CreditTransAction</th>
                            <th style="color:black !important">@Resources.Resource.NetDebit</th>
                            <th style="color:black !important">@Resources.Resource.NetCredit</th>
                            <th style="color:black !important">FixDebitTransAction</th>
                            <th style="color:black !important">FixDebitTransAction</th>
                            <th style="color:black !important">FixDebitTransAction</th>
                            <th style="color:black !important">FixDebitTransAction</th>
                            <th style="color:black !important">FixDebitTransAction</th>
                            <th style="color:black !important">FixDebitTransAction</th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
    <div class="panel-footer">
    </div>
</div>


<div id="modal-container" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-content">
    </div>
</div>
@Html.CheckBoxFor(m => m.WorkWithCostCenter, new { @id = "WorkWithCostCenter", @style = "visibility : hidden;" })

@Html.TextBoxFor(m => m.TheDecimalPointForTheLocalCurrency, new { @id = "TheDecimalPointForTheLocalCurrency", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TheDecimalPointForTheForeignCurrency, new { @id = "TheDecimalPointForTheForeignCurrency", @style = "visibility : hidden;" })

@section scripts{
    @Scripts.Render("~/bundles/jqueryval");
<script>
    $(document).ready(function () {

        var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
        var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;


        function validatedate(dateString) {
            var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
            if (dateString.match(dateformat)) {
                var operator = dateString.split('/');
                var datepart = [];
                if (operator.length > 1) {
                    datepart = dateString.split('/');
                }
                var month = parseInt(datepart[1]);
                var day = parseInt(datepart[0]);
                var year = parseInt(datepart[2]);
                var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                if (month == 1 || month > 2) {
                    if (day > ListofDays[month - 1]) {
                        return false;
                    }
                } else if (month == 2) {
                    var leapYear = false;
                    if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                        leapYear = true;
                    }
                    if ((leapYear == false) && (day >= 29)) {
                        return false;
                    } else
                        if ((leapYear == true) && (day > 29)) {
                            return false;
                        }
                }
            }
            else {
                return false;
            }
            return true;
        }

        function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
            try {
                decimalCount = Math.abs(decimalCount);
                decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

                const negativeSign = amount < 0 ? "-" : "";

                let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
                let j = (i.length > 3) ? i.length % 3 : 0;

                return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
            } catch (e) {
                console.log(e)
            }
        };

        $(document).on('click', '#AddToFav', function () {

            bootbox.confirm({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                className: 'rubberBand animated',
                buttons: {
                    confirm: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                        className: 'btn-success'
                    },
                    cancel: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                        className: 'btn-danger'
                    }
                },
                callback: function (result) {
                    if (result) {
                        var dialog = bootbox.dialog({
                            title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                            message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Saving...</p>',
                            closeButton: false
                        });

                        var dataToSave = {

                            ScreenName: '@Resources.Resource.ExpenseAnalysisReport',
                            ScreenUrl: "/Report/ExpenseAnalysisReport",
                            ScreenType: 1

                        };

                        $.ajax({
                            type: "POST",
                            url: "/FavScreen/AddToFave",
                            data: JSON.stringify(dataToSave),
                            contentType: 'application/json',
                            success: function (data) {

                                dialog.modal('hide');
                                if (data.Code == 0) {
                                    toastr.error(data.Msg);
                                }
                                else if (data.Code == 1) {
                                    toastr.success(data.Msg);
                                }

                            },
                            error: function (data) {
                                dialog.modal('hide');
                                toastr.error(data);
                            }

                        });
                    }
                }
            });


        });

        $(document).on('click', '#SendMail', function () {
            var FromDate = $("#FromDate").val();
            var ToDate = $("#ToDate").val();
            var AccountLevelDropVMID = $("#AccountLevelID").val();
            var AccNo = $("#AccNo").val();
            var ShowZeroBalance = $("#ShowZeroBalance:checked").val();
            var vDetail = $("#Detail:checked").val();
            var CostCenterNumber = $("#CostCenterNumber").val();
            var ByCostCenter = $("#ByCostCenter:checked").val();
            var CostSearchType = $("#CostSearchType").val();
            var Partofthenumber = $("#Partofthenumber:checked").val();
            var OrderBy = 0;
            var AccountTypeID = $("#AccountTypeID").val();



            if (ShowZeroBalance) {
                ShowZeroBalance = 1
            }
            else {
                ShowZeroBalance = 0
            }

            if (vDetail) {
                vDetail = 1

            }
            else {
                vDetail = 0

            }
            console.log(Detail)
            if (ByCostCenter) {
                ByCostCenter = 1
            }
            else {
                ByCostCenter = 0
            }

            if (Partofthenumber) {
                Partofthenumber = 1
            }
            else {
                Partofthenumber = 0
            }


            if (AccNo == '' || AccNo == null) {
                AccNo = "0";
            }

            if (CostCenterNumber == '' || CostCenterNumber == null) {
                CostCenterNumber = "0";
            }

            if (CostSearchType == '' || CostSearchType == null) {
                CostSearchType = "0";
            }

            if (AccountTypeID == '' || AccountTypeID == null) {
                AccountTypeID = 0;
            }
            var words = FromDate.split('/');
            FromDate = words[0] + words[1] + words[2];
            words = ToDate.split('/');
            ToDate = words[0] + words[1] + words[2];




            window.open('/PDFReport/GetTrialExpenseAnlysisPDF/' + FromDate + "/" + ToDate + "/" + AccountLevelDropVMID + "/" + AccNo + "/" + ShowZeroBalance + "/" + vDetail + "/" + CostCenterNumber + "/" + ByCostCenter + "/" + CostSearchType + "/" + Partofthenumber + "/" + OrderBy + "/" + AccountTypeID + "/1", '_blank');

        });
        $(document).on('click', '#CloseForm', function () {
            window.location = "/Report/ReportDash";
        });

        $(document).on('click', '#PrintPDF', function () {
            var FromDate = $("#FromDate").val();
            var ToDate = $("#ToDate").val();
            var AccountLevelDropVMID = $("#AccountLevelID").val();
            var AccNo = $("#AccNo").val();
            var ShowZeroBalance = $("#ShowZeroBalance:checked").val();
            var vDetail = $("#Detail:checked").val();
            var CostCenterNumber = $("#CostCenterNumber").val();
            var ByCostCenter = $("#ByCostCenter:checked").val();
            var CostSearchType = $("#CostSearchType").val();
            var Partofthenumber = $("#Partofthenumber:checked").val();
            var OrderBy = 0;
            var AccountTypeID = $("#AccountTypeID").val();



            if (ShowZeroBalance) {
                ShowZeroBalance = 1
            }
            else {
                ShowZeroBalance = 0
            }

            if (vDetail) {
                vDetail = 1

            }
            else {
                vDetail = 0

            }
            console.log(Detail)
            if (ByCostCenter) {
                ByCostCenter = 1
            }
            else {
                ByCostCenter = 0
            }

            if (Partofthenumber) {
                Partofthenumber = 1
            }
            else {
                Partofthenumber = 0
            }


            if (AccNo == '' || AccNo == null) {
                AccNo = "0";
            }

            if (CostCenterNumber == '' || CostCenterNumber == null) {
                CostCenterNumber = "0";
            }

            if (CostSearchType == '' || CostSearchType == null) {
                CostSearchType = "0";
            }

            if (AccountTypeID == '' || AccountTypeID == null) {
                AccountTypeID = 0;
            }
            var words = FromDate.split('/');
            FromDate = words[0] + words[1] + words[2];
            words = ToDate.split('/');
            ToDate = words[0] + words[1] + words[2];




            window.open('/PDFReport/GetTrialExpenseAnlysisPDF/' + FromDate + "/" + ToDate + "/" + AccountLevelDropVMID + "/" + AccNo + "/" + ShowZeroBalance + "/" + vDetail + "/" + CostCenterNumber + "/" + ByCostCenter + "/" + CostSearchType + "/" + Partofthenumber + "/" + OrderBy + "/" + AccountTypeID + "/0", '_blank');

        });
        $("#FromDate").blur(function () {
            var dDate = document.getElementById("FromDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("FromDate").value = '01/01/' + new Date().getFullYear()
            }
        });
        $("#ToDate").blur(function () {
            var dDate = document.getElementById("ToDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("ToDate").value = '01/01/' + new Date().getFullYear()
            }
        });

        $("#FromDate").mask("99/99/9999");
        $("#ToDate").mask("99/99/9999");
        $("#FromDate").focus().select();
        $("#FromDate").keyup(function (event) {
            if (event.keyCode == 13)
                $("#ToDate").focus().select();
        });
        $("#ToDate").keyup(function (event) {
            if (event.keyCode == 13)
                $("#CostCenterNumber").focus().select();
        });
        $("#AccNo").focus().select();
        $("#AccNo").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#FromDate").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchFatherAccount/AccountNumber';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $("#CostCenterNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#FromDate").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchCostCenter/SearchFromCostCenter';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });

        $(document).on('click', '#reload', function () {

            var dDate = document.getElementById("FromDate").value;
            var dToDate = document.getElementById("ToDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else if (!validatedate(dToDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                tdataTableTransActionRef.ajax.reload();
                dialog.modal('hide');
            }
        });


        var tdataTableTransActionRef = $("#tdataTableTransAction").DataTable({
            "language": {
                "emptyTable": '@Resources.Resource.EmptyTable',
                "search": '@Resources.Resource.Search',
                "loadingRecords": '@Resources.Resource.LoadingRecords',
                "processing": '@Resources.Resource.Processing',
                "zeroRecords": '@Resources.Resource.ZeroRecords',
                "info": '@Resources.Resource.Info',
                "infoEmpty": '@Resources.Resource.InfoEmpty',
                "lengthMenu": '@Resources.Resource.LengthMenu',
                "infoFiltered": '@Resources.Resource.InfoFiltered',
                "paginate": {
                    "previous": '@Resources.Resource.Previous',
                    "next": '@Resources.Resource.Next',
                    "first": '@Resources.Resource.First',
                    "last": '@Resources.Resource.Last',
                },
                "aria": {
                    "sortAscending": '@Resources.Resource.SortAscending',
                    "sortDescending": '@Resources.Resource.SortDescending'
                }
            },
            "scrollY": "500px",
            "scrollX": true,
            "ordering": false,
            "autoWidth": false,
            "paging": false,
            "searching": false,
            "columnDefs": [
                { "width": "30px", "targets": 0, "className": "dt-center" },
                { "width": "70px", "targets": 1, "className": "dt-center" },
                { "targets": 2, "className": "dt-center" },
                { "width": "70px", "targets": 3, "className": "dt-center" },
                { "width": "100px", "targets": 4, "className": "dt-center" },
                { "width": "100px", "targets": 5, "className": "dt-center" },
                { "width": "100px", "targets": 6, "className": "dt-center" },
                { "width": "100px", "targets": 7, "className": "dt-center" },
                { "width": "100px", "targets": 8, "className": "dt-center" },
                {
                    "targets": [9],
                    "visible": false,
                    "searchable": false
                },
                {
                    "targets": [10],
                    "visible": false,
                    "searchable": false
                },
                {
                    "targets": [11],
                    "visible": false,
                    "searchable": false
                },
                {
                    "targets": [12],
                    "visible": false,
                    "searchable": false
                },
                {
                    "targets": [13],
                    "visible": false,
                    "searchable": false
                },
                {
                    "targets": [14],
                    "visible": false,
                    "searchable": false
                }
            ],

            dom: 'Bfrtip',
            buttons: [
                'excel'
            ],
            "decimal": ",",
            "thousands": ".",
            "scrollY": "250px",
            "scrollX": true,
            searching: false,
            paging: false,
            "ordering": false,
            fixedHeader: {
                header: true,
                footer: true
            },
            ajax: {
                "type": "POST",
                url: "/Report/GetTrialExpenseAnlysis",
                "data": function (d) {


                    d.FromDate = $("#FromDate").val();
                    d.ToDate = $("#ToDate").val();
                    d.AccountLevelDropVMID = $("#AccountLevelID").val();
                    d.AccNo = $("#AccNo").val();
                    d.ShowZeroBalance = $("#ShowZeroBalance:checked").val();
                    d.Detail = $("#Detail:checked").val();
                    d.CostCenterNumber = $("#CostCenterNumber").val();
                    d.ByCostCenter = $("#ByCostCenter:checked").val();
                    d.CostSearchType = $("#CostSearchType").val();
                    d.Partofthenumber = $("#Partofthenumber:checked").val();
                    d.AccountTypeID = $("#AccountTypeID").val();
                },
                dataSrc: ""
            },



            columns: [
                {
                    data: "MainAccount"

                },
                {

                    data: "AccountNumber",
                    render: function (data, type, r) {
                        if (r.IsMainAccount == 1) {
                            return "<i class='text-danger'><strong>" + data + "</strong></i>";
                        }
                        else {
                            return "<a   class='text-primary' target='_blank'  href='/Report/AccountStatementTrial/" + data + "/" + r.TempCostID + "/" + r.TempCostType + " '><strong>" + data + "</strong></a>";
                        }

                    }
                },
                {
                    data: "Name"
                },
                {
                    data: "DebitBalance",
                    render: function (data, type, r) {
                        if (data > 0) {
                            return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                        }
                        else {
                            return '';
                        }

                    }

                },
                {
                    data: "CreditBalance",
                    render: function (data, type, r) {
                        if (data > 0) {
                            return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                        }
                        else {
                            return '';
                        }

                    }

                },
                {
                    data: "DebitTransAction",
                    render: function (data, type, r) {
                        if (data > 0) {

                            return (formatMoney(data, TheDecimalPointForTheLocalCurrency))

                        }
                        else {
                            return '';
                        }

                    }

                },

                {
                    data: "CreditTransAction",
                    render: function (data, type, r) {
                        if (data > 0) {
                            return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                        }
                        else {
                            return '';
                        }

                    }

                },

                {
                    data: "NetDebit",
                    render: function (data, type, r) {
                        if (data > 0) {
                            return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                        }
                        else {
                            return '';
                        }

                    }

                },
                {
                    data: "NetCredit",
                    render: function (data, type, r) {
                        if (data > 0) {
                            return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                        }
                        else {
                            return '';
                        }

                    }

                },
                {
                    data: "nDebitBalance"

                }
                ,
                {
                    data: "nCreditBalance"

                }
                ,
                {
                    data: "nDebitTransAction"

                }
                ,
                {
                    data: "nCreditTransAction"

                }
                ,
                {
                    data: "nNetDebit"

                }
                ,
                {
                    data: "nNetCredit"

                }

            ],
            "footerCallback": function (row, data, start, end, display) {
                var api = this.api(), data;
                intVal = function (i) {
                    return typeof i === 'string' ?
                        i.replace(/[, Rs]|(\.\d{2})/g, "") * 1 :
                        typeof i === 'number' ?
                            i : 0;
                },
                    total3 = api
                        .column(9)
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0),

                    total4 = api
                        .column(10)
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0),
                    total5 = api
                        .column(11)
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0),
                    total6 = api
                        .column(12)
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0),
                    total7 = api
                        .column(13)
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0),
                    total8 = api
                        .column(14)
                        .data()
                        .reduce(function (a, b) {
                            return intVal(a) + intVal(b);
                        }, 0);









                $(api.column(0).footer()).html('');
                $(api.column(1).footer()).html('');
                $(api.column(2).footer()).html('');



                $(api.column(3).footer()).html(formatMoney(total3, TheDecimalPointForTheLocalCurrency));
                $(api.column(4).footer()).html(formatMoney(total4, TheDecimalPointForTheLocalCurrency));
                $(api.column(5).footer()).html(formatMoney(total5, TheDecimalPointForTheLocalCurrency));
                $(api.column(6).footer()).html(formatMoney(total6, TheDecimalPointForTheLocalCurrency));
                $(api.column(7).footer()).html(formatMoney(total7, TheDecimalPointForTheLocalCurrency));
                $(api.column(8).footer()).html(formatMoney(total8, TheDecimalPointForTheLocalCurrency));
                $(api.column(9).footer()).html('');
                $(api.column(10).footer()).html('');
                $(api.column(11).footer()).html('');
                $(api.column(12).footer()).html('');
                $(api.column(13).footer()).html('');
                $(api.column(14).footer()).html('');




            }


        });


        $('#tdataTableAccount').on('click', '.js-delete', function (e) {
            $('#modal-container').removeData('bs.modal');
            e.preventDefault();
            $(this).removeData('bs.modal');
            $(this).attr('data-target', '#modal-container');
            $(this).attr('data-toggle', 'modal');

        });
        $('#tdataTableAccount').on('click', '.js-modify', function (e) {
            $('#modal-container').removeData('bs.modal');
            e.preventDefault();
            $(this).attr('data-target', '#modal-container');
            $(this).attr('data-toggle', 'modal');
        });
        $('#tdataTableAccount').on('click', '.js-reason', function (e) {
            var d = e.target.getAttribute("data-content");
            bootbox.alert(d);
        });
        $('#js-addnew').on('click', function (e) {
            $('#modal-container').removeData('bs.modal');
            e.preventDefault();
            $(this).attr('data-target', '#modal-container');
            $(this).attr('data-toggle', 'modal');
        });
        $('#tdataTableAccount').on('click', '.modal-close-btn', function () {
            $('#modal-container').modal('hide');
        });
        $('#modal-container').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal');
            console.log('modal-containe');
        });
        $('#CancelModal').on('click', function () {
            return false;
        });
        $('#BtnAccNo').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchFatherAccount/AccountNumber';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnCostCenter').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchCostCenter/SearchFromCostCenter';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            });

        });
        $('#BtnClearAccNo').on('click', function () {
            document.getElementById("AccNo").value = '';
            document.getElementById("AccName").value = '';
        });
        $('#BtnClearCostCenter').on('click', function () {
            document.getElementById("CostCenterNumber").value = '';
            document.getElementById("CostCenterName").value = '';
        });
        $("#AccNo").blur(function () {
            var AccountNumber = document.getElementById("AccNo").value;
            if (AccountNumber == '') {
                document.getElementById("AccName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckAcountAcc", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("AccNo").value = '';
                            document.getElementById("AccName").value = '';
                            $("#AccNo").focus();
                        }
                        else {
                            document.getElementById("AccName").value = Data.AccountName;

                        }
                    });
                }
            }
        });
        $("#CostCenterNumber").blur(function () {
            var CostNumber = document.getElementById("CostCenterNumber").value;
            if (CostNumber == '') {
                document.getElementById("CostCenterName").value = '';
            }
            else {
                if (CostNumber != null && CostNumber != '') {
                    $.getJSON('@Url.Action("GetCostCenterInfo", "CostCenter")', { id: CostNumber }, function (Data) {
                        if (Data != "") {
                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                document.getElementById("CostCenterName").value = Data.ArabicName;
                            }
                            else {
                                document.getElementById("CostCenterName").value = Data.EnglishName;
                            }
                        }
                        else {
                            document.getElementById("CostCenterName").value = "";
                        }
                    });
                }
            }
        });

    });



</script>

}



