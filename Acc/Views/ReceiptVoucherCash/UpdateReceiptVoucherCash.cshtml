@model Acc.ViewModels.TransactionFixedVM
@{
    ViewBag.Title = @Resources.Resource.Update;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .panel-body {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-footer {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-title {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }
</style>
<link href="~/Content/jquery-ui.css" rel="stylesheet" />
<script>
    function GetSelectedDataReceiptVoucher(data) {
        if (data.AccountNumber != null && data.AccountNumber != '') {
            document.getElementById("ToAccountNumber").value = data.AccountNumber;
            document.getElementById("AccountCreditName").value = data.AccountName;
            var SelectedValue = $("#ToAccountNumber").val();
            if (SelectedValue != null && SelectedValue != '') {
                $.getJSON('@Url.Action("GetSaleManID", "ChartOfAccount")', { id: SelectedValue }, function (Data) {
                if (Data == 0) {
                  document.getElementById("SaleManNo").value = "";
                }
                else {
                  document.getElementById("SaleManNo").value = Data;
                }

                });
            }
            else {
                document.getElementById("SaleManNo").value = "";
            }
        }
        else {
            document.getElementById("ToAccountNumber").value = '';
            document.getElementById("AccountCreditName").value = '';
            document.getElementById("SaleManNo").value = "";
        }

    }
    function GetSelectedFund(data) {
        if (data.AccountNumber != null && data.AccountNumber != '') {
            document.getElementById("FromAccountNumber").value = data.AccountNumber;
            document.getElementById("AccountDebitName").value = data.AccountName;
        }
        else {
            document.getElementById("FromAccountNumber").value = '';
            document.getElementById("AccountDebitName").value = '';
        }
    }
    function GetSelectedDataFromCostCenter(data) {
        if (data.CostNumber != null && data.CostNumber != '') {
            document.getElementById("FromCostCenter").value = data.CostNumber;
            document.getElementById("CostCenterDebitName").value = data.CostName;
        }
        else {
            document.getElementById("FromCostCenter").value = '';
            document.getElementById("CostCenterDebitName").value = '';
        }
    }
    function GetSelectedDataToCostCenter(data) {
        if (data.CostNumber != null && data.CostNumber != '') {
            document.getElementById("ToCostCenter").value = data.CostNumber;
            document.getElementById("CostCenterCreditName").value = data.CostName;
        }
        else {
            document.getElementById("ToCostCenter").value = '';
            document.getElementById("CostCenterCreditName").value = '';
        }
    }
    var ToAccNumber = [];
    $.getJSON('@Url.Action("GetAcountAcc", "MultiUse")', { id: 0 }, function (Data) {
        ToAccNumber = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].AccountName, value: Data[i].AccountNumber, stop: Data[i].StoppedAccount };
                ToAccNumber.push(r);
            }
    });
    var FromAccNumber = [];
    $.getJSON('@Url.Action("GetDefinitionFund", "MultiUse")', { id: 0 }, function (Data) {
        FromAccNumber = [];
        for (var i = 0, len = Data.length; i < len; i++) {
            var r = { label: Data[i].AccountName, value: Data[i].AccountNumber, stop: Data[i].StoppedAccount };
            FromAccNumber.push(r);
        }
    });
    var CostCenter = [];
    $.getJSON('@Url.Action("GetCostCenter", "MultiUse")', { id: 0 }, function (Data) {
        CostCenter = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].CostName, value: Data[i].CostNumber, stop: Data[i].StoppedCost };
                CostCenter.push(r);
            }
    });
    $(function () {
        $("#ToAccountNumber").autocomplete({
            source: ToAccNumber,
            select: function (event, ui) {
                document.getElementById("ToAccountNumber").value = ui.item.value;
                document.getElementById("AccountCreditName").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#FromAccountNumber").autocomplete({
            source: FromAccNumber,
            select: function (event, ui) {
                document.getElementById("FromAccountNumber").value = ui.item.value;
                document.getElementById("AccountDebitName").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#ToCostCenter").autocomplete({
            source: CostCenter,
            select: function (event, ui) {
                document.getElementById("ToCostCenter").value = ui.item.value;
                document.getElementById("CostCenterCreditName").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#FromCostCenter").autocomplete({
            source: CostCenter,
            select: function (event, ui) {
                document.getElementById("FromCostCenter").value = ui.item.value;
                document.getElementById("CostCenterDebitName").value = ui.item.label;
            }
        });
    });

</script>
<div style="padding-top:20px;">
    <div class="panel card-view">
        <div class="panel-heading" style="background-color: #34495E">
            <div class="pull-left">
                <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.Update - @Resources.Resource.ReceiptVoucherCash</h6>
            </div>
            <div class="clearfix"></div>
        </div>
        <div class="panel-body">
            <div class="col-lg-12">
                <div class="col-lg-3">
                    @Html.LabelFor(m => m.CompanyTransactionKindID)
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.CompanyTransactionKindName, new { @id = "CompanyTransactionKindName", @class = "form-control input-sml", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        @Html.LabelFor(m => m.CurrencyID)
                        @if (Resources.Resource.CurLang == "Arb")
                        {
                            @Html.DropDownListFor(m => m.CurrencyID, new SelectList(Model.Currency, "CurrencyID", "ArabicName"), new { @id = "CurrencyID", @class = "form-control input-sml" })
                        }
                        else
                        {
                            @Html.DropDownListFor(m => m.CurrencyID, new SelectList(Model.Currency, "CurrencyID", "EnglishName"), new { @id = "CurrencyID", @class = "form-control input-sml" })
                        }
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.LabelFor(m => m.CurrencyNewValue)
                        @Html.ValidationMessageFor(m => m.CurrencyNewValue)
                        @Html.TextBoxFor(m => m.CurrencyNewValue, new { @id = "CurrencyNewValue", @class = "form-control input-sml", @readonly = "@readonly" })
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.LabelFor(m => m.Header.VoucherNumber)
                        @Html.TextBoxFor(m => m.Header.VoucherNumber, new { @id = "VoucherNumber", @class = "form-control input-sml", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.LabelFor(m => m.Header.VoucherDate)
                        @Html.TextBoxFor(model => model.Header.VoucherDate, new { @id = "VoucherDate", @class = "form-control input-sml", @Value = Model.Header.VoucherDate.ToString("dd/MM/yyyy"), data_val = "false" })
                        @Html.ValidationMessageFor(m => m.Header.VoucherDate)
                    </div>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="col-lg-3">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.PaidAccount) <span style="color:red">*</span>
                        <div class="form-group  input-group">
                            @Html.TextBoxFor(m => m.TransactionCredit.AccountNumber, new { @id = "ToAccountNumber", @class = "form-control input-sml" })
                            <span class="input-group-btn">
                                <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnToAccount">
                                    <i class="fa fa-search"></i>
                                </button>
                            </span>
                            @Html.ValidationMessageFor(m => m.TransactionCredit.AccountNumber)
                        </div>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.AccountName)
                        <div class="form-group input-group">
                            @Html.TextBoxFor(m => m.AccountCreditName, new { @id = "AccountCreditName", @class = "form-control input-sml", @readonly = "readonly" })
                            <span class="input-group-btn">
                                <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearToAccount">
                                    <i class="fa fa-minus-square"></i>
                                </button>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.FundAccountName) <span style="color:red">*</span>
                        <div class="form-group input-group">
                            @Html.TextBoxFor(m => m.TransactionDebit.AccountNumber, new { @id = "FromAccountNumber", @class = "form-control input-sml" })
                            <span class="input-group-btn">
                                <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnFromAccount">
                                    <i class="fa fa-search"></i>
                                </button>
                            </span>
                            @Html.ValidationMessageFor(m => m.TransactionDebit.AccountNumber)
                        </div>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.AccountName)
                        <div class="form-group input-group">
                            @Html.TextBoxFor(m => m.AccountDebitName, new { @id = "AccountDebitName", @class = "form-control input-sml", @readonly = "readonly" })
                            <span class="input-group-btn">
                                <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearFromAccount">
                                    <i class="fa fa-minus-square"></i>
                                </button>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="col-lg-3">
                    <div class="form-group">
                        @Html.LabelFor(m => m.SaleManNo)
                        <div class="form-group  input-group">
                            @Html.DropDownListFor(m => m.SaleManNo, new SelectList(Model.SaleMan, "SalesID", "SalesName"), Resources.Resource.SalesMan, new { @id = "SaleManNo", @class = "form-control input-sml" })
                            <span class="input-group-btn">
                                <a class="btn btn-primary btn-icon-anim btn-square js-Pop" id="AddNew" href="/Sale/AddNew">
                                    <i class="fa fa-plus" style="margin-top : 12px"></i>
                                </a>
                            </span>
                        </div>
                    </div>
                </div>
                <div class="col-lg-9">
                    @Html.LabelFor(m => m.Header.Note)
                    @Html.TextBoxFor(m => m.Header.Note, new { @id = "Note", @class = "form-control input-sml" })
                    @Html.ValidationMessageFor(m => m.Header.Note)
                </div>
            </div>
            @if (Model.WorkWithCostCenter)
            {
                <div class="col-lg-12">
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.PaidCostCenter) <span style="color:red">*</span>
                            <div class="form-group input-group">
                                @Html.TextBoxFor(m => m.TransactionCredit.CostCenter, new { @id = "ToCostCenter", @class = "form-control input-sml" })
                                <span class="input-group-btn">
                                    <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnToCostCenter">
                                        <i class="fa fa-search"></i>
                                    </button>
                                </span>
                                @Html.ValidationMessageFor(m => m.TransactionDebit.CostCenter)
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.CostCenterName)
                            <div class="form-group input-group">
                                @Html.TextBoxFor(m => m.CostCenterCreditName, new { @id = "CostCenterCreditName", @class = "form-control input-sml", @readonly = "readonly" })
                                <span class="input-group-btn">
                                    <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearToCostCenter">
                                        <i class="fa fa-minus-square"></i>
                                    </button>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.FundCostName) <span style="color:red">*</span>
                            <div class="form-group input-group">
                                @Html.TextBoxFor(m => m.TransactionDebit.CostCenter, new { @id = "FromCostCenter", @class = "form-control input-sml" })
                                <span class="input-group-btn">
                                    <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnFromCostCenter">
                                        <i class="fa fa-search"></i>
                                    </button>
                                </span>
                                @Html.ValidationMessageFor(m => m.TransactionDebit.CostCenter)
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.CostCenterName)
                            <div class="form-group input-group">
                                @Html.TextBoxFor(m => m.CostCenterDebitName, new { @id = "CostCenterDebitName", @class = "form-control input-sml", @readonly = "readonly" })
                                <span class="input-group-btn">
                                    <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearFromCostCenter">
                                        <i class="fa fa-minus-square"></i>
                                    </button>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <div class="col-lg-12">
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.LabelFor(m => m.TotalAmount) <span style="color:red">*</span>
                        @Html.TextBoxFor(m => m.Amount, new { @id = "Amount", @class = "form-control input-sml", @type = "Number", @min = "0" })
                        @Html.ValidationMessageFor(m => m.Amount)
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.LabelFor(m => m.TotalForeign)
                        @Html.TextBoxFor(m => m.sForeignAmount, new { @id = "sForeignAmount", @class = "form-control input-sml", @type = "Number", @min = "0", @readonly = "readonly" })
                    </div>
                </div>
            </div>
        </div>
        <div class="panel-footer">
            <button type="button" class="btn btn-success btn-anim" id="UpdateReceiptVoucherCash"><i class="fa fa-edit"></i><span class="btn-text">@Resources.Resource.Update</span> </button>
            <button type="button" class="btn btn-default btn-anim" id="Close"><i class="fa fa-times"></i><span class="btn-text">@Resources.Resource.Close</span></button>
        </div>
    </div>
</div>
<div id="modal-container" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-content">
    </div>
</div>
@Html.CheckBoxFor(m => m.WorkWithCostCenter, new { @id = "WorkWithCostCenter", @style = "visibility : hidden;" })
@Html.HiddenFor(m => m.Header.CompanyYear, new { @id = "CompanyYear", @style = "visibility : hidden;" })
@Html.HiddenFor(m => m.CompanyTransactionKindID, new { @id = "CompanyTransactionKindID", @style = "visibility : hidden;" })
@Html.HiddenFor(m => m.Header.VHI, new { @id = "VHI", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TheDecimalPointForTheLocalCurrency, new { @id = "TheDecimalPointForTheLocalCurrency", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TheDecimalPointForTheForeignCurrency, new { @id = "TheDecimalPointForTheForeignCurrency", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.ForeignAmount, new { @id = "ForeignAmount", @class = "form-control input-sml", @type = "Number", @min = "0", @readonly = "readonly", @style = "visibility : hidden;" })
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

<script>
    $(document).ready(function () {
        var WorkWithCostCenter = document.getElementById("WorkWithCostCenter").checked;
        var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
        var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;
        function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
            try {
                decimalCount = Math.abs(decimalCount);
                decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

                const negativeSign = amount < 0 ? "-" : "";

                let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
                let j = (i.length > 3) ? i.length % 3 : 0;

                return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
            } catch (e) {
                console.log(e)
            }
        };
        function validatedate(dateString) {
            var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
            if (dateString.match(dateformat)) {
                var operator = dateString.split('/');
                var datepart = [];
                if (operator.length > 1) {
                    datepart = dateString.split('/');
                }
                var month = parseInt(datepart[1]);
                var day = parseInt(datepart[0]);
                var year = parseInt(datepart[2]);
                var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                if (month == 1 || month > 2) {
                    if (day > ListofDays[month - 1]) {
                        return false;
                    }
                } else if (month == 2) {
                    var leapYear = false;
                    if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                        leapYear = true;
                    }
                    if ((leapYear == false) && (day >= 29)) {
                        return false;
                    } else
                        if ((leapYear == true) && (day > 29)) {
                            return false;
                        }
                }
            }
            else {
                return false;
            }
            return true;
        }
        document.getElementById("sForeignAmount").value = formatMoney(document.getElementById("ForeignAmount").value, TheDecimalPointForTheForeignCurrency);
        $(document).on('click', '#Close', function () {
            window.location = "/ReceiptVoucherCash/Index";
        });
        var SelectedValue = $("#CompanyTransactionKindID").val();
        if (SelectedValue != null && SelectedValue != '') {
            $.getJSON('@Url.Action("CheckIfMonthlySerial", "CompanyTransactionKind")', { id: SelectedValue }, function (Data) {
                if (Data != 0) {
                    document.getElementById('VoucherDate').readOnly = true;
                    $("#Note").focus().select();
                } else {
                    document.getElementById('VoucherDate').readOnly = false;
                    $("#VoucherDate").focus().select();
                };
            });
        }
        else {
        }
        $("#VoucherDate").mask("99/99/9999");
        $(document).on('click', '#UpdateReceiptVoucherCash', function () {
            var dDate = document.getElementById("VoucherDate").value;
            var CompanyYear = document.getElementById("CompanyYear").value;
            var d1 = dDate.split("/");
            var From = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);
            if (d1[2] > CompanyYear || d1[2] < CompanyYear) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.DateIsNotWithinThisYear</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                if (!validatedate(dDate) && dDate != null && dDate != '') {
                    bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                }
                else if (dDate != null && dDate != '') {
                    var dd = parseInt(dDate.substring(0, 2));
                    if (dd < 10) {
                        dd = '0' + dd;
                    }
                    var mm = parseInt(dDate.substring(3, 5));
                    if (mm < 10) {
                        mm = '0' + mm;
                    }
                    var yyyy = parseInt(dDate.substring(6, 10));
                    dDate = mm + '/' + dd + '/' + yyyy;
                    $.getJSON('@Url.Action("CheckDateIsFreezeDate", "FreezeTransaction")', { id: dDate }, function (Data) {
                        if (Data >= 1) {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThisDateIsFrozen</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                        else {
                            if ($("#FromAccountNumber").val() == '') {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if ($("#ToAccountNumber").val() == '') {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if ($("#FromCostCenter").val() == '') {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if ($("#ToCostCenter").val() == '') {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if ($("#Amount").val() == '' || $("#Amount").val() == 0) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else {
                                bootbox.confirm({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        confirm: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                            className: 'btn-success'
                                        },
                                        cancel: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                            className: 'btn-danger'
                                        }
                                    },
                                    callback: function (result) {
                                        if (result) {
                                            var dialog = bootbox.dialog({
                                                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Updating...</p>',
                                                closeButton: false
                                            });
                                            var FromCostCenter = "";
                                            var ToCostCenter = "";

                                            if (WorkWithCostCenter) {
                                                FromCostCenter = $("#FromCostCenter").val();
                                                ToCostCenter = $("#ToCostCenter").val();
                                            }
                                            var Header = {
                                                VoucherNumber: $("#VoucherNumber").val(),
                                                VHI: $("#VHI").val(),
                                                VoucherDate: $("#VoucherDate").val(),
                                                Note: $("#Note").val(),
                                                ConversionFactor: $("#CurrencyNewValue").val(),
                                                CompanyYear: $("#CompanyYear").val()
                                            };
                                            var SaleManNo = "";
                                            if ($("#SaleManNo").val() == "") {
                                                SaleManNo = 0;
                                            }
                                            else {
                                                SaleManNo = $("#SaleManNo").val();
                                            }

                                            var DataToUpdate = {
                                                Header: Header,
                                                CompanyTransactionKindID: $("#CompanyTransactionKindID").val(),
                                                FromAccountNumber: $("#FromAccountNumber").val(),
                                                ToAccountNumber: $("#ToAccountNumber").val(),
                                                FromCostCenter: FromCostCenter,
                                                ToCostCenter: ToCostCenter,
                                                Amount: $("#Amount").val(),
                                                CurrencyID: $("#CurrencyID").val(),
                                                SaleManNo: SaleManNo
                                            }

                                            $.ajax({
                                                type: "POST",
                                                url: "/ReceiptVoucherCash/UpdateReceiptVoucherCash",
                                                data: JSON.stringify(DataToUpdate),
                                                contentType: 'application/json',
                                                success: function (data) {

                                                    dialog.modal('hide');
                                                    if (data.Code == 0) {
                                                        toastr.error(data.Msg);
                                                    }
                                                    else if (data.Code == 1) {

                                                        $('#modal-container').modal('hide');
                                                        toastr.success(data.Msg);
                                                        $('#modal-container').modal('hide');


                                                        bootbox.confirm({
                                                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.DoYouWantToUploadAttachments</h6>',
                                                            className: 'rubberBand animated',
                                                            buttons: {
                                                                confirm: {
                                                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                                                    className: 'btn-success'
                                                                },
                                                                cancel: {
                                                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                                                    className: 'btn-danger'
                                                                }
                                                            },
                                                            callback: function (result) {
                                                                if (result) {
                                                                    window.open('/ReceiptVoucherCash/ShowAttach/@Model.Header.CompanyYear/@Model.Header.VoucherNumber/@Model.Header.CompanyTransactionKindNo/@Model.Header.TransactionKindNo', '_blank');

                                                                    bootbox.confirm({
                                                                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.DoYouWantToPrint</h6>',
                                                                        className: 'rubberBand animated',
                                                                        buttons: {
                                                                            confirm: {
                                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                                                                className: 'btn-success'
                                                                            },
                                                                            cancel: {
                                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                                                                className: 'btn-danger'
                                                                            }
                                                                        },
                                                                        callback: function (result) {
                                                                            if (result) {
                                                                                window.open('/PDFReport/DetailReceiptVoucherCashPDF/@Model.Header.VoucherNumber/@Model.Header.CompanyTransactionKindNo/@Model.Header.TransactionKindNo/@Model.Header.CompanyYear', '_blank');
                                                                                window.location = "/ReceiptVoucherCash/Index";


                                                                            }
                                                                            else {
                                                                                window.location = "/ReceiptVoucherCash/Index";

                                                                            }
                                                                        }
                                                                    });

                                                                }
                                                                else {
                                                                    bootbox.confirm({
                                                                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.DoYouWantToPrint</h6>',
                                                                        className: 'rubberBand animated',
                                                                        buttons: {
                                                                            confirm: {
                                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                                                                className: 'btn-success'
                                                                            },
                                                                            cancel: {
                                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                                                                className: 'btn-danger'
                                                                            }
                                                                        },
                                                                        callback: function (result) {
                                                                            if (result) {
                                                                                window.open('/PDFReport/DetailReceiptVoucherCashPDF/@Model.Header.VoucherNumber/@Model.Header.CompanyTransactionKindNo/@Model.Header.TransactionKindNo/@Model.Header.CompanyYear', '_blank');
                                                                                window.location = "/ReceiptVoucherCash/Index";


                                                                            }
                                                                            else {

                                                                                window.location = "/ReceiptVoucherCash/Index";

                                                                            }
                                                                        }
                                                                    });

                                                                }

                                                            }
                                                        });

                                                    }
                                                },
                                                error: function (data) {
                                                    dialog.modal('hide');
                                                    toastr.error(data);
                                                    bootbox.alert(data.Msg);
                                                }

                                            });
                                        }
                                    }
                                });
                            }
                        };
                    });
                }
            }
        });
        $('#BtnToAccount').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchAcc/ReceiptVoucherAccountNumber';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnFromAccount').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchFundAccountNumber/FromAccountNumber';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnFromCostCenter').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchCostCenter/FromCostCenter';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnToCostCenter').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchCostCenter/ToCostCenter';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnClearToAccount').on('click', function () {
            document.getElementById("ToAccountNumber").value = '';
            document.getElementById("AccountCreditName").value = '';
        });
        $('#BtnClearFromAccount').on('click', function () {
            document.getElementById("FromAccountNumber").value = '';
            document.getElementById("AccountDebitName").value = '';
        });
        $('#BtnClearFromCostCenter').on('click', function () {
            document.getElementById("FromCostCenter").value = '';
            document.getElementById("CostCenterDebitName").value = '';
        });
        $('#BtnClearToCostCenter').on('click', function () {
            document.getElementById("ToCostCenter").value = '';
            document.getElementById("CostCenterCreditName").value = '';
        });
        $('#CurrencyID').change(function () {
            var SelectedCurrency = $("#CurrencyID").val();
            if (SelectedCurrency != null && SelectedCurrency != '') {
                $.getJSON('@Url.Action("GetCurrencyValueById", "CurrencyValue")', { id: SelectedCurrency }, function (Data) {
                    if (Data != null) {
                        document.getElementById("CurrencyNewValue").value = (Data).toFixed(3);
                        if (Data == 0) {
                            Data = 1;
                        };
                        if (Data == 1) {
                            document.getElementById("CurrencyNewValue").value = (0).toFixed(3);
                            document.getElementById("ForeignAmount").value = (0).toFixed(3);
                        }
                        else {
                            document.getElementById("ForeignAmount").value = (document.getElementById("Amount").value / Data).toFixed(3);
                        }
                    } else {
                        document.getElementById("CurrencyNewValue").value = (0).toFixed(3);
                        document.getElementById("ForeignAmount").value = (0).toFixed(3);
                    };
                });
            } else {
            }
        });
        $("#Amount").blur(function () {
            if (document.getElementById("Amount").value == '') {
                document.getElementById("Amount").value = 0;
            }
            if (document.getElementById("Amount").value < 0) {
                document.getElementById("Amount").value = 0;
                $("#Amount").focus().select();
            }
            var CurrencyAmount = document.getElementById("CurrencyNewValue").value;
            if (CurrencyAmount == 0) {
                CurrencyAmount = 1
            };
            if (CurrencyAmount == 1) {
                $("#ForeignAmount").val((parseFloat(0)).toFixed(TheDecimalPointForTheForeignCurrency));
                $("#Amount").val((parseFloat($("#Amount").val())).toFixed(TheDecimalPointForTheLocalCurrency));
                $("#sForeignAmount").val((parseFloat(0)).toFixed(TheDecimalPointForTheForeignCurrency));
            }
            else {
                $("#ForeignAmount").val((parseFloat($("#Amount").val() / parseFloat($("#CurrencyNewValue").val()))).toFixed(TheDecimalPointForTheForeignCurrency));
                $("#sForeignAmount").val(formatMoney(parseFloat($("#Amount").val() / parseFloat($("#CurrencyNewValue").val())), TheDecimalPointForTheForeignCurrency));
                $("#Amount").val((parseFloat($("#Amount").val())).toFixed(TheDecimalPointForTheLocalCurrency));
            };

        });
        $(document).on('click', '#SaveNewSale', function () {
            if ($("#SalesName").val() == '') {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                bootbox.confirm({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        confirm: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                            className: 'btn-success'
                        },
                        cancel: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            var dialog = bootbox.dialog({
                                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Saving...</p>',
                                closeButton: false
                            });
                            var dataToSave = {

                                SalesID: $("#SalesID").val(),
                                SalesName: $("#SalesName").val()

                            };
                            $.ajax({
                                type: "POST",
                                url: "/Sale/SaveSale",
                                data: JSON.stringify(dataToSave),
                                contentType: 'application/json',
                                success: function (data) {

                                    dialog.modal('hide');
                                    if (data.Code == 0) {
                                        toastr.error(data.Msg);
                                        bootbox.alert(data.Msg);
                                    }
                                    else if (data.Code == 1) {
                                        $('#modal-container').modal('hide');
                                        toastr.success(data.Msg);
                                        bootbox.alert(data.Msg);
                                        document.getElementById("SalesID").value = data.LastID;
                                        document.getElementById("SalesName").value = '';

                                        $("#SalesName").focus().select();


                                        var SaleManNo = $('#SaleManNo');
                                        SaleManNo.empty();

                                        $.ajax({
                                            method: "GET",
                                            url: "/Sale/GetAllSale",


                                            success: function (data) {
                                                SaleManNo.append($('<option/>', {
                                                    value: 0,
                                                    text: '@Resources.Resource.SalesMan'
                                                }));


                                                $.each(data, function (id, region) {
                                                    SaleManNo.append($('<option/>', {
                                                        value: region.SalesID,
                                                        text: region.SalesName
                                                    }));
                                                });

                                                dialog.modal('hide');

                                            },
                                            error: function (xhr, AJAXOptions, thrownError) {
                                                dialog.modal('hide');
                                                alert('Failed to retrieve .');
                                            }
                                        });


                                    }

                                },
                                error: function (data) {
                                    dialog.modal('hide');
                                    toastr.error(data);
                                    bootbox.alert(data.Msg);
                                }
                            });
                        }
                    }
                });
            }
        });
        $('#tdataTable').on('click', '.modal-close-btn', function () {
            $('#modal-container').modal('hide');
        });
        $(document).on('click', '.js-Pop', function (e) {
            $('#modal-container').removeData('bs.modal');
            e.preventDefault();
            $(this).attr('data-target', '#modal-container');
            $(this).attr('data-toggle', 'modal');

        });
        $('#modal-container').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal');
        });
        $('#CancelModal').on('click', function () {

            return false;
        });
        $("#VoucherDate").blur(function () {
            var dDate = document.getElementById("VoucherDate").value;
            var CompanyYear = document.getElementById("CompanyYear").value;
            var d1 = dDate.split("/");
            var From = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);
            if (d1[2] > CompanyYear || d1[2] < CompanyYear) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.DateIsNotWithinThisYear</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                if (dDate != null && dDate != '') {
                    if (!validatedate(dDate)) {
                        bootbox.alert({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                ok: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                    className: 'btn-primary'
                                }
                            }
                        });
                    }
                    else {
                        var dd = parseInt(dDate.substring(0, 2));
                        if (dd < 10) {
                            dd = '0' + dd;
                        }
                        var mm = parseInt(dDate.substring(3, 5));
                        if (mm < 10) {
                            mm = '0' + mm;
                        }
                        var yyyy = parseInt(dDate.substring(6, 10));
                        dDate = mm + '/' + dd + '/' + yyyy;
                        $.getJSON('@Url.Action("CheckDateIsFreezeDate", "FreezeTransaction")', { id: dDate }, function (Data) {
                            if (Data >= 1) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThisDateIsFrozen</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                        });
                    }
                }
                else {
                }
            }
        });
        $("#VoucherDate").keyup(function (event) {
            if (event.keyCode == 13)
                $("#ToAccountNumber").focus().select();

        });
        $("#Amount").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#VoucherDate").focus().select();
            }
        });
        $("#Note").keyup(function (event) {
            if (event.keyCode == 13) {
                if (WorkWithCostCenter) {
                    $("#ToCostCenter").focus().select();
                }
                else {
                    $("#Amount").focus().select();
                }
            }
        });
        $("#ToAccountNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#FromAccountNumber").focus().select();
            }
            else if (event.keyCode == 113) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchAcc/ReceiptChequeVoucherAccountNumber';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $("#ToCostCenter").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#FromCostCenter").focus().select();
            }
            else if (event.keyCode == 113) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchCostCenter/ToCostCenter';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $("#FromCostCenter").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#Amount").focus().select();
            }
            else if (event.keyCode == 113) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchCostCenter/FromCostCenter';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $("#FromAccountNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#Note").focus().select();
            }
            else if (event.keyCode == 113) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchFundAccountNumber/FromAccountNumber';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $("#FromAccountNumber").blur(function () {
            var AccountNumber = document.getElementById("FromAccountNumber").value;
            if (AccountNumber == '') {
                document.getElementById("AccountDebitName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckDefinitionFund", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("FromAccountNumber").value = '';
                            document.getElementById("AccountDebitName").value = '';
                            $("#FromAccountNumber").focus();
                        }
                        else {
                            if (!Data.StoppedAccount) {
                                document.getElementById("AccountDebitName").value = Data.AccountName;
                            }
                            else {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                document.getElementById("FromAccountNumber").value = '';
                                document.getElementById("AccountDebitName").value = '';
                                $("#FromAccountNumber").focus();
                            }

                        }
                    });
                }
            }
        });
        $("#ToAccountNumber").blur(function () {
            var AccountNumber = document.getElementById("ToAccountNumber").value;
            if (AccountNumber == '') {
                document.getElementById("AccountCreditName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckAcountAcc", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("ToAccountNumber").value = '';
                            document.getElementById("AccountCreditName").value = '';
                            $("#ToAccountNumber").focus();
                        }
                        else {
                            if (!Data.StoppedAccount) {
                                document.getElementById("AccountCreditName").value = Data.AccountName;
                            }
                            else {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                document.getElementById("ToAccountNumber").value = '';
                                document.getElementById("AccountCreditName").value = '';
                                $("#ToAccountNumber").focus();
                            }

                        }
                    });
                }
            }
        });
        $("#ToCostCenter").blur(function () {
            var CostNumber = document.getElementById("ToCostCenter").value;
            if (CostNumber == '') {
                document.getElementById("CostCenterCreditName").value = '';
            }
            else {
                if (CostNumber != null && CostNumber != '') {
                    $.getJSON('@Url.Action("CheckCostCenter", "MultiUse")', { id: CostNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheCostCenterDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("ToCostCenter").value = '';
                            document.getElementById("CostCenterCreditName").value = '';
                            $("#ToCostCenter").focus();
                        }
                        else {
                            if (!Data.StoppedCost) {
                                document.getElementById("CostCenterCreditName").value = Data.CostName;
                            }
                            else {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheCostCenterIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                document.getElementById("ToCostCenter").value = '';
                                document.getElementById("CostCenterCreditName").value = '';
                                $("#ToCostCenter").focus();
                            }

                        }
                    });
                }
            }
        });
        $("#FromCostCenter").blur(function () {
            var CostNumber = document.getElementById("FromCostCenter").value;
            if (CostNumber == '') {
                document.getElementById("CostCenterDebitName").value = '';
            }
            else {
                if (CostNumber != null && CostNumber != '') {
                    $.getJSON('@Url.Action("CheckCostCenter", "MultiUse")', { id: CostNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheCostCenterDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("FromCostCenter").value = '';
                            document.getElementById("CostCenterDebitName").value = '';
                            $("#FromCostCenter").focus();
                        }
                        else {
                            if (!Data.StoppedCost) {
                                document.getElementById("CostCenterDebitName").value = Data.CostName;
                            }
                            else {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheCostCenterIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                document.getElementById("FromCostCenter").value = '';
                                document.getElementById("CostCenterDebitName").value = '';
                                $("#FromCostCenter").focus();
                            }

                        }
                    });
                }
            }
        });
    });
</script>
}

