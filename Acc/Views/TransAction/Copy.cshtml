@model Acc.ViewModels.TransActionVM
@{
    ViewBag.Title = @Resources.Resource.Copy;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .panel-body {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-footer {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-title {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .dt-button {
        display: none !important;
    }

    #TransActionGrid_DXHeadersRow0 {
        font-family: Verdana, Geneva, Tahoma, sans-serif !important;
        font-size: 10pt;
    }

    .dxgvBatchEditNewItem_iOS {
        font-family: Verdana, Geneva, Tahoma, sans-serif !important;
        font-size: 10pt;
    }

    .dxgvControl_iOS {
        width: 100% !important;
    }
    #TransActionGrid_col0 {
        width: 55px;
    }
</style>
<link href="~/Content/jquery-ui.css" rel="stylesheet" />
<script>
   var LastStatment = "";
    var SumDebit = 0;
    var SumCredit = 0;
    var preventEndEditOnLostFocus = false;
    var currentEditedValue;
    var SelectAccount;
    var lastVisibleIndex;
    var FocusedCellColumnIndex = 0;
    var FocusedCellRowIndex = 0;
    function GetSelectedAccount(data) {
           TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumber", data.AccountNumber);
           TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountName", data.AccountName);
           TransActionGrid.batchEditApi.StartEdit(lastVisibleIndex,4);
    }
    function GetSelectedCostCenter(data) {
           TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "CostCenter", data.CostNumber);
           TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "CostName", data.CostName);
            TransActionGrid.batchEditApi.StartEdit(lastVisibleIndex, 8);
    }
    var AccountInfo = [];
      var CostInfo = [];
     $.getJSON('@Url.Action("GetAcountAcc", "MultiUse")', { id: 0 }, function (Data) {
             AccountInfo = [];
           for (var i = 0, len = Data.length; i < len; i++) {

               var r = { label: Data[i].AccountName, value: Data[i].AccountNumber, stop: Data[i].StoppedAccount };
		     AccountInfo.push(r);
		}


     });
     $.getJSON('@Url.Action("GetCostCenter", "MultiUse")', { id: 0 }, function (Data) {
             CostInfo = [];
           for (var i = 0, len = Data.length; i < len; i++) {

               var r = { label: Data[i].CostName, value: Data[i].CostNumber, stop: Data[i].StoppedCost };
		     CostInfo.push(r);
		}


	   });
     function AutoCompleteAccount(s, e) {
         $(s.GetInputElement()).autocomplete({
          minLength: 0,
           source: AccountInfo,
             select: function (event, ui) {
                 if (ui.item.stop == '0') {
                     s.SetValue(ui.item.value);
                     TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountName", ui.item.label);
                     TransActionGrid.batchEditApi.GetCellValue()
                 }
                 else {
                     bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberIsSuspended</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                     FocusedCellColumnIndex = 4;
                     s.SetValue('');
                     TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountName", "");
                 }
             return false;
             },
             position:
             {
                 my: "left top",
                 at: "left bottom",
                 of: s.GetMainElement()
             }

        });
    }
     function AutoCompleteCostCenter(s, e) {
         $(s.GetInputElement()).autocomplete({
          minLength: 0,
           source: CostInfo,
             select: function (event, ui) {
                 if (ui.item.stop == '0') {
                     s.SetValue(ui.item.value);
                     TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "CostName", ui.item.label);
                     TransActionGrid.batchEditApi.GetCellValue()
                 }
                 else {
                     bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheCostCenterIsSuspended</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                     FocusedCellColumnIndex = 6;
                     s.SetValue('');
                     TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "CostName", "");
                 }

             return false;
             },


             position:
             {
                 my: "left top",
                 at: "left bottom",
                 of: s.GetMainElement()
             }

        });
    }
    function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
        try {
            decimalCount = Math.abs(decimalCount);
            decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

            const negativeSign = amount < 0 ? "-" : "";

            let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
            let j = (i.length > 3) ? i.length % 3 : 0;

            return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
        } catch (e) {
            console.log(e)
        }
    };
    function validatedate(dateString) {
        var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
        if (dateString.match(dateformat)) {
            var operator = dateString.split('/');
            var datepart = [];
            if (operator.length > 1) {
                datepart = dateString.split('/');
            }
            var month = parseInt(datepart[1]);
            var day = parseInt(datepart[0]);
            var year = parseInt(datepart[2]);
            var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
            if (month == 1 || month > 2) {
                if (day > ListofDays[month - 1]) {
                    return false;
                }
            } else if (month == 2) {
                var leapYear = false;
                if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                    leapYear = true;
                }
                if ((leapYear == false) && (day >= 29)) {
                    return false;
                } else
                    if ((leapYear == true) && (day > 29)) {
                        return false;
                    }
            }
        }
        else {
            return false;
        }
        return true;
    }
    function CalcSumDebitCredit(s, e) {
        SumDebit = 0;
        SumCredit = 0;
        var Debit = 0;
        var Credit = 0;
        var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
        var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;
        var visibleRowIndices = TransActionGrid.batchEditApi.GetRowVisibleIndices();
        for (var i = 0; i < visibleRowIndices.length; i++) {
            Debit = TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Debit");
            Credit = TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Credit");

            Debit = Number(Debit);
            if (Debit == "NaN") {
                Debit = 0;
            }

            Credit = Number(Credit);
            if (Credit == "NaN") {
                Credit = 0;
            }
            SumDebit = SumDebit + parseFloat(Debit);
            SumCredit = SumCredit + parseFloat(Credit);

            SumCredit = Number(SumCredit.toFixed(TheDecimalPointForTheLocalCurrency));
            SumDebit = Number(SumDebit.toFixed(TheDecimalPointForTheLocalCurrency));
        }

        document.getElementById("TotalDebit").value = SumDebit;
        document.getElementById("TotalCredit").value = SumCredit;
        document.getElementById("NetTotal").value = SumDebit - SumCredit;

        document.getElementById("sTotalDebit").value = formatMoney(SumDebit, TheDecimalPointForTheLocalCurrency);
        document.getElementById("sTotalCredit").value = formatMoney(SumCredit, TheDecimalPointForTheLocalCurrency);
        document.getElementById("sNetTotal").value = formatMoney((SumDebit - SumCredit), TheDecimalPointForTheLocalCurrency);
    }
    function ClearGrid(s, e) {
        TransActionGrid.PerformCallback('clear');
        setTimeout(function () {
            CalcSumDebitCredit(s, e);
        }, 1000);
    }
    function LoopGrid(s, e) {
        var WorkWithCostCenter = document.getElementById("WorkWithCostCenter").checked;
        var dDate = document.getElementById("VoucherDate").value;
        var CompanyYear = document.getElementById("CompanyYear").value;
        var d1 = dDate.split("/");
        var From = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);
        var iError = 0;
        var visibleRowIndices = TransActionGrid.batchEditApi.GetRowVisibleIndices();
        for (var i = 0; i < visibleRowIndices.length; i++) {
            if (TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumber") == "" || TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumber") == null) {
                iError = 2;
                break;
            }
            else if (WorkWithCostCenter && TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "CostCenter") == "" || TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "CostCenter") == null) {
                iError = 3;
                break;
            }

            else if ((TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Debit") == "" || TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Debit") == null
                || TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Debit") == '0') && (TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Credit") == "" ||
                    TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Credit") == null || TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Credit") == '0')) {
                iError = 1;
                break;
            }
            else if (TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumber") != "" || TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumber") != null) {
                $.getJSON('@Url.Action("CheckAccountInfo", "ChartOfAccount")', { id: TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumber") }, function (Data) {
                    if (Data.StoppedAccount) {
                        iError = 4;
                    }
                });
                if (iError == 4) {
                    break;
                }
            }
            else if (WorkWithCostCenter && TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "CostCenter") != "" || TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "CostCenter") != null) {
                $.getJSON('@Url.Action("CheckCostCenterInfo", "CostCenter")', { id: TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "CostCenter") }, function (Data) {
                    if (Data.StoppedCost) {
                        iError = 5;
                    }
                });
                if (iError == 5) {
                    break;
                }
            }
        }
        if (d1[2] > CompanyYear || d1[2] < CompanyYear) {
            bootbox.alert({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.DateIsNotWithinThisYear</h6>',
                className: 'rubberBand animated',
                buttons: {
                    ok: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                        className: 'btn-primary'
                    }
                }
            });
        }
        else {
            if (!validatedate(dDate) && dDate != null && dDate != '') {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else if (dDate != null && dDate != '') {
                var dd = parseInt(dDate.substring(0, 2));
                if (dd < 10) {
                    dd = '0' + dd;
                }
                var mm = parseInt(dDate.substring(3, 5));
                if (mm < 10) {
                    mm = '0' + mm;
                }
                var yyyy = parseInt(dDate.substring(6, 10));
                dDate = mm + '/' + dd + '/' + yyyy;
                $.getJSON('@Url.Action("CheckDateIsFreezeDate", "FreezeTransaction")', { id: dDate }, function (Data) {
                    if (Data >= 1) {
                        bootbox.alert({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThisDateIsFrozen</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                ok: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                    className: 'btn-primary'
                                }
                            }
                        });
                    }
                    else {
                        if (iError == 1) {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillDebitOrCredit</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                        else if (iError == 2) {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillAccountNumber</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                        else if (WorkWithCostCenter && iError == 3) {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillCostCenter</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                        else if (iError == 4) {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberIsSuspended</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                        else if (WorkWithCostCenter && iError == 5) {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheCostCenterIsSuspended</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                        else if ($("#NetTotal").val() < 0 || $("#NetTotal").val() > 0) {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseAccountingEntry</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                        else {
                            bootbox.confirm({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    confirm: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                        className: 'btn-success'
                                    },
                                    cancel: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                        className: 'btn-danger'
                                    }
                                },
                                callback: function (result) {
                                    if (result) {
                                        var dialog = bootbox.dialog({
                                            title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                            message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Copying...</p>',
                                            closeButton: false
                                        });
                                        var visibleRowIndices = TransActionGrid.batchEditApi.GetRowVisibleIndices();
                                        var TransActionlist = [];
                                        for (var i = 0; i < visibleRowIndices.length; i++) {
                                            var TransAction = {

                                                Debit: TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Debit"),
                                                Credit: TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Credit"),
                                                AccountNumber: TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumber"),
                                                CostCenter: TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "CostCenter"),
                                                Note: TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Note"),
                                                CreditDebitForeign: TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "CreditDebitForeign"),
                                                RowNumber: i
                                            };
                                            TransActionlist.push(TransAction);

                                        }
                                        var HeaderData = {

                                            VoucherNumber: $("#VoucherNumber").val(),
                                            VoucherDate: $("#VoucherDate").val(),
                                            Note: $("#Note").val(),
                                            TotalCredit: $("#TotalCredit").val(),
                                            TotalDebit: $("#TotalDebit").val(),
                                            CompanyTransactionKindNo: $("#CompanyTransactionKindID").val(),
                                            ConversionFactor: $("#CurrencyNewValue").val(),
                                            FCurrencyID: $("#CurrencyID").val()
                                        }
                                        var BankGuarantee = {

                                            WarrantyNumber: $("#WarrantyNumber").val(),
                                            DueDate: $("#DueDate").val(),
                                            IssuedBy: $("#IssuedBy").val(),
                                            WarrantyAmount: $("#WarrantyAmount").val(),
                                            OrderNo: $("#OrderNo").val(),
                                            ExpensesAmount: $("#ExpensesAmount").val(),
                                            DepositValue: $("#DepositValue").val(),
                                            TheBeneficiary: $("#DepositValue").val()


                                        }
                                        var dataToSave = {
                                            Transaction: TransActionlist,
                                            Header: HeaderData,
                                            BankGuarantee: BankGuarantee,
                                            CompanyTransactionKindID: $("#CompanyTransactionKindID").val(),
                                            CurrencyID: $("#CurrencyID").val(),
                                            CurrencyNewValue: $("#CurrencyNewValue").val()

                                        }

                                        $.ajax({
                                            type: "POST",
                                            url: "/TransAction/SaveNewTransAction",
                                            data: JSON.stringify(dataToSave),
                                            contentType: 'application/json',
                                            success: function (data) {

                                                dialog.modal('hide');
                                                if (data.Code == 0) {
                                                    toastr.error(data.Msg);
                                                }
                                                else if (data.Code == 1) {
                                                    $('#modal-container').modal('hide');
                                                    toastr.success(data.Msg);
                                                    bootbox.confirm({
                                                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.DoYouWantToUploadAttachments</h6>',
                                                        className: 'rubberBand animated',
                                                        buttons: {
                                                            confirm: {
                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                                                className: 'btn-success'
                                                            },
                                                            cancel: {
                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                                                className: 'btn-danger'
                                                            }
                                                        },
                                                        callback: function (result) {
                                                            if (result) {
                                                                window.open('/Attach/UploadTransActionFile/' + data.Year + '/' + data.VoucherNumber + '/' + data.CompanyTransactionKindNo + '/' + data.TransactionKindNo, '_blank');

                                                                bootbox.confirm({
                                                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.DoYouWantToPrint</h6>',
                                                                    className: 'rubberBand animated',
                                                                    buttons: {
                                                                        confirm: {
                                                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                                                            className: 'btn-success'
                                                                        },
                                                                        cancel: {
                                                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                                                            className: 'btn-danger'
                                                                        }
                                                                    },
                                                                    callback: function (result) {
                                                                        if (result) {
                                                                            window.open('/PDFReport/JournalVoucherpdf/' + data.VoucherNumber + "/" + data.CompanyTransactionKindNo + "/" + data.TransactionKindNo + '/' + data.Year + "/0", '_blank');
                                                                            window.location = "/TransAction/index";

                                                                        }
                                                                        else {

                                                                            window.location = "/TransAction/index";

                                                                        }
                                                                    }
                                                                });

                                                            }
                                                            else {

                                                                bootbox.confirm({
                                                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.DoYouWantToPrint</h6>',
                                                                    className: 'rubberBand animated',
                                                                    buttons: {
                                                                        confirm: {
                                                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                                                            className: 'btn-success'
                                                                        },
                                                                        cancel: {
                                                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                                                            className: 'btn-danger'
                                                                        }
                                                                    },
                                                                    callback: function (result) {
                                                                        if (result) {
                                                                            window.open('/PDFReport/JournalVoucherpdf/' + data.VoucherNumber + "/" + data.CompanyTransactionKindNo + "/" + data.TransactionKindNo + "/" + data.Year + "/0", '_blank');
                                                                            window.location = "/TransAction/index";

                                                                        }
                                                                        else {

                                                                            window.location = "/TransAction/index";

                                                                        }
                                                                    }
                                                                });

                                                            }
                                                        }
                                                    });

                                                }
                                            },
                                            error: function (data) {
                                                dialog.modal('hide');
                                                toastr.error(data);
                                            }

                                        });
                                    }
                                }
                            });
                        }
                    };
                });
            }
        }
    }
     function OnInit(s, e) {
            ASPxClientUtils.AttachEventToElement(
                s.GetMainElement(),
                "keydown",
                function (evt) {
                    if (evt.keyCode == 113 && FocusedCellColumnIndex == 4) {
                         var dialog = bootbox.dialog({
                            title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                            message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                            closeButton: false
                        });
                        var url = '/MultiUse/SearchAcc/AccountNumber';
                        $.get(url, function (data) {
                            $('#modal-container').html(data);
                            $('#modal-container').modal('show');
                            dialog.modal('hide');
                        })
                    } else
                        if (evt.keyCode == 113 && FocusedCellColumnIndex == 6) {
                         var dialog = bootbox.dialog({
                            title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                            message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                            closeButton: false
                        });
                            var url = '/MultiUse/SearchCostCenter/CostCenter';
                            $.get(url, function (data) {
                                $('#modal-container').html(data);
                                $('#modal-container').modal('show');
                                dialog.modal('hide');
                            })
                        };
                    switch (evt.keyCode) {
                        case 13:
                            if (FocusedCellColumnIndex == 8) {
                                var visibleRowIndices = TransActionGrid.batchEditApi.GetRowVisibleIndices();
                                var NoteValue = TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[FocusedCellRowIndex], "Note");
                                s.AddNewRow();
                            }
                            break;
                    }
                });
        };
     function Grid_BatchEditEndEditing(s, e) {
            var productNameColumn = s.GetColumnByField("AccountNumber");
            if (!e.rowValues.hasOwnProperty(productNameColumn.index))
                return;
            if ((FocusedCellColumnIndex == 1) || (FocusedCellColumnIndex == 2)) {
                var DebitIndex = s.GetColumnByField("Debit").index;
                var DebitValue = e.rowValues[DebitIndex].value;
                var CreditIndex = s.GetColumnByField("Credit").index;
                var CreditValue = e.rowValues[CreditIndex].value;
                if (DebitValue > 0) {
                    s.batchEditApi.SetCellValue(e.visibleIndex, "Credit", 0, null, true);
                    e.rowValues[CreditIndex].value = 0;
                    e.rowValues[CreditIndex].text = "0";
                }
                else if (CreditValue > 0) {
                    e.rowValues[DebitIndex].value = 0;
                    e.rowValues[DebitIndex].text = "0";
                }
                var CurrencyNewValue = document.getElementById("CurrencyNewValue").value;
                var CurrencyID = document.getElementById("CurrencyID").value;
                if (CurrencyID > 1) {
                    if (DebitValue > 0) {
                        s.batchEditApi.SetCellValue(e.visibleIndex, "CreditDebitForeign", DebitValue / CurrencyNewValue, null, true);
                    }
                    else {

                        s.batchEditApi.SetCellValue(e.visibleIndex, "CreditDebitForeign", CreditValue / CurrencyNewValue, null, true);
                    }

                }
                else {
                    s.batchEditApi.SetCellValue(e.visibleIndex, "CreditDebitForeign", 0, null, true);
                }
            }
            else if (FocusedCellColumnIndex == 4) {

                var AccountNumberIndex = s.GetColumnByField("AccountNumber").index;
                var AccountNumber = e.rowValues[AccountNumberIndex].value;
                if (!AccountNumber) {
                    TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountName", "");
                }
                else {
                    if (AccountNumber != null && AccountNumber != '') {
                        $.getJSON('@Url.Action("CheckAccountInfo", "ChartOfAccount")', { id: AccountNumber }, function (Data) {
                            if (Data == "") {
                                TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumber", "");
                                TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountName", "");
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                FocusedCellColumnIndex = 4;
                            }
                            else {
                                if (Data.StoppedAccount) {
                                    TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumber", "");
                                TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountName", "");
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                FocusedCellColumnIndex = 4;
                                }
                                else {
                                    TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumber", Data.AccountNumber);
                                    TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountName", Data.AccountName);
                                }


                            }
                        });
                    }
                }
            }
            else if (FocusedCellColumnIndex == 6) {
                var CostCenterIndex = s.GetColumnByField("CostCenter").index;
                var CostCenter = e.rowValues[CostCenterIndex].value;
                if (!CostCenter) {
                    TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "CostName", "");
                }
                else {
                    if (CostCenter != null && CostCenter != '') {
                        $.getJSON('@Url.Action("CheckCostCenterInfo", "CostCenter")', { id: CostCenter }, function (Data) {
                            if (Data == "") {
                                TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "CostCenter", "");
                                TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "CostName", "");
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheCostCenterDoesNotExist</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                FocusedCellColumnIndex = 6;
                            }
                            else {
                                if (Data.StoppedCost) {
                                    TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "CostCenter", "");
                                    TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "CostName", "");
                                    bootbox.alert({
                                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheCostCenterIsSuspended</h6>',
                                        className: 'rubberBand animated',
                                        buttons: {
                                            ok: {
                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                                className: 'btn-primary'
                                            }
                                        }
                                    });
                                    FocusedCellColumnIndex = 6;
                                }
                                else {
                                    TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "CostCenter", Data.CostNumber);
                                    TransActionGrid.batchEditApi.SetCellValue(lastVisibleIndex, "CostName", Data.CostName);
                                }

                            }
                        });
                    }
                }
            }
            else if (FocusedCellColumnIndex == 8) {
                var NoteIndex = s.GetColumnByField("Note").index;
                var NoteValue = e.rowValues[NoteIndex].value;
                if (NoteValue != null) {
                    LastStatment = NoteValue;
                }
                else {
                    e.rowValues[NoteIndex].value = LastStatment;
                    e.rowValues[NoteIndex].text = LastStatment;
                }
            }
            FocusedCellColumnIndex = 0;
            FocusedCellRowIndex = 0;
        }
     function Grid_BatchEditStartEditing(s, e) {
            FocusedCellColumnIndex = e.focusedColumn.index;
            FocusedCellRowIndex = e.visibleIndex;
            var productNameColumn = s.GetColumnByField("AccountNumber");
            if (!e.rowValues.hasOwnProperty(productNameColumn.index))
                return;lastVisibleIndex = e.visibleIndex;
            currentEditedValue = s.GetRowKey(e.visibleIndex);
            currentKey = s.GetRowKey(e.visibleIndex);
            CalcSumDebitCredit(s, e);
        }
     function OnBeginCallback(s, e) {
        e.customArgs["Reference"] = $("#Reference").val();
    }
     function OnEndCallback(s, e) {
         if (s.cpSuccessFlag)
        {
            alert("All changes were saved");
            window.location = "@Url.Action("Success","Test1")";
        }
    }
     function OnClickPostData(s, e) {
            if (TransActionGrid.batchEditApi.HasChanges())
                TransActionGrid.UpdateEdit();
            else
            TransActionGrid.PerformCallback();

    }
     function Grid_DeleteRowEvent(s, e) {
         setTimeout(function () {
             CalcSumDebitCredit(s, e);
         }, 1000);
        }
     function Grid_DeleteRowEvent(s, e) {
        setTimeout(function () {
            CalcSumDebitCredit(s, e);
        }, 1000);
    }
     function Recalc() {
        SumDebit = 0;
        SumCredit = 0;
        var Debit = 0;
        var Credit = 0;
        var visibleRowIndices = TransActionGrid.batchEditApi.GetRowVisibleIndices(false);
        var CurrencyAmount = document.getElementById("CurrencyNewValue").value;
        var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
        var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;
        if (CurrencyAmount == 0) {
            CurrencyAmount = 1
        };
        var CurrencyID = document.getElementById("CurrencyID").value;
        for (var i = 0; i < visibleRowIndices.length; i++) {

            Debit = TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Debit");
            Credit = TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Credit");

            if (CurrencyID > 1) {
                if (Debit > 0) {
                    TransActionGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "CreditDebitForeign", Debit / CurrencyAmount, null, true);

                }
                else {

                    TransActionGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "CreditDebitForeign", Credit / CurrencyAmount, null, true);
                }
            }
            else {
                TransActionGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "CreditDebitForeign", 0, null, true);

            }
            Debit = Number(Debit);
            if (Debit == "NaN") {
                Debit = 0;
            }
            Credit = Number(Credit);
            if (Credit == "NaN") {
                Credit = 0;
            }
            SumDebit = SumDebit + parseFloat(Debit);
            SumCredit = SumCredit + parseFloat(Credit);
        }
        document.getElementById("TotalDebit").value = SumDebit;
        document.getElementById("TotalCredit").value = SumCredit;
        document.getElementById("NetTotal").value = SumDebit - SumCredit;

        document.getElementById("sTotalDebit").value = formatMoney(SumDebit, TheDecimalPointForTheLocalCurrency);
        document.getElementById("sTotalCredit").value = formatMoney(SumCredit, TheDecimalPointForTheLocalCurrency);
        document.getElementById("sNetTotal").value = formatMoney((SumDebit - SumCredit), TheDecimalPointForTheLocalCurrency);
    }
</script>

@using (Html.BeginForm("Copy", "TransAction", FormMethod.Post, new { id = "myForm" }))
{
    <div class="panel card-view">
        <div class="panel-heading" style="background-color: #34495E">
            <div class="pull-left">
                <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.Copy - @Resources.Resource.TransActions</h6>
            </div>
            <div class="clearfix"></div>
        </div>
        <div class="panel-body">
            <div class="col-lg-12">
                <div class="form-group">
                    <div class="col-md-3">
                        <div class="form-group">
                            @Html.LabelFor(m => m.CompanyTransactionKindID)
                            @if (Resources.Resource.CurLang == "Arb")
                            {
                                @Html.DropDownListFor(m => m.CompanyTransactionKindID, new SelectList(Model.CompanyTransactionKind, "CompanyTransactionKindID", "ArabicName"), new { @id = "CompanyTransactionKindID", @class = "form-control input-sml" })
                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.CompanyTransactionKindID, new SelectList(Model.CompanyTransactionKind, "CompanyTransactionKindID", "EnglishName"), new { @id = "CompanyTransactionKindID", @class = "form-control input-sml" })
                            }
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Header.VoucherNumber)
                            @Html.TextBoxFor(m => m.Header.VoucherNumber, new { @id = "VoucherNumber", @class = "form-control input-sml", @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.Header.VoucherNumber)
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Header.VoucherDate)
                            @Html.TextBoxFor(model => model.Header.VoucherDate, new { @id = "VoucherDate", @class = "form-control input-sml", @Value = Model.Header.VoucherDate.ToString("dd/MM/yyyy"), data_val = "false" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Header.Note)
                            @Html.TextBoxFor(m => m.Header.Note, new { @id = "Note", @class = "form-control input-sml" })
                            @Html.ValidationMessageFor(m => m.Header.Note)
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="form-group">
                    <div class="col-md-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.CurrencyID)
                            @if (Resources.Resource.CurLang == "Arb")
                            {
                                @Html.DropDownListFor(m => m.CurrencyID, new SelectList(Model.Currency, "CurrencyID", "ArabicName"), new { @id = "CurrencyID", @class = "form-control input-sml" })
                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.CurrencyID, new SelectList(Model.Currency, "CurrencyID", "EnglishName"), new { @id = "CurrencyID", @class = "form-control input-sml" })
                            }
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.CurrencyNewValue)
                            @Html.TextBoxFor(m => m.CurrencyNewValue, new { @id = "CurrencyNewValue", @class = "form-control input-sml" })
                            @Html.ValidationMessageFor(m => m.CurrencyNewValue)
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.TotalDebit)
                            @Html.TextBoxFor(m => m.TotalDebit, new { @id = "sTotalDebit", @class = "form-control  input-sm", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.TotalCredit)
                            @Html.TextBoxFor(m => m.TotalCredit, new { @id = "sTotalCredit", @class = "form-control  input-sm", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.sNetTotal)
                            @Html.TextBoxFor(m => m.sNetTotal, new { @id = "sNetTotal", @class = "form-control  input-sm", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-12">
                @Html.Action("GridViewTransActionPartial", new { id = Model.Header.VoucherNumber, id2 = Model.Header.CompanyTransactionKindNo, id3 = Model.Header.TransactionKindNo })
            </div>
            <br />
            <br />
            <div id="BankGuaranteeDiv" style="display:none">
                <div class="col-lg-12">
                    <div class="form-group">
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.BankGuarantee.WarrantyNumber)
                                @Html.TextBoxFor(m => m.BankGuarantee.WarrantyNumber, new { @id = "WarrantyNumber", @class = "form-control input-sml" })
                                @Html.ValidationMessageFor(m => m.BankGuarantee.WarrantyNumber)
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.BankGuarantee.DueDate)
                                @Html.TextBoxFor(m => m.BankGuarantee.DueDate, new { @id = "DueDate", @class = "form-control input-sml", @Value = Model.BankGuarantee.DueDate.ToString("dd/MM/yyyy"), data_val = "false" })
                                @Html.ValidationMessageFor(m => m.BankGuarantee.DueDate)
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.BankGuarantee.IssuedBy)
                                @Html.TextBoxFor(m => m.BankGuarantee.IssuedBy, new { @id = "IssuedBy", @class = "form-control input-sml" })
                                @Html.ValidationMessageFor(m => m.BankGuarantee.IssuedBy)
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.BankGuarantee.WarrantyAmount)
                                @Html.TextBoxFor(m => m.BankGuarantee.WarrantyAmount, new { @id = "WarrantyAmount", @class = "form-control input-sml" })
                                @Html.ValidationMessageFor(m => m.BankGuarantee.WarrantyAmount)
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.BankGuarantee.OrderNo)
                                @Html.TextBoxFor(m => m.BankGuarantee.OrderNo, new { @id = "OrderNo", @class = "form-control input-sml" })
                                @Html.ValidationMessageFor(m => m.BankGuarantee.OrderNo)
                            </div>
                        </div>

                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.BankGuarantee.ExpensesAmount)
                                @Html.TextBoxFor(m => m.BankGuarantee.ExpensesAmount, new { @id = "ExpensesAmount", @class = "form-control input-sml" })
                                @Html.ValidationMessageFor(m => m.BankGuarantee.ExpensesAmount)
                            </div>
                        </div>

                        <div class="col-md-3">
                            <div class="form-group">
                                @Html.LabelFor(m => m.BankGuarantee.DepositValue)
                                @Html.TextBoxFor(m => m.BankGuarantee.DepositValue, new { @id = "DepositValue", @class = "form-control input-sml" })
                                @Html.ValidationMessageFor(m => m.BankGuarantee.DepositValue)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @Html.HiddenFor(m => m.CompanyTransactionKindID, new { @id = "CompanyTransactionKindID" })

            @Html.HiddenFor(m => m.Header.CompanyTransactionKindNo, new { @id = "CompanyTransactionKindNo" })

            @Html.HiddenFor(m => m.Header.CompanyYear, new { @id = "CompanyYear" })

            @Html.HiddenFor(m => m.Header.TransactionKindNo, new { @id = "TransactionKindNo" })

        </div>
        <div class="panel-footer">
            @Html.DevExpress().Button(settings =>
          {
              settings.Name = "buttonCopy";
              settings.Text = Resources.Resource.Copy;
              settings.UseSubmitBehavior = false;
              settings.ClientSideEvents.Click = "LoopGrid";
              settings.ClientVisible = false;
          }).GetHtml()
            @Html.DevExpress().Button(settings =>
   {
       settings.Name = "btnRecalculat";
       settings.UseSubmitBehavior = false;
       settings.ClientVisible = false;
       settings.ClientSideEvents.Click = "Recalc";
   }).GetHtml()
            <button type="button" class="btn btn-primary btn-anim" id="Copy"><i class="fa fa-copy"></i><span class="btn-text">@Resources.Resource.Copy</span> </button>
            <button type="button" class="btn btn-default btn-anim" id="Close"><i class="fa fa-times"></i><span class="btn-text">@Resources.Resource.Close</span></button>
        </div>
    </div>
}
<div class="col-md-2" style="display : none">
    <div class="form-group">
        @Html.LabelFor(m => m.Header.TotalDebit)
        @Html.TextBoxFor(m => m.Header.TotalDebit, new { @id = "TotalDebit", @class = "form-control input-sml", @readonly = "readonly" })
        @Html.ValidationMessageFor(m => m.Header.TotalDebit)
    </div>
</div>
<div class="col-md-2" style="display : none">
    <div class="form-group">
        @Html.LabelFor(m => m.Header.TotalCredit)
        @Html.TextBoxFor(m => m.Header.TotalCredit, new { @id = "TotalCredit", @class = "form-control input-sml", @readonly = "readonly" })
        @Html.ValidationMessageFor(m => m.Header.TotalCredit)
    </div>
</div>
<div class="col-md-2" style="display : none">
    <div class="form-group">
        @Html.LabelFor(m => m.NetTotal)
        @Html.TextBoxFor(m => m.NetTotal, new { @id = "NetTotal", @class = "form-control input-sml", @readonly = "readonly" })
        @Html.ValidationMessageFor(m => m.NetTotal)
    </div>
</div>
<div id="modal-container" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-content">
    </div>
</div>
@Html.CheckBoxFor(m => m.WorkWithCostCenter, new { @id = "WorkWithCostCenter", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TheDecimalPointForTheLocalCurrency, new { @id = "TheDecimalPointForTheLocalCurrency", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.Header.CompanyYear, new { @id = "CompanyYear", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TheDecimalPointForTheForeignCurrency, new { @id = "TheDecimalPointForTheForeignCurrency", @style = "visibility : hidden;" })
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

<script>
    $(document).ready(function () {
        function validatedate(dateString) {
            var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
            if (dateString.match(dateformat)) {
                var operator = dateString.split('/');
                var datepart = [];
                if (operator.length > 1) {
                    datepart = dateString.split('/');
                }
                var month = parseInt(datepart[1]);
                var day = parseInt(datepart[0]);
                var year = parseInt(datepart[2]);
                var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                if (month == 1 || month > 2) {
                    if (day > ListofDays[month - 1]) {
                        return false;
                    }
                } else if (month == 2) {
                    var leapYear = false;
                    if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                        leapYear = true;
                    }
                    if ((leapYear == false) && (day >= 29)) {
                        return false;
                    } else
                        if ((leapYear == true) && (day > 29)) {
                            return false;
                        }
                }
            }
            else {
                return false;
            }
            return true;
        }
        $(document).on('click', '#Close', function () {
            window.location = "/TransAction/index";
        });
        $(document).on('click', '#Copy', function () {
            document.getElementById("buttonCopy").click();
        });
        $("#VoucherDate").focus().select();
        $("#VoucherDate").keyup(function (event) {
            if (event.keyCode == 13)
                $("#Note").focus().select();
        });
        $("#Note").keyup(function (event) {
            if (event.keyCode == 13)
                $("#CurrencyNewValue").focus().select();

        });
        $("#CurrencyNewValue").keyup(function (event) {
            if (event.keyCode == 13)
                $("#VoucherDate").focus().select();

        });
        $("#WarrantyNumber").keyup(function (event) {
            if (event.keyCode == 13)
                $("#DueDate").focus().select();

        });
        $("#DueDate").keyup(function (event) {
            if (event.keyCode == 13)
                $("#IssuedBy").focus().select();

        });
        $("#IssuedBy").keyup(function (event) {
            if (event.keyCode == 13)
                $("#WarrantyAmount").focus().select();

        });
        $("#WarrantyAmount").keyup(function (event) {
            if (event.keyCode == 13)
                $("#OrderNo").focus().select();

        });
        $("#OrderNo").keyup(function (event) {
            if (event.keyCode == 13)
                $("#ExpensesAmount").focus().select();

        });
        $("#ExpensesAmount").keyup(function (event) {
            if (event.keyCode == 13)
                $("#DepositValue").focus().select();

        });
        $("#DepositValue").keyup(function (event) {
            if (event.keyCode == 13)
                $("#WarrantyNumber").focus().select();

        });
        $("#VoucherDate").mask("99/99/9999");
        $("#DueDate").mask("99/99/9999");
        $('#CurrencyID').change(function () {
            var SelectedCurrency = $("#CurrencyID").val();
            if (SelectedCurrency != null && SelectedCurrency != '') {
                $.getJSON('@Url.Action("GetCurrencyValueById", "CurrencyValue")', { id: SelectedCurrency }, function (Data) {
                    if (Data != null) {
                        document.getElementById("CurrencyNewValue").value = Data;
                        document.getElementById("btnRecalculat").click();
                    } else {


                    };
                });
            }
            else {
            }

        });
        $("#CurrencyNewValue").blur(function () {
            document.getElementById("btnRecalculat").click();
        });
        $('#CompanyTransactionKindID').change(function () {
            var BankGuarantee = $("#CompanyTransactionKindID").val();

            if (BankGuarantee != null && BankGuarantee != '') {
                $.getJSON('@Url.Action("GetTransactionKindNo", "TransAction")', { id: BankGuarantee }, function (Data) {

                    if ((Data == 14)) {
                        document.getElementById("BankGuaranteeDiv").style.display = 'block';

                    }
                    else {
                        document.getElementById("BankGuaranteeDiv").style.display = 'none';
                    };
                });
            }
            else {
            }
            var SelectedValue = $("#CompanyTransactionKindID").val();
            var VoucherDate = document.getElementById("VoucherDate").value;
            var CompanyYear = document.getElementById("CompanyYear").value;
            var mm = parseInt(VoucherDate.substring(3, 5));
            if (mm < 10) {
                mm = '0' + mm;
            }
            if (SelectedValue != null && SelectedValue != '') {
                $.getJSON('@Url.Action("GetMaxVHIForAcc", "TransAction")', { id: SelectedValue, id2: mm, id3: CompanyYear}, function (Data) {

                    if (Data != null) {
                        document.getElementById("VoucherNumber").value = Data;

                    } else {


                    };
                });
            } else {
            }
        });
        $("#VoucherDate").blur(function () {
            var dDate = document.getElementById("VoucherDate").value;
            var CompanyYear = document.getElementById("CompanyYear").value;
            var d1 = dDate.split("/");
            var From = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);
            if (d1[2] > CompanyYear || d1[2] < CompanyYear) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.DateIsNotWithinThisYear</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                if (dDate != null && dDate != '') {
                    if (!validatedate(dDate)) {
                        bootbox.alert({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                ok: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                    className: 'btn-primary'
                                }
                            }
                        });
                    }
                    else {
                        var dd = parseInt(dDate.substring(0, 2));
                        if (dd < 10) {
                            dd = '0' + dd;
                        }
                        var mm = parseInt(dDate.substring(3, 5));
                        if (mm < 10) {
                            mm = '0' + mm;
                        }
                        var yyyy = parseInt(dDate.substring(6, 10));
                        dDate = mm + '/' + dd + '/' + yyyy;
                        $.getJSON('@Url.Action("CheckDateIsFreezeDate", "FreezeTransaction")', { id: dDate }, function (Data) {
                            if (Data >= 1) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThisDateIsFrozen</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                        });
                        var SelectedValue = $("#CompanyTransactionKindID").val();
                        var VoucherDate = document.getElementById("VoucherDate").value;
                        var CompanyYear = document.getElementById("CompanyYear").value;
                        var mm = parseInt(VoucherDate.substring(3, 5));
                        if (mm < 10) {
                            mm = '0' + mm;
                        }
                        if (SelectedValue != null && SelectedValue != '') {
                            $.getJSON('@Url.Action("GetMaxVHIForAcc", "TransAction")', { id: SelectedValue, id2: mm, id3: CompanyYear }, function (Data) {

                                if (Data != null) {
                                    document.getElementById("VoucherNumber").value = Data;

                                } else {
                                };
                            });
                        }
                        else {
                        }
                    }
                }
                else {
                }
            }
        });
        $("#DueDate").blur(function () {
            var dDate = document.getElementById("DueDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("DueDate").value = '01/01/' + new Date().getFullYear()
            }
        });

        var SelectedValue = $("#CompanyTransactionKindID").val();
        var VoucherDate = document.getElementById("VoucherDate").value;
        var CompanyYear = document.getElementById("CompanyYear").value;
        var mm = parseInt(VoucherDate.substring(3, 5));
        if (mm < 10) {
            mm = '0' + mm;
        }
        if (SelectedValue != null && SelectedValue != '') {
            $.getJSON('@Url.Action("GetMaxVHIForAcc", "TransAction")', { id: SelectedValue, id2: mm, id3: CompanyYear }, function (Data) {

                if (Data != null) {
                    document.getElementById("VoucherNumber").value = Data;

                } else {


                };
            });
        }
        else {
        }
        if (@Model.Header.TransactionKindNo == 14) {
            document.getElementById("BankGuaranteeDiv").style.display = 'block';
        }
    });
</script>
}



