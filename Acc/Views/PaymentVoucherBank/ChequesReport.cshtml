@model Acc.ViewModels.PaperFilterVM
@{
    ViewBag.Title = @Resources.Resource.PaymentChequesReport;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/Content/jquery-ui.css" rel="stylesheet" />

<style>
    .panel-body {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-footer {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-title {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .dt-button {
        display: none !important;
    }

    #MemberShipTypeBody1 {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }
</style>
<script>
    function GetSelectedPostdatedChequeSearch(data) {
        if (data.PostdatedChequeAccountNumber != null && data.PostdatedChequeAccountNumber != '') {
            document.getElementById("PostdatedAccountNumber").value = data.PostdatedChequeAccountNumber;
            document.getElementById("PostdatedAccountName").value = data.BankAccountName;
        }
        else {
            document.getElementById("PostdatedAccountNumber").value = '';
            document.getElementById("PostdatedAccountName").value = '';
        }
    }
    function GetBankPostdatedChequeSearch(data) {
        if (data.BankAccountNumber != null && data.BankAccountNumber != '') {
            document.getElementById("BankAccountNumber").value = data.BankAccountNumber;
            document.getElementById("BankName").value = data.BankAccountName;
        }
        else {
            document.getElementById("BankAccountNumber").value = '';
            document.getElementById("BankName").value = '';
        }
    }
    function GetSelectedDataPaymentChequeVoucherSearch(data) {
        if (data.AccountNumber != null && data.AccountNumber != '') {
            document.getElementById("PaidToAccountNumber").value = data.AccountNumber;
            document.getElementById("PaidToAccount").value = data.AccountName;
        }
        else {
            document.getElementById("PaidToAccountNumber").value = '';
            document.getElementById("PaidToAccount").value = '';
        }

    }
            var AccNumber = [];
    $.getJSON('@Url.Action("GetAcountAcc", "MultiUse")', { id: 0 }, function (Data) {
        AccNumber = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].AccountName, value: Data[i].AccountNumber, stop: Data[i].StoppedAccount };
                AccNumber.push(r);
            }
    });

    var BankAccNumber = [];
    $.getJSON('@Url.Action("GetDefinitionBank", "MultiUse")', { id: 0 }, function (Data) {
        BankAccNumber = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].BankAccountName, value: Data[i].BankAccountNumber, stop: Data[i].StoppedAccount };
                BankAccNumber.push(r);
            }
    });
    $(function () {
        $("#PaidToAccountNumber").autocomplete({
            source: AccNumber,
            select: function (event, ui) {
                document.getElementById("PaidToAccountNumber").value = ui.item.value;
                document.getElementById("PaidToAccount").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#PostdatedAccountNumber").autocomplete({
            source: BankAccNumber,
            select: function (event, ui) {
                document.getElementById("PostdatedAccountNumber").value = ui.item.value;
                document.getElementById("PostdatedAccountName").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#BankAccountNumber").autocomplete({
            source: BankAccNumber,
            select: function (event, ui) {
                document.getElementById("BankAccountNumber").value = ui.item.value;
                document.getElementById("BankName").value = ui.item.label;
            }
        });
    });


</script>
<div class="panel card-view">
    <div class="panel-heading" style="background-color: #34495E">
        <div class="pull-left">
            <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.PaymentChequesReport</h6>
        </div>
        <div class="clearfix"></div>
    </div>
    <div class="panel-body">
        <div class="col-lg-12">
            <div class="panel card-view">
                <div class="panel-heading" style="background-color: #34495E">
                    <div class="pull-left">
                        <h6 class="panel-title txt-light">
                            <a data-toggle="collapse" data-parent="#accordion" href="#collapseOne" aria-expanded="true" class="">@Resources.Resource.PapersCase</a>
                        </h6>
                    </div>
                    <div class="clearfix"></div>
                </div>
            </div>
            <div id="collapseOne" class="panel-collapse in" aria-expanded="true" style="height: auto;">
                <div class="panel-body">
                    <div class="col-lg-12">
                        <div class="form-group">
                            <div class="col-lg-2">
                                <label style="font-size :smaller">
                                    @Html.CheckBoxFor(m => m.PostdatedCheques, new { @id = "PostdatedCheques" }) @Resources.Resource.PostdatedCheque
                                </label>
                            </div>
                            <div class="col-lg-4">
                                <label style="font-size :smaller">
                                    @Html.CheckBoxFor(m => m.PaidPostdatedCheque, new { @id = "PaidPostdatedCheque" }) @Resources.Resource.PaidPostdatedCheque
                                </label>
                            </div>
                            <div class="col-lg-3">
                                <label style="font-size :smaller">
                                    @Html.CheckBoxFor(m => m.ReturnPostdatedCheque, new { @id = "ReturnPostdatedCheque" }) @Resources.Resource.ReturnPostdatedCheque
                                </label>
                            </div>
                            <div class="col-lg-3">
                                <label style="font-size :smaller">
                                    @Html.CheckBoxFor(m => m.ReturnPaidPostdatedCheque, new { @id = "ReturnPaidPostdatedCheque" }) @Resources.Resource.ReturnPaidPostdatedCheque
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <div class="col-lg-2">
                <div class="form-group">
                    @Html.LabelFor(m => m.ChequeNumber)
                    @Html.TextBoxFor(model => model.ChequeNumber, new { @id = "ChequeNumber", @class = "form-control  input-sm" })
                </div>
            </div>
            <div class="col-lg-2">
                <div class="form-group">
                    @Html.LabelFor(m => m.FromDate)
                    @Html.TextBoxFor(model => model.FromDate, new { @id = "FromDate", @class = "form-control  input-sm", @Value = Model.FromDate.ToString("dd/MM/yyyy") })
                </div>
            </div>
            <div class="col-lg-2">
                <div class="form-group">
                    @Html.LabelFor(m => m.ToDate)
                    @Html.TextBoxFor(model => model.ToDate, new { @id = "ToDate", @class = "form-control  input-sm", @Value = Model.ToDate.ToString("dd/MM/yyyy") })
                </div>
            </div>
            <div class="col-lg-3">
                @Html.Label(Resources.Resource.PaidToAccount)
                <div class="form-group  input-group">
                    @Html.TextBoxFor(m => m.PaidToAccountNumber, new { @id = "PaidToAccountNumber", @class = "form-control  input-sm"})
                    <span class="input-group-btn">
                        <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnPaidToAccountNumber">
                            <i class="fa fa-search"></i>
                        </button>
                    </span>
                </div>
            </div>
            <div class="col-lg-3">
                @Html.Label(Resources.Resource.AccountName)
                <div class="form-group  input-group">
                    @Html.TextBoxFor(m => m.PaidToAccount, new { @id = "PaidToAccount", @class = "form-control  input-sm", @readonly = "readonly" })
                    <span class="input-group-btn">
                        <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearPaidToAccountNumber">
                            <i class="fa fa-minus-square"></i>
                        </button>
                    </span>
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <div class="col-lg-3">
                @Html.Label(Resources.Resource.PostdatedAccountName)
                <div class="form-group  input-group">
                    @Html.TextBoxFor(m => m.PostdatedAccountNumber, new { @id = "PostdatedAccountNumber", @class = "form-control  input-sm" })
                    <span class="input-group-btn">
                        <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnPostdatedAccountNumber">
                            <i class="fa fa-search"></i>
                        </button>
                    </span>
                </div>
            </div>
            <div class="col-lg-3">
                @Html.Label(Resources.Resource.AccountName)
                <div class="form-group input-group">
                    @Html.TextBoxFor(m => m.PostdatedAccountName, new { @id = "PostdatedAccountName", @class = "form-control  input-sm", @readonly = "readonly" })
                    <span class="input-group-btn">
                        <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearPostdatedAccountNumber">
                            <i class="fa fa-minus-square"></i>
                        </button>
                    </span>
                </div>
            </div>
            <div class="col-lg-3">
                @Html.Label(Resources.Resource.BankAccountNumber)
                <div class="form-group  input-group">
                    @Html.TextBoxFor(m => m.BankAccountNumber, new { @id = "BankAccountNumber", @class = "form-control  input-sm" })
                    <span class="input-group-btn">
                        <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnBankAccountNumber">
                            <i class="fa fa-search"></i>
                        </button>
                    </span>
                </div>
            </div>
            <div class="col-lg-3">
                @Html.Label(Resources.Resource.AccountName)
                <div class="form-group  input-group">
                    @Html.TextBoxFor(m => m.BankName, new { @id = "BankName", @class = "form-control  input-sm", @readonly = "readonly" })
                    <span class="input-group-btn">
                        <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearBankAccountNumber">
                            <i class="fa fa-minus-square"></i>
                        </button>
                    </span>
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <div class="form-group">
                <div class="col-md-2">
                </div>
                <div class="col-md-2">
                </div>
                <div class="col-md-2" style="text-align: center">
                    <div class="form-group">
                        @Html.Label(@Resources.Resource.PaperCount)
                        @Html.TextBoxFor(m => m.PaperCount, new { @id = "PaperCount", @class = "form-control  input-sm", @type = "number", @min = "0", @style = "text-align: center;font-weight: bold", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-md-2" style="text-align: center">
                    <div class="form-group">
                        @Html.Label(@Resources.Resource.PaperAmount)
                        @Html.TextBoxFor(m => m.PaperAmount, new { @id = "PaperAmount", @class = "form-control  input-sm", @style = "text-align: center;font-weight: bold;", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-md-2">
                </div>
                <div class="col-md-2">
                </div>
            </div>

        </div>
        <div class="col-lg-12">
            <button type="submit" class="btn  btn-anim btnSearch" id="reload"><i class=" fa fa-search"></i><span class="btn-text">@Resources.Resource.Search</span></button>
            @if (User.IsInRole("PrintRepPaymentChequesPrintReport") || User.IsInRole("CoOwner"))
            {
                <button type="submit" class="btn btn-warning btn-anim" id="PrintPDF"><i class=" fa fa-print"></i><span class="btn-text">@Resources.Resource.Print</span></button>
            }
            <button type="submit" class="btn btn-anim btnFav" id="AddToFav"><i class=" fa fa-star"></i><span class="btn-text">@Resources.Resource.AddToFav</span></button>
            <button type="button" class="btn btn-default btn-anim" id="CloseForm"><i class="fa fa-times"></i><span class="btn-text">@Resources.Resource.Close</span></button>
        </div>
        <div class="col-lg-12" style="margin-top:10px;">
            <table id="tdataTable" class="table table-hover table-bordered mb-0" width="100%">
                <thead>
                    <tr>
                        <th>@Resources.Resource.ChequeNumber</th>
                        <th>@Resources.Resource.ChequeDate</th>
                        <th>@Resources.Resource.ChequesAmount</th>
                        <th>@Resources.Resource.PostdatedAccountName</th>
                        <th>@Resources.Resource.BankAccountNumber</th>
                        <th>@Resources.Resource.PaidToAccount</th>
                        <th>@Resources.Resource.NameOfThePayee</th>
                        <th>@Resources.Resource.OriginalVoucherNumber</th>
                        <th>@Resources.Resource.OriginalCompanyTransactionKind</th>
                        <th>@Resources.Resource.ChequeCaseName</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>
    </div>
    <div class="panel-footer">

    </div>
</div>
@Html.TextBoxFor(m => m.TheDecimalPointForTheLocalCurrency, new { @id = "TheDecimalPointForTheLocalCurrency", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TheDecimalPointForTheForeignCurrency, new { @id = "TheDecimalPointForTheForeignCurrency", @style = "visibility : hidden;" })

<div id="modal-container" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-content">
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
        $(document).ready(function () {
            var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
            var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;

            function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
                try {
                    decimalCount = Math.abs(decimalCount);
                    decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

                    const negativeSign = amount < 0 ? "-" : "";

                    let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
                    let j = (i.length > 3) ? i.length % 3 : 0;

                    return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
                } catch (e) {
                    console.log(e)
                }
            };
            function validatedate(dateString) {
                var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
                if (dateString.match(dateformat)) {
                    var operator = dateString.split('/');
                    var datepart = [];
                    if (operator.length > 1) {
                        datepart = dateString.split('/');
                    }
                    var month = parseInt(datepart[1]);
                    var day = parseInt(datepart[0]);
                    var year = parseInt(datepart[2]);
                    var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                    if (month == 1 || month > 2) {
                        if (day > ListofDays[month - 1]) {
                            return false;
                        }
                    } else if (month == 2) {
                        var leapYear = false;
                        if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                            leapYear = true;
                        }
                        if ((leapYear == false) && (day >= 29)) {
                            return false;
                        } else
                            if ((leapYear == true) && (day > 29)) {
                                return false;
                            }
                    }
                }
                else {
                    return false;
                }
                return true;
            }
            $(document).on('click', '#AddToFav', function () {

                bootbox.confirm({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        confirm: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                            className: 'btn-success'
                        },
                        cancel: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            var dialog = bootbox.dialog({
                                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Saving...</p>',
                                closeButton: false
                            });

                            var dataToSave = {

                                ScreenName: '@Resources.Resource.PaymentChequesReport',
                                ScreenUrl: "/PaymentVoucherBank/ChequesReport",
                                ScreenType: 1

                            };

                            $.ajax({
                                type: "POST",
                                url: "/FavScreen/AddToFave",
                                data: JSON.stringify(dataToSave),
                                contentType: 'application/json',
                                success: function (data) {

                                    dialog.modal('hide');
                                    if (data.Code == 0) {
                                        toastr.error(data.Msg);
                                    }
                                    else if (data.Code == 1) {
                                        toastr.success(data.Msg);
                                    }

                                },
                                error: function (data) {
                                    dialog.modal('hide');
                                    toastr.error(data);
                                }

                            });
                        }
                    }
                });


            });

            $(document).on('click', '#PrintPDF', function () {
                var FromDate = $("#FromDate").val();
                var ToDate = $("#ToDate").val();
                var PaidToAccountNumber = $("#PaidToAccountNumber").val();
                var BankAccountNumber = $("#BankAccountNumber").val();
                var PostdatedAccountNumber = $("#PostdatedAccountNumber").val();

                var PostdatedCheques = $("#PostdatedCheques:checked").val();
                var PaidPostdatedCheque = $("#PaidPostdatedCheque:checked").val();
                var ReturnPostdatedCheque = $("#ReturnPostdatedCheque:checked").val();
                var ReturnPaidPostdatedCheque = $("#ReturnPaidPostdatedCheque:checked").val();
                var ChequeNumber = $("#ChequeNumber").val();





                if (PostdatedCheques) {
                    PostdatedCheques = 1
                }
                else {
                    PostdatedCheques = 0
                }

                if (PaidPostdatedCheque) {
                    PaidPostdatedCheque = 1

                }
                else {
                    PaidPostdatedCheque = 0

                }

                if (ReturnPostdatedCheque) {
                    ReturnPostdatedCheque = 1
                }
                else {
                    ReturnPostdatedCheque = 0
                }

                if (ReturnPaidPostdatedCheque) {
                    ReturnPaidPostdatedCheque = 1
                }
                else {
                    ReturnPaidPostdatedCheque = 0
                }

                if (ChequeNumber == '' || ChequeNumber == null) {
                    ChequeNumber = "0";
                }
                if (PaidToAccountNumber == '' || PaidToAccountNumber == null) {
                    PaidToAccountNumber = "0";
                }

                if (BankAccountNumber == '' || BankAccountNumber == null) {
                    BankAccountNumber = 0;
                }

                if (PostdatedAccountNumber == '' || PostdatedAccountNumber == null) {
                    PostdatedAccountNumber = "0";
                }


                var words = FromDate.split('/');
                FromDate = words[0] + words[1] + words[2];
                words = ToDate.split('/');
                ToDate = words[0] + words[1] + words[2];




                window.open('/PDFReport/GetAllChequesReportPDF2/' + FromDate + "/" + ToDate + "/" + PaidToAccountNumber + "/" + BankAccountNumber + "/" + PostdatedAccountNumber + "/"
                    + PostdatedCheques + "/" + PaidPostdatedCheque + "/" + ReturnPostdatedCheque + "/" + ReturnPaidPostdatedCheque + "/" + ChequeNumber, '_blank');


            });

            $(document).on('click', '#CloseForm', function () {
                window.location = "/Report/ReportDash";
            });
            $("#FromDate").blur(function () {
                var dDate = document.getElementById("FromDate").value;
                if (!validatedate(dDate)) {
                    bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                    document.getElementById("FromDate").value = '01/01/' + new Date().getFullYear()
                }
            });
            $("#ToDate").blur(function () {
                var dDate = document.getElementById("ToDate").value;
                if (!validatedate(dDate)) {
                    bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                    document.getElementById("ToDate").value = '01/01/' + new Date().getFullYear()
                }
            });
            $("#FromDate").mask("99/99/9999");
            $("#ToDate").mask("99/99/9999");
            $("#ChequeNumber").focus().select();
            $("#ChequeNumber").keyup(function (event) {
                if (event.keyCode == 13) {
                    $("#FromDate").focus().select();
                }

            });
            $("#FromDate").keyup(function (event) {
                if (event.keyCode == 13) {
                    $("#ToDate").focus().select();
                }

            });
            $("#ToDate").keyup(function (event) {
                if (event.keyCode == 13) {
                    $("#PaidToAccountNumber").focus().select();
                }

            });
            $("#PaidToAccountNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#PostdatedAccountNumber").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchAcc/PaymentChequeVoucherAccountNumberSearch';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
            $("#PostdatedAccountNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#BankAccountNumber").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchBankAccountNumber/PostdatedAccountNumberSecondSearch';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
            $("#BankAccountNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#ChequeNumber").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchBankAccountNumber/PostdatedAccountNumberThirdSearch';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });

            $('#BtnPostdatedAccountNumber').on('click', function () {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchBankAccountNumber/PostdatedAccountNumberSecondSearch';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                });
            });
            $('#BtnBankAccountNumber').on('click', function () {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchBankAccountNumber/PostdatedAccountNumberThirdSearch';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                });
            });
            $('#BtnPaidToAccountNumber').on('click', function () {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchAcc/PaymentChequeVoucherAccountNumberSearch';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            });
            var tabelMemRef = $("#tdataTable").DataTable({
                "language": {
                    "emptyTable": '@Resources.Resource.EmptyTable',
                    "search": '@Resources.Resource.Search',
                    "loadingRecords": '@Resources.Resource.LoadingRecords',
                    "processing": '@Resources.Resource.Processing',
                    "zeroRecords": '@Resources.Resource.ZeroRecords',
                    "info": '@Resources.Resource.Info',
                    "infoEmpty": '@Resources.Resource.InfoEmpty',
                    "lengthMenu": '@Resources.Resource.LengthMenu',
                    "infoFiltered": '@Resources.Resource.InfoFiltered',
                    "paginate": {
                        "previous": '@Resources.Resource.Previous',
                        "next": '@Resources.Resource.Next',
                        "first": '@Resources.Resource.First',
                        "last": '@Resources.Resource.Last',
                    },
                    "aria": {
                        "sortAscending": '@Resources.Resource.SortAscending',
                        "sortDescending": '@Resources.Resource.SortDescending'
                    }
                },
                "scrollX": true,
                "ordering": false,
                "autoWidth": false,
                "paging": false,
                "searching": false,
                "columnDefs": [
                    {
                        "targets": [0],
                        "className": "dt-center"
                    },
                    {
                        "targets": [1],
                        "className": "dt-center"
                    },
                    {
                        "targets": [2],
                        "className": "dt-center"
                    },
                    {
                        "targets": [3],
                        "className": "dt-center"
                    },
                    {
                        "targets": [4],
                        "className": "dt-center"
                    },
                    {
                        "targets": [5],
                        "className": "dt-center"
                    },
                    {
                        "targets": [6],
                        "className": "dt-center"
                    },
                    {
                        "targets": [7],
                        "className": "dt-center"
                    },
                    {
                        "targets": [8],
                        "className": "dt-center"
                    },
                    {
                        "targets": [9],
                        "className": "dt-center"
                    }
                ],
                dom: 'Bfrtip',
                buttons: [

                ],
                ajax: {
                    "type": "POST",
                    url: "/PaymentVoucherBank/GetAllChequesReport",
                    "data": function (d) {
                        d.FromDate = $("#FromDate").val();
                        d.ToDate = $("#ToDate").val();
                        d.PaidToAccountNumber = $("#PaidToAccountNumber").val();
                        d.BankAccountNumber = $("#BankAccountNumber").val();
                        d.PostdatedAccountNumber = $("#PostdatedAccountNumber").val();
                        d.PostdatedCheques = $("#PostdatedCheques:checked").val();
                        d.PaidPostdatedCheque = $("#PaidPostdatedCheque:checked").val();
                        d.ReturnPostdatedCheque = $("#ReturnPostdatedCheque:checked").val();
                        d.ReturnPaidPostdatedCheque = $("#ReturnPaidPostdatedCheque:checked").val();
                        d.ChequeNumber = $("#ChequeNumber").val();


                    },

                    dataSrc: ""
                },
                "footerCallback": function (row, data, start, end, display) {
                    var api = this.api(), data;
                    var intVal = function (i) {
                        return typeof i === 'string' ?
                            i.replace(/[\$,]/g, '') * 1 :
                            typeof i === 'number' ?
                                i : 0;
                    };
                    total = api.column(2).data().reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0);
                    var table = $('#tdataTable').DataTable();
                    document.getElementById("PaperCount").value = table.rows().count();
                    document.getElementById("PaperAmount").value = formatMoney(total, TheDecimalPointForTheLocalCurrency);
                },
                columns: [
                    {
                        data: "ChequeNumber"
                    },
                    {
                        data: "ChequeDate",
                        render: function (data, type, r) {
                            return moment(data).format('DD/MM/YYYY')
                        }

                    },
                    {
                        data: "ChequeAmount",
                        render: function (data, type, r) {
                            return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                        }
                    },
                    {
                        data: "PostdatedAccountName"
                    },
                    {
                        data: "BankAccountName"
                    },
                    {
                        data: "PaidToAccountName"
                    },
                    {
                        data: "DrawerName"

                    },
                    {

                        data: "OriginalVoucherNumber"
                    },
                    {
                        data: "OriginalCompanyTransactionKind"
                    },
                    {
                        data: "CaseName"
                    }
                ]

            });
            $(document).on('click', '#reload', function () {
                var dDate = document.getElementById("FromDate").value;
                var dToDate = document.getElementById("ToDate").value;
                if (!validatedate(dDate)) {
                    bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                }
                else if (!validatedate(dToDate)) {
                    bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                }
                else {
                    var dialog = bootbox.dialog({
                        title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                        message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                        closeButton: false
                    });
                    tabelMemRef.ajax.reload();
                    dialog.modal('hide');

                }
            });

            $(document).on('click', '.js-Pop', function (e) {
                $('#modal-container').removeData('bs.modal');
                e.preventDefault();
                $(this).attr('data-target', '#modal-container');
                $(this).attr('data-toggle', 'modal');

            });
            $('#modal-container').on('hidden.bs.modal', function () {
                $(this).removeData('bs.modal');
            });
            $('#CancelModal').on('click', function () {
                return false;
            });
            $('#BtnClearPaidToAccountNumber').on('click', function () {
                document.getElementById("PaidToAccountNumber").value = '';
                document.getElementById("PaidToAccount").value = '';
            });
            $('#BtnClearBankAccountNumber').on('click', function () {
                document.getElementById("BankAccountNumber").value = '';
                document.getElementById("BankName").value = '';
            });
            $('#BtnClearPostdatedAccountNumber').on('click', function () {
                document.getElementById("PostdatedAccountNumber").value = '';
                document.getElementById("PostdatedAccountName").value = '';
            });

            $("#PaidToAccountNumber").blur(function () {
                var AccountNumber = document.getElementById("PaidToAccountNumber").value;
            if (AccountNumber == '') {
                document.getElementById("PaidToAccount").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckAcountAcc", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("PaidToAccountNumber").value = '';
                            document.getElementById("PaidToAccount").value = '';
                            $("#PaidToAccountNumber").focus();
                        }
                        else {
                            document.getElementById("PaidToAccount").value = Data.AccountName;

                        }
                    });
                }
            }
        });
            $("#PostdatedAccountNumber").blur(function () {
                var AccountNumber = document.getElementById("PostdatedAccountNumber").value;
            if (AccountNumber == '') {
                document.getElementById("PostdatedAccountName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckDefinitionBank", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("PostdatedAccountNumber").value = '';
                            document.getElementById("PostdatedAccountName").value = '';
                            $("#PostdatedAccountNumber").focus();
                        }
                        else {
                            document.getElementById("PostdatedAccountNumber").value = Data.PostdatedChequeAccountNumber;
                            document.getElementById("PostdatedAccountName").value = Data.BankAccountName;

                        }
                    });
                }
            }
        });
            $("#BankAccountNumber").blur(function () {
                var AccountNumber = document.getElementById("BankAccountNumber").value;
            if (AccountNumber == '') {
                document.getElementById("BankName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckDefinitionBank", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("BankAccountNumber").value = '';
                            document.getElementById("BankName").value = '';
                            $("#BankAccountNumber").focus();
                        }
                        else {
                            document.getElementById("BankName").value = Data.BankAccountName;

                        }
                    });
                }
            }
        });
        });
</script>
}
