@model Acc.ViewModels.St_HeaderVM
@{
    ViewBag.Title = @Resources.Resource.Detail;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .panel-body {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-footer {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-title {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .dt-button {
        display: none !important;
    }

    .dt-button {
        display: none !important;
    }

    table.dataTable th.dt-center {
        font-size: 8pt !important;
        font-family: Verdana, Geneva, Tahoma, sans-serif;
    }

    #BodyStyle {
        font-size: 8pt;
        font-weight: bold;
        font-family: Verdana, Geneva, Tahoma, sans-serif;
    }

    table.dataTable thead .sorting::after, table.dataTable thead .sorting_asc::after, table.dataTable thead .sorting_desc::after {
        display: none !important;
    }
</style>
<div style="padding-top: 20px;">
    <div class="panel card-view">
        <div class="panel-heading" style="background-color: #34495E">
            <div class="pull-left">
                <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.Detail - @Resources.Resource.LocalReturnPurchaseVoucher</h6>
            </div>
            <div class="clearfix"></div>
        </div>
        <div class="panel-body">
            <div class="col-lg-12">
                <div class="col-lg-3">
                    @Html.Label(Resources.Resource.Warehouses)
                    <div class="form-group">
                        @if (Resources.Resource.CurLang == "Arb")
                        {
                            @Html.DropDownListFor(m => m.StockCode, new SelectList(Model.St_Warehouse, "StockCode", "ArabicName"), new { @id = "StockCode", @class = "form-control input-sml", @disabled = "disabled" })

                        }
                        else
                        {
                            @Html.DropDownListFor(m => m.StockCode, new SelectList(Model.St_Warehouse, "StockCode", "EnglishName"), new { @id = "StockCode", @class = "form-control input-sml", @disabled = "disabled" })
                        }
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.VoucherCase)
                        @Html.DropDownListFor(m => m.VoucherCase, new List<SelectListItem>{
                       new SelectListItem{ Text=Resources.Resource.Cash, Value = "1",Selected=true },
                       new SelectListItem{ Text=Resources.Resource.VoucherCredit, Value = "2",Selected=false },
                   }, new { @id = "VoucherCase", @class = "form-control input-sml", @disabled = "disabled" })
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.TaxType)
                        @Html.DropDownListFor(m => m.TaxType, new List<SelectListItem>{
                       new SelectListItem{ Text=Resources.Resource.Taxable, Value = "1",Selected=true },
                       new SelectListItem{ Text=Resources.Resource. TaxableByZero, Value = "2",Selected=false },
                       new SelectListItem{ Text=Resources.Resource. TaxExempt, Value = "3",Selected=false }
                   }, new { @id = "TaxType", @class = "form-control input-sml", @disabled = "disabled" })
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.OriginalVoucher)
                        @Html.TextBoxFor(m => m.OriginalVoucherNumber, new { @id = "OriginalVoucherNumber", @class = "form-control input-sml", @readonly = "readonly" })
                    </div>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.BillID)
                        @Html.TextBoxFor(m => m.VoucherNumber, new { @id = "VoucherNumber", @class = "form-control input-sml", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.BillDate)
                        @Html.TextBoxFor(model => model.VoucherDate, new { @id = "VoucherDate", @class = "form-control input-sml", @Value = Model.VoucherDate.ToString("dd/MM/yyyy"), data_val = "false", @readonly = "readonly" })
                        @Html.ValidationMessageFor(m => m.VoucherDate)
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.SupplierAccountNo)
                        <div class="form-group">
                            @Html.TextBoxFor(m => m.AccountNumber, new { @id = "AccountNumber", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.AccountName)
                        <div class="form-group">
                            @Html.TextBoxFor(m => m.AccountName, new { @id = "AccountName", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="col-lg-3">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.DebitAccountNumber)
                        <div class="form-group">
                            @Html.TextBoxFor(m => m.DebitAccountNumber, new { @id = "DebitAccountNumber", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.AccountName)
                        <div class="form-group">
                            @Html.TextBoxFor(m => m.DebitAccountName, new { @id = "DebitAccountName", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                @if (Model.WorkWithCostCenter)
                {
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.DebitCostCenter)
                            <div class="form-group">
                                @Html.TextBoxFor(m => m.DebitCostNumber, new { @id = "DebitCostNumber", @class = "form-control input-sml", @readonly = "readonly" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.CostCenterName)
                            <div class="form-group">
                                @Html.TextBoxFor(m => m.DebitCostName, new { @id = "DebitCostName", @class = "form-control input-sml", @readonly = "readonly" })
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="col-lg-12">
                <div class="col-lg-3">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.CreditAccountNumber)
                        <div class="form-group">
                            @Html.TextBoxFor(m => m.CreditAccountNumber, new { @id = "CreditAccountNumber", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.AccountName)
                        <div class="form-group">
                            @Html.TextBoxFor(m => m.CreditAccountName, new { @id = "CreditAccountName", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                @if (Model.WorkWithCostCenter)
                {
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.CreditCostNumber)
                            <div class="form-group">
                                @Html.TextBoxFor(m => m.CreditCostNumber, new { @id = "CreditCostNumber", @class = "form-control input-sml", @readonly = "readonly" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.CostCenterName)
                            <div class="form-group">
                                @Html.TextBoxFor(m => m.CreditCostName, new { @id = "CreditCostName", @class = "form-control input-sml", @readonly = "readonly" })
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="col-lg-12">
                <div class="col-lg-3">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.TaxAccountNumber)
                        @Html.TextBoxFor(m => m.TaxAccountNumber, new { @id = "TaxAccountNumber", @class = "form-control input-sml", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.AccountName)
                        @Html.TextBoxFor(m => m.TaxAccountName, new { @id = "TaxAccountName", @class = "form-control input-sml", @readonly = "readonly" })
                    </div>
                </div>
                @if (Model.WorkWithCostCenter)
                {
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.TaxCostCenter)
                            <div class="form-group">
                                @Html.TextBoxFor(m => m.TaxCostNumber, new { @id = "TaxCostNumber", @class = "form-control input-sml", @readonly = "readonly" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.CostCenterName)
                            <div class="form-group">
                                @Html.TextBoxFor(m => m.TaxCostName, new { @id = "TaxCostName", @class = "form-control input-sml", @readonly = "readonly" })
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="col-lg-12" style="padding-top:20px;">
                <div class="col-lg-12">
                    <table id="tdataTable" class="table table-hover table-bordered mb-0" width="100%">
                        <thead>
                            <tr>
                                <th>@Resources.Resource.ItemCode</th>
                                <th>@Resources.Resource.ItemName</th>
                                <th>@Resources.Resource.Unit</th>
                                <th>@Resources.Resource.Quantity</th>
                                <th>@Resources.Resource.Bonus</th>
                                <th>@Resources.Resource.TaxRate</th>
                                <th>@Resources.Resource.Price</th>
                                <th>@Resources.Resource.Discount</th>
                                <th>@Resources.Resource.DiscountPercentage</th>
                                <th>@Resources.Resource.PriceAfterLineDisc</th>
                                <th>@Resources.Resource.NetTotal</th>
                            </tr>
                        </thead>

                        <tbody>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="col-lg-12" style="margin-top : 5px">
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.Total)
                        @Html.TextBoxFor(m => m.sNetTotalLocalAfterLineDiscount, new { @id = "sNetTotalLocalAfterLineDiscount", @class = "form-control input-sml", @readonly = "readonly" })
                        @Html.ValidationMessageFor(m => m.NetTotalLocalAfterLineDiscount)
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.Discount)
                        @Html.TextBoxFor(m => m.NetTotalDiscountLocal, new { @id = "NetTotalDiscountLocal", @class = "form-control input-sml", @readonly = "readonly" })
                        @Html.ValidationMessageFor(m => m.NetTotalDiscountLocal)
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.DiscountPercentage)
                        @Html.TextBoxFor(m => m.sDiscountPercentage, new { @id = "sDiscountPercentage", @class = "form-control input-sml", @readonly = "readonly" })@*3*@
                        @Html.ValidationMessageFor(m => m.DiscountPercentage)
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.TotalAfterDiscount)
                        @Html.TextBoxFor(m => m.sNetTotalLocalAfterDiscount, new { @id = "sNetTotalLocalAfterDiscount", @class = "form-control input-sml", @readonly = "readonly" })
                        @Html.ValidationMessageFor(m => m.NetTotalLocalAfterDiscount)
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.Tax)
                        @Html.TextBoxFor(m => m.sNetTotalTaxLocal, new { @id = "sNetTotalTaxLocal", @class = "form-control input-sml", @readonly = "readonly" })
                        @Html.ValidationMessageFor(m => m.NetTotalTaxLocal)
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.NetTotal)
                        @Html.TextBoxFor(m => m.sNetTotalLocal, new { @id = "sNetTotalLocal", @class = "form-control input-sml", @readonly = "readonly" })
                        @Html.ValidationMessageFor(m => m.NetTotalLocal)
                    </div>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="col-lg-6">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.Note)
                        @Html.TextBoxFor(m => m.Remark, new { @id = "Remark", @class = "form-control input-sml", @readonly = "readonly" })
                        @Html.ValidationMessageFor(m => m.Remark)
                    </div>
                </div>
                <div class="col-lg-6">
                    @Html.Label(Resources.Resource.Hints)
                    @Html.TextBoxFor(m => m.Hint, new { @id = "Hint", @class = "form-control input-sml", @readonly = "readonly" })
                    @Html.ValidationMessageFor(m => m.Hint)
                </div>
            </div>
        </div>
        <div class="panel-footer">
            <button type="button" class="btn btn-warning btn-anim" id="PrintPDF"><i class=" fa fa-print"></i><span class="btn-text">@Resources.Resource.Print</span></button>
            <button type="button" class="btn btn-default btn-anim" id="Close"><i class="fa fa-times"></i><span class="btn-text">@Resources.Resource.Close</span></button>
        </div>
    </div>
</div>
@Html.TextBoxFor(m => m.DiscountPercentage, new { @id = "DiscountPercentage", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })@*2*@
@Html.TextBoxFor(m => m.NetTotalLocalBeforDiscount, new { @id = "NetTotalLocalBeforDiscount", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalLineDiscountLocal, new { @id = "NetTotalLineDiscountLocal", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalLocalAfterLineDiscount, new { @id = "NetTotalLocalAfterLineDiscount", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalTaxAfterLineDiscountLocal, new { @id = "NetTotalTaxAfterLineDiscountLocal", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalAfterLineDiscountBeforDiscountAllLocal, new { @id = "NetTotalAfterLineDiscountBeforDiscountAllLocal", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalLocalAfterDiscount, new { @id = "NetTotalLocalAfterDiscount", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalTaxLocal, new { @id = "NetTotalTaxLocal", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalLocal, new { @id = "NetTotalLocal", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.TheDecimalPointForTheLocalCurrency, new { @id = "TheDecimalPointForTheLocalCurrency", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.CompanyTransactionKindNo, new { @id = "CompanyTransactionKindNo", @style = "visibility : hidden;" })
@Html.CheckBoxFor(m => m.WorkWithCostCenter, new { @id = "WorkWithCostCenter", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TransactionKindNo, new { @id = "TransactionKindNo", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.CurrencyID, new { @id = "CurrencyID", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.ConversionFactor, new { @id = "ConversionFactor", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.CompanyYear, new { @id = "CompanyYear", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.OrignailTaxAccountNumber, new { @id = "OrignailTaxAccountNumber", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.OrignailTaxAccountName, new { @id = "OrignailTaxAccountName", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;" })
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
    $(document).ready(function () {
        var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
        function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
            try {
                decimalCount = Math.abs(decimalCount);
                decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

                const negativeSign = amount < 0 ? "-" : "";

                let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
                let j = (i.length > 3) ? i.length % 3 : 0;

                return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
            } catch (e) {
                console.log(e)
            }
        };
        document.getElementById("sNetTotalLocalAfterLineDiscount").value = formatMoney(document.getElementById("NetTotalLocalAfterLineDiscount").value, TheDecimalPointForTheLocalCurrency);
        document.getElementById("sNetTotalLocalAfterDiscount").value = formatMoney(document.getElementById("NetTotalLocalAfterDiscount").value, TheDecimalPointForTheLocalCurrency);
        document.getElementById("sNetTotalTaxLocal").value = formatMoney(document.getElementById("NetTotalTaxLocal").value, TheDecimalPointForTheLocalCurrency);
        document.getElementById("sNetTotalLocal").value = formatMoney(document.getElementById("NetTotalLocal").value, TheDecimalPointForTheLocalCurrency);
        document.getElementById("sDiscountPercentage").value = formatMoney(document.getElementById("DiscountPercentage").value, TheDecimalPointForTheLocalCurrency);
        $(document).on('click', '#Close', function () {
            window.location = "/St_ReturnPurchaseVoucherLocal/Index";
        });

      $(document).on('click', '#PrintPDF', function () {

        window.open('/St_PDFReport/St_ReturnPurchaseVoucherDetailPDF/@Model.VoucherNumber/@Model.CompanyTransactionKindNo/@Model.TransactionKindNo/@Model.CompanyYear/@Model.StockCode', '_blank');
        });

        var tabelMemRef = $("#tdataTable").DataTable({
            "language": {
                "emptyTable": '@Resources.Resource.EmptyTable',
                "search": '@Resources.Resource.Search',
                "loadingRecords": '@Resources.Resource.LoadingRecords',
                "processing": '@Resources.Resource.Processing',
                "zeroRecords": '@Resources.Resource.ZeroRecords',
                "info": '@Resources.Resource.Info',
                "infoEmpty": '@Resources.Resource.InfoEmpty',
                "lengthMenu": '@Resources.Resource.LengthMenu',
                "infoFiltered": '@Resources.Resource.InfoFiltered',
                "paginate": {
                    "previous": '@Resources.Resource.Previous',
                    "next": '@Resources.Resource.Next',
                    "first": '@Resources.Resource.First',
                    "last": '@Resources.Resource.Last',
                },
                "aria": {
                    "sortAscending": '@Resources.Resource.SortAscending',
                    "sortDescending": '@Resources.Resource.SortDescending'
                }
            },
            "scrollY": "150px",
            "scrollX": true,
            "ordering": false,
            "autoWidth": false,
            "paging": false,
            "searching": false,
            "columnDefs": [
                {
                    "className": "dt-center",
                    "targets": "_all",
                    "orderable": false,

                }],

            dom: 'Bfrtip',


            ajax: {
                "type": "GET",
                url: "/St_ReturnPurchaseVoucherLocal/GetItems/@Model.VoucherNumber/@Model.CompanyTransactionKindNo/@Model.TransactionKindNo/@Model.CompanyYear/@Model.StockCode",

                dataSrc: ""
            },
            columns: [
                {
                    data: "ItemCode"

                },
                {
                    data: "ItemName"

                },
                {
                    data: "ItemUnitName"

                },
                {
                    data: "Quantity"

                },
                {
                    data: "Bonus"

                },
                {
                    data: "TaxRate",
                    render: function (data, type, r) {
                        return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                    }

                },
                {
                    data: "PricePieceLocalBeforDiscount",
                    render: function (data, type, r) {
                        return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                    }

                },
                {
                    data: "TotalLineDiscountLocal",
                    render: function (data, type, r) {
                        return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                    }

                },
                {
                    data: "LineDiscountPercentage",
                    render: function (data, type, r) {
                        return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                    }

                },
                {
                    data: "PricePieceLocalAfterLineDiscount",
                    render: function (data, type, r) {
                        return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                    }

                },
                {
                    data: "TotalLocalAfterLineDiscount",
                    render: function (data, type, r) {
                        return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                    }

                }
            ]

        });
    });
</script>
}