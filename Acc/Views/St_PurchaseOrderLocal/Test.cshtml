@model Acc.ViewModels.St_PurchaseOrderVM
@{
    ViewBag.Title = @Resources.Resource.Save;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .panel-body {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-footer {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-title {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .dt-button {
        display: none !important;
    }

    #ItemsGrid_DXHeadersRow0 {
        font-family: Verdana, Geneva, Tahoma, sans-serif !important;
        font-size: 10pt;
    }

    .dxgvBatchEditNewItem_iOS {
        font-family: Verdana, Geneva, Tahoma, sans-serif !important;
        font-size: 10pt;
    }

    .dxgvControl_iOS {
        width: 100% !important;
    }

    #ItemsGrid_col0 {
        width: 55px;
    }

    .hideColumn {
        display: none !important;
    }
</style>
<link href="~/Content/jquery-ui.css" rel="stylesheet" />
<script>
       function myFunction() {
     $.ajax({
            type: "POST",
            url: "@Html.Raw(Url.Action("GridViewItems",  new { @id = "1", @id2 = "504", @id3 = "513", @id4 = "2020"}))"  ,
            success: function(response) {
                $("#container").html(response);
            }
        });
}
    var LastStatment = "";
    var SumDebit = 0;
    var SumCredit = 0;
    var preventEndEditOnLostFocus = false;
    var currentEditedValue;
    var SelectAccount;
    var lastVisibleIndex;
    var FocusedCellColumnIndex = 0;
    var FocusedCellRowIndex = 0;
    function GetSelectedPurchaseOrderItemCode(data) {
        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemCode", data.ItemCode);
        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemName", data.ItemName);
        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemUnitName", data.ItemUnitName);
        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "SimilarItemCode", data.ItemCode);
    }
    var PurchaseOrderItem = [];
     $.getJSON('@Url.Action("GetAllSt_ItemCard", "MultiUse")', { id: 0 }, function (Data) {
         PurchaseOrderItem = [];
         for (var i = 0, len = Data.length; i < len; i++) {
             var r = {
                 label: Data[i].ItemName, value: Data[i].ItemCode, stop: Data[i].StopItem, unit: Data[i].ItemUnitName
             };
             PurchaseOrderItem.push(r);
         }
     });
    function validatedate(dateString) {
        var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
        if (dateString.match(dateformat)) {
            var operator = dateString.split('/');
            var datepart = [];
            if (operator.length > 1) {
                datepart = dateString.split('/');
            }
            var month = parseInt(datepart[1]);
            var day = parseInt(datepart[0]);
            var year = parseInt(datepart[2]);
            var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
            if (month == 1 || month > 2) {
                if (day > ListofDays[month - 1]) {
                    return false;
                }
            } else if (month == 2) {
                var leapYear = false;
                if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                    leapYear = true;
                }
                if ((leapYear == false) && (day >= 29)) {
                    return false;
                } else
                    if ((leapYear == true) && (day > 29)) {
                        return false;
                    }
            }
        }
        else {
            return false;
        }
        return true;
    }
    function AutoCompleteItems(s, e) {
        $(s.GetInputElement()).autocomplete({
          minLength: 0,
            source: PurchaseOrderItem,
             select: function (event, ui) {
                 if (ui.item.stop == '0') {
                     s.SetValue(ui.item.value);
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemCode", data.ItemCode);
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemName", data.ItemName);
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemUnitName", data.ItemUnitName);
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "Quantity", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "SimilarItemCode", data.ItemCode);
                     ItemsGrid.batchEditApi.GetCellValue()
                 }
                 else {
                     bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheItemCardIsSuspended</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                     FocusedCellColumnIndexAlternativeItemCode = 1;
                     s.SetValue('');
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemCode", "");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemName", "");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemUnitName", "");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "Quantity", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "SimilarItemCode", "");
                 }
             return false;
             },
             position:
             {
                 my: "left top",
                 at: "left bottom",
                 of: s.GetMainElement()
             }

        });
    }
    function ClearGrid(s, e)
    {
        ItemsGrid.PerformCallback('clear');
    }
    function LoopGrid(s, e) {
        var dDate = document.getElementById("VoucherDate").value;
        if (!validatedate(dDate) && dDate != null && dDate != '') {
            bootbox.alert({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                className: 'rubberBand animated',
                buttons: {
                    ok: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                        className: 'btn-primary'
                    }
                }
            });
        }
        else if (dDate != null && dDate != '') {
            var iError = 0;
            var visibleRowIndices = ItemsGrid.batchEditApi.GetRowVisibleIndices();
                    for (var i = 0; i < visibleRowIndices.length; i++) {
                        if (ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ItemCode") == "" || ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ItemCode") == null) {
                            iError = 1;
                            break;
                        }
                        else if (ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ItemName") == "" || ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ItemName") == null) {
                            iError = 1;
                            break;
                        }
                        else if (ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Quantity") == "" || ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Quantity") == null
                            || ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Quantity") == 0) {
                            iError = 2;
                            break;
                        }
                    }
                    if (iError == 1) {
                        bootbox.alert({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillItemCode</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                ok: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                    className: 'btn-primary'
                                }
                            }
                        });
                    }
                    else if (iError == 2) {
                        bootbox.alert({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillQuantity</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                ok: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                    className: 'btn-primary'
                                }
                            }
                        });
                    }
                    else if ($("#SupplierAccountNumber").val() == '') {
                        bootbox.alert({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                ok: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                    className: 'btn-primary'
                                }
                            }
                        });
                    }
                    else {
                        bootbox.confirm({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                confirm: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                    className: 'btn-success'
                                },
                                cancel: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                    className: 'btn-danger'
                                }
                            },
                            callback: function (result) {
                                if (result) {
                                    var dialog = bootbox.dialog({
                                        title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                        message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Saving...</p>',
                                        closeButton: false
                                    });
                                    var visibleRowIndices = ItemsGrid.batchEditApi.GetRowVisibleIndices();
                                    var ItemList = [];
                                    for (var i = 0; i < visibleRowIndices.length; i++) {
                                        var Items = {
                                            ItemCode: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ItemCode"),
                                            Quantity: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Quantity"),
                                            SimilarItemCode: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "SimilarItemCode"),
                                            RowNumber: i + 1
                                        };
                                        ItemList.push(Items);

                                    }
                                    var dataToSave = {
                                        St_PurchaseOrderTransaction: ItemList,
                                        CompanyTransactionKindNo: $("#CompanyTransactionKindNo").val(),
                                        TransactionKindNo: $("#TransactionKindNo").val(),
                                        VoucherCase: $("#VoucherCase").val(),
                                        TaxType: $("#TaxType").val(),
                                        CompanyYear: $("#CompanyYear").val(),
                                        SupplierAccountNumber: $("#SupplierAccountNumber").val(),
                                        Hint: $("#Hint").val(),
                                        CurrencyID: $("#CurrencyID").val(),
                                        VoucherNumber: $("#VoucherNumber").val(),
                                        VoucherDate: $("#VoucherDate").val(),
                                        Remark: $("#Remark").val(),
                                        ConversionFactor: $("#ConversionFactor").val()
                                    }
                                    $.ajax({
                                        type: "POST",
                                        url: "/St_PurchaseOrderLocal/Save",
                                        data: JSON.stringify(dataToSave),
                                        contentType: 'application/json',
                                        success: function (data) {

                                            dialog.modal('hide');
                                            if (data.Code == 0) {
                                                toastr.error(data.Msg);
                                            }
                                            else if (data.Code == 1) {
                                                $('#modal-container').modal('hide');
                                                toastr.success(data.Msg);
                                                document.getElementById("Clear").click();
                                                $('#modal-container').modal('hide');
                                            }
                                        },
                                        error: function (data) {
                                            dialog.modal('hide');
                                            toastr.error(data);

                                        }
                                    });
                                }
                            }
                        });
                    }
        }
    }
    function OnInit(s, e) {
        ASPxClientUtils.AttachEventToElement(
            s.GetMainElement(),
            "keydown",
            function (evt) {
                if (evt.ctrlKey && FocusedCellColumnIndex == 1) {
                    var dialog = bootbox.dialog({
                        title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                        message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                        closeButton: false
                    });
                    var url = '/MultiUse/SearchSt_ItemCard/PurchaseOrderItemCode';
                    $.get(url, function (data) {
                        $('#modal-container').html(data);
                        $('#modal-container').modal('show');
                        dialog.modal('hide');
                    })
                }
                switch (evt.keyCode) {
                    case 13:
                        if (FocusedCellColumnIndex == 4) {
                            s.AddNewRow();
                        }
                        break;
                }
            });
    };
    function Grid_BatchEditEndEditing(s, e) {
        var productNameColumn = s.GetColumnByField("ItemCode");
        if (!e.rowValues.hasOwnProperty(productNameColumn.index))
            return;
        if (FocusedCellColumnIndex == 1) {
            var ItemCodeIndex = s.GetColumnByField("ItemCode").index;
            var ItemCode = e.rowValues[ItemCodeIndex].value;
            if (!ItemCode) {
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemCode", "");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemName", "");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemUnitName", "");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "Quantity", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "SimilarItemCode", "");
            }
            else {
                if (ItemCode != null && ItemCode != '') {
                    $.getJSON('@Url.Action("CheckItemCode", "St_ItemCard")', { id: ItemCode }, function (Data) {
                        if (Data == "") {
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemCode", "");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemName", "");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemUnitName", "");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "Quantity", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "SimilarItemCode", "");
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheItemCardDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            FocusedCellColumnIndex = 1;
                        }
                        else {
                            if (Data.StopItem) {
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemCode", "");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemName", "");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemUnitName", "");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "Quantity", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "SimilarItemCode", "");
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheItemCardIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                FocusedCellColumnIndex = 1;
                            }
                            else {
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemCode", Data.ItemCode);
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemName", Data.ItemName);
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemUnitName", Data.ItemUnitName);
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "Quantity", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "SimilarItemCode", ItemCode);
                            }
                        }
                    });
                }
            }
        }
        FocusedCellColumnIndex = 1;
        FocusedCellRowIndex = 1;
    }
    function Grid_BatchEditStartEditing(s, e) {
        FocusedCellColumnIndex = e.focusedColumn.index;
        FocusedCellRowIndex = e.visibleIndex;
        var productNameColumn = s.GetColumnByField("ItemCode");
        if (!e.rowValues.hasOwnProperty(productNameColumn.index))
            return;
        lastVisibleIndex = e.visibleIndex;
        currentEditedValue = s.GetRowKey(e.visibleIndex);
        currentKey = s.GetRowKey(e.visibleIndex);
    }
    function OnBeginCallback(s, e) {
        e.customArgs["Reference"] = $("#Reference").val();
    }
    function OnEndCallback(s, e) {
        if (s.cpSuccessFlag) {
            alert("All changes were saved");
            window.location = "@Url.Action("Success","Test1")";
        }
    }
    function OnClickPostData(s, e) {
        if (ItemsGrid.batchEditApi.HasChanges())
            ItemsGrid.UpdateEdit();
        else
            ItemsGrid.PerformCallback();
    }
    function Grid_DeleteRowEvent(s, e) {
        }
    function GetSelectedAccount(data) {
        if (data.AccountNumber != null && data.AccountNumber != '') {
            document.getElementById("SupplierAccountNumber").value = data.AccountNumber;
            document.getElementById("SupplierAccountName").value = data.AccountName;
        }
        else {
            document.getElementById("SupplierAccountNumber").value = '';
            document.getElementById("SupplierAccountName").value = '';
        }

    }
    var SupplierAccNumber = [];
    $.getJSON('@Url.Action("GetClientAccount", "MultiUse")', { id: 0 }, function (Data) {
        SupplierAccNumber = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].AccountName, value: Data[i].AccountNumber, stop: Data[i].StoppedAccount};
                SupplierAccNumber.push(r);
            }
    });
    $(function () {
        $("#SupplierAccountNumber").autocomplete({
            source: SupplierAccNumber,
            select: function (event, ui) {
                document.getElementById("SupplierAccountNumber").value = ui.item.value;
                document.getElementById("SupplierAccountName").value = ui.item.label;
            }
        });
    });
</script>

@using (Html.BeginForm("Add", "St_PurchaseOrderLocal", FormMethod.Post, new { id = "myForm" }))
{
    <div style="padding-top: 20px;">
        <div class="panel card-view">
            <div class="panel-heading" style="background-color: #34495E">
                <div class="pull-left">
                    <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.Save - @Resources.Resource.LocalPurchaseOrder</h6>
                </div>
                <div class="clearfix"></div>
            </div>
            <div class="panel-body">
                <div class="col-lg-12">
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.PurchaseOrderNo)
                            @Html.TextBoxFor(m => m.VoucherNumber, new { @id = "VoucherNumber", @class = "form-control input-sml", @onblur="myFunction()" })
                        </div>
                    
                    </div>
               
                </div>
                <div class="col-lg-12" style="padding-top:20px;">
                    <div class="col-lg-12 container"  id="container" >
                        @Html.Action("GridViewItems", new { id = "", id2 = "", id3 = "", id4 = "" } )
                    </div>
                </div>
            </div>
            <div class="panel-footer">
                @Html.DevExpress().Button(settings =>
           {
               settings.Name = "buttonSave";
               settings.Text = Resources.Resource.Save;
               settings.UseSubmitBehavior = false;
               settings.ClientVisible = false;
               settings.ClientSideEvents.Click = "LoopGrid";
           }).GetHtml()
                <button type="button" class="btn btn-primary btn-anim" id="Save"><i class="fa fa-save"></i><span class="btn-text">@Resources.Resource.Save</span> </button>
                <button type="button" class="btn btn-default btn-anim" id="Close"><i class="fa fa-times"></i><span class="btn-text">@Resources.Resource.Close</span></button>
            </div>
        </div>
    </div>
}
<div id="modal-container" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-content">
    </div>
</div>
@Html.TextBoxFor(m => m.CompanyTransactionKindNo, new { @id = "CompanyTransactionKindNo", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TransactionKindNo, new { @id = "TransactionKindNo", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.CurrencyID, new { @id = "CurrencyID", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.ConversionFactor, new { @id = "ConversionFactor", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.CompanyYear, new { @id = "CompanyYear", @style = "visibility : hidden;" })
@section Scripts {
   

    <script>
        $(document).ready(function () {


        function validatedate(dateString) {
            var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
            if (dateString.match(dateformat)) {
                var operator = dateString.split('/');
                var datepart = [];
                if (operator.length > 1) {
                    datepart = dateString.split('/');
                }
                var month = parseInt(datepart[1]);
                var day = parseInt(datepart[0]);
                var year = parseInt(datepart[2]);
                var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                if (month == 1 || month > 2) {
                    if (day > ListofDays[month - 1]) {
                        return false;
                    }
                } else if (month == 2) {
                    var leapYear = false;
                    if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                        leapYear = true;
                    }
                    if ((leapYear == false) && (day >= 29)) {
                        return false;
                    } else
                        if ((leapYear == true) && (day > 29)) {
                            return false;
                        }
                }
            }
            else {
                return false;
            }
            return true;
        }
        $(document).on('click', '#Close', function () {
            window.location = "/St_PurchaseOrderLocal/Index";
        });

     
        

    });
    </script>
}




