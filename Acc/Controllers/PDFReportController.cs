using Acc.DevReport;
using Acc.Helpers;
using Acc.Models;
using Acc.Persistence;
using Acc.Repositories;
using Acc.ViewModels;
using DevExpress.DataProcessing;
using DevExpress.Utils.DPI;
using DevExpress.Utils.StructuredStorage.Internal.Reader;
using DevExpress.Web;
using DevExpress.XtraReports.UI;
using Microsoft.AspNet.Identity;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Net.Mail;
using System.Web;
using System.Web.Mvc;

namespace Acc.Controllers
{
    [Authorize]
    public class PDFReportController : BaseController
    {
        private readonly IUnitOfWork _unitOfWork;

        public PDFReportController()
        {
            _unitOfWork = new UnitOfWork(new ApplicationDbContext());
        }
        public ActionResult TestDesing()
        {
            // Validate input

            return View();
        }

        //public ActionResult GetTransActionsDetailNagham(string id, int id2, int id3, string id4)
        //{
        //    var userId = User.Identity.GetUserId();
        //    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
        //    var u = _unitOfWork.Transaction.GetTransactionsDetail(id, id2, UserInfo.fCompanyId, id3);




        //    XtraNaghamReport1 report = new XtraNaghamReport1();

        //    // cokin 
        //    string reportFilePath = Server.MapPath("/ReportLayout/XtraNaghamReport1.repx");
        //    report.LoadLayoutFromXml(reportFilePath);

        //    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);


        //    DataSet ds = new DataSet();
        //    DataTable table1 = new DataTable("Transaction");
        //    table1 = FunctionUnit.LINQResultToDataTable(u);

        //    ds.Tables.Add(table1);

        //    report.DataSource = ds;
        //    report.DataMember = "Transaction";


        //    report.LbCoName.Text = CoInfo.ArabicName;
        //    //   report.LbVhDate.Text = HeadrObj.VoucherDate.ToString("dd/MM/yyyy");
        //    //  report.LbVhNo.Text = HeadrObj.VoucherNumber.ToString();


        //    report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

        //    report.CreateDocument();



        //    return View("ReportPDF", report);



        //}


        public ActionResult GetPapersToPaymentVoucherBankPDF(string id, int id2, int id3, int id4)
        {
            string UserID = User.Identity.GetUserId();
            var UserInfo = _unitOfWork.User.GetMyInfo(UserID);

            var HeaderObj = _unitOfWork.Header.GetHeaderDataById(id, UserInfo.fCompanyId, id2, id3 ,id4);
            var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, HeaderObj.CompanyTransactionKindNo);
            var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, HeaderObj.FCurrencyID);
            var Company = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
            var TransactionDebitObj = _unitOfWork.NativeSql.GetTransactionsDetailDebit(id, UserInfo.fCompanyId, id2, 1 , id4);
            var AllPapersToPaymnetVoucherBank = _unitOfWork.NativeSql.GetPapersToPaymentVoucherBank(id, id2, UserInfo.fCompanyId, id3, id4);
            var TransactionCreditObj = _unitOfWork.NativeSql.GetTransactionsDetailCredit(id, UserInfo.fCompanyId, id2, 2 , id4);
            int iRowNumber = HeaderObj.RowCount;
            var TransFixedVM = new TransactionFixedVM { };
            TransFixedVM.Header = HeaderObj;
            TransFixedVM.TransactionDebit = TransactionDebitObj;
            TransFixedVM.TransactionCredit = TransactionCreditObj;
            if (Resources.Resource.CurLang == "Arb")
            {
                TransFixedVM.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                TransFixedVM.CurrencyName = CurrencyObj.ArabicName;
            }
            else
            {
                TransFixedVM.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;
                TransFixedVM.CurrencyName = CurrencyObj.EnglishName;
            }
            TransFixedVM.CurrencyNewValue = Math.Round(HeaderObj.ConversionFactor, 3);
            TransFixedVM.WorkWithCostCenter = Company.WorkWithCostCenter;
            TransFixedVM.AccountDebitName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TransactionDebitObj.AccountNumber);
            TransFixedVM.CostCenterDebitName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TransactionDebitObj.CostCenter);
            TransFixedVM.CostCenterCreditName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TransactionCreditObj.CostCenter);
            TransFixedVM.Amount = Math.Round(TransactionDebitObj.Debit, 3);
            TransFixedVM.TotalAmount = Math.Round(HeaderObj.TotalDebit, 3);
            TransFixedVM.ForeignAmount = Math.Round(TransactionDebitObj.DebitForeign, 3);
            TransFixedVM.TotalForeign = Math.Round(HeaderObj.TotalDebitForeign, 3);

       


            if (Company.WorkWithCostCenter)
            {
                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TransactionFixedVM");
                table1 = FunctionUnit.LINQResultToDataTable(AllPapersToPaymnetVoucherBank);

                ds.Tables.Add(table1);

                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                var report = new XtraPaymentVoucherBankReport();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraPaymentVoucherBankReport.repx");


                report.LoadLayoutFromXml(reportFilePath);


                report.PaidCostCenter.Text = TransFixedVM.TransactionDebit.CostCenter;


                if (!String.IsNullOrEmpty(TransFixedVM.TransactionDebit.CostCenter))
                {
                    var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, TransFixedVM.TransactionCredit.CostCenter);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.CostCenterDebitName.Text = AccName.ArabicName;
                    }
                    else
                    {
                        report.CostCenterDebitName.Text = AccName.EnglishName;
                    }

                }

                report.FromCostCenter.Text = TransFixedVM.TransactionCredit.CostCenter;


                if (!String.IsNullOrEmpty(TransFixedVM.TransactionCredit.CostCenter))
                {
                    var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, TransFixedVM.TransactionDebit.CostCenter);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.CostCenterCreditName.Text = AccName.ArabicName;
                    }
                    else
                    {
                        report.CostCenterCreditName.Text = AccName.EnglishName;
                    }

                }

                report.LbCoName.Text = CoInfo.ArabicName;
                //report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                //report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.LbVoucherNo.Text = TransFixedVM.Header.VoucherNumber;
                report.LbVDate.Text = TransFixedVM.Header.VoucherDate.ToString("dd/MM/yyyy");

                report.LbAccPaidFrom.Text = TransFixedVM.TransactionCredit.AccountNumber;
                report.LbAccDebitName.Text = TransFixedVM.AccountCreditName;

                report.LbAccDebitName.Text = TransFixedVM.AccountDebitName;
                report.LbNOte.Text = TransFixedVM.Header.Note;


                report.xrFromCostCenter.Text = TransFixedVM.FromCostCenter;
                report.xrToCostCenter.Text = TransFixedVM.ToCostCenter;
                report.xrCostCenterDebitName.Text = TransFixedVM.CostCenterDebitName;
                report.xrCostCenterCreditName.Text = TransFixedVM.CostCenterCreditName;

                report.LbNetTot.Text = TransFixedVM.Amount.ToString();

                report.xrCompanyTransactionKindName.Text = TransFixedVM.CompanyTransactionKindName;

                report.xrCurrencyNewValue.Text = TransFixedVM.CurrencyNewValue.ToString();
                report.xrCurrencyID.Text = TransFixedVM.CurrencyName;
                report.LbAccPaidFrom.Text = TransFixedVM.TransactionDebit.AccountNumber;


                report.FromAccountNumber.Text = TransFixedVM.TransactionDebit.AccountNumber;

                report.LbNOte.Text = TransFixedVM.Header.Note;

                //---Tafqet n3n3 --//
                if (Company.CurrencyRef == 0)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                else if (Company.CurrencyRef == 1)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                report.DataSource = ds;
                report.DataMember = "TransFixedVM";


                report.CreateDocument();



                return View("ReportPDF", report);
            }
            
           else
            {

                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TransactionFixedVM");
                table1 = FunctionUnit.LINQResultToDataTable(AllPapersToPaymnetVoucherBank);

                ds.Tables.Add(table1);

                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                var report = new XtraPaymentVoucherBankWithoutCost();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraPaymentVoucherBankWithoutCost.repx");


                report.LoadLayoutFromXml(reportFilePath);


                report.LbCoName.Text = CoInfo.ArabicName;
                //report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                //report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.LbVoucherNo.Text = TransFixedVM.Header.VoucherNumber;
                report.LbVDate.Text = TransFixedVM.Header.VoucherDate.ToString("dd/MM/yyyy");

                report.LbAccPaidFrom.Text = TransFixedVM.TransactionCredit.AccountNumber;
                report.LbAccDebitName.Text = TransFixedVM.AccountCreditName;

                report.LbAccDebitName.Text = TransFixedVM.AccountDebitName;
                report.LbNOte.Text = TransFixedVM.Header.Note;


                report.LbNetTot.Text = TransFixedVM.Amount.ToString();

                report.xrCompanyTransactionKindName.Text = TransFixedVM.CompanyTransactionKindName;

                report.xrCurrencyNewValue.Text = TransFixedVM.CurrencyNewValue.ToString();
                report.xrCurrencyID.Text = TransFixedVM.CurrencyName;
                report.LbAccPaidFrom.Text = TransFixedVM.TransactionDebit.AccountNumber;


                report.FromAccountNumber.Text = TransFixedVM.TransactionDebit.AccountNumber;

                report.LbNOte.Text = TransFixedVM.Header.Note;
                //---Tafqet n3n3 --//
                if (Company.CurrencyRef == 0)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                else if (Company.CurrencyRef == 1)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }

                report.DataSource = ds;
                report.DataMember = "TransFixedVM";


                report.CreateDocument();



                return View("ReportPDF", report);


            }
        }


        public ActionResult GetPapersToReceiptVoucherBankPDF(string id, int id2, int id3, int id4)
        {
            string UserID = User.Identity.GetUserId();
            var UserInfo = _unitOfWork.User.GetMyInfo(UserID);

            var HeaderObj = _unitOfWork.Header.GetHeaderDataById(id, UserInfo.fCompanyId, id2, id3 ,id4);
            var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, HeaderObj.CompanyTransactionKindNo);
            var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, HeaderObj.FCurrencyID);
            var SalesManObj = _unitOfWork.Sale.GetSaleByID(UserInfo.fCompanyId, HeaderObj.SaleID);
            var Company = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
            var AllPapersToReceiptVoucherBank = _unitOfWork.NativeSql.GetPapersToReceiptVoucherBank(id, id2, UserInfo.fCompanyId, id3, id4);
            var TransactionDebitObj = _unitOfWork.NativeSql.GetTransactionsDetailDebit(id, UserInfo.fCompanyId, id2, 1 ,id4);
            var TransactionCreditObj = _unitOfWork.NativeSql.GetTransactionsDetailCredit(id, UserInfo.fCompanyId, id2, 2 ,id4);
            int iRowNumber = HeaderObj.RowCount;
            var TransFixedVM = new TransactionFixedVM { };
            TransFixedVM.Header = HeaderObj;
            TransFixedVM.TransactionDebit = TransactionDebitObj;
            TransFixedVM.TransactionCredit = TransactionCreditObj;
            if (HeaderObj.SaleID == 0)
            {
                TransFixedVM.SaleManName = "";
            }
            else
            {
                TransFixedVM.SaleManName = SalesManObj.SalesName;
            }
            if (Resources.Resource.CurLang == "Arb")
            {
                TransFixedVM.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                TransFixedVM.CurrencyName = CurrencyObj.ArabicName;
            }
            else
            {
                TransFixedVM.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;
                TransFixedVM.CurrencyName = CurrencyObj.EnglishName;
            }
            TransFixedVM.CurrencyNewValue = Math.Round(HeaderObj.ConversionFactor, 3);
            TransFixedVM.WorkWithCostCenter = Company.WorkWithCostCenter;
            TransFixedVM.AccountDebitName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TransactionDebitObj.AccountNumber);
            TransFixedVM.AccountCreditName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TransactionCreditObj.AccountNumber);
            TransFixedVM.CostCenterDebitName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TransactionDebitObj.CostCenter);
            TransFixedVM.CostCenterCreditName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TransactionDebitObj.CostCenter);
            TransFixedVM.Amount = Math.Round(TransactionCreditObj.Credit, 3);
            TransFixedVM.TotalAmount = Math.Round(HeaderObj.TotalDebit, 3);
            TransFixedVM.ForeignAmount = Math.Round(TransactionCreditObj.CreditForeign, 3);
            TransFixedVM.TotalForeign = Math.Round(HeaderObj.TotalDebitForeign, 3);

            if (Company.WorkWithCostCenter)
            {

                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TransactionFixedVM");
                table1 = FunctionUnit.LINQResultToDataTable(AllPapersToReceiptVoucherBank);

                ds.Tables.Add(table1);

                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);


                var report = new XtraReceiptVoucherBankReport1();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraReceiptVoucherBankReport1.repx");


                report.LoadLayoutFromXml(reportFilePath);


                report.LbCoName.Text = CoInfo.ArabicName;
                // report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                // report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.LbVoucherNo.Text = TransFixedVM.Header.VoucherNumber;
                report.LbVDate.Text = TransFixedVM.Header.VoucherDate.ToString("dd/MM/yyyy");
                report.PaidCostCenter.Text = TransFixedVM.TransactionCredit.CostCenter;


                if (!String.IsNullOrEmpty(TransFixedVM.TransactionCredit.CostCenter))
                {
                    var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, TransFixedVM.TransactionCredit.CostCenter);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.CostCenterCreditName.Text = AccName.ArabicName;
                    }
                    else
                    {
                        report.CostCenterCreditName.Text = AccName.EnglishName;
                    }

                }

                report.FromCostCenter.Text = TransFixedVM.TransactionDebit.CostCenter;


                if (!String.IsNullOrEmpty(TransFixedVM.TransactionDebit.CostCenter))
                {
                    var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, TransFixedVM.TransactionDebit.CostCenter);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.CostCenterDebitName.Text = AccName.ArabicName;
                    }
                    else
                    {
                        report.CostCenterDebitName.Text = AccName.EnglishName;
                    }

                }




                report.ToAccountNumber.Text = TransFixedVM.TransactionCredit.AccountNumber;
                report.LbAccDebitName.Text = TransFixedVM.AccountCreditName;

                report.LbAccDebitName.Text = TransFixedVM.AccountDebitName;
                report.LbNOte.Text = TransFixedVM.Header.Note;

                report.FromAccountNumber.Text = TransFixedVM.TransactionDebit.AccountNumber;

                report.LbNetTot.Text = TransFixedVM.Amount.ToString();

                report.xrCompanyTransactionKindName.Text = TransFixedVM.CompanyTransactionKindName;

                report.xrCurrencyNewValue.Text = TransFixedVM.CurrencyNewValue.ToString();
                report.xrCurrencyID.Text = TransFixedVM.CurrencyName;
                report.ToAccountNumber.Text = TransFixedVM.TransactionDebit.AccountNumber;

                report.AccountCreditName.Text = TransFixedVM.AccountCreditName;
                report.LbSaleMan.Text = TransFixedVM.SaleManName;





                report.DataSource = ds;
                report.DataMember = "TransFixedVM";
                //---Tafqet n3n3 --//
                if (Company.CurrencyRef == 0)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                else if (Company.CurrencyRef == 1)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }

                report.CreateDocument();



                return View("ReportPDF", report);


            }

            else
            {
                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TransactionFixedVM");
                table1 = FunctionUnit.LINQResultToDataTable(AllPapersToReceiptVoucherBank);

                ds.Tables.Add(table1);

                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);


                var report = new XtraReceiptVoucherWithoutCost();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraReceiptVoucherWithoutCost.repx");


                report.LoadLayoutFromXml(reportFilePath);


                report.LbCoName.Text = CoInfo.ArabicName;
                // report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                // report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.LbVoucherNo.Text = TransFixedVM.Header.VoucherNumber;
                report.LbVDate.Text = TransFixedVM.Header.VoucherDate.ToString("dd/MM/yyyy");

                report.ToAccountNumber.Text = TransFixedVM.TransactionCredit.AccountNumber;
                report.LbAccDebitName.Text = TransFixedVM.AccountCreditName;

                report.LbAccDebitName.Text = TransFixedVM.AccountDebitName;
                report.LbNOte.Text = TransFixedVM.Header.Note;

                report.FromAccountNumber.Text = TransFixedVM.TransactionDebit.AccountNumber;

                report.LbNetTot.Text = TransFixedVM.Amount.ToString();

                report.xrCompanyTransactionKindName.Text = TransFixedVM.CompanyTransactionKindName;

                report.xrCurrencyNewValue.Text = TransFixedVM.CurrencyNewValue.ToString();
                report.xrCurrencyID.Text = TransFixedVM.CurrencyName;
                report.ToAccountNumber.Text = TransFixedVM.TransactionDebit.AccountNumber;

                report.AccountCreditName.Text = TransFixedVM.AccountCreditName;
                report.LbSaleMan.Text = TransFixedVM.SaleManName;





                report.DataSource = ds;
                report.DataMember = "TransFixedVM";


                report.CreateDocument();



                return View("ReportPDF", report);
            }
        }


        public ActionResult GetDepositInTheBankTransPDF(string id, int id2, int id3 , int id4)
        {
            string UserID = User.Identity.GetUserId();
            var UserInfo = _unitOfWork.User.GetMyInfo(UserID);
            var CurrYear = UserInfo.CurrYear;
            var HeaderObj = _unitOfWork.Header.GetHeaderDataByTransId(id, UserInfo.fCompanyId, id2, id3 , CurrYear);
            var CompanyTransactionKindObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, HeaderObj.CompanyTransactionKindNo);
            var CompanyTransactionKindID = HeaderObj.CompanyTransactionKindNo;
            var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, HeaderObj.FCurrencyID);
            var AllDepositInTheBankTrans = _unitOfWork.NativeSql.GetTransactionsDetailDepositInTheBankCredit(id, id2, UserInfo.fCompanyId, id3 , id4);
            var TransactionDebitObj = _unitOfWork.NativeSql.GetTransactionsDetailDebitByTransKind(id, UserInfo.fCompanyId, id2, 1, id3, id4);
            var TransVM = new TransActionBankVM { };
            TransVM.Header = HeaderObj;
            TransVM.TransactionDebit = TransactionDebitObj;
            TransVM.CompanyTransactionKindID = CompanyTransactionKindID;
            TransVM.Currency = _unitOfWork.Currency.GetAllCurrency(UserInfo.fCompanyId);
            TransVM.CurrencyID = HeaderObj.FCurrencyID;
            TransVM.CurrencyNewValue = Math.Round(HeaderObj.ConversionFactor, 3);
            TransVM.BankName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TransactionDebitObj.AccountNumber);
            TransVM.BankCostCenterName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TransactionDebitObj.CostCenter);
            TransVM.Amount = Math.Round(TransactionDebitObj.Debit, 3);
            TransVM.ForeignAmount = Math.Round(TransactionDebitObj.DebitForeign, 3);
            if (Resources.Resource.CurLang == "Arb")
            {
                TransVM.CurrencyName = CurrencyObj.ArabicName;
            }
            else
            {
                TransVM.CurrencyName = CurrencyObj.EnglishName;
            }


            var Company = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
            if (Company.WorkWithCostCenter)
            {
                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TransActionBankVM");
                table1 = FunctionUnit.LINQResultToDataTable(AllDepositInTheBankTrans);

                ds.Tables.Add(table1);

                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                var report = new XtraDepositInTheBankReport();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraDepositInTheBankReport.repx");

                report.FromCostCenter.Text = TransVM.TransactionDebit.CostCenter;


                if (!String.IsNullOrEmpty(TransVM.TransactionDebit.CostCenter))
                {
                    var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, TransVM.TransactionDebit.CostCenter);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.CostCenterCreditName.Text = AccName.ArabicName;
                    }
                    else
                    {
                        report.CostCenterCreditName.Text = AccName.EnglishName;
                    }

                }


                report.LoadLayoutFromXml(reportFilePath);


                report.LbCoName.Text = CoInfo.ArabicName;
                // report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                // report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.LbVoucherNo.Text = TransVM.Header.VoucherNumber;
                report.LbVDate.Text = TransVM.Header.VoucherDate.ToString("dd/MM/yyyy");

                report.BankAcc.Text = TransVM.TransactionDebit.AccountNumber;
                report.BankName.Text = TransVM.BankName;

                //report.BankCostCenter.Text = TransVM.TransactionDebit.CostCenter;
                report.LbNOte.Text = TransVM.Header.Note;

                // report.BankCostCenter.Text = TransVM.BankCostCenterName;



                report.DepositAmmount.Text = TransVM.Amount.ToString();

                report.xrCurrencyNewValue.Text = TransVM.CurrencyNewValue.ToString();
                report.xrCurrencyID.Text = TransVM.CurrencyName;
                report.ForeignDepositAmmount.Text = TransVM.ForeignAmount.ToString();


                //---Tafqet n3n3 --//
                if (Company.CurrencyRef == 0)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                else if (Company.CurrencyRef == 1)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }



                report.DataSource = ds;
                report.DataMember = "TransVM";


                report.CreateDocument();



                return View("ReportPDF", report);

            }

            else
            {

                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TransActionBankVM");
                table1 = FunctionUnit.LINQResultToDataTable(AllDepositInTheBankTrans);

                ds.Tables.Add(table1);

                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                var report = new XtraDepositInTheBankWithoutCost();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraDepositInTheBankWithoutCost.repx");


                report.LoadLayoutFromXml(reportFilePath);


                report.LbCoName.Text = CoInfo.ArabicName;
                // report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                // report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.LbVoucherNo.Text = TransVM.Header.VoucherNumber;
                report.LbVDate.Text = TransVM.Header.VoucherDate.ToString("dd/MM/yyyy");

                report.BankAcc.Text = TransVM.TransactionDebit.AccountNumber;
                report.BankName.Text = TransVM.BankName;

                //report.BankCostCenter.Text = TransVM.TransactionDebit.CostCenter;
                report.LbNOte.Text = TransVM.Header.Note;

                // report.BankCostCenter.Text = TransVM.BankCostCenterName;



                report.DepositAmmount.Text = TransVM.Amount.ToString();

                report.xrCurrencyNewValue.Text = TransVM.CurrencyNewValue.ToString();
                report.xrCurrencyID.Text = TransVM.CurrencyName;
                report.ForeignDepositAmmount.Text = TransVM.ForeignAmount.ToString();



                //---Tafqet n3n3 --//
                if (Company.CurrencyRef == 0)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                else if (Company.CurrencyRef == 1)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }


                report.DataSource = ds;
                report.DataMember = "TransVM";


                report.CreateDocument();



                return View("ReportPDF", report);
            }
        }


        public ActionResult GetTempPrepaidPDF(string id, int id2, int id3 , int id4)
        {

            string UserID = User.Identity.GetUserId();
            var UserInfo = _unitOfWork.User.GetMyInfo(UserID);

            var TempPrepaidObj = _unitOfWork.TempPrepaidAndRevenueReceived.GetTempPrepaidAndRevenueReceivedData(id, UserInfo.fCompanyId, id2, id3 , id4);
            var TempPrepaidDetailsObj = _unitOfWork.TempPrepaidAndRevenueReceivedDetail.GetTempPrepaidAndRevenueReceivedDetailData(id, UserInfo.fCompanyId, id2, id3 , id4);
            var Company = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
            var TempPrepaidDetailsObjj = _unitOfWork.NativeSql.GetTempPrepaidAndRevenueReceivedDetalsData(id, id2, UserInfo.fCompanyId, id3);
            var TempPrepaidVM = new TempPrepaidAndRevenueReceivedVM { };
            TempPrepaidVM.WorkWithCostCenter = Company.WorkWithCostCenter;
            TempPrepaidVM.TempPrepaidAndRevenueReceived = TempPrepaidObj;
            TempPrepaidVM.ExpenseAccountNumber = TempPrepaidDetailsObj.FromAccountNumber;
            TempPrepaidVM.PrepaidExpenseAccountNumber = TempPrepaidDetailsObj.ToAccountNumber;
            TempPrepaidVM.ExpenseCostNumber = TempPrepaidDetailsObj.FromCostCenter;
            TempPrepaidVM.PrepaidExpenseCostNumber = TempPrepaidDetailsObj.ToCostCenter;
            TempPrepaidVM.ExpenseAccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TempPrepaidVM.ExpenseAccountNumber);
            TempPrepaidVM.PrepaidExpenseAccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TempPrepaidVM.PrepaidExpenseAccountNumber);
            TempPrepaidVM.ExpenseCostName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TempPrepaidVM.ExpenseCostNumber);
            TempPrepaidVM.PrepaidExpenseCostName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TempPrepaidVM.PrepaidExpenseCostNumber);

            if (Company.WorkWithCostCenter)
            {

                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TempPrepaidAndRevenueReceivedVM");
                table1 = FunctionUnit.LINQResultToDataTable(TempPrepaidDetailsObjj);

                ds.Tables.Add(table1);

                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                var report = new XtraTempPrepaidReport();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraTempPrepaidReport.repx");


                report.LoadLayoutFromXml(reportFilePath);


                report.LbCoName.Text = CoInfo.ArabicName;
                // report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                // report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.ExpenseAccountNumber.Text = TempPrepaidVM.ExpenseAccountNumber;
                report.AccountName.Text = TempPrepaidVM.ExpenseAccountName;

                report.PrepaidExpenseAccountNumber.Text = TempPrepaidVM.PrepaidExpenseAccountNumber;
                report.PrepaidExpenseAccountName.Text = TempPrepaidVM.PrepaidExpenseAccountName;

                //report.BankCostCenter.Text = TransVM.TransactionDebit.CostCenter;
                report.ExpenseCostNumber.Text = TempPrepaidVM.ExpenseCostNumber;

                // report.BankCostCenter.Text = TransVM.BankCostCenterName;


                report.LbNOte.Text = TempPrepaidVM.TempPrepaidAndRevenueReceived.Note;

                report.CostCenterName.Text = TempPrepaidVM.ExpenseCostName;

                report.PrepaidExpenseCostNumber.Text = TempPrepaidVM.PrepaidExpenseCostNumber;
                report.PrepaidExpenseCostName.Text = TempPrepaidVM.PrepaidExpenseCostName;
                report.Total.Text = TempPrepaidVM.TempPrepaidAndRevenueReceived.Total.ToString();
                report.LbVDate.Text = TempPrepaidVM.TempPrepaidAndRevenueReceived.VoucherDate.ToString("dd/MM/yyyy");
                report.NumberOfPayments.Text = TempPrepaidVM.TempPrepaidAndRevenueReceived.NumberOfPayments.ToString();
                report.DateFirstPayment.Text = TempPrepaidVM.TempPrepaidAndRevenueReceived.DateFirstPayment.ToString("dd/MM/yyyy");


                report.LbVoucherNo.Text = TempPrepaidVM.TempPrepaidAndRevenueReceived.VoucherNumber; // هاي كان فيها Error تاكدي منها 15/09/2020



                //---Tafqet n3n3 --//
                if (Company.CurrencyRef == 0)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TempPrepaidVM.TempPrepaidAndRevenueReceived.Total.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                else if (Company.CurrencyRef == 1)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TempPrepaidVM.TempPrepaidAndRevenueReceived.Total.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }


                report.DataSource = ds;
                report.DataMember = "TempPrepaidVM";


                report.CreateDocument();



                return View("ReportPDF", report);

            }
            
            else
            {


                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TempPrepaidAndRevenueReceivedVM");
                table1 = FunctionUnit.LINQResultToDataTable(TempPrepaidDetailsObjj);

                ds.Tables.Add(table1);

                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                var report = new XtraTempPrepaidWithoutCost();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraTempPrepaidWithoutCost.repx");


                report.LoadLayoutFromXml(reportFilePath);


                report.LbCoName.Text = CoInfo.ArabicName;
                // report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                // report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.ExpenseAccountNumber.Text = TempPrepaidVM.ExpenseAccountNumber;
                report.AccountName.Text = TempPrepaidVM.ExpenseAccountName;

                report.PrepaidExpenseAccountNumber.Text = TempPrepaidVM.PrepaidExpenseAccountNumber;
                report.PrepaidExpenseAccountName.Text = TempPrepaidVM.PrepaidExpenseAccountName;

                //report.BankCostCenter.Text = TransVM.TransactionDebit.CostCenter;

                // report.BankCostCenter.Text = TransVM.BankCostCenterName;


                report.LbNOte.Text = TempPrepaidVM.TempPrepaidAndRevenueReceived.Note;

                report.Total.Text = TempPrepaidVM.TempPrepaidAndRevenueReceived.Total.ToString();
                report.LbVDate.Text = TempPrepaidVM.TempPrepaidAndRevenueReceived.VoucherDate.ToString("dd/MM/yyyy");
                report.NumberOfPayments.Text = TempPrepaidVM.TempPrepaidAndRevenueReceived.NumberOfPayments.ToString();
                report.DateFirstPayment.Text = TempPrepaidVM.TempPrepaidAndRevenueReceived.DateFirstPayment.ToString("dd/MM/yyyy");


                report.LbVoucherNo.Text = TempPrepaidVM.TempPrepaidAndRevenueReceived.VoucherNumber; // هاي كان فيها Error تاكدي منها 15/09/2020



                //---Tafqet n3n3 --//
                if (Company.CurrencyRef == 0)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TempPrepaidVM.TempPrepaidAndRevenueReceived.Total.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                else if (Company.CurrencyRef == 1)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TempPrepaidVM.TempPrepaidAndRevenueReceived.Total.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }


                report.DataSource = ds;
                report.DataMember = "TempPrepaidVM";


                report.CreateDocument();



                return View("ReportPDF", report);
            }


        }


        public ActionResult GetTempRevenuePDF(string id, int id2, int id3 , int id4)
        {
            string UserID = User.Identity.GetUserId();
            var UserInfo = _unitOfWork.User.GetMyInfo(UserID);

            var TempRevenueObj = _unitOfWork.TempPrepaidAndRevenueReceived.GetTempPrepaidAndRevenueReceivedData(id, UserInfo.fCompanyId, id2, id3 , id4);
            var TempRevenueDetailsObj = _unitOfWork.TempPrepaidAndRevenueReceivedDetail.GetTempPrepaidAndRevenueReceivedDetailData(id, UserInfo.fCompanyId, id2, id3 , id4);
            var TempRevenueDetailsObjj = _unitOfWork.NativeSql.GetTempPrepaidAndRevenueReceivedDetalsData(id, id2, UserInfo.fCompanyId, id3);
            var Company = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
            var TempRevenueVM = new TempPrepaidAndRevenueReceivedVM { };
            TempRevenueVM.WorkWithCostCenter = Company.WorkWithCostCenter;
            TempRevenueVM.TempPrepaidAndRevenueReceived = TempRevenueObj;
            TempRevenueVM.RevenueReceivedAccountNumber = TempRevenueDetailsObj.FromAccountNumber;
            TempRevenueVM.RevenueAccountNumber = TempRevenueDetailsObj.ToAccountNumber;
            TempRevenueVM.RevenueReceivedCostNumber = TempRevenueDetailsObj.FromCostCenter;
            TempRevenueVM.RevenueCostNumber = TempRevenueDetailsObj.ToCostCenter;
            TempRevenueVM.RevenueReceivedAccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TempRevenueVM.RevenueReceivedAccountNumber);
            TempRevenueVM.RevenueAccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TempRevenueVM.RevenueAccountNumber);
            TempRevenueVM.RevenueReceivedCostName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TempRevenueVM.RevenueReceivedCostNumber);
            TempRevenueVM.RevenueCostName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TempRevenueVM.RevenueCostNumber);


            if (Company.WorkWithCostCenter)
            {
                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TempPrepaidAndRevenueReceivedVM");
                table1 = FunctionUnit.LINQResultToDataTable(TempRevenueDetailsObjj);

                ds.Tables.Add(table1);

                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                var report = new XtraTempRevenueReceivedReport();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraTempRevenueReceivedReport.repx");


                report.LoadLayoutFromXml(reportFilePath);


                report.LbCoName.Text = CoInfo.ArabicName;
                // report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                //report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.RevenueReceivedAccountNumber.Text = TempRevenueVM.RevenueReceivedAccountNumber;
                report.AccountName.Text = TempRevenueVM.RevenueReceivedAccountName;

                report.RevenueAccountNumber.Text = TempRevenueVM.RevenueAccountNumber;
                report.RevenueAccountName.Text = TempRevenueVM.RevenueAccountName;

                //report.BankCostCenter.Text = TransVM.TransactionDebit.CostCenter;
                report.RevenueReceivedCostNumber.Text = TempRevenueVM.ExpenseCostNumber;

                // report.BankCostCenter.Text = TransVM.BankCostCenterName;


                report.LbNOte.Text = TempRevenueVM.TempPrepaidAndRevenueReceived.Note;

                report.RevenueReceivedCostNumber.Text = TempRevenueVM.RevenueReceivedCostNumber;

                report.RevenueReceivedCostName.Text = TempRevenueVM.RevenueReceivedCostName;
                report.RevenueCostNumber.Text = TempRevenueVM.RevenueCostNumber;
                report.RevenueCostName.Text = TempRevenueVM.RevenueCostName;
                report.Total.Text = TempRevenueVM.TempPrepaidAndRevenueReceived.Total.ToString();
                report.LbVDate.Text = TempRevenueVM.TempPrepaidAndRevenueReceived.VoucherDate.ToString("dd/MM/yyyy");
                report.NumberOfPayments.Text = TempRevenueVM.TempPrepaidAndRevenueReceived.NumberOfPayments.ToString();
                report.DateFirstPayment.Text = TempRevenueVM.TempPrepaidAndRevenueReceived.DateFirstPayment.ToString("dd/MM/yyyy");


                //---Tafqet n3n3 --//
                if (Company.CurrencyRef == 0)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TempRevenueVM.TempPrepaidAndRevenueReceived.Total.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                else if (Company.CurrencyRef == 1)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TempRevenueVM.TempPrepaidAndRevenueReceived.Total.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }

                report.DataSource = ds;
                report.DataMember = "TempRevenueVM";
                report.LbVoucherNo.Text = TempRevenueVM.TempPrepaidAndRevenueReceived.VoucherNumber;

                report.CreateDocument();



                return View("ReportPDF", report);


            }

            else
            {


                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TempPrepaidAndRevenueReceivedVM");
                table1 = FunctionUnit.LINQResultToDataTable(TempRevenueDetailsObjj);

                ds.Tables.Add(table1);

                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                var report = new XtraTempRevenueWithoutCost();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraTempRevenueWithoutCost.repx");


                report.LoadLayoutFromXml(reportFilePath);


                report.LbCoName.Text = CoInfo.ArabicName;
                // report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                //report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.RevenueReceivedAccountNumber.Text = TempRevenueVM.RevenueReceivedAccountNumber;
                report.AccountName.Text = TempRevenueVM.RevenueReceivedAccountName;

                report.RevenueAccountNumber.Text = TempRevenueVM.RevenueAccountNumber;
                report.RevenueAccountName.Text = TempRevenueVM.RevenueAccountName;

                //report.BankCostCenter.Text = TransVM.TransactionDebit.CostCenter;

                // report.BankCostCenter.Text = TransVM.BankCostCenterName;


                report.LbNOte.Text = TempRevenueVM.TempPrepaidAndRevenueReceived.Note;

                report.Total.Text = TempRevenueVM.TempPrepaidAndRevenueReceived.Total.ToString();
                report.LbVDate.Text = TempRevenueVM.TempPrepaidAndRevenueReceived.VoucherDate.ToString("dd/MM/yyyy");
                report.NumberOfPayments.Text = TempRevenueVM.TempPrepaidAndRevenueReceived.NumberOfPayments.ToString();
                report.DateFirstPayment.Text = TempRevenueVM.TempPrepaidAndRevenueReceived.DateFirstPayment.ToString("dd/MM/yyyy");


                //---Tafqet n3n3 --//
                if (Company.CurrencyRef == 0)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TempRevenueVM.TempPrepaidAndRevenueReceived.Total.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                else if (Company.CurrencyRef == 1)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TempRevenueVM.TempPrepaidAndRevenueReceived.Total.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }

                report.DataSource = ds;
                report.DataMember = "TempRevenueVM";
                report.LbVoucherNo.Text = TempRevenueVM.TempPrepaidAndRevenueReceived.VoucherNumber;

                report.CreateDocument();



                return View("ReportPDF", report);
            }


        }

        public ActionResult DetailDebitNotePDF(string id, int id2, int id3 , int id4)
        {
            string UserID = User.Identity.GetUserId();
            var UserInfo = _unitOfWork.User.GetMyInfo(UserID);

            var HeaderObj = _unitOfWork.Header.GetHeaderDataById(id, UserInfo.fCompanyId, id2, id3 , id4);
            var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, HeaderObj.CompanyTransactionKindNo);
            var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, HeaderObj.FCurrencyID);
            var SalesManObj = _unitOfWork.Sale.GetSaleByID(UserInfo.fCompanyId, HeaderObj.SaleID);
            var Company = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
            var TransactionDebitObj = _unitOfWork.NativeSql.GetTransactionsDetailDebit(id, UserInfo.fCompanyId, id2, 1 , id4);
            var TransactionCreditObj = _unitOfWork.NativeSql.GetTransactionsDetailCredit(id, UserInfo.fCompanyId, id2, 2 , id4);
            int iRowNumber = HeaderObj.RowCount;
            var TransactionTaxObj = _unitOfWork.NativeSql.GetTransactionsDetailTax(id, UserInfo.fCompanyId, id2, 3, id4);
            var TransFixedVM = new TransactionFixedVM { };
            TransFixedVM.Header = HeaderObj;
            TransFixedVM.TransactionDebit = TransactionDebitObj;
            TransFixedVM.TransactionCredit = TransactionCreditObj;
            if (HeaderObj.SaleID == 0)
            {
                TransFixedVM.SaleManName = "";
            }
            else
            {
                TransFixedVM.SaleManName = SalesManObj.SalesName;
            }
            if (Resources.Resource.CurLang == "Arb")
            {
                TransFixedVM.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                TransFixedVM.CurrencyName = CurrencyObj.ArabicName;
            }
            else
            {
                TransFixedVM.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;
                TransFixedVM.CurrencyName = CurrencyObj.EnglishName;
            }
            TransFixedVM.CurrencyNewValue = Math.Round(HeaderObj.ConversionFactor, 3);
            TransFixedVM.WorkWithCostCenter = Company.WorkWithCostCenter;
            TransFixedVM.AccountDebitName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TransactionDebitObj.AccountNumber);
            TransFixedVM.AccountCreditName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TransactionCreditObj.AccountNumber);
            TransFixedVM.CostCenterDebitName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TransactionDebitObj.CostCenter);
            TransFixedVM.CostCenterCreditName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TransactionDebitObj.CostCenter);
            TransFixedVM.Amount = Math.Round(TransactionCreditObj.Credit, 3);
            TransFixedVM.TotalAmount = Math.Round(HeaderObj.TotalDebit, 3);
            TransFixedVM.ForeignAmount = Math.Round(TransactionCreditObj.CreditForeign, 3);
            TransFixedVM.TotalForeign = Math.Round(HeaderObj.TotalDebitForeign, 3);
            if (iRowNumber > 2)
            {
                TransFixedVM.TransactionTax = TransactionTaxObj;
                TransFixedVM.TaxAccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TransactionTaxObj.AccountNumber);
                TransFixedVM.TaxCostCenterName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TransactionTaxObj.CostCenter);
                TransFixedVM.Tax = Math.Round(TransactionTaxObj.Credit, 3);
                TransFixedVM.TaxForeign = Math.Round(TransactionTaxObj.CreditForeign, 3);
            }

            if (Company.WorkWithCostCenter)
            {
                DataSet ds = new DataSet();



                var report = new XtraDebitReport();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraDebitReport.repx");


                report.LoadLayoutFromXml(reportFilePath);



                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);


                report.LoadLayoutFromXml(reportFilePath);


                report.LbCoName.Text = CoInfo.ArabicName;
                //report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                //report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.LbVoucherNo.Text = TransFixedVM.Header.VoucherNumber;
                report.LbVDate.Text = TransFixedVM.Header.VoucherDate.ToString("dd/MM/yyyy");

                report.xrCompanyTransactionKindName.Text = TransFixedVM.CompanyTransactionKindName;

                report.xrFromCostCenter.Text = TransFixedVM.TransactionDebit.CostCenter;
                report.xrCostCenterDebitName.Text = TransFixedVM.CostCenterDebitName;



                report.xrToCostCenter.Text = TransFixedVM.TransactionCredit.CostCenter;
                report.LbNOte.Text = TransFixedVM.Header.Note;


                report.xrCostCenterCreditName.Text = TransFixedVM.CostCenterCreditName;
                



                report.Amount.Text = TransFixedVM.Amount.ToString();
                report.Tax.Text = TransFixedVM.Tax.ToString();
                report.TotalAmount.Text = TransFixedVM.TotalAmount.ToString();
                report.ForeignAmount.Text = TransFixedVM.ForeignAmount.ToString();
                report.TaxForeign.Text = TransFixedVM.TaxForeign.ToString();
                report.TotalForeign.Text = TransFixedVM.TotalForeign.ToString();

                report.xrCompanyTransactionKindName.Text = TransFixedVM.CompanyTransactionKindName;

                report.xrCurrencyNewValue.Text = TransFixedVM.CurrencyNewValue.ToString();
                report.xrCurrencyID.Text = TransFixedVM.CurrencyName;
                report.AccountCreditName.Text = TransFixedVM.AccountCreditName;
                report.LbSaleMan.Text = TransFixedVM.SaleManName;


                report.FromAccountNumber.Text = TransFixedVM.TransactionDebit.AccountNumber;
                report.AccountName.Text = TransFixedVM.AccountDebitName;
                report.ToAccountNumber.Text = TransFixedVM.TransactionCredit.AccountNumber;

                if (iRowNumber > 2)
                {
                    report.TaxAccountNumber.Text = TransFixedVM.TransactionTax.AccountNumber;
                    report.TaxAccountN.Text = TransFixedVM.TaxAccountName;
                    report.TaxCostCenter.Text = TransFixedVM.TransactionTax.CostCenter;
                    report.TaxCostCenterName.Text = TransFixedVM.TaxCostCenterName;
                }



                report.LbNOte.Text = TransFixedVM.Header.Note;

                report.DataSource = ds;
                report.DataMember = "TransFixedVM";


                report.CreateDocument();



                return View("ReportPDF", report);


            }

            else
            {


                DataSet ds = new DataSet();



                var report = new XtraDebitWithoutCost();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraDebitWithoutCost.repx");


                report.LoadLayoutFromXml(reportFilePath);



                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);


                report.LoadLayoutFromXml(reportFilePath);


                report.LbCoName.Text = CoInfo.ArabicName;
                //report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                //report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.LbVoucherNo.Text = TransFixedVM.Header.VoucherNumber;
                report.LbVDate.Text = TransFixedVM.Header.VoucherDate.ToString("dd/MM/yyyy");

                report.xrCompanyTransactionKindName.Text = TransFixedVM.CompanyTransactionKindName;

             

                report.LbNOte.Text = TransFixedVM.Header.Note;


               
                report.Amount.Text = TransFixedVM.Amount.ToString();
                report.Tax.Text = TransFixedVM.Tax.ToString();
                report.TotalAmount.Text = TransFixedVM.TotalAmount.ToString();
                report.ForeignAmount.Text = TransFixedVM.ForeignAmount.ToString();
                report.TaxForeign.Text = TransFixedVM.TaxForeign.ToString();
                report.TotalForeign.Text = TransFixedVM.TotalForeign.ToString();

                report.xrCompanyTransactionKindName.Text = TransFixedVM.CompanyTransactionKindName;

                report.xrCurrencyNewValue.Text = TransFixedVM.CurrencyNewValue.ToString();
                report.xrCurrencyID.Text = TransFixedVM.CurrencyName;
                report.AccountCreditName.Text = TransFixedVM.AccountCreditName;
                report.LbSaleMan.Text = TransFixedVM.SaleManName;


                report.FromAccountNumber.Text = TransFixedVM.TransactionDebit.AccountNumber;
                report.AccountName.Text = TransFixedVM.AccountDebitName;
                report.ToAccountNumber.Text = TransFixedVM.TransactionCredit.AccountNumber;

                if (iRowNumber > 2)
                {
                    report.TaxAccountNumber.Text = TransFixedVM.TransactionTax.AccountNumber;
                }



                report.LbNOte.Text = TransFixedVM.Header.Note;

                report.DataSource = ds;
                report.DataMember = "TransFixedVM";


                report.CreateDocument();



                return View("ReportPDF", report);
            }


           

        }


        public ActionResult DetailCreditNotePDF(string id, int id2, int id3 , int id4)
        {
            string UserID = User.Identity.GetUserId();
            var UserInfo = _unitOfWork.User.GetMyInfo(UserID);

            var HeaderObj = _unitOfWork.Header.GetHeaderDataById(id, UserInfo.fCompanyId, id2, id3 , id4);
            var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, HeaderObj.CompanyTransactionKindNo);
            var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, HeaderObj.FCurrencyID);
            var Company = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
            var TransactionDebitObj = _unitOfWork.NativeSql.GetTransactionsDetailCredit(id, UserInfo.fCompanyId, id2, 1 , id4);
            var TransactionCreditObj = _unitOfWork.NativeSql.GetTransactionsDetailDebit(id, UserInfo.fCompanyId, id2, 2 , id4);
            int iRowNumber = HeaderObj.RowCount;
            var TransactionTaxObj = _unitOfWork.NativeSql.GetTransactionsDetailTax(id, UserInfo.fCompanyId, id2, 3, id4);
            var TransFixedVM = new TransactionFixedVM { };
            TransFixedVM.Header = HeaderObj;
            TransFixedVM.TransactionDebit = TransactionCreditObj;
            TransFixedVM.TransactionCredit = TransactionDebitObj;
            if (Resources.Resource.CurLang == "Arb")
            {
                TransFixedVM.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                TransFixedVM.CurrencyName = CurrencyObj.ArabicName;
            }
            else
            {
                TransFixedVM.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;
                TransFixedVM.CurrencyName = CurrencyObj.EnglishName;
            }
            TransFixedVM.CurrencyNewValue = Math.Round(HeaderObj.ConversionFactor, 3);
            TransFixedVM.WorkWithCostCenter = Company.WorkWithCostCenter;
            TransFixedVM.AccountDebitName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TransactionCreditObj.AccountNumber);
            TransFixedVM.AccountCreditName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TransactionDebitObj.AccountNumber);
            TransFixedVM.CostCenterDebitName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TransactionDebitObj.CostCenter);
            TransFixedVM.CostCenterCreditName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TransactionCreditObj.CostCenter);
            TransFixedVM.Amount = Math.Round(TransactionCreditObj.Debit, 3);
            TransFixedVM.TotalAmount = Math.Round(HeaderObj.TotalDebit, 3);
            TransFixedVM.ForeignAmount = Math.Round(TransactionCreditObj.DebitForeign, 3);
            TransFixedVM.TotalForeign = Math.Round(HeaderObj.TotalCreditForeign, 3);
            if (iRowNumber > 2)
            {
                TransFixedVM.TransactionTax = TransactionTaxObj;
                TransFixedVM.TaxAccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TransactionTaxObj.AccountNumber);
                TransFixedVM.TaxCostCenterName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TransactionTaxObj.CostCenter);
                TransFixedVM.Tax = Math.Round(TransactionTaxObj.Debit, 3);
                TransFixedVM.TaxForeign = Math.Round(TransactionTaxObj.DebitForeign, 3);
            }
            if (Company.WorkWithCostCenter)
            {

                DataSet ds = new DataSet();



                var report = new XtraCreditReport();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraCreditReport.repx");


                report.LoadLayoutFromXml(reportFilePath);



                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);


                report.LoadLayoutFromXml(reportFilePath);


                report.LbCoName.Text = CoInfo.ArabicName;
                //report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                //report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.LbVoucherNo.Text = TransFixedVM.Header.VoucherNumber;
                report.LbVDate.Text = TransFixedVM.Header.VoucherDate.ToString("dd/MM/yyyy");

                report.xrCompanyTransactionKindName.Text = TransFixedVM.CompanyTransactionKindName;

                report.xrFromCostCenter.Text = TransFixedVM.TransactionDebit.CostCenter;
                report.xrCostCenterDebitName.Text = TransFixedVM.CostCenterDebitName;



                report.xrToCostCenter.Text = TransFixedVM.TransactionCredit.CostCenter;
                report.LbNOte.Text = TransFixedVM.Header.Note;


                report.xrCostCenterCreditName.Text = TransFixedVM.CostCenterCreditName;
                



                report.Amount.Text = TransFixedVM.Amount.ToString();
                report.Tax.Text = TransFixedVM.Tax.ToString();
                report.TotalAmount.Text = TransFixedVM.TotalAmount.ToString();
                report.ForeignAmount.Text = TransFixedVM.ForeignAmount.ToString();
                report.TaxForeign.Text = TransFixedVM.TaxForeign.ToString();
                report.TotalForeign.Text = TransFixedVM.TotalForeign.ToString();

                report.xrCompanyTransactionKindName.Text = TransFixedVM.CompanyTransactionKindName;

                report.xrCurrencyNewValue.Text = TransFixedVM.CurrencyNewValue.ToString();
                report.xrCurrencyID.Text = TransFixedVM.CurrencyName;
                report.AccountDebitName.Text = TransFixedVM.AccountDebitName;


                report.FromAccountNumber.Text = TransFixedVM.TransactionCredit.AccountNumber;
                report.AccountName.Text = TransFixedVM.AccountCreditName;
                report.ToAccountNumber.Text = TransFixedVM.TransactionDebit.AccountNumber;
                if (iRowNumber > 2)
                {
                    report.TaxAccountNumber.Text = TransFixedVM.TransactionTax.AccountNumber;
                    report.TaxAccountN.Text = TransFixedVM.TaxAccountName;
                    report.TaxCostCenter.Text = TransFixedVM.TransactionTax.CostCenter;
                    report.TaxCostCenterName.Text = TransFixedVM.TaxCostCenterName;
                }

                report.LbNOte.Text = TransFixedVM.Header.Note;

                report.DataSource = ds;
                report.DataMember = "TransFixedVM";


                report.CreateDocument();



                return View("ReportPDF", report);


            }

            else
            {
                DataSet ds = new DataSet();



                var report = new XtraCreditWithouCost();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraCreditWithouCost.repx");


                report.LoadLayoutFromXml(reportFilePath);



                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);


                report.LoadLayoutFromXml(reportFilePath);


                report.LbCoName.Text = CoInfo.ArabicName;
                //report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                //report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.LbVoucherNo.Text = TransFixedVM.Header.VoucherNumber;
                report.LbVDate.Text = TransFixedVM.Header.VoucherDate.ToString("dd/MM/yyyy");

                report.xrCompanyTransactionKindName.Text = TransFixedVM.CompanyTransactionKindName;




                report.LbNOte.Text = TransFixedVM.Header.Note;





                report.Amount.Text = TransFixedVM.Amount.ToString();
                report.Tax.Text = TransFixedVM.Tax.ToString();
                report.TotalAmount.Text = TransFixedVM.TotalAmount.ToString();
                report.ForeignAmount.Text = TransFixedVM.ForeignAmount.ToString();
                report.TaxForeign.Text = TransFixedVM.TaxForeign.ToString();
                report.TotalForeign.Text = TransFixedVM.TotalForeign.ToString();

                report.xrCompanyTransactionKindName.Text = TransFixedVM.CompanyTransactionKindName;

                report.xrCurrencyNewValue.Text = TransFixedVM.CurrencyNewValue.ToString();
                report.xrCurrencyID.Text = TransFixedVM.CurrencyName;
                report.AccountDebitName.Text = TransFixedVM.AccountDebitName;


                report.FromAccountNumber.Text = TransFixedVM.TransactionCredit.AccountNumber;
                report.AccountName.Text = TransFixedVM.AccountCreditName;
                report.ToAccountNumber.Text = TransFixedVM.TransactionDebit.AccountNumber;
                if (iRowNumber > 2)
                {
                    report.TaxAccountNumber.Text = TransFixedVM.TransactionTax.AccountNumber;
                    report.TaxAccountN.Text = TransFixedVM.TaxAccountName;
                }

                report.LbNOte.Text = TransFixedVM.Header.Note;

                report.DataSource = ds;
                report.DataMember = "TransFixedVM";


                report.CreateDocument();



                return View("ReportPDF", report);


            }
        }



        public ActionResult GetServiceDetailsPDF(int id, int id2, int id3,int id4)
        {
            var userId = User.Identity.GetUserId();
            var UserInfo = _unitOfWork.User.GetMyInfo(userId);
            var ObjGet = _unitOfWork.DefinitionOtherAccount.GetDefinitionOtherAccountByID(UserInfo.fCompanyId);
            var HeaderData = _unitOfWork.ServiceBillHeader.GetHeaderDataById(UserInfo.fCompanyId, id, id2, id3, id4);
            var CompanyTransactionKind = _unitOfWork.NativeSql.GetCompanyTransactionKindAll(UserInfo.fCompanyId);
            var AllServiceDetails = _unitOfWork.NativeSql.GetTransActionServiceBillsData(UserInfo.fCompanyId, id, id2, id3, id4);
            CompanyTransactionKind = CompanyTransactionKind.Where(m => m.TransactionKindID == id3).ToList();
            var SaleMan = _unitOfWork.Sale.GetAllSale(UserInfo.fCompanyId);
            var Company = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
            HeaderServiceBillVM Obj = new HeaderServiceBillVM();
            Obj.AccountNumber = HeaderData.AccountNumber;
            Obj.CompanyID = HeaderData.CompanyID;
            Obj.CompanyTransactionKindID = HeaderData.CompanyTransactionKindNo;
            Obj.CompanyYear = HeaderData.CompanyYear;
            Obj.CreditAccountNumber = HeaderData.CreditAccountNumber;
            Obj.CreditCostNumber = HeaderData.CreditCostNumber;
            Obj.DebitAccountNumber = HeaderData.DebitAccountNumber;
            Obj.DebitCostNumber = HeaderData.DebitCostNumber;
            Obj.Discount = HeaderData.Discount;
            Obj.CurrencyNewValue = HeaderData.ConversionFactor;
            Obj.Currency = _unitOfWork.Currency.GetAllCurrency(UserInfo.fCompanyId);
            Obj.CurrencyID = HeaderData.FCurrencyID;
            Obj.NetTotal = HeaderData.NetTotal;
            Obj.NoTax = HeaderData.NoTax;
            Obj.Note = HeaderData.Note;
            Obj.TransactionKindNo = HeaderData.TransactionKindNo;
            Obj.Tax = HeaderData.Tax;
            Obj.TaxCostNumber = HeaderData.TaxCostNumber;
            Obj.Total = HeaderData.Total;
            Obj.BillDate = HeaderData.BillDate;
            Obj.BillID = HeaderData.BillID;
            Obj.SaleMan = SaleMan;
            Obj.SaleManNo = HeaderData.SaleManNo;
            Obj.TaxAccountNumber = HeaderData.TaxAccountNumber;
            Obj.DebitAccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, Obj.DebitAccountNumber);
            Obj.CreditAccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, Obj.CreditAccountNumber);
            Obj.TaxAccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, Obj.TaxAccountNumber);
            Obj.AccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, Obj.AccountNumber);
            Obj.DebitCostName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, Obj.DebitCostNumber);
            Obj.CreditCostName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, Obj.CreditCostNumber);
            Obj.TaxCostName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, Obj.TaxCostNumber);
            Obj.CompanyTransactionKind = CompanyTransactionKind;
            Obj.CompanyTransactionKindID = HeaderData.CompanyTransactionKindNo;
            Obj.WorkWithCostCenter = Company.WorkWithCostCenter;
            if (id3 == 11)
            {
                FixAccountInfoVM ObjFix = new FixAccountInfoVM
                {
                    AccountNo = "",
                    AccountName = ""
                };
                if (ObjGet != null)
                {
                    ObjFix.AccountNo = ObjGet.SalesTaxAccountNumber;
                    ObjFix.AccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, ObjGet.SalesTaxAccountNumber);
                }
                Obj.OrignailTaxAccountNumber = ObjFix.AccountNo;
                Obj.OrignailTaxAccountName = ObjFix.AccountName;
                return View("DetailMulti", Obj);


            }
            else if (id3 == 12)
            {
                FixAccountInfoVM ObjFix = new FixAccountInfoVM
                {
                    AccountNo = "",
                    AccountName = ""
                };
                if (ObjGet != null)
                {
                    ObjFix.AccountNo = ObjGet.PurchasesTaxAccountNumber;
                    ObjFix.AccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, ObjGet.PurchasesTaxAccountNumber);
                }
                Obj.OrignailTaxAccountNumber = ObjFix.AccountNo;
                Obj.OrignailTaxAccountName = ObjFix.AccountName;
                return View("DetailPurchase", Obj);
            }
            else if (id3 == 13)
            {
                FixAccountInfoVM ObjFix = new FixAccountInfoVM
                {
                    AccountNo = "",
                    AccountName = ""
                };
                if (ObjGet != null)
                {
                    ObjFix.AccountNo = ObjGet.PurchasesTaxAccountNumber;
                    ObjFix.AccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, ObjGet.PurchasesTaxAccountNumber);
                }
                Obj.OrignailTaxAccountNumber = ObjFix.AccountNo;
                Obj.OrignailTaxAccountName = ObjFix.AccountName;
                return View("DetailMultiPurchase", Obj);
            }
            else if (id3 == 19)
            {
                FixAccountInfoVM ObjFix = new FixAccountInfoVM
                {
                    AccountNo = "",
                    AccountName = ""
                };
                if (ObjGet != null)
                {
                    ObjFix.AccountNo = ObjGet.ReturnSalesTaxAccountNumber;
                    ObjFix.AccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, ObjGet.ReturnSalesTaxAccountNumber);
                }
                Obj.OrignailTaxAccountNumber = ObjFix.AccountNo;
                Obj.OrignailTaxAccountName = ObjFix.AccountName;
                return View("DetailReturn", Obj);
            }
            else if (id3 == 20)
            {
                FixAccountInfoVM ObjFix = new FixAccountInfoVM
                {
                    AccountNo = "",
                    AccountName = ""
                };
                if (ObjGet != null)
                {
                    ObjFix.AccountNo = ObjGet.ReturnSalesTaxAccountNumber;
                    ObjFix.AccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, ObjGet.ReturnSalesTaxAccountNumber);
                }
                Obj.OrignailTaxAccountNumber = ObjFix.AccountNo;
                Obj.OrignailTaxAccountName = ObjFix.AccountName;
                return View("DetailMultiReturn", Obj);
            }
            else if (id3 == 21)
            {
                FixAccountInfoVM ObjFix = new FixAccountInfoVM
                {
                    AccountNo = "",
                    AccountName = ""
                };
                if (ObjGet != null)
                {
                    ObjFix.AccountNo = ObjGet.ReturnPurchasesTaxAccountNumber;
                    ObjFix.AccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, ObjGet.ReturnPurchasesTaxAccountNumber);
                }
                Obj.OrignailTaxAccountNumber = ObjFix.AccountNo;
                Obj.OrignailTaxAccountName = ObjFix.AccountName;
                return View("DetailPurchaseReturn", Obj);
            }
            else if (id3 == 22)
            {
                FixAccountInfoVM ObjFix = new FixAccountInfoVM
                {
                    AccountNo = "",
                    AccountName = ""
                };
                if (ObjGet != null)
                {
                    ObjFix.AccountNo = ObjGet.ReturnPurchasesTaxAccountNumber;
                    ObjFix.AccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, ObjGet.ReturnPurchasesTaxAccountNumber);
                }
                Obj.OrignailTaxAccountNumber = ObjFix.AccountNo;
                Obj.OrignailTaxAccountName = ObjFix.AccountName;
                return View("DetailMultiPurchaseReturn", Obj);
            }
            else
            {
                FixAccountInfoVM ObjFix = new FixAccountInfoVM
                {
                    AccountNo = "",
                    AccountName = ""
                };
                if (ObjGet != null)
                {
                    ObjFix.AccountNo = ObjGet.SalesTaxAccountNumber;
                    ObjFix.AccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, ObjGet.SalesTaxAccountNumber);
                }
                Obj.OrignailTaxAccountNumber = ObjFix.AccountNo;
                Obj.OrignailTaxAccountName = ObjFix.AccountName;



                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("HeaderServiceBillVM");
                table1 = FunctionUnit.LINQResultToDataTable(AllServiceDetails);

                ds.Tables.Add(table1);

                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                var report = new XtraServiceBillReport();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraServiceBillReport.repx");


                report.LoadLayoutFromXml(reportFilePath);


                report.LbCoName.Text = CoInfo.ArabicName;
                // report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                // report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.BillID.Text = Obj.BillID.ToString();
                report.LbVDate.Text = Obj.BillDate.ToString("dd/MM/yyyy");

                report.CreditAccountNumber.Text = Obj.CreditAccountNumber;
                report.AccountName.Text = Obj.AccountName;

                report.LbSaleMan.Text = Obj.SaleManName;
                report.LbNOte.Text = Obj.Note;

                report.AccountNumber.Text = Obj.AccountNumber;

                report.DebitAccountNumber.Text = Obj.DebitAccountNumber;
                report.DebitAccountName.Text = Obj.DebitAccountName;

                report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKind.ToString();

                report.xrCurrencyNewValue.Text = Obj.CurrencyNewValue.ToString();
                report.xrCurrencyID.Text = Obj.CurrencyName;
                report.DebitCostName.Text = Obj.DebitCostName;

                report.DebitCostNumber.Text = Obj.DebitCostNumber;
                report.CreditAccountName.Text = Obj.CreditAccountName;
                report.CreditCostNumber.Text = Obj.CreditCostNumber;
                report.CreditCostName.Text = Obj.CreditCostName;
                //report.NoTax.Text = Obj.NoTax;
                report.TaxAccountName.Text = Obj.TaxAccountName;
                report.TaxAccountNumber.Text = Obj.TaxAccountNumber;
                report.TaxCostName.Text = Obj.TaxCostName;
                report.TaxAccountNumber.Text = Obj.TaxAccountNumber;






                report.DataSource = ds;
                report.DataMember = "Obj";


                report.CreateDocument();



                return View("ReportPDF", report);

            }
        }

        public ActionResult JournalVoucherpdf(string id, int id2, int id3, int id4 , int id5)
        {
            int Email = id4;

            string UserID = User.Identity.GetUserId();
            var UserInfo = _unitOfWork.User.GetMyInfo(UserID);

            var HeadrObj = _unitOfWork.Header.GetHeaderDataById(id, UserInfo.fCompanyId, id2, id3 ,id4);

            var TransInfo = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, id2);

            
            var TransObj = _unitOfWork.NativeSql.GetTransactionsDetail(id, id2, UserInfo.fCompanyId, id3 , id4);


            var Company = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
            if (Company.WorkWithCostCenter)
            {
                XtraJournalVoucherprintReport report = new XtraJournalVoucherprintReport();
                string reportFilePath = Server.MapPath("/ReportLayout/XtraJournalVoucherprintReport.repx");
                report.LoadLayoutFromXml(reportFilePath);

                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TransActionVM");
                table1 = FunctionUnit.LINQResultToDataTable(TransObj);

                ds.Tables.Add(table1);
                report.LbCoName.Text = CoInfo.ArabicName;
                report.LbVhDate.Text = HeadrObj.VoucherDate.ToString("dd/MM/yyyy");
                report.LbVhNo.Text = HeadrObj.VoucherNumber.ToString();

                report.DataSource = ds;
                report.DataMember = "TransActionVM";
                report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                if (Resources.Resource.CurLang == "Arb")
                {
                    report.LbReportName.Text = TransInfo.ArabicName;
                }
                else
                {
                    report.LbReportName.Text = TransInfo.EnglishName;
                }

                //---Tafqet n3n3 --//
                if (Company.CurrencyRef == 0)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                    ToWord Tfqet = new ToWord(Decimal.Parse(HeadrObj.TotalCredit.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                else if (Company.CurrencyRef == 1)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                    ToWord Tfqet = new ToWord(Decimal.Parse(HeadrObj.TotalCredit.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }



                if (Email == 1)
                {
                    if (!String.IsNullOrEmpty(CoInfo.PDFEmail))
                    {
                        MemoryStream mem = new MemoryStream();
                        report.ExportToPdf(mem);

                        mem.Seek(0, System.IO.SeekOrigin.Begin);
                        Attachment att = new Attachment(mem, "JournalVoucher.pdf", "application/pdf");

                        MailMessage mail = new MailMessage();
                        mail.Attachments.Add(att);


                        mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                        mail.To.Add(CoInfo.PDFEmail);

                        mail.Subject = "Journal Voucher";
                        mail.Body = "This is a  e-mail message sent by an application.";



                        SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                        //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                        NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                        smtp.Credentials = Credentials;


                        smtp.Send(mail);



                        // Close the memory stream.
                        mem.Close();
                        mem.Flush();

                    }
                }

                report.CreateDocument();

                return View("ReportPDF", report);
            }
            else
            {
                XtraJournalVoucherWithoutCost1 report = new XtraJournalVoucherWithoutCost1();
                string reportFilePath = Server.MapPath("/ReportLayout/XtraJournalVoucherWithoutCost1.repx");
                report.LoadLayoutFromXml(reportFilePath);

                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TransactionVM");
                table1 = FunctionUnit.LINQResultToDataTable(TransObj);

                ds.Tables.Add(table1);
                report.LbCoName.Text = CoInfo.ArabicName;
                report.LbVhDate.Text = HeadrObj.VoucherDate.ToString("dd/MM/yyyy");
                report.LbVhNo.Text = HeadrObj.VoucherNumber.ToString();

                report.DataSource = ds;
                report.DataMember = "TransactionVM";
                report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                if (Resources.Resource.CurLang == "Arb")
                {
                    report.LbReportName.Text = TransInfo.ArabicName;
                }
                else
                {
                    report.LbReportName.Text = TransInfo.EnglishName;
                }
                //---Tafqet n3n3 --//
                if (Company.CurrencyRef == 0)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                    ToWord Tfqet = new ToWord(Decimal.Parse(HeadrObj.TotalCredit.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                else if (Company.CurrencyRef == 1)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                    ToWord Tfqet = new ToWord(Decimal.Parse(HeadrObj.TotalCredit.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }

                report.CreateDocument();

                if (Email == 1)
                {
                    if (!String.IsNullOrEmpty(CoInfo.PDFEmail))
                    {
                        MemoryStream mem = new MemoryStream();
                        report.ExportToPdf(mem);

                        mem.Seek(0, System.IO.SeekOrigin.Begin);
                        Attachment att = new Attachment(mem, "JournalVoucher.pdf", "application/pdf");

                        MailMessage mail = new MailMessage();
                        mail.Attachments.Add(att);


                        mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                        mail.To.Add(CoInfo.PDFEmail);

                        mail.Subject = "Journal Voucher";
                        mail.Body = "This is a  e-mail message sent by an application.";



                        SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                        //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                        NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                        smtp.Credentials = Credentials;


                        smtp.Send(mail);



                        // Close the memory stream.
                        mem.Close();
                        mem.Flush();

                    }
                }

                return View("ReportPDF", report);
            }
        }


        public ActionResult OpeningBalancepdf(string id, string id2, string id3, string id4)
        {
            OpeningBalanceVM Obj = new OpeningBalanceVM();
            DateTime Date = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
            Obj.TransDate = Date;
            Obj.AccountNumber= id;
            Obj.TotalDebit = id3;
            Obj.TotalCredit = id4;


            string UserID = User.Identity.GetUserId();
            var UserInfo = _unitOfWork.User.GetMyInfo(UserID);
            var Company = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

            var Data = _unitOfWork.NativeSql.GetTransActionAccountForBalance(UserInfo.fCompanyId);
            Data = Data.OrderBy(m => m.AccountNumber).ToList();
            var TransObj = new List<OpeningBalanceVM>();
            if (Data.Count() > 0)
            {
                foreach (var Acc in Data)
                {

                   var  ObjAcc = new OpeningBalanceVM();
                    ObjAcc.AccountNumber = Acc.AccountNumber;
                    ObjAcc.AccountName = Acc.ArabicName;
                    ObjAcc.Credit = Acc.OpeningBalanceCredit;
                    ObjAcc.Debit = Acc.OpeningBalanceDebit;
                    if (Acc.OpeningBalanceDebit == 0)
                        ObjAcc.sDebit = "";
                    else
                        ObjAcc.sDebit = Acc.OpeningBalanceDebit.ToString();
                    TransObj.Add(ObjAcc);
                }





                XtraOpeningBalancePDF report = new XtraOpeningBalancePDF();
                string reportFilePath = Server.MapPath("/ReportLayout/XtraOpeningBalancePDF.repx");
                report.LoadLayoutFromXml(reportFilePath);

                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
        

                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("OpeningBalanceVM");
                table1 = FunctionUnit.LINQResultToDataTable(TransObj);



                report.LbVhDate.Text = Obj.TransDate.ToString("dd/MM/yyyy");
                report.LbVhNo.Text = Obj.AccountNumber;


                                        
               
                Obj.TotalDebit = TransObj.Sum(m => (m.Debit)).ToString();
                Obj.TotalCredit = TransObj.Sum(m => (m.Credit)).ToString();

                if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                {
                    Obj.TotalDebit = "" + String.Format("{0:n2}", Obj.TotalDebit) + "";
                    Obj.TotalCredit = "" + String.Format("{0:n2}", Obj.TotalCredit) + "";

                }
                else
                {
                    Obj.TotalDebit = "" + String.Format("{0:n3}", Obj.TotalDebit) + "";
                    Obj.TotalCredit = "" + String.Format("{0:n3}", Obj.TotalCredit) + "";

                }

              
                report.Dif.Text = (double.Parse(Obj.TotalDebit) - double.Parse(Obj.TotalCredit)).ToString();
             
                ds.Tables.Add(table1);
                report.LbCoName.Text = CoInfo.ArabicName;

             

                report.DataSource = ds;
                report.DataMember = "OpeningBalanceVM";
                report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
     


                report.CreateDocument();

                return View("ReportPDF", report);
            }
            else
            {



                XtraOpeningBalancePDF report = new XtraOpeningBalancePDF();
                string reportFilePath = Server.MapPath("/ReportLayout/XtraOpeningBalancePDF.repx");
                report.LoadLayoutFromXml(reportFilePath);

                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("OpeningBalanceVM");
                table1 = FunctionUnit.LINQResultToDataTable(TransObj);

                report.LbVhDate.Text = Obj.TransDate.ToString("dd/MM/yyyy");
                report.LbVhNo.Text = Obj.AccountNumber;


                Obj.TotalDebit = TransObj.Sum(m => (m.Debit)).ToString();
                Obj.TotalCredit = TransObj.Sum(m => (m.Credit)).ToString();


                if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                {
                    Obj.TotalDebit = "" + String.Format("{0:n2}", Obj.TotalDebit) + "";
                    Obj.TotalCredit = "" + String.Format("{0:n2}", Obj.TotalCredit) + "";

                }
                else
                {
                    Obj.TotalDebit = "" + String.Format("{0:n3}", Obj.TotalDebit) + "";
                    Obj.TotalCredit = "" + String.Format("{0:n3}", Obj.TotalCredit) + "";

                }

                report.Dif.Text = (double.Parse(Obj.TotalDebit) - double.Parse(Obj.TotalCredit)).ToString();


                ds.Tables.Add(table1);
                report.LbCoName.Text = CoInfo.ArabicName;

                report.DataSource = ds;
                report.DataMember = "OpeningBalanceVM";
                report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();



                report.CreateDocument();

                return View("ReportPDF", report);
            }


        }


        public ActionResult PrintPapersToPaymentVoucherBankPDF(string id, int id2, int id3, string id4, string id5)
        {
            var userId = User.Identity.GetUserId();
            var UserInfo = _unitOfWork.User.GetMyInfo(userId);
            var CurrYear = UserInfo.CurrYear;
            var HeaderObj = _unitOfWork.Header.GetHeaderDataById(id, UserInfo.fCompanyId, id2, id3 , CurrYear);
            var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, HeaderObj.CompanyTransactionKindNo);
            var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, HeaderObj.FCurrencyID);
            var Company = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
            var TransactionDebitObj = _unitOfWork.NativeSql.GetTransactionsDetailDebit(id, UserInfo.fCompanyId, id2, 1 , CurrYear);
            var TransactionCreditObj = _unitOfWork.NativeSql.GetTransactionsDetailCredit(id, UserInfo.fCompanyId, id2, 2 , CurrYear);
            int iRowNumber = HeaderObj.RowCount;
            var TransFixedVM = new TransactionFixedVM { };
            TransFixedVM.Header = HeaderObj;
            TransFixedVM.TransactionDebit = TransactionDebitObj;
            TransFixedVM.TransactionCredit = TransactionCreditObj;
            if (Resources.Resource.CurLang == "Arb")
            {
                TransFixedVM.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                TransFixedVM.CurrencyName = CurrencyObj.ArabicName;
            }
            else
            {
                TransFixedVM.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;
                TransFixedVM.CurrencyName = CurrencyObj.EnglishName;
            }
            TransFixedVM.CurrencyNewValue = Math.Round(HeaderObj.ConversionFactor, 3);
            TransFixedVM.WorkWithCostCenter = Company.WorkWithCostCenter;
            TransFixedVM.AccountDebitName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TransactionDebitObj.AccountNumber);
            TransFixedVM.CostCenterDebitName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TransactionDebitObj.CostCenter);
            TransFixedVM.CostCenterCreditName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TransactionCreditObj.CostCenter);
            TransFixedVM.Amount = Math.Round(TransactionDebitObj.Debit, 3);
            TransFixedVM.TotalAmount = Math.Round(HeaderObj.TotalDebit, 3);
            TransFixedVM.ForeignAmount = Math.Round(TransactionDebitObj.DebitForeign, 3);
            TransFixedVM.TotalForeign = Math.Round(HeaderObj.TotalDebitForeign, 3);
            TransFixedVM.TheDecimalPointForTheForeignCurrency = Company.TheDecimalPointForTheForeignCurrency;
            TransFixedVM.TheDecimalPointForTheLocalCurrency = Company.TheDecimalPointForTheLocalCurrency;


            var AllPapersToPaymnetVoucherBank = _unitOfWork.NativeSql.GetPapersToPaymentVoucherBank(id, (id2), UserInfo.fCompanyId, (id3), int.Parse(id4));
            string ChequeNumber = id5;
            var CurrrCheck = AllPapersToPaymnetVoucherBank.FirstOrDefault(m => m.ChequeNumber == ChequeNumber);
            XtraCheck report = new XtraCheck();
            string reportFilePath = Server.MapPath("/ReportLayout/XtraCheck.repx");
            report.LoadLayoutFromXml(reportFilePath);





            report.LbCheckDate.Text = CurrrCheck.ChequeDate.ToString("dd/MM/yyyy");

            report.LbCustrName.Text = TransFixedVM.AccountDebitName;

            //---Tafqet n3n3 --//
            if (Company.CurrencyRef == 0)
            {
                CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                ToWord Tfqet = new ToWord(Decimal.Parse(CurrrCheck.ChequeAmount.ToString()), currency);
                report.LbTafqet.Text = Tfqet.ConvertToArabic();
            }
            else if (Company.CurrencyRef == 1)
            {
                CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                ToWord Tfqet = new ToWord(Decimal.Parse(CurrrCheck.ChequeAmount.ToString()), currency);
                report.LbTafqet.Text = Tfqet.ConvertToArabic();
            }

            //---End Tfqet--//
            double a = CurrrCheck.ChequeAmount;
            double b = (int)a;    //here b = 3 
            a = a - b;    //a = 3.45 - 3 = 0.45 
            a = Math.Round(a, 3);
            report.LbDinar.Text = b.ToString();
            report.LbFils.Text = a.ToString();


            if (CurrrCheck.Mr) { report.LbTxt1.Text = Resources.Resource.Mr; }
            else
            if (CurrrCheck.Mrs) { report.LbTxt1.Text = Resources.Resource.Mrs; }
            else
            if (CurrrCheck.Sirs) { report.LbTxt1.Text = Resources.Resource.Sirs; }
            else
            if (CurrrCheck.Co) { report.LbTxt1.Text = Resources.Resource.Co; }
            else
            if (CurrrCheck.First) { report.LbTxt1.Text = Resources.Resource.First; }











            report.CreateDocument();



            return View("ReportPDF", report);

        }
        public ActionResult AccountStatmentPDF(string id, string id2, string id3, string id4, Boolean id5, int id6, Boolean id7, int id8)
        {
            try
            {
                int Email = id8;
                AccountStatementSearchVM Obj = new AccountStatementSearchVM();
                DateTime fromDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                DateTime toDate = DateTime.Parse(id3.Substring(0, 2) + "/" + id3.Substring(2, 2) + "/" + id3.Substring(4, 4));
                var userId = User.Identity.GetUserId();
                string UserID = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(UserID);
                int CurrYear = UserInfo.CurrYear;
                var Company = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                Obj.FromDate = fromDate;
                Obj.ToDate = toDate;
                Obj.FromAccAccount = id;
                Obj.CostCenterNumber = id4;

                if (id5)
                {
                    Obj.ByCostCenter = true;

                }

                Obj.CostSearchType = id6;

                if (id7)
                {
                    Obj.Partofthenumber = true;


                }

                if (Obj.CostCenterNumber == "0")
                {
                    Obj.CostCenterNumber = "";
                }


                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);


                if (!String.IsNullOrEmpty(Obj.FromAccAccount))
                {
                    var AccTransAction = _unitOfWork.NativeSql.GetAccountStatement(UserInfo.fCompanyId, CurrYear, Obj.FromAccAccount, Obj.FromDate, Obj.ToDate);
                    if (Obj.ByCostCenter && (!String.IsNullOrEmpty(Obj.CostCenterNumber)))
                    {

                        if (Obj.CostSearchType == 1 && Obj.Partofthenumber)
                        {
                            AccTransAction = AccTransAction.Where(m => m.CostCenter != null).ToList();
                            AccTransAction = AccTransAction.Where(m => m.CostCenter.StartsWith(Obj.CostCenterNumber)).ToList();

                        }
                        else if (Obj.CostSearchType == 2 && Obj.Partofthenumber)
                        {
                            AccTransAction = AccTransAction.Where(m => m.CostCenter != null).ToList();
                            AccTransAction = AccTransAction.Where(m => m.CostCenter.EndsWith(Obj.CostCenterNumber)).ToList();

                        }
                        else if (Obj.CostSearchType == 3 && Obj.Partofthenumber)
                        {
                            AccTransAction = AccTransAction.Where(m => m.CostCenter != null).ToList();
                            AccTransAction = AccTransAction.Where(m => m.CostCenter.Contains(Obj.CostCenterNumber)).ToList();

                        }
                        else
                        {
                            AccTransAction = AccTransAction.Where(m => m.CostCenter != null).ToList();
                            AccTransAction = AccTransAction.Where(m => m.CostCenter == Obj.CostCenterNumber).ToList();
                        }


                    }
                    var CompanyTransAction = _unitOfWork.CompanyTransactionKind.GetAllCompanyTransactionKind(UserInfo.fCompanyId);
                    var TransActionKind = _unitOfWork.TransactionKind.GetAllTransactionKind();

                    var St_CompanyTransAction = _unitOfWork.St_CompanyTransactionKind.GetAllSt_CompanyTransactionKind(UserInfo.fCompanyId);
                    var St_TranActionKind = _unitOfWork.St_TransactionKind.GetAllSt_TransactionKind();

                    var St_CompanyTransAction_H = _unitOfWork.St_CompanyTransactionKindH.GetAllSt_CompanyTransactionKindH(UserInfo.fCompanyId);
                    var St_TranActionKind_H = _unitOfWork.St_TransactionKindH.GetAllSt_TransactionKindH();

                    var FromDate = Obj.FromDate;
                    var ToDate = Obj.ToDate;
                    var ObjAccountStatmentList = new List<AccountStatementVM>();
                    double LastBalance = 0;
                    double TotalDebit = 0;
                    double TotalCredit = 0;
                    double NetTotal = 0;
                    double TotalUnpaidChequesReceived = _unitOfWork.NativeSql.GetTotalUnpaidChequesReceived(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.FromAccAccount);
                    double TotalUnpaidChequesPayment = _unitOfWork.NativeSql.GetTotalUnpaidChequesPayment(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.FromAccAccount);

                    if (DateTime.Parse("31/12/" + (CurrYear - 1).ToString()) < Obj.FromDate)
                    {
                        var OpeiningBalance = _unitOfWork.NativeSql.GetOpeningBalanceTrans(UserInfo.fCompanyId, CurrYear, Obj.FromAccAccount, DateTime.Parse("31/12/" + (CurrYear - 1).ToString()), DateTime.Parse("31/12/" + (CurrYear - 1).ToString()));
                        if (OpeiningBalance.Count() > 0)
                        {
                            foreach (var Day in OpeiningBalance)
                            {
                                TotalDebit = TotalDebit + Day.Debit;
                                TotalCredit = TotalCredit + Day.Credit;

                                AccountStatementVM ObjStatment = new AccountStatementVM
                                {
                                    TransDate = Day.VoucherDate,
                                    Statment = Day.Note,
                                    TransName = "",
                                    Credit = Day.Credit * -1,
                                    Debit = Day.Debit,
                                    Balance = (LastBalance) + ((Day.Credit * -1) + Day.Debit),
                                    CompanyTransactionKindID = Day.CompanyTransactionKindNo,
                                    TransactionKindID = Day.TransactionKindNo,
                                    VHFI = Day.VHI,
                                    VoucherNumber = Day.VoucherNumber,
                                    sCredit = String.Format("{0:n3}", (Day.Credit * -1)),
                                    sDebit = String.Format("{0:n3}", (Day.Debit))



                                };



                                if (ObjStatment.Debit < 0)
                                {
                                    ObjStatment.sDebit = "(" + String.Format("{0:n3}", (ObjStatment.Debit * -1)) + ")";
                                }
                                if (ObjStatment.Credit < 0)
                                {
                                    ObjStatment.sCredit = "" + String.Format("{0:n3}", (ObjStatment.Credit * -1)) + "";
                                }
                                if (ObjStatment.Debit == 0)
                                    ObjStatment.sDebit = "";
                                if (ObjStatment.Credit == 0)
                                    ObjStatment.sCredit = "";

                                if (ObjStatment.Balance == 0)
                                    ObjStatment.sBalance = "";

                                ObjStatment.TransName = "";



                                if (ObjStatment.Balance < 0)
                                {
                                    ObjStatment.sBalance = "(" + String.Format("{0:n3}", (ObjStatment.Balance * -1)) + ")";
                                }
                                else
                                {
                                    ObjStatment.sBalance = String.Format("{0:n3}", (ObjStatment.Balance));
                                }


                                LastBalance = ObjStatment.Balance;

                                ObjAccountStatmentList.Add(ObjStatment);
                            }
                        }
                    }

                    while (FromDate <= ToDate)
                    {
                        var CurrDay = AccTransAction.Where(m => m.VoucherDate >= FromDate && m.VoucherDate < FromDate.AddDays(1)).OrderBy(m => m.VHI).OrderBy(m => m.RowNumber);
                        foreach (var Day in CurrDay)
                        {
                            TotalDebit = TotalDebit + Day.Debit;
                            TotalCredit = TotalCredit + Day.Credit;

                            AccountStatementVM ObjStatment = new AccountStatementVM
                            {
                                TransDate = Day.VoucherDate,
                                Statment = Day.Note,
                                TransName = Day.CompanyTransactionKindNo.ToString(),
                                Credit = Day.Credit * -1,
                                Debit = Day.Debit,
                                Balance = (LastBalance) + ((Day.Credit * -1) + Day.Debit),
                                CompanyTransactionKindID = Day.CompanyTransactionKindNo,
                                TransactionKindID = Day.TransactionKindNo,
                                VHFI = Day.VHI,
                                VoucherNumber = Day.VoucherNumber,
                                sCredit = String.Format("{0:n3}", (Day.Credit * -1)),
                                sDebit = String.Format("{0:n3}", (Day.Debit))



                            };



                            if (ObjStatment.Debit < 0)
                            {
                                ObjStatment.sDebit = "(" + String.Format("{0:n3}", (ObjStatment.Debit * -1)) + ")";
                            }
                            if (ObjStatment.Credit < 0)
                            {
                                ObjStatment.sCredit = "" + String.Format("{0:n3}", (ObjStatment.Credit * -1)) + "";
                            }
                            if (ObjStatment.Debit == 0)
                                ObjStatment.sDebit = "";
                            if (ObjStatment.Credit == 0)
                                ObjStatment.sCredit = "";

                            if (ObjStatment.Balance == 0)
                                ObjStatment.sBalance = "";

                            if (Company.Hiajneh == 1)
                            {
                                if (Day.CompanyTransactionKindNo >= 1000)
                                {
                                    var V = St_TranActionKind_H.FirstOrDefault(m => m.St_TransactionKindID == Day.TransactionKindNo);
                                    var St = St_CompanyTransAction_H.FirstOrDefault(m => m.St_TransactionKindID == Day.TransactionKindNo && m.St_CompanyTransactionKindID == Day.CompanyTransactionKindNo);
                                    if (V != null)
                                    {
                                        ObjStatment.TransName = V.ArabicName + " (" + Day.VoucherNumber + ") ";
                                    }
                                    if (St != null)
                                    {
                                        ObjStatment.TransName = "(" + St.StockCode + ")" + ObjStatment.TransName ;
                                    }

                                }
                                else if (Day.CompanyTransactionKindNo == 0)
                                {
                                    var V = TransActionKind.FirstOrDefault(m => m.TransactionKindID == Day.TransactionKindNo);
                                    if (V != null)
                                    {
                                        ObjStatment.TransName = V.ArabicName + " (" + Day.VoucherNumber + ") ";
                                    }
                                }
                                else
                                {
                                    var V = CompanyTransAction.FirstOrDefault(m => m.TransactionKindID == Day.TransactionKindNo
                                      && m.CompanyTransactionKindID == Day.CompanyTransactionKindNo);
                                    if (V != null)
                                    {
                                        ObjStatment.TransName = V.ArabicName + " (" + Day.VoucherNumber + ") ";
                                    }
                                }
                            }
                            else if (Company.WorkWithStock == 1)
                            {
                                if (Day.CompanyTransactionKindNo >= 1000)
                                {
                                    var V = St_TranActionKind.FirstOrDefault(m => m.St_TransactionKindID == Day.TransactionKindNo);
                                    var St = St_CompanyTransAction.FirstOrDefault(m => m.St_TransactionKindID == Day.TransactionKindNo && m.St_CompanyTransactionKindID == Day.CompanyTransactionKindNo);
                                    if (V != null)
                                    {
                                        ObjStatment.TransName = V.ArabicName + " (" + Day.VoucherNumber + ") ";
                                    }
                                    if (St != null)
                                    {
                                        ObjStatment.TransName = "(" + St.StockCode + ")" + ObjStatment.TransName ;
                                    }

                                }
                                else if (Day.CompanyTransactionKindNo == 0)
                                {
                                    var V = TransActionKind.FirstOrDefault(m => m.TransactionKindID == Day.TransactionKindNo);
                                    if (V != null)
                                    {
                                        ObjStatment.TransName = V.ArabicName + " (" + Day.VoucherNumber + ") ";
                                    }
                                }
                                else
                                {
                                    var V = CompanyTransAction.FirstOrDefault(m => m.TransactionKindID == Day.TransactionKindNo
                                      && m.CompanyTransactionKindID == Day.CompanyTransactionKindNo);
                                    if (V != null)
                                    {
                                        ObjStatment.TransName = V.ArabicName + " (" + Day.VoucherNumber + ") ";
                                    }
                                }
                            }
                            else
                            {
                                if (Day.CompanyTransactionKindNo == 0)
                                {
                                    var V = TransActionKind.FirstOrDefault(m => m.TransactionKindID == Day.TransactionKindNo);
                                    if (V != null)
                                    {
                                        ObjStatment.TransName = V.ArabicName + " (" + Day.VoucherNumber + ") ";
                                    }
                                }
                                else
                                {
                                    var V = CompanyTransAction.FirstOrDefault(m => m.TransactionKindID == Day.TransactionKindNo
                                      && m.CompanyTransactionKindID == Day.CompanyTransactionKindNo);
                                    if (V != null)
                                    {
                                        ObjStatment.TransName = V.ArabicName + " (" + Day.VoucherNumber + ") ";
                                    }
                                }
                            }

                            if (ObjStatment.Balance < 0)
                            {
                                ObjStatment.sBalance = "(" + String.Format("{0:n3}", (ObjStatment.Balance * -1)) + ")";
                            }
                            else
                            {
                                ObjStatment.sBalance = String.Format("{0:n3}", (ObjStatment.Balance));
                            }
                            LastBalance = ObjStatment.Balance;
                            ObjAccountStatmentList.Add(ObjStatment);
                        }



                        FromDate = FromDate.AddDays(1);
                    }
                    NetTotal = TotalDebit - TotalCredit;
                    AccountStatementHeaderVM ObjTot = new AccountStatementHeaderVM
                    {
                        AccountStatementVM = ObjAccountStatmentList,
                        TotalCredit = TotalCredit,
                        TotalDebit = TotalDebit,
                        NetTotal = NetTotal,
                        TotalUnpaidChequesReceived = TotalUnpaidChequesReceived,
                        TotalUnpaidChequesPayment = TotalUnpaidChequesPayment,
                        sTotalCredit = String.Format("{0:n3}", (TotalCredit)),
                        sTotalDebit = String.Format("{0:n3}", (TotalDebit)),
                        sNetTotal = String.Format("{0:n3}", (NetTotal)),
                        sTotalCustomerCheque = String.Format("{0:n3}", (TotalUnpaidChequesReceived)),
                        sTotalSupplierCheque = String.Format("{0:n3}", (TotalUnpaidChequesPayment))
                    };


                    XtraAccountStatmentReport report = new XtraAccountStatmentReport();
                    string reportFilePath = Server.MapPath("/ReportLayout/XtraAccountStatmentReport.repx");

                    report.LoadLayoutFromXml(reportFilePath);

                    //   report.ImgLogo.ImageUrl= Server.MapPath("/CompanyLogo/cat-48.png");

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("AccountStatementVM");
                    table1 = FunctionUnit.LINQResultToDataTable(ObjTot.AccountStatementVM);

                    ds.Tables.Add(table1);



                    var AccountInfo = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.FromAccAccount);
                    if (AccountInfo != null)
                    {
                        Obj.FromAccName = AccountInfo.ArabicName;
                    }


                    if (!String.IsNullOrEmpty(Obj.CostCenterNumber))
                    {
                        var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, Obj.CostCenterNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            if (Obj.Partofthenumber)
                            {
                                if (Obj.CostSearchType == 1)
                                    report.LbCostName.Text = Resources.Resource.StartWith;
                                else
                                      if (Obj.CostSearchType == 2)
                                    report.LbCostName.Text = Resources.Resource.EndWith;
                                else
                                      if (Obj.CostSearchType == 3)
                                    report.LbCostName.Text = Resources.Resource.Contain;

                            }
                            else
                            {
                                report.LbCostName.Text = AccName.ArabicName;
                            }

                        }
                        else
                        {

                            if (Obj.Partofthenumber)
                            {
                                report.LbCostName.Text = " ";
                            }
                            else
                            {
                                report.LbCostName.Text = AccName.EnglishName;
                            }

                        }

                    }

                    report.DataSource = ds;
                    report.DataMember = "AccountStatementVM";

                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;
                    report.LbAccNo.Text = Obj.FromAccAccount;
                    report.LbAccName.Text = Obj.FromAccName;
                    report.LbCostNo.Text = Obj.CostCenterNumber;
                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbTotDebit.Text = ObjTot.sTotalDebit;
                    report.LbTotCredit.Text = ObjTot.sTotalCredit;
                    report.LbTotBalance.Text = ObjTot.sNetTotal;
                    report.LbCoName.Text = CoInfo.ArabicName;

                    report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                    report.CreateDocument();

                    if (Email == 1)
                    {
                        if (!String.IsNullOrEmpty(CoInfo.PDFEmail))
                        {
                            MemoryStream mem = new MemoryStream();
                            report.ExportToPdf(mem);

                            mem.Seek(0, System.IO.SeekOrigin.Begin);
                            Attachment att = new Attachment(mem, "AccountStatment.pdf", "application/pdf");

                            MailMessage mail = new MailMessage();
                            mail.Attachments.Add(att);


                            mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                            mail.To.Add(CoInfo.PDFEmail);

                            mail.Subject = "كشف حساب";
                            mail.Body = "This is a  e-mail message sent by an application.";



                            SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                            //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                            NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                            smtp.Credentials = Credentials;


                            smtp.Send(mail);



                            // Close the memory stream.
                            mem.Close();
                            mem.Flush();

                        }
                    }

                    return View("ReportPDF", report);




                }

                else
                {
                    var ObjTot = new AccountStatementHeaderVM
                    {
                        AccountStatementVM = new List<AccountStatementVM>(),
                        NetTotal = 0,
                        TotalCredit = 0,
                        TotalDebit = 0,
                    };

                    XtraAccountStatmentReport report = new XtraAccountStatmentReport();
                    string reportFilePath = Server.MapPath("/ReportLayout/XtraAccountStatmentReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("AccountStatementVM");
                    table1 = FunctionUnit.LINQResultToDataTable(ObjTot.AccountStatementVM);

                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");
                    report.LbAccNo.Text = Obj.FromAccAccount;
                    report.LbAccName.Text = Obj.FromAccName;
                    report.LbCostNo.Text = Obj.CostCenterNumber;
                    report.LbCoName.Text = CoInfo.ArabicName;

                    var AccountInfo = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.FromAccAccount);
                    if (AccountInfo != null)
                    {
                        Obj.FromAccName = AccountInfo.ArabicName;
                    }



                    if (!String.IsNullOrEmpty(Obj.CostCenterNumber))
                    {
                        var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, Obj.CostCenterNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            if (Obj.Partofthenumber)
                            {
                                if (Obj.CostSearchType == 1)
                                    report.LbCostName.Text = Resources.Resource.StartWith;
                                else
                                      if (Obj.CostSearchType == 2)
                                    report.LbCostName.Text = Resources.Resource.EndWith;
                                else
                                      if (Obj.CostSearchType == 3)
                                    report.LbCostName.Text = Resources.Resource.Contain;

                            }
                            else
                            {
                                report.LbCostName.Text = AccName.ArabicName;
                            }

                        }
                        else
                        {

                            if (Obj.Partofthenumber)
                            {
                                report.LbCostName.Text = " ";
                            }
                            else
                            {
                                report.LbCostName.Text = AccName.EnglishName;
                            }

                        }

                    }


                    report.LbTotDebit.Text = ObjTot.sTotalDebit;
                    report.LbTotCredit.Text = ObjTot.sTotalCredit;
                    report.LbTotBalance.Text = ObjTot.sNetTotal;
                    report.LbCoName.Text = CoInfo.ArabicName;



                    ds.Tables.Add(table1);

                    report.DataSource = ds;
                    report.DataMember = "AccountStatementVM";

                    report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                    report.CreateDocument();

                    if (Email == 1)
                    {
                        if (!String.IsNullOrEmpty(CoInfo.PDFEmail))
                        {
                            MemoryStream mem = new MemoryStream();
                            report.ExportToPdf(mem);

                            mem.Seek(0, System.IO.SeekOrigin.Begin);
                            Attachment att = new Attachment(mem, "AccountStatment.pdf", "application/pdf");

                            MailMessage mail = new MailMessage();
                            mail.Attachments.Add(att);


                            mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                            mail.To.Add(CoInfo.PDFEmail);

                            mail.Subject = "كشف حساب";
                            mail.Body = "This is a  e-mail message sent by an application.";



                            SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                            //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                            NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                            smtp.Credentials = Credentials;


                            smtp.Send(mail);



                            // Close the memory stream.
                            mem.Close();
                            mem.Flush();

                        }
                    }

                    return View("ReportPDF", report);
                }


            }
            catch (Exception ex)
            {
                string err = ex.Message;

                var ObjTot = new AccountStatementHeaderVM
                {
                    AccountStatementVM = new List<AccountStatementVM>(),
                    NetTotal = 0,
                    TotalCredit = 0,
                    TotalDebit = 0,
                };

                XtraAccountStatmentReport report = new XtraAccountStatmentReport();
                string reportFilePath = Server.MapPath("/ReportLayout/XtraAccountStatmentReport.repx");
                report.LoadLayoutFromXml(reportFilePath);

                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("AccountStatementVM");
                table1 = FunctionUnit.LINQResultToDataTable(ObjTot.AccountStatementVM);

                ds.Tables.Add(table1);



                report.DataSource = ds;
                report.DataMember = "AccountStatementVM";

                report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                report.CreateDocument();
                return View("ReportPDF", report);

            }


        }

        public ActionResult GetTrialBalancePDF(string id, string id2, int id3, string id4, int id5, int id6, string id7, Boolean id8, int id9, Boolean id10, int id11, int id12)
        {
            try
            {
                int Email = id12;
                AccountLevelRepVM Obj = new AccountLevelRepVM();
                DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                Obj.AccountLevelDropVMID = id3;
                Obj.AccNo = id4;
                Obj.FromDate = fromDate;
                Obj.ToDate = toDate;
                Obj.OrderBy = id11;
                Obj.CostCenterNumber = id7;


                string List = " ";
                if (id5 == 1)
                {
                    Obj.ShowZeroBalance = true;
                    List += Resources.Resource.ShowZeroBalance + " ";

                }
                if (id6 == 1)
                {
                    Obj.Detail = true;
                    List += Resources.Resource.Detail + " ";

                }
                if (id8)
                {
                    Obj.ByCostCenter = true;
                }

                Obj.CostSearchType = id9;
                if (id10)
                {
                    Obj.Partofthenumber = true;
                }
                if (Obj.AccNo == "0")
                {
                    Obj.AccNo = "";
                }

                if (Obj.CostCenterNumber == "0")
                {
                    Obj.CostCenterNumber = "";
                }



                var userId = User.Identity.GetUserId();
                string UserID = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(UserID);
                var AccountData = _unitOfWork.NativeSql.GetChartOfAccountByLevel(UserInfo.fCompanyId);
                int CurrYear = UserInfo.CurrYear;
                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                var Date = "01/01/" + CurrYear;
                var OpenDate = "31/12/" + (CurrYear - 1).ToString();

                string TempCostID = "0";
                int TempCostType = 0;

                if (Obj.ByCostCenter)
                {
                    TempCostID = Obj.CostCenterNumber;
                    if (Obj.Partofthenumber)
                    {
                        TempCostType = Obj.CostSearchType;
                    }


                }

                IEnumerable<TrialBalanceVM> TotData = new List<TrialBalanceVM>();
                if (Obj.Partofthenumber)
                {
                    if (Obj.CostSearchType == 1)
                    {
                        Obj.CostCenterNumber = Obj.CostCenterNumber + "%";
                    }
                    else if (Obj.CostSearchType == 2)
                    {
                        Obj.CostCenterNumber = "%" + Obj.CostCenterNumber;

                    }
                    else if (Obj.CostSearchType == 3)
                    {
                        Obj.CostCenterNumber = "%" + Obj.CostCenterNumber + "%";


                    }
                }

                var TranData = _unitOfWork.NativeSql.GetTransactionForTrial(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                if (DateTime.Parse(Date) != Obj.FromDate)
                    TotData = _unitOfWork.NativeSql.GetTotCreditDebitForTrial(UserInfo.fCompanyId, DateTime.Parse(Date), Obj.FromDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);

                //----------------Get Open-------------//
                IEnumerable<TrialBalanceVM> TotDataOpen = new List<TrialBalanceVM>();
                TotDataOpen = _unitOfWork.NativeSql.GetTotCreditDebitForTrialOpen(UserInfo.fCompanyId, DateTime.Parse(OpenDate), DateTime.Parse(OpenDate));
                foreach (var D in TotDataOpen)
                {
                    TotData = TotData.Append(D);

                }
                //------------------------------------//



                double TotalDebit = 0;
                double TOTCredit = 0;
                double NetCredit = 0;
                double NetDebit = 0;
                double CreditBalance = 0;
                double DebitBalance = 0;
                double CreditTransAction = 0;
                double DebitTransAction = 0;

                List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                IEnumerable<ChartOfAccount> Accounts = new List<ChartOfAccount>();

                IEnumerable<ChartOfAccount> LessMainAccount = new List<ChartOfAccount>();
                if (!String.IsNullOrEmpty(Obj.AccNo))
                {

                    var MainAccount = AccountData.FirstOrDefault(m => m.AccountNumber == Obj.AccNo);
                    var MainChild = AccountData.Where(m => m.AccountFather == Obj.AccNo).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();

                    foreach (var Acc in MainChild)
                    {
                        TotalDebit = 0;
                        TOTCredit = 0;
                        NetCredit = 0;
                        NetDebit = 0;
                        CreditBalance = 0;
                        DebitBalance = 0;
                        CreditTransAction = 0;
                        DebitTransAction = 0;


                        if (AccountData.FirstOrDefault(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel) != null)//Check if Account Had Branches
                        {
                            var AllAccount = AccountData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel)
                                            .OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();//Get All Account Branches
                            int FatherLevel = Acc.AccountLevel;
                            foreach (var CurrAccLevel in AllAccount)
                            {
                                if (CurrAccLevel.AccountLevel == FatherLevel)
                                {
                                    break;
                                }
                                else
                                {

                                    var TransActionData = TranData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    var BalanceData = TotData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    foreach (var D in TransActionData)
                                    {
                                        CreditTransAction += D.CreditTransAction;
                                        DebitTransAction += D.DebitTransAction;
                                    }
                                    foreach (var Balance in BalanceData)
                                    {
                                        CreditBalance += Balance.CreditBalance;
                                        DebitBalance += Balance.DebitBalance;
                                    }



                                    TotalDebit = DebitTransAction + DebitBalance;
                                    TOTCredit = CreditTransAction + CreditBalance;




                                }
                            }




                        }
                        else
                        {
                            var TransActionData = TranData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            var BalanceData = TotData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            foreach (var D in TransActionData)
                            {
                                CreditTransAction += D.CreditTransAction;
                                DebitTransAction += D.DebitTransAction;
                            }
                            foreach (var Balance in BalanceData)
                            {
                                CreditBalance += Balance.CreditBalance;
                                DebitBalance += Balance.DebitBalance;
                            }
                            TotalDebit = DebitTransAction + DebitBalance;
                            TOTCredit = CreditTransAction + CreditBalance;
                        }
                        if (TotalDebit > TOTCredit)
                        {
                            NetDebit = TotalDebit - TOTCredit;
                        }
                        if (TotalDebit < TOTCredit)
                        {
                            NetCredit = TOTCredit - TotalDebit;
                        }

                        TrialBalanceVM trialBalance = new TrialBalanceVM();
                        trialBalance.AccountNumber = Acc.AccountNumber;
                        trialBalance.Name = Acc.ArabicName;

                        trialBalance.CreditBalance = CreditBalance;
                        trialBalance.CreditTransAction = CreditTransAction;
                        trialBalance.DebitBalance = DebitBalance;
                        trialBalance.DebitTransAction = DebitTransAction;
                        trialBalance.NetCredit = NetCredit;
                        trialBalance.NetDebit = NetDebit;
                        trialBalance.TempCostID = TempCostID;
                        trialBalance.TempCostType = TempCostType;

                        trialBalance.nCreditBalance = CreditBalance;
                        trialBalance.nCreditTransAction = CreditTransAction;
                        trialBalance.nDebitBalance = DebitBalance;
                        trialBalance.nDebitTransAction = DebitTransAction;
                        trialBalance.nNetCredit = NetCredit;
                        trialBalance.nNetDebit = NetDebit;



                        if (!Obj.ShowZeroBalance)
                        {
                            if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }
                        }
                        else
                        {
                            if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }


                        }
                    }


                }
                else

                if ((Obj.AccountLevelDropVMID > 0) && (!Obj.Detail))
                {


                    Accounts = AccountData.Where(m => m.AccountLevel == Obj.AccountLevelDropVMID).OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                    LessMainAccount = AccountData.Where(m => m.AccountLevel < Obj.AccountLevelDropVMID).OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                    IEnumerable<string> FaherAccount = LessMainAccount.Where(m => m.AccountFather != "0").Select(m => m.AccountFather);


                    foreach (var A in LessMainAccount)
                    {
                        if (AccountData.FirstOrDefault(m => m.AccountFather == A.AccountNumber) != null)
                        {
                            //do nothing
                        }
                        else

                        {
                            Accounts = Accounts.Append(A);
                        }

                    }
                    Accounts = Accounts.OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();
                    // var MainChild = AccountData.Where(m => m.AccountFather == MainAcc.AccountNumber).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();
                    foreach (var Acc in Accounts)
                    {
                        TotalDebit = 0;
                        TOTCredit = 0;
                        NetCredit = 0;
                        NetDebit = 0;
                        CreditBalance = 0;
                        DebitBalance = 0;
                        CreditTransAction = 0;
                        DebitTransAction = 0;


                        if (AccountData.FirstOrDefault(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel) != null)
                        {
                            var AllAccount = AccountData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel)
                                            .OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();
                            int FatherLevel = Acc.AccountLevel;

                            foreach (var CurrAccLevel in AllAccount)
                            {
                                if (CurrAccLevel.AccountLevel == FatherLevel)
                                {
                                    break;
                                }
                                else
                                {
                                    var TransActionData = TranData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    var BalanceData = TotData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    foreach (var D in TransActionData)
                                    {
                                        CreditTransAction += D.CreditTransAction;
                                        DebitTransAction += D.DebitTransAction;
                                    }
                                    foreach (var Balance in BalanceData)
                                    {
                                        CreditBalance += Balance.CreditBalance;
                                        DebitBalance += Balance.DebitBalance;
                                    }
                                    TotalDebit = DebitTransAction + DebitBalance;
                                    TOTCredit = CreditTransAction + CreditBalance;
                                }
                            }
                        }
                        else
                        {
                            var TransActionData = TranData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            var BalanceData = TotData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            foreach (var D in TransActionData)
                            {
                                CreditTransAction += D.CreditTransAction;
                                DebitTransAction += D.DebitTransAction;
                            }
                            foreach (var Balance in BalanceData)
                            {
                                CreditBalance += Balance.CreditBalance;
                                DebitBalance += Balance.DebitBalance;
                            }

                            TotalDebit = DebitTransAction + DebitBalance;
                            TOTCredit = CreditTransAction + CreditBalance;
                        }
                        if (TotalDebit > TOTCredit)
                        {
                            NetDebit = TotalDebit - TOTCredit;
                        }
                        if (TotalDebit < TOTCredit)
                        {
                            NetCredit = TOTCredit - TotalDebit;
                        }

                        TrialBalanceVM trialBalance = new TrialBalanceVM();
                        trialBalance.AccountNumber = Acc.AccountNumber;
                        trialBalance.Name = Acc.ArabicName;
                        trialBalance.Level = Acc.AccountLevel;
                        trialBalance.CreditBalance = CreditBalance;
                        trialBalance.CreditTransAction = CreditTransAction;
                        trialBalance.DebitBalance = DebitBalance;
                        trialBalance.DebitTransAction = DebitTransAction;
                        trialBalance.NetCredit = NetCredit;
                        trialBalance.NetDebit = NetDebit;

                        trialBalance.nCreditBalance = CreditBalance;
                        trialBalance.nCreditTransAction = CreditTransAction;
                        trialBalance.nDebitBalance = DebitBalance;
                        trialBalance.nDebitTransAction = DebitTransAction;
                        trialBalance.nNetCredit = NetCredit;
                        trialBalance.nNetDebit = NetDebit;
                        trialBalance.TempCostID = TempCostID;
                        trialBalance.TempCostType = TempCostType;
                        if (AccountData.FirstOrDefault(m => m.AccountFather == Acc.AccountNumber) != null)
                        {
                            trialBalance.IsMainAccount = 1;

                        }
                        else
                        {
                            trialBalance.IsMainAccount = 0;


                        }

                        if (!Obj.ShowZeroBalance)
                        {
                            if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }
                        }
                        else
                        {
                            if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }


                        }
                    }

                }
                else if ((Obj.AccountLevelDropVMID > 0) && (Obj.Detail))
                {


                    Accounts = AccountData.Where(m => m.AccountLevel <= Obj.AccountLevelDropVMID).ToList().OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                    foreach (var Acc in Accounts)//Each Main Account
                    {
                        TotalDebit = 0;
                        TOTCredit = 0;
                        NetCredit = 0;
                        NetDebit = 0;
                        CreditBalance = 0;
                        DebitBalance = 0;
                        CreditTransAction = 0;
                        DebitTransAction = 0;

                        var MainAccount = AccountData.FirstOrDefault(m => m.AccountNumber == Acc.AccountNumber);
                        var MainChild = AccountData.Where(m => m.AccountFather == Acc.AccountNumber).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();
                        var TransActionData = new List<TrialBalanceVM>();
                        TranData = TranData.Where(m => m.AccountNumber != null).ToList();
                        if (TranData != null && TranData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber)) != null)
                        {
                            TransActionData = TranData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber)).ToList();
                        }

                        var BalanceData = TotData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));

                        if (TransActionData != null)
                        {
                            foreach (var D in TransActionData)
                            {
                                CreditTransAction += D.CreditTransAction;
                                DebitTransAction += D.DebitTransAction;
                            }

                        }

                        if (BalanceData != null)
                        {
                            foreach (var Balance in BalanceData)
                            {
                                CreditBalance += Balance.CreditBalance;
                                DebitBalance += Balance.DebitBalance;
                            }
                        }




                        TotalDebit = DebitTransAction + DebitBalance;
                        TOTCredit = CreditTransAction + CreditBalance;

                        if (TotalDebit > TOTCredit)
                        {
                            NetDebit = TotalDebit - TOTCredit;
                        }
                        if (TotalDebit < TOTCredit)
                        {
                            NetCredit = TOTCredit - TotalDebit;
                        }

                        TrialBalanceVM trialBalance = new TrialBalanceVM();
                        trialBalance.AccountNumber = Acc.AccountNumber;
                        trialBalance.Name = Acc.ArabicName;

                        trialBalance.CreditBalance = CreditBalance;
                        trialBalance.CreditTransAction = CreditTransAction;
                        trialBalance.DebitBalance = DebitBalance;
                        trialBalance.DebitTransAction = DebitTransAction;
                        trialBalance.NetCredit = NetCredit;
                        trialBalance.NetDebit = NetDebit;
                        trialBalance.TempCostID = TempCostID;
                        trialBalance.TempCostType = TempCostType;
                        if ((AccountData.FirstOrDefault(m => m.AccountFather == Acc.AccountNumber) != null) && (Acc.AccountLevel < Obj.AccountLevelDropVMID))
                        {
                            trialBalance.IsMainAccount = 1;
                            trialBalance.MainAccount = "{*}";


                            trialBalance.nCreditBalance = 0;
                            trialBalance.nCreditTransAction = 0;
                            trialBalance.nDebitBalance = 0;
                            trialBalance.nDebitTransAction = 0;
                            trialBalance.nNetCredit = 0;
                            trialBalance.nNetDebit = 0;

                        }
                        else
                        {
                            trialBalance.IsMainAccount = 0;
                            trialBalance.MainAccount = "";
                            trialBalance.nCreditBalance = CreditBalance;
                            trialBalance.nCreditTransAction = CreditTransAction;
                            trialBalance.nDebitBalance = DebitBalance;
                            trialBalance.nDebitTransAction = DebitTransAction;
                            trialBalance.nNetCredit = NetCredit;
                            trialBalance.nNetDebit = NetDebit;


                        }
                        if (!Obj.ShowZeroBalance)
                        {
                            if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }
                        }
                        else
                        {
                            if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }


                        }




                    }
                }





                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TrialBalanceVM");
                if (Obj.OrderBy == 1)
                {   
                    TrialBalanceVMList = TrialBalanceVMList.OrderByDescending(m => m.NetDebit).ThenBy(m => m.NetCredit).ToList();
                }
                else if (Obj.OrderBy == 2)
                {
                    TrialBalanceVMList = TrialBalanceVMList.OrderBy(m => m.NetDebit).ThenBy(m => m.NetCredit).ToList();
                }

                table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                ds.Tables.Add(table1);

                if (Obj.Detail)
                {
                    //XtraTrialBalanceDetailReport_1();
                    var report = new XtraTrialBalanceDetailReport();
                    string reportFilePath = Server.MapPath("/ReportLayout/XtraTrialBalanceDetailReport_1.repx");
                     report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;
                    report.LbLevel.Text = String.Format("{0} {1}", Resources.Resource.AccountLevel, Obj.AccountLevelDropVMID.ToString());
                    report.DataSource = ds;
                    report.DataMember = "TrialBalanceVM";
                    report.ToAccountNumber.Text = Obj.AccNo;
                    report.CostCenter.Text = Obj.CostCenterNumber;
                  //  report.xrLabel1.Text = Checklist + " ";
                    report.xrLabel6.Text = List;

                    if (!String.IsNullOrEmpty(Obj.AccNo))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.AccNo);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.AccountName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.AccountName.Text = AccName.EnglishName;
                        }

                    }





                    if (!String.IsNullOrEmpty(Obj.CostCenterNumber))
                    {
                        var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, Obj.CostCenterNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            if (Obj.Partofthenumber)
                            {
                                if (Obj.CostSearchType == 1 )
                                    report.CostCenterName.Text = Resources.Resource.StartWith;
                                else
                                      if (Obj.CostSearchType == 2)
                                    report.CostCenterName.Text = Resources.Resource.EndWith;
                                else
                                      if (Obj.CostSearchType == 3)
                                    report.CostCenterName.Text = Resources.Resource.Contain;

                            }
                            else
                            {
                                report.CostCenterName.Text = AccName.ArabicName;
                            }

                        }
                        else
                        {

                            if (Obj.Partofthenumber)
                            {
                                report.CostCenterName.Text = " ";
                            }
                            else
                            {
                                report.CostCenterName.Text = AccName.EnglishName;
                            }

                        }

                    }





                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.LbReporttitle.Text = "ميزان مراجعة تفصيلي";
                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                    report.CreateDocument();

                    if (Email == 1)
                    {
                        if (!String.IsNullOrEmpty(CoInfo.PDFEmail))
                        {
                            MemoryStream mem = new MemoryStream();
                            report.ExportToPdf(mem);

                            mem.Seek(0, System.IO.SeekOrigin.Begin);
                            Attachment att = new Attachment(mem, "TrialBalance.pdf", "application/pdf");

                            MailMessage mail = new MailMessage();
                            mail.Attachments.Add(att);


                            mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                            mail.To.Add(CoInfo.PDFEmail);

                            mail.Subject = "ميزان مراجعة تفصيلي";
                            mail.Body = "This is a  e-mail message sent by an application.";



                            SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                            //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                            NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                            smtp.Credentials = Credentials;


                            smtp.Send(mail);



                            // Close the memory stream.
                            mem.Close();
                            mem.Flush();

                        }
                    }

                    return View("ReportPDF", report);

                }
                else
                {
                    var report = new XtraTrialBalanceReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/XtraTrialBalanceReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);
                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;
                    report.LbLevel.Text = String.Format("{0} {1}", Resources.Resource.AccountLevel, Obj.AccountLevelDropVMID.ToString());

                    report.DataSource = ds;
                    report.DataMember = "TrialBalanceVM";
                    report.ToAccountNumber.Text = Obj.AccNo;
                    report.CostCenter.Text = Obj.CostCenterNumber;
                    //report.xrLabel1.Text = Checklist + " ";

                    report.xrLabel4.Text = List;

                    if (!String.IsNullOrEmpty(Obj.AccNo))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.AccNo);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.AccountName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.AccountName.Text = AccName.EnglishName;
                        }

                    }

                    //if (Obj.Partofthenumber)
                    //{
                    //    if (Obj.CostSearchType == 1)
                    //    {

                    //        if (!String.IsNullOrEmpty(Obj.CostCenterNumber))
                    //        {
                    //            var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, Obj.CostCenterNumber);
                    //            if (Resources.Resource.CurLang == "Arb")
                    //            {
                    //                report.CostCenterName.Text = AccName.ArabicName;
                    //            }
                    //            else
                    //            {
                    //                report.CostCenterName.Text = AccName.EnglishName;
                    //            }

                    //        }
                    //    }
                    //    else if (Obj.CostSearchType == 2)
                    //    {
                    //        if (!String.IsNullOrEmpty(Obj.CostCenterNumber))
                    //        {
                    //            var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, Obj.CostCenterNumber);
                    //            if (Resources.Resource.CurLang == "Arb")
                    //            {
                    //                report.CostCenterName.Text = AccName.ArabicName;
                    //            }
                    //            else
                    //            {
                    //                report.CostCenterName.Text = AccName.EnglishName;
                    //            }

                    //        }
                    //    }
                    //    else if (Obj.CostSearchType == 3)
                    //    {
                    //        if (!String.IsNullOrEmpty(Obj.CostCenterNumber))
                    //        {
                    //            var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, Obj.CostCenterNumber);
                    //            if (Resources.Resource.CurLang == "Arb")
                    //            {
                    //                report.CostCenterName.Text = AccName.ArabicName;
                    //            }
                    //            else
                    //            {
                    //                report.CostCenterName.Text = AccName.EnglishName;
                    //            }

                    //        }

                    //    }
                    //}


                    if (!String.IsNullOrEmpty(Obj.CostCenterNumber))
                        {
                            var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, Obj.CostCenterNumber);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                            if (Obj.Partofthenumber)
                            {
                                if (Obj.CostSearchType == 1)
                                    report.CostCenterName.Text = Resources.Resource.StartWith;
                                else
                                      if (Obj.CostSearchType == 2)
                                    report.CostCenterName.Text = Resources.Resource.EndWith;
                                else
                                      if (Obj.CostSearchType == 3)
                                    report.CostCenterName.Text = Resources.Resource.Contain;

                            }
                            else
                            {
                                report.CostCenterName.Text = AccName.ArabicName;
                            }

                            }
                            else
                            {

                            if (Obj.Partofthenumber)
                            {
                                report.CostCenterName.Text = " ";
                            }
                            else
                            {
                                report.CostCenterName.Text = AccName.EnglishName;
                            }

                        }

                        }

                    

                    if (Obj.Detail)
                    {
                        report.LbReporttitle.Text = "ميزان مراجعة تفصيلي";
                    }
                    else
                      if (!String.IsNullOrEmpty(Obj.AccNo))
                    {
                        report.LbReporttitle.Text = "تحليل حساب";
                    }
                    else
                    {
                        report.LbReporttitle.Text = "ميزان مراجعة";
                    }
                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                    report.CreateDocument();
                    if (Email == 1)
                    {
                        if (!String.IsNullOrEmpty(CoInfo.PDFEmail))
                        {
                            MemoryStream mem = new MemoryStream();
                            report.ExportToPdf(mem);

                            mem.Seek(0, System.IO.SeekOrigin.Begin);
                            Attachment att = new Attachment(mem, "TrialBalance.pdf", "application/pdf");

                            MailMessage mail = new MailMessage();
                            mail.Attachments.Add(att);


                            mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                            mail.To.Add(CoInfo.PDFEmail);

                            mail.Subject = report.LbReporttitle.Text;
                            mail.Body = "This is a  e-mail message sent by an application.";



                            SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                            //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                            NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                            smtp.Credentials = Credentials;


                            smtp.Send(mail);



                            // Close the memory stream.
                            mem.Close();
                            mem.Flush();

                        }
                    }

                    return View("ReportPDF", report);


                }




            }
            catch (Exception ex)
            {
                string err = ex.Message;

                List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                XtraTrialBalanceReport report = new XtraTrialBalanceReport();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraTrialBalanceReport.repx");
                report.LoadLayoutFromXml(reportFilePath);

                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TrialBalanceVM");
                table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                ds.Tables.Add(table1);




                report.DataSource = ds;
                report.DataMember = "TrialBalanceVM";
               // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                report.CreateDocument();

                return View("ReportPDF", report);

            }


        }


        public ActionResult GetTrialExpenseAnlysisPDF(string id, string id2, int id3, string id4, int id5, int id6, string id7, int id8, int id9, int id10, int id11, int id12, int id13)
        {
            try
            {
                int Email = id13;
                AccountLevelRepVM Obj = new AccountLevelRepVM();

                DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                Obj.AccountLevelDropVMID = id3;
                Obj.AccNo = id4;
                Obj.FromDate = fromDate;
                Obj.ToDate = toDate;
                Obj.OrderBy = id11;
                Obj.AccountTypeID = id12;

                if (id5 == 1)
                {
                    Obj.ShowZeroBalance = true;
                }
                if (id6 == 1)
                {
                    Obj.Detail = true;
                }
                Obj.CostCenterNumber = id7;
                if (id8 == 1)
                {
                    Obj.ByCostCenter = true;
                }

                Obj.CostSearchType = id9;
                if (id10 == 1)
                {
                    Obj.Partofthenumber = true;
                }
                if (Obj.AccNo == "0")
                {
                    Obj.AccNo = "";
                }

                if (Obj.CostCenterNumber == "0")
                {
                    Obj.CostCenterNumber = "";
                }
                var userId = User.Identity.GetUserId();
                string UserID = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(UserID);
                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                var AccountData = _unitOfWork.NativeSql.GetChartOfAccountByLevel(UserInfo.fCompanyId);
                AccountData = AccountData.Where(m => m.AccountTypeID == 14 || m.AccountTypeID == 15 || m.AccountTypeID == 16).ToList();
                if (Obj.AccountTypeID != 0)
                {
                    AccountData = AccountData.Where(m => m.AccountTypeID == Obj.AccountTypeID).ToList();
                }
                string AccountTypeName = "جميع انواع الحسابات";
                if (Obj.AccountTypeID > 0)
                    AccountTypeName = _unitOfWork.AccountType.GetAccountTypeById(Obj.AccountTypeID).ArabicName;
                int CurrYear = UserInfo.CurrYear;

                var Date = "01/01/" + CurrYear;
                var OpenDate = "31/12/" + (CurrYear - 1).ToString();

                string TempCostID = "0";
                int TempCostType = 0;

                if (Obj.ByCostCenter)
                {
                    TempCostID = Obj.CostCenterNumber;
                    if (Obj.Partofthenumber)
                    {
                        TempCostType = Obj.CostSearchType;
                    }


                }

                IEnumerable<TrialBalanceVM> TotData = new List<TrialBalanceVM>();
                if (Obj.Partofthenumber)
                {
                    if (Obj.CostSearchType == 1)
                    {
                        Obj.CostCenterNumber = Obj.CostCenterNumber + "%";
                    }
                    else if (Obj.CostSearchType == 2)
                    {
                        Obj.CostCenterNumber = "%" + Obj.CostCenterNumber;
                    }
                    else if (Obj.CostSearchType == 3)
                    {
                        Obj.CostCenterNumber = "%" + Obj.CostCenterNumber + "%";

                    }
                }

                var TranData = _unitOfWork.NativeSql.GetTransactionForTrial(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                if (DateTime.Parse(Date) != Obj.FromDate)
                    TotData = _unitOfWork.NativeSql.GetTotCreditDebitForTrial(UserInfo.fCompanyId, DateTime.Parse(Date), Obj.FromDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                //----------------Get Open-------------//
                IEnumerable<TrialBalanceVM> TotDataOpen = new List<TrialBalanceVM>();
                TotDataOpen = _unitOfWork.NativeSql.GetTotCreditDebitForTrialOpen(UserInfo.fCompanyId, DateTime.Parse(OpenDate), DateTime.Parse(OpenDate));
                foreach (var D in TotDataOpen)
                {
                    TotData = TotData.Append(D);

                }
                //------------------------------------//



                double TotalDebit = 0;
                double TOTCredit = 0;
                double NetCredit = 0;
                double NetDebit = 0;
                double CreditBalance = 0;
                double DebitBalance = 0;
                double CreditTransAction = 0;
                double DebitTransAction = 0;

                List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                IEnumerable<ChartOfAccount> Accounts = new List<ChartOfAccount>();

                IEnumerable<ChartOfAccount> LessMainAccount = new List<ChartOfAccount>();
                if (!String.IsNullOrEmpty(Obj.AccNo))
                {

                    var MainAccount = AccountData.FirstOrDefault(m => m.AccountNumber == Obj.AccNo);
                    var MainChild = AccountData.Where(m => m.AccountFather == Obj.AccNo).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();

                    foreach (var Acc in MainChild)
                    {
                        TotalDebit = 0;
                        TOTCredit = 0;
                        NetCredit = 0;
                        NetDebit = 0;
                        CreditBalance = 0;
                        DebitBalance = 0;
                        CreditTransAction = 0;
                        DebitTransAction = 0;


                        if (AccountData.FirstOrDefault(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel) != null)//Check if Account Had Branches
                        {
                            var AllAccount = AccountData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel)
                                            .OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();//Get All Account Branches
                            int FatherLevel = Acc.AccountLevel;
                            foreach (var CurrAccLevel in AllAccount)
                            {
                                if (CurrAccLevel.AccountLevel == FatherLevel)
                                {
                                    break;
                                }
                                else
                                {

                                    var TransActionData = TranData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    var BalanceData = TotData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    foreach (var D in TransActionData)
                                    {
                                        CreditTransAction += D.CreditTransAction;
                                        DebitTransAction += D.DebitTransAction;
                                    }
                                    foreach (var Balance in BalanceData)
                                    {
                                        CreditBalance += Balance.CreditBalance;
                                        DebitBalance += Balance.DebitBalance;
                                    }



                                    TotalDebit = DebitTransAction + DebitBalance;
                                    TOTCredit = CreditTransAction + CreditBalance;




                                }
                            }




                        }
                        else
                        {
                            var TransActionData = TranData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            var BalanceData = TotData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            foreach (var D in TransActionData)
                            {
                                CreditTransAction += D.CreditTransAction;
                                DebitTransAction += D.DebitTransAction;
                            }
                            foreach (var Balance in BalanceData)
                            {
                                CreditBalance += Balance.CreditBalance;
                                DebitBalance += Balance.DebitBalance;
                            }



                            TotalDebit = DebitTransAction + DebitBalance;
                            TOTCredit = CreditTransAction + CreditBalance;
                        }
                        if (TotalDebit > TOTCredit)
                        {
                            NetDebit = TotalDebit - TOTCredit;
                        }
                        if (TotalDebit < TOTCredit)
                        {
                            NetCredit = TOTCredit - TotalDebit;
                        }

                        TrialBalanceVM trialBalance = new TrialBalanceVM();
                        trialBalance.AccountNumber = Acc.AccountNumber;
                        trialBalance.Name = Acc.ArabicName;

                        trialBalance.CreditBalance = CreditBalance;
                        trialBalance.CreditTransAction = CreditTransAction;
                        trialBalance.DebitBalance = DebitBalance;
                        trialBalance.DebitTransAction = DebitTransAction;
                        trialBalance.NetCredit = NetCredit;
                        trialBalance.NetDebit = NetDebit;
                        trialBalance.TempCostID = TempCostID;
                        trialBalance.TempCostType = TempCostType;

                        trialBalance.nCreditBalance = CreditBalance;
                        trialBalance.nCreditTransAction = CreditTransAction;
                        trialBalance.nDebitBalance = DebitBalance;
                        trialBalance.nDebitTransAction = DebitTransAction;
                        trialBalance.nNetCredit = NetCredit;
                        trialBalance.nNetDebit = NetDebit;
                        trialBalance.TempCostID = TempCostID;
                        trialBalance.TempCostType = TempCostType;
                        if (!Obj.ShowZeroBalance)
                        {
                            if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }
                        }
                        else
                        {
                            if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }


                        }
                    }


                }
                else

                if ((Obj.AccountLevelDropVMID > 0) && (!Obj.Detail))
                {


                    Accounts = AccountData.Where(m => m.AccountLevel == Obj.AccountLevelDropVMID).OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                    LessMainAccount = AccountData.Where(m => m.AccountLevel < Obj.AccountLevelDropVMID).OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                    IEnumerable<string> FaherAccount = LessMainAccount.Where(m => m.AccountFather != "0").Select(m => m.AccountFather);


                    foreach (var A in LessMainAccount)
                    {
                        if (AccountData.FirstOrDefault(m => m.AccountFather == A.AccountNumber) != null)
                        {
                            //do nothing
                        }
                        else

                        {
                            Accounts = Accounts.Append(A);
                        }

                    }
                    Accounts = Accounts.OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();
                    // var MainChild = AccountData.Where(m => m.AccountFather == MainAcc.AccountNumber).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();
                    foreach (var Acc in Accounts)
                    {
                        TotalDebit = 0;
                        TOTCredit = 0;
                        NetCredit = 0;
                        NetDebit = 0;
                        CreditBalance = 0;
                        DebitBalance = 0;
                        CreditTransAction = 0;
                        DebitTransAction = 0;


                        if (AccountData.FirstOrDefault(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel) != null)
                        {
                            var AllAccount = AccountData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel)
                                            .OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();
                            int FatherLevel = Acc.AccountLevel;

                            foreach (var CurrAccLevel in AllAccount)
                            {
                                if (CurrAccLevel.AccountLevel == FatherLevel)
                                {
                                    break;
                                }
                                else
                                {
                                    var TransActionData = TranData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    var BalanceData = TotData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    foreach (var D in TransActionData)
                                    {
                                        CreditTransAction += D.CreditTransAction;
                                        DebitTransAction += D.DebitTransAction;
                                    }
                                    foreach (var Balance in BalanceData)
                                    {
                                        CreditBalance += Balance.CreditBalance;
                                        DebitBalance += Balance.DebitBalance;
                                    }
                                    TotalDebit = DebitTransAction + DebitBalance;
                                    TOTCredit = CreditTransAction + CreditBalance;
                                }
                            }
                        }
                        else
                        {
                            var TransActionData = TranData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            var BalanceData = TotData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            foreach (var D in TransActionData)
                            {
                                CreditTransAction += D.CreditTransAction;
                                DebitTransAction += D.DebitTransAction;
                            }
                            foreach (var Balance in BalanceData)
                            {
                                CreditBalance += Balance.CreditBalance;
                                DebitBalance += Balance.DebitBalance;
                            }

                            TotalDebit = DebitTransAction + DebitBalance;
                            TOTCredit = CreditTransAction + CreditBalance;
                        }
                        if (TotalDebit > TOTCredit)
                        {
                            NetDebit = TotalDebit - TOTCredit;
                        }
                        if (TotalDebit < TOTCredit)
                        {
                            NetCredit = TOTCredit - TotalDebit;
                        }

                        TrialBalanceVM trialBalance = new TrialBalanceVM();
                        trialBalance.AccountNumber = Acc.AccountNumber;
                        trialBalance.Name = Acc.ArabicName;
                        trialBalance.Level = Acc.AccountLevel;
                        trialBalance.CreditBalance = CreditBalance;
                        trialBalance.CreditTransAction = CreditTransAction;
                        trialBalance.DebitBalance = DebitBalance;
                        trialBalance.DebitTransAction = DebitTransAction;
                        trialBalance.NetCredit = NetCredit;
                        trialBalance.NetDebit = NetDebit;

                        trialBalance.nCreditBalance = CreditBalance;
                        trialBalance.nCreditTransAction = CreditTransAction;
                        trialBalance.nDebitBalance = DebitBalance;
                        trialBalance.nDebitTransAction = DebitTransAction;
                        trialBalance.nNetCredit = NetCredit;
                        trialBalance.nNetDebit = NetDebit;
                        trialBalance.TempCostID = TempCostID;
                        trialBalance.TempCostType = TempCostType;
                        if (AccountData.FirstOrDefault(m => m.AccountFather == Acc.AccountNumber) != null)
                        {
                            trialBalance.IsMainAccount = 1;

                        }
                        else
                        {
                            trialBalance.IsMainAccount = 0;


                        }

                        if (!Obj.ShowZeroBalance)
                        {
                            if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }
                        }
                        else
                        {
                            if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }


                        }
                    }

                }
                else if ((Obj.AccountLevelDropVMID > 0) && (Obj.Detail))
                {


                    Accounts = AccountData.Where(m => m.AccountLevel <= Obj.AccountLevelDropVMID).ToList().OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                    foreach (var Acc in Accounts)//Each Main Account
                    {
                        TotalDebit = 0;
                        TOTCredit = 0;
                        NetCredit = 0;
                        NetDebit = 0;
                        CreditBalance = 0;
                        DebitBalance = 0;
                        CreditTransAction = 0;
                        DebitTransAction = 0;

                        var MainAccount = AccountData.FirstOrDefault(m => m.AccountNumber == Acc.AccountNumber);
                        var MainChild = AccountData.Where(m => m.AccountFather == Acc.AccountNumber).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();

                        var TransActionData = TranData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));
                        var BalanceData = TotData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));
                        foreach (var D in TransActionData)
                        {
                            CreditTransAction += D.CreditTransAction;
                            DebitTransAction += D.DebitTransAction;
                        }
                        foreach (var Balance in BalanceData)
                        {
                            CreditBalance += Balance.CreditBalance;
                            DebitBalance += Balance.DebitBalance;
                        }



                        TotalDebit = DebitTransAction + DebitBalance;
                        TOTCredit = CreditTransAction + CreditBalance;

                        if (TotalDebit > TOTCredit)
                        {
                            NetDebit = TotalDebit - TOTCredit;
                        }
                        if (TotalDebit < TOTCredit)
                        {
                            NetCredit = TOTCredit - TotalDebit;
                        }

                        TrialBalanceVM trialBalance = new TrialBalanceVM();
                        trialBalance.AccountNumber = Acc.AccountNumber;
                        trialBalance.Name = Acc.ArabicName;

                        trialBalance.CreditBalance = CreditBalance;
                        trialBalance.CreditTransAction = CreditTransAction;
                        trialBalance.DebitBalance = DebitBalance;
                        trialBalance.DebitTransAction = DebitTransAction;
                        trialBalance.NetCredit = NetCredit;
                        trialBalance.NetDebit = NetDebit;
                        trialBalance.TempCostID = TempCostID;
                        trialBalance.TempCostType = TempCostType;
                        if ((AccountData.FirstOrDefault(m => m.AccountFather == Acc.AccountNumber) != null) && (Acc.AccountLevel < Obj.AccountLevelDropVMID))
                        {
                            trialBalance.IsMainAccount = 1;
                            trialBalance.MainAccount = "{*}";


                            trialBalance.nCreditBalance = 0;
                            trialBalance.nCreditTransAction = 0;
                            trialBalance.nDebitBalance = 0;
                            trialBalance.nDebitTransAction = 0;
                            trialBalance.nNetCredit = 0;
                            trialBalance.nNetDebit = 0;

                        }
                        else
                        {
                            trialBalance.IsMainAccount = 0;
                            trialBalance.MainAccount = "";
                            trialBalance.nCreditBalance = CreditBalance;
                            trialBalance.nCreditTransAction = CreditTransAction;
                            trialBalance.nDebitBalance = DebitBalance;
                            trialBalance.nDebitTransAction = DebitTransAction;
                            trialBalance.nNetCredit = NetCredit;
                            trialBalance.nNetDebit = NetDebit;


                        }
                        if (!Obj.ShowZeroBalance)
                        {
                            if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }
                        }
                        else
                        {
                            if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }


                        }




                    }






                }







                if (Obj.OrderBy == 1)
                {
                    TrialBalanceVMList = TrialBalanceVMList.OrderByDescending(m => m.NetDebit).ThenBy(m => m.NetCredit).ToList();
                }
                else if (Obj.OrderBy == 2)
                {
                    TrialBalanceVMList = TrialBalanceVMList.OrderBy(m => m.NetDebit).ThenBy(m => m.NetCredit).ToList();
                }
                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TrialBalanceVM");
                table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                ds.Tables.Add(table1);

                var report = new XtraTrialExpenseAnlysisReport();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraTrialExpenseAnlysisReport.repx");
                report.LoadLayoutFromXml(reportFilePath);


                report.LbCoName.Text = CoInfo.ArabicName;
                report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;
                report.LbLevel.Text = String.Format("{0} {1}", Resources.Resource.AccountLevel, Obj.AccountLevelDropVMID.ToString());
                report.DataSource = ds;
                report.DataMember = "TrialBalanceVM";
                report.CostCenter.Text = Obj.CostCenterNumber;

                if (Obj.ByCostCenter)
                {
                    if (!String.IsNullOrEmpty(Obj.CostCenterNumber))
                    {
                        var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, Obj.CostCenterNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.CostCenterName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.CostCenterName.Text = AccName.EnglishName;
                        }

                    }

                }

                if (Obj.AccountTypeID != 0)
                {

                    var Name = _unitOfWork.AccountType.GetAccountTypeById(Obj.AccountTypeID);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.Kind.Text = Name.ArabicName;
                    }
                    else
                    {
                        report.Kind.Text = Name.EnglishName;
                    }

                }


                report.LbReporttitle.Text = string.Format("{0}-{1}", " تحليل المصاريف ", AccountTypeName);
                report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                report.CreateDocument();

                if (Email == 1)
                {
                    if (!String.IsNullOrEmpty(CoInfo.PDFEmail))
                    {
                        MemoryStream mem = new MemoryStream();
                        report.ExportToPdf(mem);

                        mem.Seek(0, System.IO.SeekOrigin.Begin);
                        Attachment att = new Attachment(mem, "TrialExpenseAnlysisReport.pdf", "application/pdf");

                        MailMessage mail = new MailMessage();
                        mail.Attachments.Add(att);


                        mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                        mail.To.Add(CoInfo.PDFEmail);

                        mail.Subject = report.LbReporttitle.Text;
                        mail.Body = "This is a  e-mail message sent by an application.";



                        SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                        //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                        NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                        smtp.Credentials = Credentials;


                        smtp.Send(mail);



                        // Close the memory stream.
                        mem.Close();
                        mem.Flush();

                    }
                }

                return View("ReportPDF", report);




            }
            catch (Exception ex)
            {
                string err = ex.Message;

                List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                return Json(TrialBalanceVMList, JsonRequestBehavior.AllowGet);

            }


        }

        public ActionResult GetTrialBalanceForCustomerPDF(string id, string id2, int id3, string id4, int id5, int id6, string id7, int id8, int id9, int id10, int id11, int id12, int id13, int id14)
        {
            try
            {
                string CityName = "";
                string AreaName = "";

                int Email = id12;
                AccountLevelRepVM Obj = new AccountLevelRepVM();

                DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                Obj.AccountLevelDropVMID = id3;
                Obj.AccNo = id4;
                Obj.FromDate = fromDate;
                Obj.ToDate = toDate;
                Obj.OrderBy = id11;

                if (id5 == 1)
                {
                    Obj.ShowZeroBalance = true;
                }
                if (id6 == 1)
                {
                    Obj.Detail = true;
                }
                Obj.CostCenterNumber = id7;
                if (id8 == 1)
                {
                    Obj.ByCostCenter = true;
                }

                Obj.CostSearchType = id9;
                if (id10 == 1)
                {
                    Obj.Partofthenumber = true;
                }
                if (Obj.AccNo == "0")
                {
                    Obj.AccNo = "";
                }

                if (Obj.CostCenterNumber == "0")
                {
                    Obj.CostCenterNumber = "";
                }


                Obj.CityID = id13;
                Obj.AreaID = id14;

                var userId = User.Identity.GetUserId();
                string UserID = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(UserID);

                IEnumerable<ChartOfAccount> AccountData = new List<ChartOfAccount>();

                if (Obj.CityID > 0)
                {
                    AccountData = _unitOfWork.NativeSql.GetChartOfAccountByLevelAndCity(UserInfo.fCompanyId, Obj.CityID, Obj.AreaID);
                }
                else
                {
                    AccountData = _unitOfWork.NativeSql.GetChartOfAccountByLevel(UserInfo.fCompanyId);
                }



                // var AccountData = _unitOfWork.NativeSql.GetChartOfAccountByLevel(UserInfo.fCompanyId);
                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                AccountData = AccountData.Where(m => m.AccountKind == 1).ToList();
                int CurrYear = UserInfo.CurrYear;

                if (id13 > 0)
                {
                    var City = _unitOfWork.CustomerCity.GetCustomerCityByID(UserInfo.fCompanyId, id13);

                    if (Resources.Resource.CurLang == "Arb")
                    {

                        CityName = City.ArabicName;
                    }
                    else
                    {

                        CityName = City.EnglishName;
                    }


                    if (id14 > 0)
                    {
                        var Area = _unitOfWork.CustomerArea.GetAllCustomerAreaByCityID(UserInfo.fCompanyId, id13).ToList();
                        if (Resources.Resource.CurLang == "Arb")
                        {

                            AreaName = Area.FirstOrDefault(m => m.CustomerAreaID == id14).ArabicName;
                        }
                        else
                        {

                            AreaName = Area.FirstOrDefault(m => m.CustomerAreaID == id14).ArabicName;
                        }

                    }

                }


                var Date = "01/01/" + CurrYear;
                var OpenDate = "31/12/" + (CurrYear - 1).ToString();

                string TempCostID = "0";
                int TempCostType = 0;

                if (Obj.ByCostCenter)
                {
                    TempCostID = Obj.CostCenterNumber;
                    if (Obj.Partofthenumber)
                    {
                        TempCostType = Obj.CostSearchType;
                    }


                }




                IEnumerable<TrialBalanceVM> TotData = new List<TrialBalanceVM>();
                if (Obj.Partofthenumber)
                {
                    if (Obj.CostSearchType == 1)
                    {
                        Obj.CostCenterNumber = Obj.CostCenterNumber + "%";
                    }
                    else if (Obj.CostSearchType == 2)
                    {
                        Obj.CostCenterNumber = "%" + Obj.CostCenterNumber;
                    }
                    else if (Obj.CostSearchType == 3)
                    {
                        Obj.CostCenterNumber = "%" + Obj.CostCenterNumber + "%";

                    }
                }

                var TranData = _unitOfWork.NativeSql.GetTransactionForTrial(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                if (DateTime.Parse(Date) != Obj.FromDate)
                    TotData = _unitOfWork.NativeSql.GetTotCreditDebitForTrial(UserInfo.fCompanyId, DateTime.Parse(Date), Obj.FromDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                //----------------Get Open-------------//
                IEnumerable<TrialBalanceVM> TotDataOpen = new List<TrialBalanceVM>();
                TotDataOpen = _unitOfWork.NativeSql.GetTotCreditDebitForTrialOpen(UserInfo.fCompanyId, DateTime.Parse(OpenDate), DateTime.Parse(OpenDate));
                foreach (var D in TotDataOpen)
                {
                    TotData = TotData.Append(D);

                }
                //------------------------------------//



                double TotalDebit = 0;
                double TOTCredit = 0;
                double NetCredit = 0;
                double NetDebit = 0;
                double CreditBalance = 0;
                double DebitBalance = 0;
                double CreditTransAction = 0;
                double DebitTransAction = 0;

                List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                IEnumerable<ChartOfAccount> Accounts = new List<ChartOfAccount>();

                IEnumerable<ChartOfAccount> LessMainAccount = new List<ChartOfAccount>();
                //if(id13>0)//City
                //{
                //    Accounts=Accounts.Where(m=>m.ci)
                //}

                if (!String.IsNullOrEmpty(Obj.AccNo))
                {

                    var MainAccount = AccountData.FirstOrDefault(m => m.AccountNumber == Obj.AccNo);
                    var MainChild = AccountData.Where(m => m.AccountFather == Obj.AccNo).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();

                    foreach (var Acc in MainChild)
                    {
                        TotalDebit = 0;
                        TOTCredit = 0;
                        NetCredit = 0;
                        NetDebit = 0;
                        CreditBalance = 0;
                        DebitBalance = 0;
                        CreditTransAction = 0;
                        DebitTransAction = 0;


                        if (AccountData.FirstOrDefault(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel) != null)//Check if Account Had Branches
                        {
                            var AllAccount = AccountData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel)
                                            .OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();//Get All Account Branches
                            int FatherLevel = Acc.AccountLevel;
                            foreach (var CurrAccLevel in AllAccount)
                            {
                                if (CurrAccLevel.AccountLevel == FatherLevel)
                                {
                                    break;
                                }
                                else
                                {

                                    var TransActionData = TranData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    var BalanceData = TotData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    foreach (var D in TransActionData)
                                    {
                                        CreditTransAction += D.CreditTransAction;
                                        DebitTransAction += D.DebitTransAction;
                                    }
                                    foreach (var Balance in BalanceData)
                                    {
                                        CreditBalance += Balance.CreditBalance;
                                        DebitBalance += Balance.DebitBalance;
                                    }



                                    TotalDebit = DebitTransAction + DebitBalance;
                                    TOTCredit = CreditTransAction + CreditBalance;




                                }
                            }




                        }
                        else
                        {
                            var TransActionData = TranData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            var BalanceData = TotData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            foreach (var D in TransActionData)
                            {
                                CreditTransAction += D.CreditTransAction;
                                DebitTransAction += D.DebitTransAction;
                            }
                            foreach (var Balance in BalanceData)
                            {
                                CreditBalance += Balance.CreditBalance;
                                DebitBalance += Balance.DebitBalance;
                            }



                            TotalDebit = DebitTransAction + DebitBalance;
                            TOTCredit = CreditTransAction + CreditBalance;
                        }
                        if (TotalDebit > TOTCredit)
                        {
                            NetDebit = TotalDebit - TOTCredit;
                        }
                        if (TotalDebit < TOTCredit)
                        {
                            NetCredit = TOTCredit - TotalDebit;
                        }

                        TrialBalanceVM trialBalance = new TrialBalanceVM();
                        trialBalance.AccountNumber = Acc.AccountNumber;
                        trialBalance.Name = Acc.ArabicName;

                        trialBalance.CreditBalance = CreditBalance;
                        trialBalance.CreditTransAction = CreditTransAction;
                        trialBalance.DebitBalance = DebitBalance;
                        trialBalance.DebitTransAction = DebitTransAction;
                        trialBalance.NetCredit = NetCredit;
                        trialBalance.NetDebit = NetDebit;
                        trialBalance.TempCostID = TempCostID;
                        trialBalance.TempCostType = TempCostType;

                        trialBalance.nCreditBalance = CreditBalance;
                        trialBalance.nCreditTransAction = CreditTransAction;
                        trialBalance.nDebitBalance = DebitBalance;
                        trialBalance.nDebitTransAction = DebitTransAction;
                        trialBalance.nNetCredit = NetCredit;
                        trialBalance.nNetDebit = NetDebit;

                        if (!Obj.ShowZeroBalance)
                        {
                            if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }
                        }
                        else
                        {
                            if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }


                        }
                    }


                }
                else

                if ((Obj.AccountLevelDropVMID > 0) && (!Obj.Detail))
                {


                    Accounts = AccountData.Where(m => m.AccountLevel == Obj.AccountLevelDropVMID).OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                    LessMainAccount = AccountData.Where(m => m.AccountLevel < Obj.AccountLevelDropVMID).OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                    IEnumerable<string> FaherAccount = LessMainAccount.Where(m => m.AccountFather != "0").Select(m => m.AccountFather);


                    foreach (var A in LessMainAccount)
                    {
                        if (AccountData.FirstOrDefault(m => m.AccountFather == A.AccountNumber) != null)
                        {
                            //do nothing
                        }
                        else

                        {
                            Accounts = Accounts.Append(A);
                        }

                    }
                    Accounts = Accounts.OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();
                    // var MainChild = AccountData.Where(m => m.AccountFather == MainAcc.AccountNumber).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();
                    foreach (var Acc in Accounts)
                    {
                        TotalDebit = 0;
                        TOTCredit = 0;
                        NetCredit = 0;
                        NetDebit = 0;
                        CreditBalance = 0;
                        DebitBalance = 0;
                        CreditTransAction = 0;
                        DebitTransAction = 0;


                        if (AccountData.FirstOrDefault(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel) != null)
                        {
                            var AllAccount = AccountData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel)
                                            .OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();
                            int FatherLevel = Acc.AccountLevel;

                            foreach (var CurrAccLevel in AllAccount)
                            {
                                if (CurrAccLevel.AccountLevel == FatherLevel)
                                {
                                    break;
                                }
                                else
                                {
                                    var TransActionData = TranData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    var BalanceData = TotData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    foreach (var D in TransActionData)
                                    {
                                        CreditTransAction += D.CreditTransAction;
                                        DebitTransAction += D.DebitTransAction;
                                    }
                                    foreach (var Balance in BalanceData)
                                    {
                                        CreditBalance += Balance.CreditBalance;
                                        DebitBalance += Balance.DebitBalance;
                                    }
                                    TotalDebit = DebitTransAction + DebitBalance;
                                    TOTCredit = CreditTransAction + CreditBalance;
                                }
                            }
                        }
                        else
                        {
                            var TransActionData = TranData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            var BalanceData = TotData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            foreach (var D in TransActionData)
                            {
                                CreditTransAction += D.CreditTransAction;
                                DebitTransAction += D.DebitTransAction;
                            }
                            foreach (var Balance in BalanceData)
                            {
                                CreditBalance += Balance.CreditBalance;
                                DebitBalance += Balance.DebitBalance;
                            }

                            TotalDebit = DebitTransAction + DebitBalance;
                            TOTCredit = CreditTransAction + CreditBalance;
                        }
                        if (TotalDebit > TOTCredit)
                        {
                            NetDebit = TotalDebit - TOTCredit;
                        }
                        if (TotalDebit < TOTCredit)
                        {
                            NetCredit = TOTCredit - TotalDebit;
                        }

                        TrialBalanceVM trialBalance = new TrialBalanceVM();
                        trialBalance.AccountNumber = Acc.AccountNumber;
                        trialBalance.Name = Acc.ArabicName;
                        trialBalance.Level = Acc.AccountLevel;
                        trialBalance.CreditBalance = CreditBalance;
                        trialBalance.CreditTransAction = CreditTransAction;
                        trialBalance.DebitBalance = DebitBalance;
                        trialBalance.DebitTransAction = DebitTransAction;
                        trialBalance.NetCredit = NetCredit;
                        trialBalance.NetDebit = NetDebit;

                        trialBalance.nCreditBalance = CreditBalance;
                        trialBalance.nCreditTransAction = CreditTransAction;
                        trialBalance.nDebitBalance = DebitBalance;
                        trialBalance.nDebitTransAction = DebitTransAction;
                        trialBalance.nNetCredit = NetCredit;
                        trialBalance.nNetDebit = NetDebit;
                        trialBalance.TempCostID = TempCostID;
                        trialBalance.TempCostType = TempCostType;
                        if (AccountData.FirstOrDefault(m => m.AccountFather == Acc.AccountNumber) != null)
                        {
                            trialBalance.IsMainAccount = 1;

                        }
                        else
                        {
                            trialBalance.IsMainAccount = 0;


                        }

                        if (!Obj.ShowZeroBalance)
                        {
                            if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }
                        }
                        else
                        {
                            if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }


                        }
                    }

                }
                else if ((Obj.AccountLevelDropVMID > 0) && (Obj.Detail))
                {


                    Accounts = AccountData.Where(m => m.AccountLevel <= Obj.AccountLevelDropVMID).ToList().OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                    foreach (var Acc in Accounts)//Each Main Account
                    {
                        TotalDebit = 0;
                        TOTCredit = 0;
                        NetCredit = 0;
                        NetDebit = 0;
                        CreditBalance = 0;
                        DebitBalance = 0;
                        CreditTransAction = 0;
                        DebitTransAction = 0;

                        var MainAccount = AccountData.FirstOrDefault(m => m.AccountNumber == Acc.AccountNumber);
                        var MainChild = AccountData.Where(m => m.AccountFather == Acc.AccountNumber).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();

                        var TransActionData = TranData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));
                        var BalanceData = TotData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));
                        foreach (var D in TransActionData)
                        {
                            CreditTransAction += D.CreditTransAction;
                            DebitTransAction += D.DebitTransAction;
                        }
                        foreach (var Balance in BalanceData)
                        {
                            CreditBalance += Balance.CreditBalance;
                            DebitBalance += Balance.DebitBalance;
                        }



                        TotalDebit = DebitTransAction + DebitBalance;
                        TOTCredit = CreditTransAction + CreditBalance;

                        if (TotalDebit > TOTCredit)
                        {
                            NetDebit = TotalDebit - TOTCredit;
                        }
                        if (TotalDebit < TOTCredit)
                        {
                            NetCredit = TOTCredit - TotalDebit;
                        }

                        TrialBalanceVM trialBalance = new TrialBalanceVM();
                        trialBalance.AccountNumber = Acc.AccountNumber;
                        trialBalance.Name = Acc.ArabicName;

                        trialBalance.CreditBalance = CreditBalance;
                        trialBalance.CreditTransAction = CreditTransAction;
                        trialBalance.DebitBalance = DebitBalance;
                        trialBalance.DebitTransAction = DebitTransAction;
                        trialBalance.NetCredit = NetCredit;
                        trialBalance.NetDebit = NetDebit;
                        trialBalance.TempCostID = TempCostID;
                        trialBalance.TempCostType = TempCostType;
                        if ((AccountData.FirstOrDefault(m => m.AccountFather == Acc.AccountNumber) != null) && (Acc.AccountLevel < Obj.AccountLevelDropVMID))
                        {
                            trialBalance.IsMainAccount = 1;
                            trialBalance.MainAccount = "{*}";


                            trialBalance.nCreditBalance = 0;
                            trialBalance.nCreditTransAction = 0;
                            trialBalance.nDebitBalance = 0;
                            trialBalance.nDebitTransAction = 0;
                            trialBalance.nNetCredit = 0;
                            trialBalance.nNetDebit = 0;

                        }
                        else
                        {
                            trialBalance.IsMainAccount = 0;
                            trialBalance.MainAccount = "";
                            trialBalance.nCreditBalance = CreditBalance;
                            trialBalance.nCreditTransAction = CreditTransAction;
                            trialBalance.nDebitBalance = DebitBalance;
                            trialBalance.nDebitTransAction = DebitTransAction;
                            trialBalance.nNetCredit = NetCredit;
                            trialBalance.nNetDebit = NetDebit;


                        }
                        if (!Obj.ShowZeroBalance)
                        {
                            if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }
                        }
                        else
                        {
                            if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }


                        }




                    }






                }


                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TrialBalanceVM");
                table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                ds.Tables.Add(table1);

                var report = new XtraTrialBalanceForCustomerReport();
                string reportFilePath = Server.MapPath("/ReportLayout/XtraTrialBalanceForCustomerReport.repx");
                report.LoadLayoutFromXml(reportFilePath);
                report.LbLevel.Text = String.Format("{0} {1}", Resources.Resource.AccountLevel, Obj.AccountLevelDropVMID.ToString());

                report.LbCoName.Text = CoInfo.ArabicName;
                report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;
                report.DataSource = ds;
                report.DataMember = "TrialBalanceVM";
                report.CustomerCity.Text = CityName;
                report.CustomerArea.Text = AreaName;


                ////  if (Obj.AreaID != 0)
                //  {
                //      var AccName = _unitOfWork.ChartOfAccount.GetAllCustomerAreaByCityID(UserInfo.fCompanyId, Obj.AreaID);
                //      if (Resources.Resource.CurLang == "Arb")
                //      {
                //          report.CustomerArea.Text = AccName.;
                //      }
                //      else
                //      {
                //          report.CustomerArea.Text = AccName.EnglishName;
                //      }

                //  }

                if (Obj.CityID != 0)
                {
                    var AccName = _unitOfWork.CustomerCity.GetCustomerCityByID(UserInfo.fCompanyId, Obj.CityID);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.CustomerCity.Text = AccName.ArabicName;
                    }
                    else
                    {
                        report.CustomerCity.Text = AccName.EnglishName;
                    }

                }


                if (Obj.Detail)
                {
                    report.LbReporttitle.Text = "ارصدة العملاء تفصيلي";

                }
                else
                {
                    report.LbReporttitle.Text = "ارصدة العملاء";

                }
                report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                report.CreateDocument();
                if (Email == 1)
                {
                    if (!String.IsNullOrEmpty(CoInfo.PDFEmail))
                    {
                        MemoryStream mem = new MemoryStream();
                        report.ExportToPdf(mem);

                        mem.Seek(0, System.IO.SeekOrigin.Begin);
                        Attachment att = new Attachment(mem, "TrialBalanceForCustomerReport.pdf", "application/pdf");

                        MailMessage mail = new MailMessage();
                        mail.Attachments.Add(att);


                        mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                        mail.To.Add(CoInfo.PDFEmail);

                        mail.Subject = report.LbReporttitle.Text;
                        mail.Body = "This is a  e-mail message sent by an application.";



                        SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                        //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                        NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                        smtp.Credentials = Credentials;


                        smtp.Send(mail);



                        // Close the memory stream.
                        mem.Close();
                        mem.Flush();

                    }
                }
                return View("ReportPDF", report);




            }
            catch (Exception ex)
            {
                List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                XtraTrialBalanceForCustomerReport report = new XtraTrialBalanceForCustomerReport();
                string reportFilePath = Server.MapPath("/ReportLayout/XtraTrialBalanceForCustomerReport.repx");
                report.LoadLayoutFromXml(reportFilePath);

                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TrialBalanceVM");
                table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                ds.Tables.Add(table1);


                report.DataSource = ds;
                report.DataMember = "TrialBalanceVM";
                report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                report.CreateDocument();

                return View("ReportPDF", report);

            }


        }

        public ActionResult GetTrialBalanceForSupplierPDF(string id, string id2, int id3, string id4, int id5, int id6, string id7, int id8, int id9, int id10, int id11, int id12)
        {
            try
            {
                int Email = id12;
                AccountLevelRepVM Obj = new AccountLevelRepVM();

                DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                Obj.AccountLevelDropVMID = id3;
                Obj.AccNo = id4;
                Obj.FromDate = fromDate;
                Obj.ToDate = toDate;
                Obj.OrderBy = id11;

                if (id5 == 1)
                {
                    Obj.ShowZeroBalance = true;
                }
                if (id6 == 1)
                {
                    Obj.Detail = true;
                }
                Obj.CostCenterNumber = id7;
                if (id8 == 1)
                {
                    Obj.ByCostCenter = true;
                }

                Obj.CostSearchType = id9;
                if (id10 == 1)
                {
                    Obj.Partofthenumber = true;
                }
                if (Obj.AccNo == "0")
                {
                    Obj.AccNo = "";
                }

                if (Obj.CostCenterNumber == "0")
                {
                    Obj.CostCenterNumber = "";
                }

                var userId = User.Identity.GetUserId();
                string UserID = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(UserID);
                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                var AccountData = _unitOfWork.NativeSql.GetChartOfAccountByLevel(UserInfo.fCompanyId);
                AccountData = AccountData.Where(m => m.AccountKind == 2).ToList();
                int CurrYear = UserInfo.CurrYear;

                var Date = "01/01/" + CurrYear;
                var OpenDate = "31/12/" + (CurrYear - 1).ToString();

                string TempCostID = "0";
                int TempCostType = 0;

                if (Obj.ByCostCenter)
                {
                    TempCostID = Obj.CostCenterNumber;
                    if (Obj.Partofthenumber)
                    {
                        TempCostType = Obj.CostSearchType;
                    }


                }

                IEnumerable<TrialBalanceVM> TotData = new List<TrialBalanceVM>();
                if (Obj.Partofthenumber)
                {
                    if (Obj.CostSearchType == 1)
                    {
                        Obj.CostCenterNumber = Obj.CostCenterNumber + "%";
                    }
                    else if (Obj.CostSearchType == 2)
                    {
                        Obj.CostCenterNumber = "%" + Obj.CostCenterNumber;
                    }
                    else if (Obj.CostSearchType == 3)
                    {
                        Obj.CostCenterNumber = "%" + Obj.CostCenterNumber + "%";

                    }
                }

                var TranData = _unitOfWork.NativeSql.GetTransactionForTrial(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                if (DateTime.Parse(Date) != Obj.FromDate)
                    TotData = _unitOfWork.NativeSql.GetTotCreditDebitForTrial(UserInfo.fCompanyId, DateTime.Parse(Date), Obj.FromDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                //----------------Get Open-------------//
                IEnumerable<TrialBalanceVM> TotDataOpen = new List<TrialBalanceVM>();
                TotDataOpen = _unitOfWork.NativeSql.GetTotCreditDebitForTrialOpen(UserInfo.fCompanyId, DateTime.Parse(OpenDate), DateTime.Parse(OpenDate));
                foreach (var D in TotDataOpen)
                {
                    TotData = TotData.Append(D);

                }
                //------------------------------------//



                double TotalDebit = 0;
                double TOTCredit = 0;
                double NetCredit = 0;
                double NetDebit = 0;
                double CreditBalance = 0;
                double DebitBalance = 0;
                double CreditTransAction = 0;
                double DebitTransAction = 0;

                List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                IEnumerable<ChartOfAccount> Accounts = new List<ChartOfAccount>();

                IEnumerable<ChartOfAccount> LessMainAccount = new List<ChartOfAccount>();
                if (!String.IsNullOrEmpty(Obj.AccNo))
                {

                    var MainAccount = AccountData.FirstOrDefault(m => m.AccountNumber == Obj.AccNo);
                    var MainChild = AccountData.Where(m => m.AccountFather == Obj.AccNo).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();

                    foreach (var Acc in MainChild)
                    {
                        TotalDebit = 0;
                        TOTCredit = 0;
                        NetCredit = 0;
                        NetDebit = 0;
                        CreditBalance = 0;
                        DebitBalance = 0;
                        CreditTransAction = 0;
                        DebitTransAction = 0;


                        if (AccountData.FirstOrDefault(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel) != null)//Check if Account Had Branches
                        {
                            var AllAccount = AccountData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel)
                                            .OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();//Get All Account Branches
                            int FatherLevel = Acc.AccountLevel;
                            foreach (var CurrAccLevel in AllAccount)
                            {
                                if (CurrAccLevel.AccountLevel == FatherLevel)
                                {
                                    break;
                                }
                                else
                                {

                                    var TransActionData = TranData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    var BalanceData = TotData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    foreach (var D in TransActionData)
                                    {
                                        CreditTransAction += D.CreditTransAction;
                                        DebitTransAction += D.DebitTransAction;
                                    }
                                    foreach (var Balance in BalanceData)
                                    {
                                        CreditBalance += Balance.CreditBalance;
                                        DebitBalance += Balance.DebitBalance;
                                    }



                                    TotalDebit = DebitTransAction + DebitBalance;
                                    TOTCredit = CreditTransAction + CreditBalance;




                                }
                            }




                        }
                        else
                        {
                            var TransActionData = TranData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            var BalanceData = TotData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            foreach (var D in TransActionData)
                            {
                                CreditTransAction += D.CreditTransAction;
                                DebitTransAction += D.DebitTransAction;
                            }
                            foreach (var Balance in BalanceData)
                            {
                                CreditBalance += Balance.CreditBalance;
                                DebitBalance += Balance.DebitBalance;
                            }



                            TotalDebit = DebitTransAction + DebitBalance;
                            TOTCredit = CreditTransAction + CreditBalance;
                        }
                        if (TotalDebit > TOTCredit)
                        {
                            NetDebit = TotalDebit - TOTCredit;
                        }
                        if (TotalDebit < TOTCredit)
                        {
                            NetCredit = TOTCredit - TotalDebit;
                        }

                        TrialBalanceVM trialBalance = new TrialBalanceVM();
                        trialBalance.AccountNumber = Acc.AccountNumber;
                        trialBalance.Name = Acc.ArabicName;

                        trialBalance.CreditBalance = CreditBalance;
                        trialBalance.CreditTransAction = CreditTransAction;
                        trialBalance.DebitBalance = DebitBalance;
                        trialBalance.DebitTransAction = DebitTransAction;
                        trialBalance.NetCredit = NetCredit;
                        trialBalance.NetDebit = NetDebit;
                        trialBalance.TempCostID = TempCostID;
                        trialBalance.TempCostType = TempCostType;

                        trialBalance.nCreditBalance = CreditBalance;
                        trialBalance.nCreditTransAction = CreditTransAction;
                        trialBalance.nDebitBalance = DebitBalance;
                        trialBalance.nDebitTransAction = DebitTransAction;
                        trialBalance.nNetCredit = NetCredit;
                        trialBalance.nNetDebit = NetDebit;


                        if (!Obj.ShowZeroBalance)
                        {
                            if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }
                        }
                        else
                        {
                            if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }


                        }
                    }


                }
                else

                if ((Obj.AccountLevelDropVMID > 0) && (!Obj.Detail))
                {


                    Accounts = AccountData.Where(m => m.AccountLevel == Obj.AccountLevelDropVMID).OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                    LessMainAccount = AccountData.Where(m => m.AccountLevel < Obj.AccountLevelDropVMID).OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                    IEnumerable<string> FaherAccount = LessMainAccount.Where(m => m.AccountFather != "0").Select(m => m.AccountFather);


                    foreach (var A in LessMainAccount)
                    {
                        if (AccountData.FirstOrDefault(m => m.AccountFather == A.AccountNumber) != null)
                        {
                            //do nothing
                        }
                        else

                        {
                            Accounts = Accounts.Append(A);
                        }

                    }
                    Accounts = Accounts.OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();
                    // var MainChild = AccountData.Where(m => m.AccountFather == MainAcc.AccountNumber).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();
                    foreach (var Acc in Accounts)
                    {
                        TotalDebit = 0;
                        TOTCredit = 0;
                        NetCredit = 0;
                        NetDebit = 0;
                        CreditBalance = 0;
                        DebitBalance = 0;
                        CreditTransAction = 0;
                        DebitTransAction = 0;


                        if (AccountData.FirstOrDefault(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel) != null)
                        {
                            var AllAccount = AccountData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel)
                                            .OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();
                            int FatherLevel = Acc.AccountLevel;

                            foreach (var CurrAccLevel in AllAccount)
                            {
                                if (CurrAccLevel.AccountLevel == FatherLevel)
                                {
                                    break;
                                }
                                else
                                {
                                    var TransActionData = TranData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    var BalanceData = TotData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    foreach (var D in TransActionData)
                                    {
                                        CreditTransAction += D.CreditTransAction;
                                        DebitTransAction += D.DebitTransAction;
                                    }
                                    foreach (var Balance in BalanceData)
                                    {
                                        CreditBalance += Balance.CreditBalance;
                                        DebitBalance += Balance.DebitBalance;
                                    }
                                    TotalDebit = DebitTransAction + DebitBalance;
                                    TOTCredit = CreditTransAction + CreditBalance;
                                }
                            }
                        }
                        else
                        {
                            var TransActionData = TranData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            var BalanceData = TotData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            foreach (var D in TransActionData)
                            {
                                CreditTransAction += D.CreditTransAction;
                                DebitTransAction += D.DebitTransAction;
                            }
                            foreach (var Balance in BalanceData)
                            {
                                CreditBalance += Balance.CreditBalance;
                                DebitBalance += Balance.DebitBalance;
                            }

                            TotalDebit = DebitTransAction + DebitBalance;
                            TOTCredit = CreditTransAction + CreditBalance;
                        }
                        if (TotalDebit > TOTCredit)
                        {
                            NetDebit = TotalDebit - TOTCredit;
                        }
                        if (TotalDebit < TOTCredit)
                        {
                            NetCredit = TOTCredit - TotalDebit;
                        }

                        TrialBalanceVM trialBalance = new TrialBalanceVM();
                        trialBalance.AccountNumber = Acc.AccountNumber;
                        trialBalance.Name = Acc.ArabicName;
                        trialBalance.Level = Acc.AccountLevel;
                        trialBalance.CreditBalance = CreditBalance;
                        trialBalance.CreditTransAction = CreditTransAction;
                        trialBalance.DebitBalance = DebitBalance;
                        trialBalance.DebitTransAction = DebitTransAction;
                        trialBalance.NetCredit = NetCredit;
                        trialBalance.NetDebit = NetDebit;

                        trialBalance.nCreditBalance = CreditBalance;
                        trialBalance.nCreditTransAction = CreditTransAction;
                        trialBalance.nDebitBalance = DebitBalance;
                        trialBalance.nDebitTransAction = DebitTransAction;
                        trialBalance.nNetCredit = NetCredit;
                        trialBalance.nNetDebit = NetDebit;
                        trialBalance.TempCostID = TempCostID;
                        trialBalance.TempCostType = TempCostType;
                        if (AccountData.FirstOrDefault(m => m.AccountFather == Acc.AccountNumber) != null)
                        {
                            trialBalance.IsMainAccount = 1;

                        }
                        else
                        {
                            trialBalance.IsMainAccount = 0;


                        }

                        if (!Obj.ShowZeroBalance)
                        {
                            if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }
                        }
                        else
                        {
                            if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }


                        }
                    }

                }
                else if ((Obj.AccountLevelDropVMID > 0) && (Obj.Detail))
                {


                    Accounts = AccountData.Where(m => m.AccountLevel <= Obj.AccountLevelDropVMID).ToList().OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                    foreach (var Acc in Accounts)//Each Main Account
                    {
                        TotalDebit = 0;
                        TOTCredit = 0;
                        NetCredit = 0;
                        NetDebit = 0;
                        CreditBalance = 0;
                        DebitBalance = 0;
                        CreditTransAction = 0;
                        DebitTransAction = 0;

                        var MainAccount = AccountData.FirstOrDefault(m => m.AccountNumber == Acc.AccountNumber);
                        var MainChild = AccountData.Where(m => m.AccountFather == Acc.AccountNumber).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();

                        var TransActionData = TranData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));
                        var BalanceData = TotData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));
                        foreach (var D in TransActionData)
                        {
                            CreditTransAction += D.CreditTransAction;
                            DebitTransAction += D.DebitTransAction;
                        }
                        foreach (var Balance in BalanceData)
                        {
                            CreditBalance += Balance.CreditBalance;
                            DebitBalance += Balance.DebitBalance;
                        }



                        TotalDebit = DebitTransAction + DebitBalance;
                        TOTCredit = CreditTransAction + CreditBalance;

                        if (TotalDebit > TOTCredit)
                        {
                            NetDebit = TotalDebit - TOTCredit;
                        }
                        if (TotalDebit < TOTCredit)
                        {
                            NetCredit = TOTCredit - TotalDebit;
                        }

                        TrialBalanceVM trialBalance = new TrialBalanceVM();
                        trialBalance.AccountNumber = Acc.AccountNumber;
                        trialBalance.Name = Acc.ArabicName;

                        trialBalance.CreditBalance = CreditBalance;
                        trialBalance.CreditTransAction = CreditTransAction;
                        trialBalance.DebitBalance = DebitBalance;
                        trialBalance.DebitTransAction = DebitTransAction;
                        trialBalance.NetCredit = NetCredit;
                        trialBalance.NetDebit = NetDebit;
                        trialBalance.TempCostID = TempCostID;
                        trialBalance.TempCostType = TempCostType;
                        if ((AccountData.FirstOrDefault(m => m.AccountFather == Acc.AccountNumber) != null) && (Acc.AccountLevel < Obj.AccountLevelDropVMID))
                        {
                            trialBalance.IsMainAccount = 1;
                            trialBalance.MainAccount = "{*}";


                            trialBalance.nCreditBalance = 0;
                            trialBalance.nCreditTransAction = 0;
                            trialBalance.nDebitBalance = 0;
                            trialBalance.nDebitTransAction = 0;
                            trialBalance.nNetCredit = 0;
                            trialBalance.nNetDebit = 0;

                        }
                        else
                        {
                            trialBalance.IsMainAccount = 0;
                            trialBalance.MainAccount = "";
                            trialBalance.nCreditBalance = CreditBalance;
                            trialBalance.nCreditTransAction = CreditTransAction;
                            trialBalance.nDebitBalance = DebitBalance;
                            trialBalance.nDebitTransAction = DebitTransAction;
                            trialBalance.nNetCredit = NetCredit;
                            trialBalance.nNetDebit = NetDebit;


                        }
                        if (!Obj.ShowZeroBalance)
                        {
                            if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }
                        }
                        else
                        {
                            if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }


                        }




                    }






                }



                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TrialBalanceVM");
                table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                ds.Tables.Add(table1);

                var report = new XtraTrialBalanceSupplierReport();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraTrialBalanceSupplierReport.repx");
                report.LoadLayoutFromXml(reportFilePath);


                report.LbCoName.Text = CoInfo.ArabicName;
                report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;
                report.LbLevel.Text = String.Format("{0} {1}", Resources.Resource.AccountLevel, Obj.AccountLevelDropVMID.ToString());
                report.DataSource = ds;
                report.DataMember = "TrialBalanceVM";

                if (Obj.Detail)
                {
                    report.LbReporttitle.Text = "ارصدة الموردين تفصيلي";

                }
                else
                {
                    report.LbReporttitle.Text = "ارصدة الموردين";

                }
                report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                report.CreateDocument();
                if (Email == 1)
                {
                    if (!String.IsNullOrEmpty(CoInfo.PDFEmail))
                    {
                        MemoryStream mem = new MemoryStream();
                        report.ExportToPdf(mem);

                        mem.Seek(0, System.IO.SeekOrigin.Begin);
                        Attachment att = new Attachment(mem, "TrialBalanceSupplierReport.pdf", "application/pdf");

                        MailMessage mail = new MailMessage();
                        mail.Attachments.Add(att);


                        mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                        mail.To.Add(CoInfo.PDFEmail);

                        mail.Subject = report.LbReporttitle.Text;
                        mail.Body = "This is a  e-mail message sent by an application.";



                        SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                        //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                        NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                        smtp.Credentials = Credentials;


                        smtp.Send(mail);



                        // Close the memory stream.
                        mem.Close();
                        mem.Flush();

                    }
                }

                return View("ReportPDF", report);



            }
            catch (Exception ex)
            {
                List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                XtraTrialBalanceSupplierReport report = new XtraTrialBalanceSupplierReport();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraTrialBalanceSupplierReport.repx");
                report.LoadLayoutFromXml(reportFilePath);

                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TrialBalanceVM");
                table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                ds.Tables.Add(table1);




                report.DataSource = ds;
                report.DataMember = "TrialBalanceVM";
                report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                report.CreateDocument();

                return View("ReportPDF", report);

            }


        }

        public ActionResult GetTrialExpenseAnlysisDetailPDF(string id, string id2, int id3, string id4, int id5, int id6, string id7, int id8, int id9, int id10, int id11, int id12, int id13)
        {
            try
            {

                int Email = id13;

                AccountLevelRepVM Obj = new AccountLevelRepVM();

                DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                Obj.AccountLevelDropVMID = id3;
                Obj.AccNo = id4;
                Obj.FromDate = fromDate;
                Obj.ToDate = toDate;
                Obj.OrderBy = id11;
                Obj.AccountTypeID = id12;

                if (id5 == 1)
                {
                    Obj.ShowZeroBalance = true;
                }
                if (id6 == 1)
                {
                    Obj.Detail = true;
                }
                Obj.CostCenterNumber = id7;
                if (id8 == 1)
                {
                    Obj.ByCostCenter = true;
                }

                Obj.CostSearchType = id9;
                if (id10 == 1)
                {
                    Obj.Partofthenumber = true;
                }
                if (Obj.AccNo == "0")
                {
                    Obj.AccNo = "";
                }

                if (Obj.CostCenterNumber == "0")
                {
                    Obj.CostCenterNumber = "";
                }
                string AccountTypeName = "جميع انواع الحسابات";
                if (Obj.AccountTypeID > 0)
                    AccountTypeName = _unitOfWork.AccountType.GetAccountTypeById(Obj.AccountTypeID).ArabicName;

                var userId = User.Identity.GetUserId();
                string UserID = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(UserID);
                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                var AccountData = _unitOfWork.NativeSql.GetChartOfAccountByLevel(UserInfo.fCompanyId);

                if (Obj.AccountTypeID != 0)
                {
                    AccountData = AccountData.Where(m => m.AccountTypeID == Obj.AccountTypeID).ToList();
                }

                int CurrYear = UserInfo.CurrYear;

                var Date = "01/01/" + CurrYear;
                var OpenDate = "31/12/" + (CurrYear - 1).ToString();

                string TempCostID = "0";
                int TempCostType = 0;

                if (Obj.ByCostCenter)
                {
                    TempCostID = Obj.CostCenterNumber;
                    if (Obj.Partofthenumber)
                    {
                        TempCostType = Obj.CostSearchType;
                    }


                }

                IEnumerable<TrialBalanceVM> TotData = new List<TrialBalanceVM>();
                if (Obj.Partofthenumber)
                {
                    if (Obj.CostSearchType == 1)
                    {
                        Obj.CostCenterNumber = Obj.CostCenterNumber + "%";
                    }
                    else if (Obj.CostSearchType == 2)
                    {
                        Obj.CostCenterNumber = "%" + Obj.CostCenterNumber;
                    }
                    else if (Obj.CostSearchType == 3)
                    {
                        Obj.CostCenterNumber = "%" + Obj.CostCenterNumber + "%";

                    }
                }

                var TranData = _unitOfWork.NativeSql.GetTransactionForTrial(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                if (DateTime.Parse(Date) != Obj.FromDate)
                    TotData = _unitOfWork.NativeSql.GetTotCreditDebitForTrial(UserInfo.fCompanyId, DateTime.Parse(Date), Obj.FromDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                //----------------Get Open-------------//
                IEnumerable<TrialBalanceVM> TotDataOpen = new List<TrialBalanceVM>();
                TotDataOpen = _unitOfWork.NativeSql.GetTotCreditDebitForTrialOpen(UserInfo.fCompanyId, DateTime.Parse(OpenDate), DateTime.Parse(OpenDate));
                foreach (var D in TotDataOpen)
                {
                    TotData = TotData.Append(D);

                }
                //------------------------------------//



                double TotalDebit = 0;
                double TOTCredit = 0;
                double NetCredit = 0;
                double NetDebit = 0;
                double CreditBalance = 0;
                double DebitBalance = 0;
                double CreditTransAction = 0;
                double DebitTransAction = 0;

                List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                IEnumerable<ChartOfAccount> Accounts = new List<ChartOfAccount>();

                IEnumerable<ChartOfAccount> LessMainAccount = new List<ChartOfAccount>();
                if (!String.IsNullOrEmpty(Obj.AccNo))
                {

                    var MainAccount = AccountData.FirstOrDefault(m => m.AccountNumber == Obj.AccNo);
                    var MainChild = AccountData.Where(m => m.AccountFather == Obj.AccNo).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();

                    foreach (var Acc in MainChild)
                    {
                        TotalDebit = 0;
                        TOTCredit = 0;
                        NetCredit = 0;
                        NetDebit = 0;
                        CreditBalance = 0;
                        DebitBalance = 0;
                        CreditTransAction = 0;
                        DebitTransAction = 0;


                        if (AccountData.FirstOrDefault(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel) != null)//Check if Account Had Branches
                        {
                            var AllAccount = AccountData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel)
                                            .OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();//Get All Account Branches
                            int FatherLevel = Acc.AccountLevel;
                            foreach (var CurrAccLevel in AllAccount)
                            {
                                if (CurrAccLevel.AccountLevel == FatherLevel)
                                {
                                    break;
                                }
                                else
                                {

                                    var TransActionData = TranData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    var BalanceData = TotData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    foreach (var D in TransActionData)
                                    {
                                        CreditTransAction += D.CreditTransAction;
                                        DebitTransAction += D.DebitTransAction;
                                    }
                                    foreach (var Balance in BalanceData)
                                    {
                                        CreditBalance += Balance.CreditBalance;
                                        DebitBalance += Balance.DebitBalance;
                                    }



                                    TotalDebit = DebitTransAction + DebitBalance;
                                    TOTCredit = CreditTransAction + CreditBalance;




                                }
                            }




                        }
                        else
                        {
                            var TransActionData = TranData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            var BalanceData = TotData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            foreach (var D in TransActionData)
                            {
                                CreditTransAction += D.CreditTransAction;
                                DebitTransAction += D.DebitTransAction;
                            }
                            foreach (var Balance in BalanceData)
                            {
                                CreditBalance += Balance.CreditBalance;
                                DebitBalance += Balance.DebitBalance;
                            }



                            TotalDebit = DebitTransAction + DebitBalance;
                            TOTCredit = CreditTransAction + CreditBalance;
                        }
                        if (TotalDebit > TOTCredit)
                        {
                            NetDebit = TotalDebit - TOTCredit;
                        }
                        if (TotalDebit < TOTCredit)
                        {
                            NetCredit = TOTCredit - TotalDebit;
                        }

                        TrialBalanceVM trialBalance = new TrialBalanceVM();
                        trialBalance.AccountNumber = Acc.AccountNumber;
                        trialBalance.Name = Acc.ArabicName;

                        trialBalance.CreditBalance = CreditBalance;
                        trialBalance.CreditTransAction = CreditTransAction;
                        trialBalance.DebitBalance = DebitBalance;
                        trialBalance.DebitTransAction = DebitTransAction;
                        trialBalance.NetCredit = NetCredit;
                        trialBalance.NetDebit = NetDebit;
                        trialBalance.TempCostID = TempCostID;
                        trialBalance.TempCostType = TempCostType;



                        trialBalance.nCreditBalance = CreditBalance;
                        trialBalance.nCreditTransAction = CreditTransAction;
                        trialBalance.nDebitBalance = DebitBalance;
                        trialBalance.nDebitTransAction = DebitTransAction;
                        trialBalance.nNetCredit = NetCredit;
                        trialBalance.nNetDebit = NetDebit;

                        if (!Obj.ShowZeroBalance)
                        {
                            if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }
                        }
                        else
                        {
                            if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }


                        }
                    }


                }
                else

                if ((Obj.AccountLevelDropVMID > 0) && (!Obj.Detail))
                {


                    Accounts = AccountData.Where(m => m.AccountLevel == Obj.AccountLevelDropVMID).OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                    LessMainAccount = AccountData.Where(m => m.AccountLevel < Obj.AccountLevelDropVMID).OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                    IEnumerable<string> FaherAccount = LessMainAccount.Where(m => m.AccountFather != "0").Select(m => m.AccountFather);


                    foreach (var A in LessMainAccount)
                    {
                        if (AccountData.FirstOrDefault(m => m.AccountFather == A.AccountNumber) != null)
                        {
                            //do nothing
                        }
                        else

                        {
                            Accounts = Accounts.Append(A);
                        }

                    }
                    Accounts = Accounts.OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();
                    // var MainChild = AccountData.Where(m => m.AccountFather == MainAcc.AccountNumber).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();
                    foreach (var Acc in Accounts)
                    {
                        TotalDebit = 0;
                        TOTCredit = 0;
                        NetCredit = 0;
                        NetDebit = 0;
                        CreditBalance = 0;
                        DebitBalance = 0;
                        CreditTransAction = 0;
                        DebitTransAction = 0;


                        if (AccountData.FirstOrDefault(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel) != null)
                        {
                            var AllAccount = AccountData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel)
                                            .OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();
                            int FatherLevel = Acc.AccountLevel;

                            foreach (var CurrAccLevel in AllAccount)
                            {
                                if (CurrAccLevel.AccountLevel == FatherLevel)
                                {
                                    break;
                                }
                                else
                                {
                                    var TransActionData = TranData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    var BalanceData = TotData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    foreach (var D in TransActionData)
                                    {
                                        CreditTransAction += D.CreditTransAction;
                                        DebitTransAction += D.DebitTransAction;
                                    }
                                    foreach (var Balance in BalanceData)
                                    {
                                        CreditBalance += Balance.CreditBalance;
                                        DebitBalance += Balance.DebitBalance;
                                    }
                                    TotalDebit = DebitTransAction + DebitBalance;
                                    TOTCredit = CreditTransAction + CreditBalance;
                                }
                            }
                        }
                        else
                        {
                            var TransActionData = TranData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            var BalanceData = TotData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            foreach (var D in TransActionData)
                            {
                                CreditTransAction += D.CreditTransAction;
                                DebitTransAction += D.DebitTransAction;
                            }
                            foreach (var Balance in BalanceData)
                            {
                                CreditBalance += Balance.CreditBalance;
                                DebitBalance += Balance.DebitBalance;
                            }

                            TotalDebit = DebitTransAction + DebitBalance;
                            TOTCredit = CreditTransAction + CreditBalance;
                        }
                        if (TotalDebit > TOTCredit)
                        {
                            NetDebit = TotalDebit - TOTCredit;
                        }
                        if (TotalDebit < TOTCredit)
                        {
                            NetCredit = TOTCredit - TotalDebit;
                        }

                        TrialBalanceVM trialBalance = new TrialBalanceVM();
                        trialBalance.AccountNumber = Acc.AccountNumber;
                        trialBalance.Name = Acc.ArabicName;
                        trialBalance.Level = Acc.AccountLevel;
                        trialBalance.CreditBalance = CreditBalance;
                        trialBalance.CreditTransAction = CreditTransAction;
                        trialBalance.DebitBalance = DebitBalance;
                        trialBalance.DebitTransAction = DebitTransAction;
                        trialBalance.NetCredit = NetCredit;
                        trialBalance.NetDebit = NetDebit;

                        trialBalance.nCreditBalance = CreditBalance;
                        trialBalance.nCreditTransAction = CreditTransAction;
                        trialBalance.nDebitBalance = DebitBalance;
                        trialBalance.nDebitTransAction = DebitTransAction;
                        trialBalance.nNetCredit = NetCredit;
                        trialBalance.nNetDebit = NetDebit;
                        trialBalance.TempCostID = TempCostID;
                        trialBalance.TempCostType = TempCostType;
                        if (AccountData.FirstOrDefault(m => m.AccountFather == Acc.AccountNumber) != null)
                        {
                            trialBalance.IsMainAccount = 1;

                        }
                        else
                        {
                            trialBalance.IsMainAccount = 0;


                        }

                        if (!Obj.ShowZeroBalance)
                        {
                            if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }
                        }
                        else
                        {
                            if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }


                        }
                    }

                }
                else if ((Obj.AccountLevelDropVMID > 0) && (Obj.Detail))
                {


                    Accounts = AccountData.Where(m => m.AccountLevel <= Obj.AccountLevelDropVMID).ToList().OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                    foreach (var Acc in Accounts)//Each Main Account
                    {
                        TotalDebit = 0;
                        TOTCredit = 0;
                        NetCredit = 0;
                        NetDebit = 0;
                        CreditBalance = 0;
                        DebitBalance = 0;
                        CreditTransAction = 0;
                        DebitTransAction = 0;

                        var MainAccount = AccountData.FirstOrDefault(m => m.AccountNumber == Acc.AccountNumber);
                        var MainChild = AccountData.Where(m => m.AccountFather == Acc.AccountNumber).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();

                        var TransActionData = TranData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));
                        var BalanceData = TotData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));
                        foreach (var D in TransActionData)
                        {
                            CreditTransAction += D.CreditTransAction;
                            DebitTransAction += D.DebitTransAction;
                        }
                        foreach (var Balance in BalanceData)
                        {
                            CreditBalance += Balance.CreditBalance;
                            DebitBalance += Balance.DebitBalance;
                        }



                        TotalDebit = DebitTransAction + DebitBalance;
                        TOTCredit = CreditTransAction + CreditBalance;

                        if (TotalDebit > TOTCredit)
                        {
                            NetDebit = TotalDebit - TOTCredit;
                        }
                        if (TotalDebit < TOTCredit)
                        {
                            NetCredit = TOTCredit - TotalDebit;
                        }

                        TrialBalanceVM trialBalance = new TrialBalanceVM();
                        trialBalance.AccountNumber = Acc.AccountNumber;
                        trialBalance.Name = Acc.ArabicName;

                        trialBalance.CreditBalance = CreditBalance;
                        trialBalance.CreditTransAction = CreditTransAction;
                        trialBalance.DebitBalance = DebitBalance;
                        trialBalance.DebitTransAction = DebitTransAction;
                        trialBalance.NetCredit = NetCredit;
                        trialBalance.NetDebit = NetDebit;
                        trialBalance.TempCostID = TempCostID;
                        trialBalance.TempCostType = TempCostType;
                        if ((AccountData.FirstOrDefault(m => m.AccountFather == Acc.AccountNumber) != null) && (Acc.AccountLevel < Obj.AccountLevelDropVMID))
                        {
                            trialBalance.IsMainAccount = 1;
                            trialBalance.MainAccount = "{*}";


                            trialBalance.nCreditBalance = 0;
                            trialBalance.nCreditTransAction = 0;
                            trialBalance.nDebitBalance = 0;
                            trialBalance.nDebitTransAction = 0;
                            trialBalance.nNetCredit = 0;
                            trialBalance.nNetDebit = 0;

                        }
                        else
                        {
                            trialBalance.IsMainAccount = 0;
                            trialBalance.MainAccount = "";
                            trialBalance.nCreditBalance = CreditBalance;
                            trialBalance.nCreditTransAction = CreditTransAction;
                            trialBalance.nDebitBalance = DebitBalance;
                            trialBalance.nDebitTransAction = DebitTransAction;
                            trialBalance.nNetCredit = NetCredit;
                            trialBalance.nNetDebit = NetDebit;


                        }
                        if (!Obj.ShowZeroBalance)
                        {
                            if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }
                        }
                        else
                        {
                            if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }


                        }




                    }






                }


                if (Obj.OrderBy == 1)
                {
                    TrialBalanceVMList = TrialBalanceVMList.OrderByDescending(m => m.NetDebit).ThenBy(m => m.NetCredit).ToList();
                }
                else if (Obj.OrderBy == 2)
                {
                    TrialBalanceVMList = TrialBalanceVMList.OrderBy(m => m.NetDebit).ThenBy(m => m.NetCredit).ToList();
                }

                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TrialBalanceVM");
                table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                ds.Tables.Add(table1);

                var report = new XtraTrialExpenseAnlysisDetailReport();
                string reportFilePath = Server.MapPath("/ReportLayout/XtraTrialExpenseAnlysisDetailReport.repx");
                report.LoadLayoutFromXml(reportFilePath);

                report.LbCoName.Text = CoInfo.ArabicName;
                report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;
                report.LbLevel.Text = String.Format("{0} {1}", Resources.Resource.AccountLevel, Obj.AccountLevelDropVMID.ToString());
                report.DataSource = ds;
                report.DataMember = "TrialBalanceVM";


                report.ToAccountNumber.Text = Obj.AccNo;
                if (!String.IsNullOrEmpty(Obj.AccNo))
                {
                    var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.AccNo);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.AccountName.Text = AccName.ArabicName;
                    }
                    else
                    {
                        report.AccountName.Text = AccName.EnglishName;
                    }

                }
                if (Obj.ByCostCenter)
                {
                    if (!String.IsNullOrEmpty(Obj.CostCenterNumber))
                    {
                        var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, Obj.CostCenterNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.CostCenterName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.CostCenterName.Text = AccName.EnglishName;
                        }

                    }

                }

                if (Obj.AccountTypeID != 0)
                {

                    var Name = _unitOfWork.AccountType.GetAccountTypeById(Obj.AccountTypeID);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.Kind.Text = Name.ArabicName;
                    }
                    else
                    {
                        report.Kind.Text = Name.EnglishName;
                    }

                }


                report.CostCenter.Text = Obj.CostCenterNumber;



                if (Obj.Detail)
                {
                    report.LbReporttitle.Text = String.Format("{0}-{1} ", " تحليل الحسابات تفصيلي ", AccountTypeName);

                }
                else
                {
                    report.LbReporttitle.Text = String.Format("{0}-{1} ", " تحليل الحسابات  ", AccountTypeName);

                }


                report.ToAccountNumber.Text = Obj.AccNo;
                //report.AccountName.Text = Obj.AccName; 

                report.CostCenter.Text = Obj.CostCenterNumber;
                // report.CostCenterName.Text = Obj.CostCenterName;



                report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                report.CreateDocument();
                if (Email == 1)
                {
                    if (!String.IsNullOrEmpty(CoInfo.PDFEmail))
                    {
                        MemoryStream mem = new MemoryStream();
                        report.ExportToPdf(mem);

                        mem.Seek(0, System.IO.SeekOrigin.Begin);
                        Attachment att = new Attachment(mem, "TrialExpenseAnlysisDetailReport.pdf", "application/pdf");

                        MailMessage mail = new MailMessage();
                        mail.Attachments.Add(att);


                        mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                        mail.To.Add(CoInfo.PDFEmail);

                        mail.Subject = report.LbReporttitle.Text;
                        mail.Body = "This is a  e-mail message sent by an application.";



                        SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                        //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                        NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                        smtp.Credentials = Credentials;


                        smtp.Send(mail);



                        // Close the memory stream.
                        mem.Close();
                        mem.Flush();

                    }
                }
                return View("ReportPDF", report);



            }
            catch (Exception ex)
            {
                List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                XtraTrialExpenseAnlysisDetailReport report = new XtraTrialExpenseAnlysisDetailReport();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraTrialExpenseAnlysisDetailReport.repx");
                report.LoadLayoutFromXml(reportFilePath);



                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TrialBalanceVM");
                table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                ds.Tables.Add(table1);




                report.DataSource = ds;
                report.DataMember = "TrialBalanceVM";
                report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                report.CreateDocument();

                return View("ReportPDF", report);

            }


        }

        public ActionResult GetTempRevenueReportPDF(string id, string id2, string id3, string id4, int id5, int id6, int id7)
        {
            try
            {
                var userId = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                TempPrepaidAndRevenueReceivedVM Obj = new TempPrepaidAndRevenueReceivedVM();
                DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                Obj.FromCollectionDate = fromDate;
                Obj.ToCollectionDate = toDate;
                Obj.RevenueReceivedAccountNumber = id3;
                Obj.RevenueAccountNumber = id4;

                string CheckList = " ";

                if (id5 == 1)
                {
                    Obj.All = true;
                    CheckList += Resources.Resource.All;
                }

                if (id6 == 1)
                {
                    Obj.Collector = true;
                    CheckList += Resources.Resource.Collector;

                }

                if (id7 == 1)
                {
                    Obj.NotCollected = true;
                    CheckList += Resources.Resource.NotCollected;
                }

                if (Obj.RevenueReceivedAccountNumber == "0")
                {
                    Obj.RevenueReceivedAccountNumber = "";
                }
                if (Obj.RevenueAccountNumber == "0")
                {
                    Obj.RevenueAccountNumber = "";
                }

                var AllTempRevenue = _unitOfWork.NativeSql.GetTempRevenueReport(UserInfo.fCompanyId, Obj.All, Obj.Collector, Obj.NotCollected, Obj.FromCollectionDate, Obj.ToCollectionDate);


                if (AllTempRevenue == null)
                {
                    return Json(new List<TempPrepaidAndRevenueReceivedVM>(), JsonRequestBehavior.AllowGet);
                }
                if (!String.IsNullOrEmpty(Obj.RevenueReceivedAccountNumber))
                {
                    AllTempRevenue = AllTempRevenue.Where(m => m.RevenueReceivedAccountNumber == Obj.RevenueReceivedAccountNumber).ToList();
                }
                if (!String.IsNullOrEmpty(Obj.RevenueAccountNumber))
                {
                    AllTempRevenue = AllTempRevenue.Where(m => m.RevenueAccountNumber == Obj.RevenueAccountNumber).ToList();
                }

                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TempPrepaidAndRevenueReceivedVM");
                table1 = FunctionUnit.LINQResultToDataTable(AllTempRevenue);

                ds.Tables.Add(table1);

                var report = new TempRevenueReceivedReport();

                string reportFilePath = Server.MapPath("/ReportLayout/TempRevenueReceivedReport.repx");
                report.LoadLayoutFromXml(reportFilePath);

                report.LbCoName.Text = CoInfo.ArabicName;
                report.RevenueReceivedAccountNumber.Text = Obj.RevenueReceivedAccountNumber;
                report.RevenueAccountNumber.Text = Obj.RevenueAccountNumber;

                report.xrLabel3.Text = CheckList + " ";

                report.LbFromDate.Text = Obj.FromCollectionDate.ToString("dd/MM/yyyy");
                report.LbTODate.Text = Obj.ToCollectionDate.ToString("dd/MM/yyyy");


                if (!String.IsNullOrEmpty(Obj.RevenueReceivedAccountNumber))
                {
                    var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.RevenueReceivedAccountNumber);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.AccountName.Text = AccName.ArabicName;
                    }
                    else
                    {
                        report.AccountName.Text = AccName.EnglishName;
                    }

                }

                if (!String.IsNullOrEmpty(Obj.RevenueAccountNumber))
                {
                    var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.RevenueAccountNumber);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.RevenueAccountName.Text = AccName.ArabicName;
                    }
                    else
                    {
                        report.RevenueAccountName.Text = AccName.EnglishName;
                    }

                }

                report.Num.Text = AllTempRevenue.Count().ToString();
                Obj.SumAmount = AllTempRevenue.Sum(m => (m.Amount)).ToString();

                if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                {
                    Obj.SumAmount = "" + String.Format("{0:n2}", Obj.SumAmount) + "";

                }
                else
                {
                    Obj.SumAmount = "" + String.Format("{0:n3}", Obj.SumAmount) + "";
                }

                report.SumTotal.Text = Obj.SumAmount;

                report.DataSource = ds;
                report.DataMember = "TempPrepaidAndRevenueReceivedVM";



                //report.ExpenseAccountNumber.Text = Obj.RevenueReceivedAccountNumber;

                //report.ExpenseAccountName.Text = Obj.RevenueReceivedAccountName;

                //report.PrepaidExpenseAccountNumber.Text = Obj.RevenueAccountNumber;
                //report.PrepaidExpenseAccountName.Text = Obj.RevenueAccountName;


                //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                report.CreateDocument();




                return View("ReportPDF", report);
                //}






            }



            catch (Exception ex)
            {
                ViewBag.Error = ex.Message.ToString();
                List<TempPrepaidAndRevenueReceivedVM> TempVMList = new List<TempPrepaidAndRevenueReceivedVM>();

                TempRevenueReceivedReport report = new TempRevenueReceivedReport();

                string reportFilePath = Server.MapPath("/ReportLayout/TempRevenueReceivedReport.repx");
                report.LoadLayoutFromXml(reportFilePath);

                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TempPrepaidAndRevenueReceivedVM");
                table1 = FunctionUnit.LINQResultToDataTable(TempVMList);

                ds.Tables.Add(table1);




                report.DataSource = ds;
                report.DataMember = "TempPrepaidAndRevenueReceivedVM";
                // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                report.CreateDocument();

                return View("ReportPDF", report);
            }



        }



        public ActionResult GetTempPrepaidReportPDF(string id, string id2, string id3, string id4, int id5, int id6, int id7)
        {
            try
            {
                var userId = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                TempPrepaidAndRevenueReceivedVM Obj = new TempPrepaidAndRevenueReceivedVM();
                DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                Obj.FromCollectionDate = fromDate;
                Obj.ToCollectionDate = toDate;
                Obj.ExpenseAccountNumber = id3;
                Obj.PrepaidExpenseAccountNumber = id4;

                string checkList = " ";
                if (id5 == 1)
                {
                    Obj.All = true;
                    checkList += Resources.Resource.All;
                }

                if (id6 == 1)
                {
                    Obj.Collector = true;
                    checkList += Resources.Resource.Collector;

                }

                if (id7 == 1)
                {
                    Obj.NotCollected = true;
                    checkList += Resources.Resource.NotCollected;


                }

                if (Obj.ExpenseAccountNumber == "0")
                {
                    Obj.ExpenseAccountNumber = "";
                }
                if (Obj.PrepaidExpenseAccountNumber == "0")
                {
                    Obj.PrepaidExpenseAccountNumber = "";
                }

                var AllTempPrepaid = _unitOfWork.NativeSql.GetTempPrepaidReport(UserInfo.fCompanyId, Obj.All, Obj.Collector, Obj.NotCollected, Obj.FromCollectionDate, Obj.ToCollectionDate);
                if (AllTempPrepaid == null)
                {
                    return Json(new List<TempPrepaidAndRevenueReceivedVM>(), JsonRequestBehavior.AllowGet);
                }
                if (!String.IsNullOrEmpty(Obj.ExpenseAccountNumber))
                {
                    AllTempPrepaid = AllTempPrepaid.Where(m => m.ExpenseAccountNumber == Obj.ExpenseAccountNumber).ToList();
                }
                if (!String.IsNullOrEmpty(Obj.PrepaidExpenseAccountNumber))
                {
                    AllTempPrepaid = AllTempPrepaid.Where(m => m.PrepaidExpenseAccountNumber == Obj.PrepaidExpenseAccountNumber).ToList();
                }
                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TempPrepaidAndRevenueReceivedVM");
                table1 = FunctionUnit.LINQResultToDataTable(AllTempPrepaid);

                ds.Tables.Add(table1);

                var report = new TempPrepaidReport1();

                string reportFilePath = Server.MapPath("/ReportLayout/TempPrepaidReport1.repx");
                report.LoadLayoutFromXml(reportFilePath);

                report.LbCoName.Text = CoInfo.ArabicName;
                report.LbFromDate.Text = Obj.FromCollectionDate.ToString("dd/MM/yyyy");
                report.LbTODate.Text = Obj.ToCollectionDate.ToString("dd/MM/yyyy");

                report.DataSource = ds;
                report.DataMember = "TempPrepaidAndRevenueReceivedVM";

                Obj.SumAmount = AllTempPrepaid.Sum(m => (m.Amount)).ToString();

                if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                {
                    Obj.SumAmount = "" + String.Format("{0:n2}", Obj.SumAmount) + "";

                }
                else
                {
                    Obj.SumAmount = "" + String.Format("{0:n3}", Obj.SumAmount) + "";
                }

                report.SumTotal.Text = Obj.SumAmount;
                report.Num.Text = AllTempPrepaid.Count().ToString();

                report.xrLabel3.Text = checkList;


                report.ExpenseAccountNumber.Text = Obj.ExpenseAccountNumber;

                report.PrepaidExpenseAccountNumber.Text = Obj.PrepaidExpenseAccountNumber;



                //report.LevelName.Text = String.Format("{0} {1}", Resources.Resource.Level, Obj.AccountLevelDropVMID.ToString());


                // report.PrepaidExpenseAccountNumber.Text = Obj.RevenueAccountNumber;


                if (!String.IsNullOrEmpty(Obj.PrepaidExpenseAccountNumber))
                {
                    var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.PrepaidExpenseAccountNumber);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.PrepaidExpenseAccountName.Text = AccName.ArabicName;
                    }
                    else
                    {
                        report.PrepaidExpenseAccountName.Text = AccName.EnglishName;
                    }

                }

                if (!String.IsNullOrEmpty(Obj.ExpenseAccountNumber))
                {
                    var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.ExpenseAccountNumber);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.AccountName.Text = AccName.ArabicName;
                    }
                    else
                    {
                        report.AccountName.Text = AccName.EnglishName;
                    }

                }
                report.CreateDocument();




                return View("ReportPDF", report);
            }
            catch (Exception ex)
            {
                ViewBag.Error = ex.Message.ToString();
                List<TempPrepaidAndRevenueReceivedVM> TempVMList = new List<TempPrepaidAndRevenueReceivedVM>();

                TempPrepaidReport1 report = new TempPrepaidReport1();

                string reportFilePath = Server.MapPath("/ReportLayout/TempPrepaidReport1.repx");
                report.LoadLayoutFromXml(reportFilePath);

                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TempPrepaidAndRevenueReceivedVM");
                table1 = FunctionUnit.LINQResultToDataTable(TempVMList);

                ds.Tables.Add(table1);




                report.DataSource = ds;
                report.DataMember = "TempPrepaidAndRevenueReceivedVM";
                // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                report.CreateDocument();

                return View("ReportPDF", report);
            }

        }



        public ActionResult SalesReportPDF(string id, string id2, string id3, int id4, string id5, int id6, int id7, int id8, int id9, int id10, int id11, int id12, int id13, int id14)

        {

            try
            {
                int Email = id13;
                var userId = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                SalesReportVM Obj = new SalesReportVM();
                DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                Obj.FromDate = fromDate;
                Obj.ToDate = toDate;
                Obj.VoucherNumber = id3;
                Obj.SaleID = id4;
                Obj.AccountNumber = id5;

                string CheckList = "  ";

                if (id6 == 1)
                {
                    Obj.ReceiptCash = true;
                    CheckList += Resources.Resource.ReceiptCash + " / ";
                }

                if (id7 == 1)
                {
                    Obj.ReceiptBank = true;
                    CheckList += Resources.Resource.ReceiptBank + "/ ";
                }

                if (id8 == 1)
                {
                    Obj.DebitNote = true;
                    CheckList += Resources.Resource.DebitNote + " / ";

                }

                if (id9 == 1)
                {
                    Obj.SaleService = true;
                    CheckList += Resources.Resource.SaleService + " / ";

                }

                if (id10 == 1)
                {
                    Obj.SaleMultiService = true;
                    CheckList += Resources.Resource.SaleMultiService + " / ";

                }

                if (id11 == 1)
                {
                    Obj.ReturnService = true;
                    CheckList += Resources.Resource.ReturnService + "/ ";

                }

                if (id12 == 1)
                {
                    Obj.ReturnMultiService = true;
                    CheckList += Resources.Resource.ReturnMultiService + " / ";

                }

                if (id14 == 1)
                {
                    Obj.ReceiptVoucherCashMultiAccount = true;
                    CheckList += Resources.Resource.ReceiptVoucherCashMultiAccount + " / ";

                }

                if (Obj.AccountNumber == "0")
                {
                    Obj.AccountNumber = "";
                }
                if (Obj.VoucherNumber == "0")
                {
                    Obj.VoucherNumber = "";
                }

                var AllSalesReport = _unitOfWork.NativeSql.GetSalesReport(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                List<SalesReportVM> AllData = new List<SalesReportVM>();
                List<SalesReportVM> Ch1 = new List<SalesReportVM>();
                List<SalesReportVM> Ch2 = new List<SalesReportVM>();
                List<SalesReportVM> Ch3 = new List<SalesReportVM>();
                List<SalesReportVM> Ch4 = new List<SalesReportVM>();
                List<SalesReportVM> Ch5 = new List<SalesReportVM>();
                List<SalesReportVM> Ch6 = new List<SalesReportVM>();
                List<SalesReportVM> Ch7 = new List<SalesReportVM>();

                if (AllSalesReport == null)
                {
                    return Json(new List<SalesReportVM>(), JsonRequestBehavior.AllowGet);
                }
                if (!String.IsNullOrEmpty(Obj.VoucherNumber))
                {
                    AllSalesReport = AllSalesReport.Where(m => m.VoucherNumber == Obj.VoucherNumber).ToList();
                }
                if (!String.IsNullOrEmpty(Obj.AccountNumber))
                {
                    AllSalesReport = AllSalesReport.Where(m => m.AccountNumber == Obj.AccountNumber).ToList();
                }
                if (Obj.SaleID != 0)
                {
                    AllSalesReport = AllSalesReport.Where(m => m.SaleID == Obj.SaleID).ToList();
                }
                if (Obj.ReceiptCash)
                {
                    Ch1 = AllSalesReport.Where(m => m.TransactionKindNo == 3).ToList();
                }
                if (Obj.ReceiptBank)
                {
                    Ch2 = AllSalesReport.Where(m => m.TransactionKindNo == 2).ToList();
                }
                if (Obj.DebitNote)
                {
                    Ch3 = AllSalesReport.Where(m => m.TransactionKindNo == 6).ToList();
                }
                if (Obj.SaleService)
                {
                    Ch4 = AllSalesReport.Where(m => m.TransactionKindNo == 10).ToList();
                }
                if (Obj.SaleMultiService)
                {
                    Ch5 = AllSalesReport.Where(m => m.TransactionKindNo == 11).ToList();
                }
                if (Obj.ReturnService)
                {
                    Ch6 = AllSalesReport.Where(m => m.TransactionKindNo == 19).ToList();
                }
                if (Obj.ReturnMultiService)
                {
                    Ch7 = AllSalesReport.Where(m => m.TransactionKindNo == 20).ToList();
                }
                if (Obj.ReceiptVoucherCashMultiAccount)
                {
                    Ch7 = AllSalesReport.Where(m => m.TransactionKindNo == 23).ToList();
                }

                if (Ch1.Count > 0)
                {
                    foreach (var c in Ch1)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch2.Count > 0)
                {
                    foreach (var c in Ch2)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch3.Count > 0)
                {
                    foreach (var c in Ch3)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch4.Count > 0)
                {
                    foreach (var c in Ch4)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch5.Count > 0)
                {
                    foreach (var c in Ch5)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch6.Count > 0)
                {
                    foreach (var c in Ch6)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch7.Count > 0)
                {
                    foreach (var c in Ch7)
                    {
                        AllData.Add(c);
                    }
                }
                if (Obj.ReceiptCash == false && Obj.ReceiptBank == false && Obj.DebitNote == false && Obj.SaleService == false && Obj.SaleMultiService == false && Obj.ReturnService == false && Obj.ReturnMultiService == false)
                {
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("SalesReportVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllSalesReport);

                    ds.Tables.Add(table1);

                    var report = new XtraSalesReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/XtraSalesReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;
                    report.LbVoucherNo.Text = Obj.VoucherNumber;

                    if (Obj.SaleID != 0)
                    {
                        report.LbSaleMan.Text = String.Format("{0} {1}", Resources.Resource.SaleManName, Obj.SaleID.ToString());

                    }
                    else
                    {
                        report.LbSaleMan.Text = " ";

                    }


                    //   report.LbSaleMan.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.DataSource = ds;
                    report.DataMember = "SalesReportVM";


                    if (AllSalesReport != null)
                    {
                        var Nettotal = AllSalesReport.Sum(m => m.Amount);
                        if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                        {
                            report.NetTotal.Text = "" + String.Format("{0:n2}", Nettotal.ToString()) + "";
                        }
                        else
                        {
                            report.NetTotal.Text = "" + String.Format("{0:n3}", Nettotal.ToString()) + "";
                        }



                    }



                    report.ToAccountNumber.Text = Obj.AccountNumber;

                    report.xrLabel1.Text = CheckList;

                    if (!String.IsNullOrEmpty(Obj.AccountNumber))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.AccountNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.AccountName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.AccountName.Text = AccName.EnglishName;
                        }

                    }

                   // report.LbSaleMan.Text = String.Format("{0} {1}", Resources.Resource.SaleManName, Obj.SaleID.ToString());

                    report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    if (Email == 1)
                    {
                        if (!String.IsNullOrEmpty(CoInfo.PDFEmail))
                        {
                            MemoryStream mem = new MemoryStream();
                            report.ExportToPdf(mem);

                            mem.Seek(0, System.IO.SeekOrigin.Begin);
                            Attachment att = new Attachment(mem, "SalesReport.pdf", "application/pdf");

                            MailMessage mail = new MailMessage();
                            mail.Attachments.Add(att);


                            mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                            mail.To.Add(CoInfo.PDFEmail);

                            mail.Subject = "تقرير المندوبين";
                            mail.Body = "This is a  e-mail message sent by an application.";



                            SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                            //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                            NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                            smtp.Credentials = Credentials;


                            smtp.Send(mail);



                            // Close the memory stream.
                            mem.Close();
                            mem.Flush();

                        }
                    }

                    return View("ReportPDF", report);


                }
                else
                {

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("SalesReportVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllData);

                    ds.Tables.Add(table1);

                    var report = new XtraSalesReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/XtraSalesReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;
                    report.LbVoucherNo.Text = Obj.VoucherNumber;
                    report.ToAccountNumber.Text = Obj.AccountNumber;
                    report.DataSource = ds;
                    report.DataMember = "SalesReportVM";


                    if (!String.IsNullOrEmpty(Obj.AccountNumber))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.AccountNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.AccountName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.AccountName.Text = AccName.EnglishName;
                        }

                    }


                    if (AllData != null)
                    {
                        var Nettotal = AllData.Sum(m => m.Amount);
                        if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                        {
                            report.NetTotal.Text = "" + String.Format("{0:n2}", Nettotal.ToString()) + "";
                        }
                        else
                        {
                            report.NetTotal.Text = "" + String.Format("{0:n3}", Nettotal.ToString()) + "";
                        }


                    }
                    report.xrLabel1.Text = CheckList;
                    //report.LbSaleMan.Text = String.Format("{0} {1}", Resources.Resource.SaleManName, Obj.SaleID.ToString());


                    if (Obj.SaleID != 0)
                    {
                        report.LbSaleMan.Text = String.Format("{0} {1}", Resources.Resource.SaleManName, Obj.SaleID.ToString());

                    }
                    else
                    {
                        report.LbSaleMan.Text = " ";

                    }

                    if (Email == 1)
                    {
                        if (!String.IsNullOrEmpty(CoInfo.PDFEmail))
                        {
                            MemoryStream mem = new MemoryStream();
                            report.ExportToPdf(mem);

                            mem.Seek(0, System.IO.SeekOrigin.Begin);
                            Attachment att = new Attachment(mem, "SalesReport.pdf", "application/pdf");

                            MailMessage mail = new MailMessage();
                            mail.Attachments.Add(att);


                            mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                            mail.To.Add(CoInfo.PDFEmail);

                            mail.Subject = report.LbReporttitle.Text;
                            mail.Body = "This is a  e-mail message sent by an application.";



                            SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                            //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                            NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                            smtp.Credentials = Credentials;


                            smtp.Send(mail);



                            // Close the memory stream.
                            mem.Close();
                            mem.Flush();

                        }
                    }


                    report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                    report.CreateDocument();

                    return View("ReportPDF", report);

                }

            }
            catch (Exception ex)
            {
                List<SalesReportVM> TrialBalanceVMList = new List<SalesReportVM>();

                XtraSalesReport report = new XtraSalesReport();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraSalesReport.repx");
                report.LoadLayoutFromXml(reportFilePath);

                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("SalesReportVM");
                table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                ds.Tables.Add(table1);




                report.DataSource = ds;
                report.DataMember = "SalesReportVM";
                report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                report.CreateDocument();

                return View("ReportPDF", report);
            }


        }

            public ActionResult EstimatedBudgetForAccountPDF(int id, int id2, int id3, int id4)
            {
                try
                {

                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                      string DropList = " ";
                    AccountLevelRepVM Obj = new AccountLevelRepVM();
                    Obj.AccountLevelDropVMID = id;
                    Obj.Month = id2;


                    if (id3 == 1)
                    {
                        Obj.ShowMainAccountValue = true;
                    }

                    if (id4 == 1)
                    {
                        Obj.ShowEstimatedZero = true;
                    }




                    var AccountData = _unitOfWork.NativeSql.GetChartOfAccountByLevel(UserInfo.fCompanyId);
                    int CurrYear = UserInfo.CurrYear;
                    Obj.Detail = true;
                    var Date = "01/01/" + CurrYear;
                    var OpenDate = "31/12/" + (CurrYear - 1).ToString();
                    Obj.FromDate = DateTime.Parse("01/" + Obj.Month.ToString("00") + "/" + CurrYear);
                    var LastDay = DateTime.DaysInMonth(CurrYear, Obj.Month).ToString("00");
                    Obj.ToDate = DateTime.Parse(LastDay + "/" + Obj.Month.ToString("00") + "/" + CurrYear);


                    IEnumerable<TrialBalanceVM> TotData = new List<TrialBalanceVM>();
                    if (Obj.Partofthenumber)
                    {
                        if (Obj.CostSearchType == 1)
                        {
                            Obj.CostCenterNumber = Obj.CostCenterNumber + "%";
                        }
                        else if (Obj.CostSearchType == 2)
                        {
                            Obj.CostCenterNumber = "%" + Obj.CostCenterNumber;
                        }
                        else if (Obj.CostSearchType == 3)
                        {
                            Obj.CostCenterNumber = "%" + Obj.CostCenterNumber + "%";

                        }
                    }

                    var TranData = _unitOfWork.NativeSql.GetTransactionForTrial(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                    var MonthlyData = _unitOfWork.NativeSql.GetTransactionForTrialYearly(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                    var BudgetData = _unitOfWork.EstimatedBudget.GetAllEstimatedBudgets(UserInfo.fCompanyId, CurrYear);

                    IEnumerable<TrialBalanceVM> TotDataOpen = new List<TrialBalanceVM>();
                    TotDataOpen = _unitOfWork.NativeSql.GetTotCreditDebitForTrialOpen(UserInfo.fCompanyId, DateTime.Parse(OpenDate), DateTime.Parse(OpenDate));
                    foreach (var D in TotDataOpen)
                    {
                        TotData = TotData.Append(D);

                    }
                    //------------------------------------//


                    double TotalDebit = 0;
                    double TOTCredit = 0;
                    double NetCredit = 0;
                    double NetDebit = 0;
                    double CreditBalance = 0;
                    double DebitBalance = 0;
                    double CreditTransAction = 0;
                    double DebitTransAction = 0;

                    double January = 0;
                    double February = 0;
                    double March = 0;
                    double April = 0;
                    double May = 0;
                    double June = 0;
                    double July = 0;
                    double August = 0;
                    double September = 0;
                    double October = 0;
                    double November = 0;
                    double December = 0;

                    double NetTot = 0;
                    double OpenBalance = 0;
                    double MonthTransaction = 0;
                    double Expected = 0;
                    double ChangeVaule = 0;
                    double ChangePrec = 0;

                    List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                    IEnumerable<ChartOfAccount> Accounts = new List<ChartOfAccount>();

                    IEnumerable<ChartOfAccount> LessMainAccount = new List<ChartOfAccount>();




                    if ((Obj.AccountLevelDropVMID > 0) && (Obj.Detail))
                    {


                        Accounts = AccountData.Where(m => m.AccountLevel <= Obj.AccountLevelDropVMID).ToList().OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                        foreach (var Acc in Accounts)//Each Main Account
                        {
                            TotalDebit = 0;
                            TOTCredit = 0;
                            NetCredit = 0;
                            NetDebit = 0;
                            CreditBalance = 0;
                            DebitBalance = 0;
                            CreditTransAction = 0;
                            DebitTransAction = 0;

                            January = 0;
                            February = 0;
                            March = 0;
                            April = 0;
                            May = 0;
                            June = 0;
                            July = 0;
                            August = 0;
                            September = 0;
                            October = 0;
                            November = 0;
                            December = 0;

                            NetTot = 0;

                            MonthTransaction = 0;
                            Expected = 0;
                            ChangeVaule = 0;
                            ChangePrec = 0;

                            var MainAccount = AccountData.FirstOrDefault(m => m.AccountNumber == Acc.AccountNumber);
                            var MainChild = AccountData.Where(m => m.AccountFather == Acc.AccountNumber).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();

                            var TransActionData = TranData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));
                            var BalanceData = TotData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));
                            var MonthlyTrans = MonthlyData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));
                            foreach (var D in TransActionData)
                            {
                                CreditTransAction += D.CreditTransAction;
                                DebitTransAction += D.DebitTransAction;
                            }
                            foreach (var Balance in BalanceData)
                            {
                                CreditBalance += Balance.CreditBalance;
                                DebitBalance += Balance.DebitBalance;
                            }
                            foreach (var D in MonthlyTrans)
                            {
                                switch (D.Month)
                                {
                                    case 1:
                                        January = January + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 2:
                                        February = February + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 3:
                                        March = March + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 4:
                                        April = April + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 5:
                                        May = May + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 6:
                                        June = June + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 7:
                                        July = July + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 8:
                                        August = August + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 9:
                                        September = September + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 10:
                                        October = October + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 11:
                                        November = November + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 12:
                                        December = December + (D.DebitTransAction - D.CreditTransAction);
                                        break;

                                }

                            }



                            TotalDebit = DebitTransAction + DebitBalance;
                            TOTCredit = CreditTransAction + CreditBalance;

                            if (TotalDebit > TOTCredit)
                            {
                                NetDebit = TotalDebit - TOTCredit;
                                NetTot = NetDebit;
                            }
                            if (TotalDebit < TOTCredit)
                            {
                                NetCredit = TOTCredit - TotalDebit;
                                NetTot = NetCredit;


                            }
                            NetTot = TotalDebit - TOTCredit;
                            OpenBalance = DebitBalance - CreditBalance;

                            TrialBalanceVM trialBalance = new TrialBalanceVM();
                            trialBalance.AccountNumber = Acc.AccountNumber;
                            trialBalance.Name = Acc.ArabicName;

                            trialBalance.CreditBalance = CreditBalance;
                            trialBalance.CreditTransAction = CreditTransAction;
                            trialBalance.DebitBalance = DebitBalance;
                            trialBalance.DebitTransAction = DebitTransAction;
                            trialBalance.NetCredit = NetCredit;
                            trialBalance.NetDebit = NetDebit;

                            trialBalance.January = January;
                            trialBalance.February = February;
                            trialBalance.March = March;
                            trialBalance.April = April;
                            trialBalance.May = May;
                            trialBalance.June = June;
                            trialBalance.July = July;
                            trialBalance.August = August;
                            trialBalance.September = September;
                            trialBalance.October = October;
                            trialBalance.November = November;
                            trialBalance.December = December;

                            trialBalance.OpenBalance = OpenBalance;
                            trialBalance.NetTot = NetTot;
                            BudgetData = BudgetData.Where(m => m.AccountNumber != null).ToList();
                            var CurrBudget = BudgetData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.BudgetType == 1).ToList();
                            if (CurrBudget != null)
                            {
                                foreach (var D in CurrBudget)
                                {
                                    switch (Obj.Month)
                                    {
                                        case 1:
                                            Expected = Expected + D.January;
                                            break;
                                        case 2:
                                            Expected = Expected + D.February;
                                            break;
                                        case 3:
                                            Expected = Expected + D.March;
                                            break;
                                        case 4:
                                            Expected = Expected + D.April;
                                            break;
                                        case 5:
                                            Expected = Expected + D.May;
                                            break;
                                        case 6:
                                            Expected = Expected + D.June;
                                            break;
                                        case 7:
                                            Expected = Expected + D.July;
                                            break;
                                        case 8:
                                            Expected = Expected + D.August;
                                            break;
                                        case 9:
                                            Expected = Expected + D.September;
                                            break;
                                        case 10:
                                            Expected = Expected + D.October;
                                            break;
                                        case 11:
                                            Expected = Expected + D.November;
                                            break;
                                        case 12:
                                            Expected = Expected + D.December;
                                            break;

                                    }

                                }
                            }

                            MonthTransaction = NetTot;
                            ChangeVaule = NetTot - Expected;
                            ChangePrec = 0;
                            if (Expected != 0)
                            {
                                if (MonthTransaction != 0)
                                    ChangePrec = Math.Round((ChangeVaule / MonthTransaction) * 100, 3);
                            }



                            trialBalance.Expected = Expected;
                            trialBalance.MonthTransaction = MonthTransaction;
                            trialBalance.ChangeVaule = ChangeVaule;
                            trialBalance.ChangePrec = ChangePrec;

                            if ((AccountData.FirstOrDefault(m => m.AccountFather == Acc.AccountNumber) != null) && (Acc.AccountLevel < Obj.AccountLevelDropVMID))
                            {
                                trialBalance.IsMainAccount = 1;
                                trialBalance.MainAccount = "{*}";



                                trialBalance.nCreditBalance = 0;
                                trialBalance.nCreditTransAction = 0;
                                trialBalance.nDebitBalance = 0;
                                trialBalance.nDebitTransAction = 0;
                                trialBalance.nNetCredit = 0;
                                trialBalance.nNetDebit = 0;

                            }
                            else
                            {
                                trialBalance.IsMainAccount = 0;
                                trialBalance.MainAccount = "";
                                trialBalance.nCreditBalance = CreditBalance;
                                trialBalance.nCreditTransAction = CreditTransAction;
                                trialBalance.nDebitBalance = DebitBalance;
                                trialBalance.nDebitTransAction = DebitTransAction;
                                trialBalance.nNetCredit = NetCredit;
                                trialBalance.nNetDebit = NetDebit;

                                trialBalance.nJanuary = January;
                                trialBalance.nFebruary = February;
                                trialBalance.nMarch = March;
                                trialBalance.nApril = April;
                                trialBalance.nMay = May;
                                trialBalance.nJune = June;
                                trialBalance.nJuly = July;
                                trialBalance.nAugust = August;
                                trialBalance.nSeptember = September;
                                trialBalance.nOctober = October;
                                trialBalance.nNovember = November;
                                trialBalance.nDecember = December;

                                trialBalance.nNetTot = NetTot;

                                trialBalance.nOpenBalance = OpenBalance;

                                trialBalance.nMonthTransaction = MonthTransaction;
                                trialBalance.nExpected = Expected;
                                trialBalance.nChangeVaule = ChangeVaule;
                                trialBalance.nChangePrec = ChangePrec;


                            }
                            if (!Obj.ShowEstimatedZero)
                            {
                                if ((trialBalance.Expected) != 0)
                                {
                                    TrialBalanceVMList.Add(trialBalance);
                                }
                            }
                            else
                            {
                                //if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                                //{
                                TrialBalanceVMList.Add(trialBalance);
                                //}


                            }




                        }






                    }
                    if (!Obj.ShowMainAccountValue)
                    {
                        foreach (var trialBalance in TrialBalanceVMList.Where(m => m.IsMainAccount == 1))
                        {
                            if (trialBalance.IsMainAccount == 1)
                            {
                                trialBalance.Expected = 0;
                                trialBalance.MonthTransaction = 0;
                                trialBalance.ChangeVaule = 0;
                                trialBalance.ChangePrec = 0;
                                trialBalance.CreditBalance = 0;
                                trialBalance.CreditTransAction = 0;
                                trialBalance.DebitBalance = 0;
                                trialBalance.DebitTransAction = 0;
                                trialBalance.NetCredit = 0;
                                trialBalance.NetDebit = 0;
                            }

                        }

                    }



                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("TrialBalanceVM");
                    table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                    ds.Tables.Add(table1);

                    var report = new EstimatedBudgetForAccountReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/EstimatedBudgetForAccountReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    //report.LbFromDate.Text = Obj.FromCollectionDate.ToString("dd/MM/yyyy");
                    //report.LbTODate.Text = Obj.ToCollectionDate.ToString("dd/MM/yyyy");

                    report.DataSource = ds;
                    report.DataMember = "TrialBalanceVM";



                    report.LevelName.Text = String.Format("{0} {1}", Resources.Resource.Level, Obj.AccountLevelDropVMID.ToString());


                if (Obj.Month != 0)
                {

                    if (Obj.Month == 1)
                        DropList += Resources.Resource.January;
                    else
                    if (Obj.Month == 2)
                        DropList += Resources.Resource.February;

                    else
                    if (Obj.Month == 3)
                        DropList += Resources.Resource.March;
                    else
                    if (Obj.Month == 4)
                        DropList += Resources.Resource.April;
                    else
                    if (Obj.Month == 5)
                        DropList += Resources.Resource.May;
                    else
                    if (Obj.Month == 6)

                        DropList += Resources.Resource.June;
                    else
                    if (Obj.Month == 7)
                        DropList += Resources.Resource.July;

                    else
                    if (Obj.Month == 8)
                        DropList += Resources.Resource.August;

                    else
                    if (Obj.Month == 9)
                        DropList += Resources.Resource.September;

                    else
                    if (Obj.Month == 10)
                        DropList += Resources.Resource.October;
                    else
                    if (Obj.Month == 11)
                        DropList += Resources.Resource.November;
                    else
                    if (Obj.Month == 12)
                        DropList += Resources.Resource.December;




                    report.Month.Text = Resources.Resource.Month + DropList;


                }
                    
                    report.CreateDocument();




                    return View("ReportPDF", report);



                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                    EstimatedBudgetForAccountReport report = new EstimatedBudgetForAccountReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/EstimatedBudgetForAccountReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("TrialBalanceVM");
                    table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "TrialBalanceVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);

                }


            }



            public ActionResult GetEstimatedBudgetForAccountYear(int id, int id2, int id3)
            {
                try
                {

                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    AccountLevelRepVM Obj = new AccountLevelRepVM();
                    Obj.AccountLevelDropVMID = id;



                    if (id2 == 1)
                    {
                        Obj.ShowMainAccountValue = true;
                    }

                    if (id3 == 1)
                    {
                        Obj.ShowEstimatedZero = true;
                    }


                    var AccountData = _unitOfWork.NativeSql.GetChartOfAccountByLevel(UserInfo.fCompanyId);


                    int CurrYear = UserInfo.CurrYear;
                    Obj.Detail = true;
                    var Date = "01/01/" + CurrYear;
                    var OpenDate = "31/12/" + (CurrYear - 1).ToString();
                    Obj.FromDate = DateTime.Parse("01/01/" + CurrYear);
                    Obj.ToDate = DateTime.Parse("31/12/" + CurrYear);



                    IEnumerable<TrialBalanceVM> TotData = new List<TrialBalanceVM>();
                    if (Obj.Partofthenumber)
                    {
                        if (Obj.CostSearchType == 1)
                        {
                            Obj.CostCenterNumber = Obj.CostCenterNumber + "%";
                        }
                        else if (Obj.CostSearchType == 2)
                        {
                            Obj.CostCenterNumber = "%" + Obj.CostCenterNumber;
                        }
                        else if (Obj.CostSearchType == 3)
                        {
                            Obj.CostCenterNumber = "%" + Obj.CostCenterNumber + "%";

                        }
                    }
                    var TranData = _unitOfWork.NativeSql.GetTransactionForTrial(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                    var MonthlyData = _unitOfWork.NativeSql.GetTransactionForTrialYearly(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                    var BudgetData = _unitOfWork.EstimatedBudget.GetAllEstimatedBudgets(UserInfo.fCompanyId, CurrYear);

                    //  if (DateTime.Parse(Date) != Obj.FromDate)
                    //     TotData = _unitOfWork.NativeSql.GetTotCreditDebitForTrial(UserInfo.fCompanyId, DateTime.Parse(Date), Obj.FromDate);


                    //----------------Get Open-------------//
                    IEnumerable<TrialBalanceVM> TotDataOpen = new List<TrialBalanceVM>();
                    TotDataOpen = _unitOfWork.NativeSql.GetTotCreditDebitForTrialOpen(UserInfo.fCompanyId, DateTime.Parse(OpenDate), DateTime.Parse(OpenDate));
                    foreach (var D in TotDataOpen)
                    {
                        TotData = TotData.Append(D);

                    }
                    //------------------------------------//


                    double TotalDebit = 0;
                    double TOTCredit = 0;
                    double NetCredit = 0;
                    double NetDebit = 0;
                    double CreditBalance = 0;
                    double DebitBalance = 0;
                    double CreditTransAction = 0;
                    double DebitTransAction = 0;

                    double January = 0;
                    double February = 0;
                    double March = 0;
                    double April = 0;
                    double May = 0;
                    double June = 0;
                    double July = 0;
                    double August = 0;
                    double September = 0;
                    double October = 0;
                    double November = 0;
                    double December = 0;

                    double NetTot = 0;
                    double OpenBalance = 0;

                    double MonthTransaction1 = 0;
                    double Expected1 = 0;
                    double ChangeVaule1 = 0;
                    double ChangePrec1 = 0;

                    double MonthTransaction2 = 0;
                    double Expected2 = 0;
                    double ChangeVaule2 = 0;
                    double ChangePrec2 = 0;


                    double MonthTransaction3 = 0;
                    double Expected3 = 0;
                    double ChangeVaule3 = 0;
                    double ChangePrec3 = 0;


                    double MonthTransaction4 = 0;
                    double Expected4 = 0;
                    double ChangeVaule4 = 0;
                    double ChangePrec4 = 0;


                    double MonthTransaction5 = 0;
                    double Expected5 = 0;
                    double ChangeVaule5 = 0;
                    double ChangePrec5 = 0;

                    double MonthTransaction6 = 0;
                    double Expected6 = 0;
                    double ChangeVaule6 = 0;
                    double ChangePrec6 = 0;


                    double MonthTransaction7 = 0;
                    double Expected7 = 0;
                    double ChangeVaule7 = 0;
                    double ChangePrec7 = 0;


                    double MonthTransaction8 = 0;
                    double Expected8 = 0;
                    double ChangeVaule8 = 0;
                    double ChangePrec8 = 0;


                    double MonthTransaction9 = 0;
                    double Expected9 = 0;
                    double ChangeVaule9 = 0;
                    double ChangePrec9 = 0;


                    double MonthTransaction10 = 0;
                    double Expected10 = 0;
                    double ChangeVaule10 = 0;
                    double ChangePrec10 = 0;





                    double MonthTransaction11 = 0;
                    double Expected11 = 0;
                    double ChangeVaule11 = 0;
                    double ChangePrec11 = 0;


                    double MonthTransaction12 = 0;
                    double Expected12 = 0;
                    double ChangeVaule12 = 0;
                    double ChangePrec12 = 0;

                    List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                    IEnumerable<ChartOfAccount> Accounts = new List<ChartOfAccount>();

                    IEnumerable<ChartOfAccount> LessMainAccount = new List<ChartOfAccount>();




                    if ((Obj.AccountLevelDropVMID > 0) && (Obj.Detail))
                    {


                        Accounts = AccountData.Where(m => m.AccountLevel <= Obj.AccountLevelDropVMID).ToList().OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                        foreach (var Acc in Accounts)//Each Main Account
                        {
                            TotalDebit = 0;
                            TOTCredit = 0;
                            NetCredit = 0;
                            NetDebit = 0;
                            CreditBalance = 0;
                            DebitBalance = 0;
                            CreditTransAction = 0;
                            DebitTransAction = 0;

                            January = 0;
                            February = 0;
                            March = 0;
                            April = 0;
                            May = 0;
                            June = 0;
                            July = 0;
                            August = 0;
                            September = 0;
                            October = 0;
                            November = 0;
                            December = 0;

                            NetTot = 0;

                            MonthTransaction1 = 0;
                            Expected1 = 0;
                            ChangeVaule1 = 0;
                            ChangePrec1 = 0;

                            MonthTransaction2 = 0;
                            Expected2 = 0;
                            ChangeVaule2 = 0;
                            ChangePrec2 = 0;


                            MonthTransaction3 = 0;
                            Expected3 = 0;
                            ChangeVaule3 = 0;
                            ChangePrec3 = 0;


                            MonthTransaction4 = 0;
                            Expected4 = 0;
                            ChangeVaule4 = 0;
                            ChangePrec4 = 0;


                            MonthTransaction5 = 0;
                            Expected5 = 0;
                            ChangeVaule5 = 0;
                            ChangePrec5 = 0;

                            MonthTransaction6 = 0;
                            Expected6 = 0;
                            ChangeVaule6 = 0;
                            ChangePrec6 = 0;


                            MonthTransaction7 = 0;
                            Expected7 = 0;
                            ChangeVaule7 = 0;
                            ChangePrec7 = 0;


                            MonthTransaction8 = 0;
                            Expected8 = 0;
                            ChangeVaule8 = 0;
                            ChangePrec8 = 0;


                            MonthTransaction9 = 0;
                            Expected9 = 0;
                            ChangeVaule9 = 0;
                            ChangePrec9 = 0;


                            MonthTransaction10 = 0;
                            Expected10 = 0;
                            ChangeVaule10 = 0;
                            ChangePrec10 = 0;



                            MonthTransaction10 = 0;
                            Expected10 = 0;
                            ChangeVaule10 = 0;
                            ChangePrec10 = 0;


                            MonthTransaction11 = 0;
                            Expected11 = 0;
                            ChangeVaule11 = 0;
                            ChangePrec11 = 0;


                            MonthTransaction12 = 0;
                            Expected12 = 0;
                            ChangeVaule12 = 0;
                            ChangePrec12 = 0;

                            var MainAccount = AccountData.FirstOrDefault(m => m.AccountNumber == Acc.AccountNumber);
                            var MainChild = AccountData.Where(m => m.AccountFather == Acc.AccountNumber).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();

                            var TransActionData = TranData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));
                            var BalanceData = TotData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));
                            var MonthlyTrans = MonthlyData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));
                            foreach (var D in TransActionData)
                            {
                                CreditTransAction += D.CreditTransAction;
                                DebitTransAction += D.DebitTransAction;
                            }
                            foreach (var Balance in BalanceData)
                            {
                                CreditBalance += Balance.CreditBalance;
                                DebitBalance += Balance.DebitBalance;
                            }
                            foreach (var D in MonthlyTrans)
                            {
                                switch (D.Month)
                                {
                                    case 1:
                                        January = January + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 2:
                                        February = February + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 3:
                                        March = March + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 4:
                                        April = April + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 5:
                                        May = May + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 6:
                                        June = June + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 7:
                                        July = July + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 8:
                                        August = August + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 9:
                                        September = September + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 10:
                                        October = October + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 11:
                                        November = November + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 12:
                                        December = December + (D.DebitTransAction - D.CreditTransAction);
                                        break;

                                }

                            }



                            TotalDebit = DebitTransAction + DebitBalance;
                            TOTCredit = CreditTransAction + CreditBalance;

                            if (TotalDebit > TOTCredit)
                            {
                                NetDebit = TotalDebit - TOTCredit;
                                NetTot = NetDebit;
                            }
                            if (TotalDebit < TOTCredit)
                            {
                                NetCredit = TOTCredit - TotalDebit;
                                NetTot = NetCredit;


                            }
                            NetTot = TotalDebit - TOTCredit;
                            OpenBalance = DebitBalance - CreditBalance;

                            TrialBalanceVM trialBalance = new TrialBalanceVM();
                            trialBalance.AccountNumber = Acc.AccountNumber;
                            trialBalance.Name = Acc.ArabicName;

                            trialBalance.CreditBalance = CreditBalance;
                            trialBalance.CreditTransAction = CreditTransAction;
                            trialBalance.DebitBalance = DebitBalance;
                            trialBalance.DebitTransAction = DebitTransAction;
                            trialBalance.NetCredit = NetCredit;
                            trialBalance.NetDebit = NetDebit;

                            trialBalance.January = January;
                            trialBalance.February = February;
                            trialBalance.March = March;
                            trialBalance.April = April;
                            trialBalance.May = May;
                            trialBalance.June = June;
                            trialBalance.July = July;
                            trialBalance.August = August;
                            trialBalance.September = September;
                            trialBalance.October = October;
                            trialBalance.November = November;
                            trialBalance.December = December;

                            trialBalance.OpenBalance = OpenBalance;
                            trialBalance.NetTot = NetTot;
                            BudgetData = BudgetData.Where(m => m.AccountNumber != null).ToList();
                            var CurrBudget = BudgetData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.BudgetType == 1);
                            if (CurrBudget.Count() > 0)
                            {
                                foreach (var D in CurrBudget)
                                {

                                    Expected1 = Expected1 + D.January;

                                    Expected2 = Expected2 + D.February;

                                    Expected3 = Expected3 + D.March;

                                    Expected4 = Expected4 + D.April;

                                    Expected5 = Expected5 + D.May;

                                    Expected6 = Expected6 + D.June;

                                    Expected7 = Expected7 + D.July;

                                    Expected8 = Expected8 + D.August;

                                    Expected9 = Expected9 + D.September;

                                    Expected10 = Expected10 + D.October;


                                    Expected11 = Expected11 + D.November;

                                    Expected12 = Expected12 + D.December;


                                }


                            }

                            MonthTransaction1 = January;
                            ChangeVaule1 = January - Expected1;
                            ChangePrec1 = 0;
                            if (Expected1 != 0)
                            {
                                ChangePrec1 = 0;// Math.Round((ChangeVaule1 / MonthTransaction1) * 100, 3);
                            }

                            MonthTransaction2 = February;
                            ChangeVaule2 = February - Expected2;
                            ChangePrec2 = 0;
                            if (Expected2 != 0)
                            {
                                ChangePrec2 = 0;// Math.Round((ChangeVaule2 / MonthTransaction2) * 100, 3);
                            }


                            MonthTransaction3 = March;
                            ChangeVaule3 = March - Expected3;
                            ChangePrec3 = 0;
                            if (Expected3 != 0)
                            {
                                ChangePrec3 = 0;//  Math.Round((ChangeVaule3 / MonthTransaction3) * 100, 3);
                            }

                            MonthTransaction4 = April;
                            ChangeVaule4 = April - Expected4;
                            ChangePrec4 = 0;
                            if (Expected4 != 0)
                            {
                                ChangePrec4 = 0;// Math.Round((ChangeVaule4 / MonthTransaction4) * 100, 3);
                            }

                            MonthTransaction5 = May;
                            ChangeVaule5 = (May) - Expected5;
                            ChangePrec5 = 0;
                            if (Expected5 != 0)
                            {
                                ChangePrec5 = 0;// Math.Round((ChangeVaule5 / MonthTransaction5) * 100, 3);
                            }

                            MonthTransaction6 = (June);
                            ChangeVaule6 = (June) - Expected6;
                            ChangePrec6 = 0;
                            if (Expected6 != 0)
                            {
                                ChangePrec6 = 0;//  Math.Round((ChangeVaule6 / MonthTransaction6) * 100, 3);
                            }

                            MonthTransaction7 = (July);
                            ChangeVaule7 = (July) - Expected7;
                            ChangePrec7 = 0;
                            if (Expected7 != 0)
                            {
                                ChangePrec7 = 0;//  Math.Round((ChangeVaule7 / MonthTransaction7) * 100, 3);
                            }



                            MonthTransaction8 = (August);
                            ChangeVaule8 = (August) - Expected8;
                            ChangePrec8 = 0;
                            if (Expected8 != 0)
                            {
                                ChangePrec8 = 0;//  Math.Round((ChangeVaule8 / MonthTransaction8) * 100, 3);
                            }


                            MonthTransaction9 = (September);
                            ChangeVaule9 = (September) - Expected9;
                            ChangePrec9 = 0;
                            if (Expected9 != 0)
                            {
                                ChangePrec9 = 0;//  Math.Round((ChangeVaule9 / MonthTransaction9) * 100, 3);
                            }


                            MonthTransaction10 = (October);
                            ChangeVaule10 = (October) - Expected10;
                            ChangePrec10 = 0;
                            if (Expected10 != 0)
                            {
                                ChangePrec10 = 0;//  Math.Round((ChangeVaule10 / MonthTransaction10) * 100, 3);
                            }


                            MonthTransaction11 = (November);
                            ChangeVaule11 = (November) - Expected11;
                            ChangePrec11 = 0;
                            if (Expected11 != 0)
                            {
                                ChangePrec11 = 0;// Math.Round((ChangeVaule11 / MonthTransaction11) * 100, 3);
                            }


                            MonthTransaction12 = (December);
                            ChangeVaule12 = (December) - Expected12;
                            ChangePrec12 = 0;
                            if (Expected12 != 0)
                            {
                                ChangePrec12 = 0;//  Math.Round((ChangeVaule12 / MonthTransaction12) * 100, 3);
                            }


                            trialBalance.Expected1 = Expected1;
                            trialBalance.MonthTransaction1 = MonthTransaction1;
                            trialBalance.ChangeVaule1 = ChangeVaule1;
                            trialBalance.ChangePrec1 = ChangePrec1;

                            trialBalance.Expected2 = Expected2;
                            trialBalance.MonthTransaction2 = MonthTransaction2;
                            trialBalance.ChangeVaule2 = ChangeVaule2;
                            trialBalance.ChangePrec2 = ChangePrec2;


                            trialBalance.Expected3 = Expected3;
                            trialBalance.MonthTransaction3 = MonthTransaction3;
                            trialBalance.ChangeVaule3 = ChangeVaule3;
                            trialBalance.ChangePrec3 = ChangePrec3;


                            trialBalance.Expected4 = Expected4;
                            trialBalance.MonthTransaction4 = MonthTransaction4;
                            trialBalance.ChangeVaule4 = ChangeVaule4;
                            trialBalance.ChangePrec4 = ChangePrec4;


                            trialBalance.Expected5 = Expected5;
                            trialBalance.MonthTransaction5 = MonthTransaction5;
                            trialBalance.ChangeVaule5 = ChangeVaule5;
                            trialBalance.ChangePrec5 = ChangePrec5;


                            trialBalance.Expected6 = Expected6;
                            trialBalance.MonthTransaction6 = MonthTransaction6;
                            trialBalance.ChangeVaule6 = ChangeVaule6;
                            trialBalance.ChangePrec6 = ChangePrec6;


                            trialBalance.Expected7 = Expected7;
                            trialBalance.MonthTransaction7 = MonthTransaction7;
                            trialBalance.ChangeVaule7 = ChangeVaule7;
                            trialBalance.ChangePrec7 = ChangePrec7;


                            trialBalance.Expected8 = Expected8;
                            trialBalance.MonthTransaction8 = MonthTransaction8;
                            trialBalance.ChangeVaule8 = ChangeVaule8;
                            trialBalance.ChangePrec8 = ChangePrec8;


                            trialBalance.Expected9 = Expected9;
                            trialBalance.MonthTransaction9 = MonthTransaction9;
                            trialBalance.ChangeVaule9 = ChangeVaule9;
                            trialBalance.ChangePrec9 = ChangePrec9;


                            trialBalance.Expected10 = Expected10;
                            trialBalance.MonthTransaction10 = MonthTransaction10;
                            trialBalance.ChangeVaule10 = ChangeVaule10;
                            trialBalance.ChangePrec10 = ChangePrec10;


                            trialBalance.Expected11 = Expected11;
                            trialBalance.MonthTransaction11 = MonthTransaction11;
                            trialBalance.ChangeVaule11 = ChangeVaule11;
                            trialBalance.ChangePrec11 = ChangePrec11;


                            trialBalance.Expected12 = Expected12;
                            trialBalance.MonthTransaction12 = MonthTransaction12;
                            trialBalance.ChangeVaule12 = ChangeVaule12;
                            trialBalance.ChangePrec12 = ChangePrec12;


                            trialBalance.Expected1 = Expected1;
                            trialBalance.MonthTransaction1 = MonthTransaction1;
                            trialBalance.ChangeVaule1 = ChangeVaule1;
                            trialBalance.ChangePrec1 = ChangePrec1;



                            trialBalance.Expected1 = Expected1;
                            trialBalance.MonthTransaction1 = MonthTransaction1;
                            trialBalance.ChangeVaule1 = ChangeVaule1;
                            trialBalance.ChangePrec1 = ChangePrec1;


                            trialBalance.Expected1 = Expected1;
                            trialBalance.MonthTransaction1 = MonthTransaction1;
                            trialBalance.ChangeVaule1 = ChangeVaule1;
                            trialBalance.ChangePrec1 = ChangePrec1;

                            trialBalance.ExpectedAnnually = (trialBalance.Expected1 + trialBalance.Expected2 + trialBalance.Expected3 + trialBalance.Expected4 + trialBalance.Expected5 + trialBalance.Expected5 +
                                    trialBalance.Expected7 + trialBalance.Expected8 + trialBalance.Expected9 + trialBalance.Expected10 + trialBalance.Expected11 + trialBalance.Expected12);

                            trialBalance.ActualTotal = Math.Round(NetTot, 4);
                            trialBalance.RemainingExpected = Math.Round((trialBalance.ExpectedAnnually - Math.Abs(NetTot)), 4);
                            trialBalance.RemainingRatio = 0;
                            trialBalance.ExpectedAnnually = Math.Round(trialBalance.ExpectedAnnually, 4);
                            if ((AccountData.FirstOrDefault(m => m.AccountFather == Acc.AccountNumber) != null) && (Acc.AccountLevel < Obj.AccountLevelDropVMID))
                            {
                                trialBalance.IsMainAccount = 1;
                                trialBalance.MainAccount = "{*}";



                                trialBalance.nCreditBalance = 0;
                                trialBalance.nCreditTransAction = 0;
                                trialBalance.nDebitBalance = 0;
                                trialBalance.nDebitTransAction = 0;
                                trialBalance.nNetCredit = 0;
                                trialBalance.nNetDebit = 0;

                            }
                            else
                            {
                                trialBalance.IsMainAccount = 0;
                                trialBalance.MainAccount = "";

                                trialBalance.nExpectedAnnually = trialBalance.ExpectedAnnually;
                                trialBalance.nActualTotal = trialBalance.ActualTotal;
                                trialBalance.nRemainingExpected = trialBalance.RemainingExpected;
                                trialBalance.nRemainingRatio = trialBalance.RemainingRatio;

                                trialBalance.nCreditBalance = CreditBalance;
                                trialBalance.nCreditTransAction = CreditTransAction;
                                trialBalance.nDebitBalance = DebitBalance;
                                trialBalance.nDebitTransAction = DebitTransAction;
                                trialBalance.nNetCredit = NetCredit;
                                trialBalance.nNetDebit = NetDebit;

                                trialBalance.nJanuary = January;
                                trialBalance.nFebruary = February;
                                trialBalance.nMarch = March;
                                trialBalance.nApril = April;
                                trialBalance.nMay = May;
                                trialBalance.nJune = June;
                                trialBalance.nJuly = July;
                                trialBalance.nAugust = August;
                                trialBalance.nSeptember = September;
                                trialBalance.nOctober = October;
                                trialBalance.nNovember = November;
                                trialBalance.nDecember = December;




                            }
                            if (!Obj.ShowEstimatedZero)
                            {
                                if ((trialBalance.Expected1 + trialBalance.Expected2 + trialBalance.Expected3 + trialBalance.Expected4 + trialBalance.Expected5 + trialBalance.Expected5 +
                                    trialBalance.Expected7 + trialBalance.Expected8 + trialBalance.Expected9 + trialBalance.Expected10 + trialBalance.Expected11 + trialBalance.Expected12) != 0)
                                {
                                    TrialBalanceVMList.Add(trialBalance);
                                }
                            }
                            else
                            {
                                //if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                                //{
                                TrialBalanceVMList.Add(trialBalance);
                                //}


                            }




                        }






                    }
                    if (!Obj.ShowMainAccountValue)
                    {
                        foreach (var trialBalance in TrialBalanceVMList.Where(m => m.IsMainAccount == 1))
                        {
                            if (trialBalance.IsMainAccount == 1)
                            {
                                trialBalance.Expected = 0;
                                trialBalance.MonthTransaction = 0;
                                trialBalance.ChangeVaule = 0;
                                trialBalance.ChangePrec = 0;
                                trialBalance.CreditBalance = 0;
                                trialBalance.CreditTransAction = 0;
                                trialBalance.DebitBalance = 0;
                                trialBalance.DebitTransAction = 0;
                                trialBalance.NetCredit = 0;
                                trialBalance.NetDebit = 0;



                                trialBalance.ActualTotal = 0;
                                trialBalance.RemainingExpected = 0;
                                trialBalance.RemainingRatio = 0;
                                trialBalance.ExpectedAnnually = 0;

                                trialBalance.Expected = 0;
                                trialBalance.MonthTransaction = 0;
                                trialBalance.ChangeVaule = 0;
                                trialBalance.ChangePrec = 0;
                                trialBalance.CreditBalance = 0;
                                trialBalance.CreditTransAction = 0;
                                trialBalance.DebitBalance = 0;
                                trialBalance.DebitTransAction = 0;
                                trialBalance.NetCredit = 0;
                                trialBalance.NetDebit = 0;


                                trialBalance.Expected1 = 0;
                                trialBalance.MonthTransaction1 = 0;
                                trialBalance.ChangeVaule1 = 0;
                                trialBalance.ChangePrec1 = 0;

                                trialBalance.Expected2 = 0;
                                trialBalance.MonthTransaction2 = 0;
                                trialBalance.ChangeVaule2 = 0;
                                trialBalance.ChangePrec2 = 0;


                                trialBalance.Expected3 = 0;
                                trialBalance.MonthTransaction3 = 0;
                                trialBalance.ChangeVaule3 = 0;
                                trialBalance.ChangePrec3 = 0;


                                trialBalance.Expected4 = 0;
                                trialBalance.MonthTransaction4 = 0;
                                trialBalance.ChangeVaule4 = 0;
                                trialBalance.ChangePrec4 = 0;


                                trialBalance.Expected5 = 0;
                                trialBalance.MonthTransaction5 = 0;
                                trialBalance.ChangeVaule5 = 0;
                                trialBalance.ChangePrec5 = 0;


                                trialBalance.Expected6 = 0;
                                trialBalance.MonthTransaction6 = 0;
                                trialBalance.ChangeVaule6 = 0;
                                trialBalance.ChangePrec6 = 0;


                                trialBalance.Expected7 = 0;
                                trialBalance.MonthTransaction7 = 0;
                                trialBalance.ChangeVaule7 = 0;
                                trialBalance.ChangePrec7 = 0;


                                trialBalance.Expected8 = 0;
                                trialBalance.MonthTransaction8 = 0;
                                trialBalance.ChangeVaule8 = 0;
                                trialBalance.ChangePrec8 = 0;


                                trialBalance.Expected9 = 0;
                                trialBalance.MonthTransaction9 = 0;
                                trialBalance.ChangeVaule9 = 0;
                                trialBalance.ChangePrec9 = 0;


                                trialBalance.Expected10 = 0;
                                trialBalance.MonthTransaction10 = 0;
                                trialBalance.ChangeVaule10 = 0;
                                trialBalance.ChangePrec10 = 0;


                                trialBalance.Expected11 = 0;
                                trialBalance.MonthTransaction11 = 0;
                                trialBalance.ChangeVaule11 = 0;
                                trialBalance.ChangePrec11 = 0;


                                trialBalance.Expected12 = 0;
                                trialBalance.MonthTransaction12 = 0;
                                trialBalance.ChangeVaule12 = 0;
                                trialBalance.ChangePrec12 = 0;


                                trialBalance.January = 0;
                                trialBalance.February = 0;
                                trialBalance.March = 0;
                                trialBalance.April = 0;
                                trialBalance.May = 0;
                                trialBalance.June = 0;
                                trialBalance.July = 0;
                                trialBalance.August = 0;
                                trialBalance.September = 0;
                                trialBalance.October = 0;
                                trialBalance.November = 0;
                                trialBalance.December = 0;

                                trialBalance.nActualTotal = 0;
                                trialBalance.nRemainingExpected = 0;
                                trialBalance.nRemainingRatio = 0;
                                trialBalance.nExpectedAnnually = 0;

                                trialBalance.nExpected = 0;
                                trialBalance.nMonthTransaction = 0;
                                trialBalance.nChangeVaule = 0;
                                trialBalance.nChangePrec = 0;
                                trialBalance.nCreditBalance = 0;
                                trialBalance.nCreditTransAction = 0;
                                trialBalance.nDebitBalance = 0;
                                trialBalance.nDebitTransAction = 0;
                                trialBalance.nNetCredit = 0;
                                trialBalance.nNetDebit = 0;


                                trialBalance.nExpected1 = 0;
                                trialBalance.nMonthTransaction1 = 0;
                                trialBalance.nChangeVaule1 = 0;
                                trialBalance.nChangePrec1 = 0;

                                trialBalance.nExpected2 = 0;
                                trialBalance.nMonthTransaction2 = 0;
                                trialBalance.nChangeVaule2 = 0;
                                trialBalance.nChangePrec2 = 0;


                                trialBalance.nExpected3 = 0;
                                trialBalance.nMonthTransaction3 = 0;
                                trialBalance.nChangeVaule3 = 0;
                                trialBalance.nChangePrec3 = 0;


                                trialBalance.nExpected4 = 0;
                                trialBalance.nMonthTransaction4 = 0;
                                trialBalance.nChangeVaule4 = 0;
                                trialBalance.nChangePrec4 = 0;


                                trialBalance.nExpected5 = 0;
                                trialBalance.nMonthTransaction5 = 0;
                                trialBalance.nChangeVaule5 = 0;
                                trialBalance.nChangePrec5 = 0;


                                trialBalance.nExpected6 = 0;
                                trialBalance.nMonthTransaction6 = 0;
                                trialBalance.nChangeVaule6 = 0;
                                trialBalance.nChangePrec6 = 0;


                                trialBalance.nExpected7 = 0;
                                trialBalance.nMonthTransaction7 = 0;
                                trialBalance.nChangeVaule7 = 0;
                                trialBalance.nChangePrec7 = 0;


                                trialBalance.nExpected8 = 0;
                                trialBalance.nMonthTransaction8 = 0;
                                trialBalance.nChangeVaule8 = 0;
                                trialBalance.nChangePrec8 = 0;


                                trialBalance.nExpected9 = 0;
                                trialBalance.nMonthTransaction9 = 0;
                                trialBalance.nChangeVaule9 = 0;
                                trialBalance.nChangePrec9 = 0;


                                trialBalance.nExpected10 = 0;
                                trialBalance.nMonthTransaction10 = 0;
                                trialBalance.nChangeVaule10 = 0;
                                trialBalance.nChangePrec10 = 0;


                                trialBalance.nExpected11 = 0;
                                trialBalance.nMonthTransaction11 = 0;
                                trialBalance.nChangeVaule11 = 0;
                                trialBalance.nChangePrec11 = 0;


                                trialBalance.nExpected12 = 0;
                                trialBalance.nMonthTransaction12 = 0;
                                trialBalance.nChangeVaule12 = 0;
                                trialBalance.nChangePrec12 = 0;


                                trialBalance.nJanuary = 0;
                                trialBalance.nFebruary = 0;
                                trialBalance.nMarch = 0;
                                trialBalance.nApril = 0;
                                trialBalance.nMay = 0;
                                trialBalance.nJune = 0;
                                trialBalance.nJuly = 0;
                                trialBalance.nAugust = 0;
                                trialBalance.nSeptember = 0;
                                trialBalance.nOctober = 0;
                                trialBalance.nNovember = 0;
                                trialBalance.nDecember = 0;




                            }

                        }

                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("TrialBalanceVM");
                    table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                    ds.Tables.Add(table1);

                    var report = new EstimateBudgetForAccYearReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/EstimateBudgetForAccYearReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    //report.LbFromDate.Text = Obj.FromCollectionDate.ToString("dd/MM/yyyy");
                    //report.LbTODate.Text = Obj.ToCollectionDate.ToString("dd/MM/yyyy");

                    report.DataSource = ds;
                    report.DataMember = "TrialBalanceVM";



                    report.LevelName.Text = String.Format("{0} {1}", Resources.Resource.Level, Obj.AccountLevelDropVMID.ToString());


                    //report.PrepaidExpenseAccountNumber.Text = Obj.RevenueAccountNumber;
                    //report.PrepaidExpenseAccountName.Text = Obj.RevenueAccountName;


                    ////report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();




                    return View("ReportPDF", report);



                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                    EstimateBudgetForAccYearReport report = new EstimateBudgetForAccYearReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/EstimateBudgetForAccYearReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("TrialBalanceVM");
                    table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "TrialBalanceVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);
                }


            }


            public ActionResult GetEstimatedBudgetForCostCenterPDF(int id, int id2, string id3, int id4, int id5 , int id6)
            {
                try
                {

                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    AccountLevelRepVM Obj = new AccountLevelRepVM();
                    Obj.AccNo = id3;
                    Obj.AccountLevelDropVMID = id2;
                    Obj.Month = id4;

                string CheckList = " ";

                    if (id == 1)
                    {
                        Obj.ShowMainAccountValue = true;
                    CheckList += Resources.Resource.ShowMainAccountValue + "/";
                    }

                    if (id5 == 1)
                    {
                        Obj.ShowOnlyaccountswithcostcenter = true;
                    CheckList += Resources.Resource.ShowOnlyaccountswithcostcenter + "/";

                }

                if (id6 == 1)
                    {
                        Obj.ShowEstimatedZero = true;
                    CheckList += Resources.Resource.ShowEstimatedZero + "/";

                }

                string DropList = "";
                    var AccountData = _unitOfWork.NativeSql.GetCostCenterByLevel(UserInfo.fCompanyId);
                    int CurrYear = UserInfo.CurrYear;
                    Obj.Detail = true;
                    var Date = "01/01/" + CurrYear;
                    var OpenDate = "31/12/" + (CurrYear - 1).ToString();
                    Obj.FromDate = DateTime.Parse("01/" + Obj.Month.ToString("00") + "/" + CurrYear);
                    var LastDay = DateTime.DaysInMonth(CurrYear, Obj.Month).ToString("00");
                    Obj.ToDate = DateTime.Parse(LastDay + "/" + Obj.Month.ToString("00") + "/" + CurrYear);
                    if (Obj.Partofthenumber)
                    {
                        if (Obj.CostSearchType == 1)
                        {
                            Obj.CostCenterNumber = Obj.CostCenterNumber + "%";
                        }
                        else if (Obj.CostSearchType == 2)
                        {
                            Obj.CostCenterNumber = "%" + Obj.CostCenterNumber;
                        }
                        else if (Obj.CostSearchType == 3)
                        {
                            Obj.CostCenterNumber = "%" + Obj.CostCenterNumber + "%";

                        }
                    }


                    IEnumerable<TrialBalanceVM> TotData = new List<TrialBalanceVM>();
                    var TranData = _unitOfWork.NativeSql.GetTransactionForTrialCost(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                    var MonthlyData = _unitOfWork.NativeSql.GetTransactionForCostMonthly(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                    var BudgetData = _unitOfWork.EstimatedBudget.GetAllEstimatedBudgets(UserInfo.fCompanyId, CurrYear);

                    //  if (DateTime.Parse(Date) != Obj.FromDate)
                    //    TotData = _unitOfWork.NativeSql.GetTotCreditDebitForTrial(UserInfo.fCompanyId, DateTime.Parse(Date), Obj.FromDate);


                    //----------------Get Open-------------//
                    IEnumerable<TrialBalanceVM> TotDataOpen = new List<TrialBalanceVM>();
                    TotDataOpen = _unitOfWork.NativeSql.GetTotCreditDebitForTrialOpen(UserInfo.fCompanyId, DateTime.Parse(OpenDate), DateTime.Parse(OpenDate));
                    foreach (var D in TotDataOpen)
                    {
                        TotData = TotData.Append(D);

                    }
                    //------------------------------------//


                    double TotalDebit = 0;
                    double TOTCredit = 0;
                    double NetCredit = 0;
                    double NetDebit = 0;
                    double CreditBalance = 0;
                    double DebitBalance = 0;
                    double CreditTransAction = 0;
                    double DebitTransAction = 0;

                    double January = 0;
                    double February = 0;
                    double March = 0;
                    double April = 0;
                    double May = 0;
                    double June = 0;
                    double July = 0;
                    double August = 0;
                    double September = 0;
                    double October = 0;
                    double November = 0;
                    double December = 0;

                    double NetTot = 0;
                    double OpenBalance = 0;
                    double MonthTransaction = 0;
                    double Expected = 0;
                    double ChangeVaule = 0;
                    double ChangePrec = 0;

                    List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                    IEnumerable<CostCenter> Accounts = new List<CostCenter>();

                    IEnumerable<ChartOfAccount> LessMainAccount = new List<ChartOfAccount>();




                    if ((Obj.AccountLevelDropVMID > 0) && (!Obj.ShowOnlyaccountswithcostcenter))
                    {


                        Accounts = AccountData.Where(m => m.CostLevel <= Obj.AccountLevelDropVMID).ToList().OrderBy(m => m.CostNumber).ThenBy(m => m.CostLevel).ToList();

                        foreach (var Acc in Accounts)//Each Main Account
                        {
                            TotalDebit = 0;
                            TOTCredit = 0;
                            NetCredit = 0;
                            NetDebit = 0;
                            CreditBalance = 0;
                            DebitBalance = 0;
                            CreditTransAction = 0;
                            DebitTransAction = 0;

                            January = 0;
                            February = 0;
                            March = 0;
                            April = 0;
                            May = 0;
                            June = 0;
                            July = 0;
                            August = 0;
                            September = 0;
                            October = 0;
                            November = 0;
                            December = 0;

                            NetTot = 0;

                            MonthTransaction = 0;
                            Expected = 0;
                            ChangeVaule = 0;
                            ChangePrec = 0;

                            var MainAccount = AccountData.FirstOrDefault(m => m.CostNumber == Acc.CostNumber);
                            var MainChild = AccountData.Where(m => m.CostFather == Acc.CostNumber).OrderBy(m => m.CostNumber).OrderBy(m => m.CostLevel).ToList();

                            var TransActionData = TranData.Where(m => m.CostCenter.StartsWith(Acc.CostNumber));
                        var BalanceData = TotData.Where(m => m.CostCenter != null);
                        var MonthlyTrans = MonthlyData.Where(m => m.CostCenter.StartsWith(Acc.CostNumber));
                            foreach (var D in TransActionData)
                            {
                                CreditTransAction += D.CreditTransAction;
                                DebitTransAction += D.DebitTransAction;
                            }
                            foreach (var Balance in BalanceData)
                            {
                              BalanceData = TotData.Where(m => m.CostCenter.StartsWith(Acc.CostNumber));
                            CreditBalance += Balance.CreditBalance;
                                DebitBalance += Balance.DebitBalance;
                            }
                            foreach (var D in MonthlyTrans)
                            {
                                switch (D.Month)
                                {
                                    case 1:
                                        January = January + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 2:
                                        February = February + (D.DebitTransAction - D.CreditTransAction);

                                    break;
                                    case 3:
                                        March = March + (D.DebitTransAction - D.CreditTransAction);

                                    break;
                                    case 4:
                                        April = April + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                    case 5:
                                        May = May + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                    case 6:
                                        June = June + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                    case 7:
                                        July = July + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                    case 8:
                                        August = August + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                    case 9:
                                        September = September + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                    case 10:
                                        October = October + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                    case 11:
                                        November = November + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                    case 12:
                                        December = December + (D.DebitTransAction - D.CreditTransAction);
                                    break;

                                }

                            }

                         

                            TotalDebit = DebitTransAction + DebitBalance;
                            TOTCredit = CreditTransAction + CreditBalance;

                            if (TotalDebit > TOTCredit)
                            {
                                NetDebit = TotalDebit - TOTCredit;
                                NetTot = NetDebit;
                            }
                            if (TotalDebit < TOTCredit)
                            {
                                NetCredit = TOTCredit - TotalDebit;
                                NetTot = NetCredit;


                            }
                            NetTot = TotalDebit - TOTCredit;
                            OpenBalance = DebitBalance - CreditBalance;

                            TrialBalanceVM trialBalance = new TrialBalanceVM();
                            trialBalance.AccountNumber = Acc.CostNumber;
                            trialBalance.Name = Acc.ArabicName;

                            trialBalance.CreditBalance = CreditBalance;
                            trialBalance.CreditTransAction = CreditTransAction;
                            trialBalance.DebitBalance = DebitBalance;
                            trialBalance.DebitTransAction = DebitTransAction;
                            trialBalance.NetCredit = NetCredit;
                            trialBalance.NetDebit = NetDebit;

                            trialBalance.January = January;
                            trialBalance.February = February;
                            trialBalance.March = March;
                            trialBalance.April = April;
                            trialBalance.May = May;
                            trialBalance.June = June;
                            trialBalance.July = July;
                            trialBalance.August = August;
                            trialBalance.September = September;
                            trialBalance.October = October;
                            trialBalance.November = November;
                            trialBalance.December = December;

                            trialBalance.OpenBalance = OpenBalance;
                            trialBalance.NetTot = NetTot;
                            BudgetData = BudgetData.Where(m => m.CostCenterNumber != null).ToList();
                            var CurrBudget = BudgetData.Where(m => m.CostCenterNumber.StartsWith(Acc.CostNumber) && m.BudgetType == 2);
                            if (CurrBudget.Count() > 0)
                            {
                                foreach (var D in CurrBudget)
                                {
                                switch (Obj.Month)
                                {
                                    case 1:
                                        Expected = Expected + D.January;
                                        DropList += Resources.Resource.January;

                                        break;
                                    case 2:
                                        Expected = Expected + D.February;
                                        DropList += Resources.Resource.February;
                                        break;
                                    case 3:
                                        Expected = Expected + D.March;
                                        DropList += Resources.Resource.March;
                                        break;
                                    case 4:
                                        Expected = Expected + D.April;
                                        DropList += Resources.Resource.April;
                                        break;
                                    case 5:
                                        Expected = Expected + D.May;
                                        DropList += Resources.Resource.May;
                                        break;
                                    case 6:
                                        Expected = Expected + D.June;
                                        DropList += Resources.Resource.June;
                                        break;
                                    case 7:
                                        Expected = Expected + D.July;
                                        DropList += Resources.Resource.July;
                                        break;
                                    case 8:
                                        Expected = Expected + D.August;
                                        DropList += Resources.Resource.July;
                                        break;
                                    case 9:
                                        Expected = Expected + D.September;
                                        DropList += Resources.Resource.September;
                                        break;
                                    case 10:
                                        Expected = Expected + D.October;
                                        DropList += Resources.Resource.October;
                                        break;
                                    case 11:
                                        Expected = Expected + D.November;
                                        DropList += Resources.Resource.November;
                                        break;
                                    case 12:
                                        Expected = Expected + D.December;
                                        DropList += Resources.Resource.December;
                                        break;

                                }

                            }
                        }

                            MonthTransaction = NetTot;
                            ChangeVaule = NetTot - Expected;
                            ChangePrec = 0;
                            if (Expected != 0)
                            {
                                if (MonthTransaction != 0)
                                    ChangePrec = Math.Round((ChangeVaule / MonthTransaction) * 100, 3);
                            }



                            trialBalance.Expected = Expected;
                            trialBalance.MonthTransaction = MonthTransaction;
                            trialBalance.ChangeVaule = ChangeVaule;
                            trialBalance.ChangePrec = ChangePrec;

                            if ((AccountData.FirstOrDefault(m => m.CostFather == Acc.CostNumber) != null) && (Acc.CostLevel < Obj.AccountLevelDropVMID))
                            {
                                trialBalance.IsMainAccount = 1;
                                trialBalance.MainAccount = "{*}";



                                trialBalance.nCreditBalance = 0;
                                trialBalance.nCreditTransAction = 0;
                                trialBalance.nDebitBalance = 0;
                                trialBalance.nDebitTransAction = 0;
                                trialBalance.nNetCredit = 0;
                                trialBalance.nNetDebit = 0;

                            }
                            else
                            {
                                trialBalance.IsMainAccount = 0;
                                trialBalance.MainAccount = "";
                                trialBalance.nCreditBalance = CreditBalance;
                                trialBalance.nCreditTransAction = CreditTransAction;
                                trialBalance.nDebitBalance = DebitBalance;
                                trialBalance.nDebitTransAction = DebitTransAction;
                                trialBalance.nNetCredit = NetCredit;
                                trialBalance.nNetDebit = NetDebit;

                                trialBalance.nJanuary = January;
                                trialBalance.nFebruary = February;
                                trialBalance.nMarch = March;
                                trialBalance.nApril = April;
                                trialBalance.nMay = May;
                                trialBalance.nJune = June;
                                trialBalance.nJuly = July;
                                trialBalance.nAugust = August;
                                trialBalance.nSeptember = September;
                                trialBalance.nOctober = October;
                                trialBalance.nNovember = November;
                                trialBalance.nDecember = December;

                                trialBalance.nNetTot = NetTot;

                                trialBalance.nOpenBalance = OpenBalance;

                                trialBalance.nMonthTransaction = MonthTransaction;
                                trialBalance.nExpected = Expected;
                                trialBalance.nChangeVaule = ChangeVaule;
                                trialBalance.nChangePrec = ChangePrec;


                            }
                            if (!Obj.ShowEstimatedZero)
                            {
                                if ((trialBalance.Expected) != 0)
                                {
                                    TrialBalanceVMList.Add(trialBalance);
                                }
                            }
                            else
                            {
                                //if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                                //{
                                TrialBalanceVMList.Add(trialBalance);
                                //}


                            }




                        }






                    }
                    else if ((Obj.ShowOnlyaccountswithcostcenter) && !String.IsNullOrEmpty(Obj.AccNo))
                    {

                        var AccountByCost = _unitOfWork.NativeSql.GetChartOfAccountByCostCenterID(UserInfo.fCompanyId, Obj.AccNo, 3);
                        TranData = _unitOfWork.NativeSql.GetTransactionForTrial(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                        MonthlyData = _unitOfWork.NativeSql.GetTransactionForTrialYearly(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                        BudgetData = _unitOfWork.EstimatedBudget.GetAllEstimatedBudgets(UserInfo.fCompanyId, CurrYear);
                        //  Accounts = AccountData.Where(m => m.CostLevel <= Obj.AccountLevelDropVMID).ToList().OrderBy(m => m.CostNumber).ThenBy(m => m.CostLevel).ToList();

                        foreach (var Acc in AccountByCost)//Each Main Account
                        {
                            TotalDebit = 0;
                            TOTCredit = 0;
                            NetCredit = 0;
                            NetDebit = 0;
                            CreditBalance = 0;
                            DebitBalance = 0;
                            CreditTransAction = 0;
                            DebitTransAction = 0;

                            January = 0;
                            February = 0;
                            March = 0;
                            April = 0;
                            May = 0;
                            June = 0;
                            July = 0;
                            August = 0;
                            September = 0;
                            October = 0;
                            November = 0;
                            December = 0;

                            NetTot = 0;

                            MonthTransaction = 0;
                            Expected = 0;
                            ChangeVaule = 0;
                            ChangePrec = 0;


                            var TransActionData = TranData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            var BalanceData = TotData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            var MonthlyTrans = MonthlyData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            foreach (var D in TransActionData)
                            {
                                CreditTransAction += D.CreditTransAction;
                                DebitTransAction += D.DebitTransAction;
                            }
                            foreach (var Balance in BalanceData)
                            {
                                CreditBalance += Balance.CreditBalance;
                                DebitBalance += Balance.DebitBalance;
                            }
                            foreach (var D in MonthlyTrans)
                            {
                            switch (D.Month)
                            {
                                case 1:
                                    January = January + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 2:
                                    February = February + (D.DebitTransAction - D.CreditTransAction);

                                    break;
                                case 3:
                                    March = March + (D.DebitTransAction - D.CreditTransAction);

                                    break;
                                case 4:
                                    April = April + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 5:
                                    May = May + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 6:
                                    June = June + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 7:
                                    July = July + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 8:
                                    August = August + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 9:
                                    September = September + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 10:
                                    October = October + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 11:
                                    November = November + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 12:
                                    December = December + (D.DebitTransAction - D.CreditTransAction);
                                    break;

                            }

                        }



                        TotalDebit = DebitTransAction + DebitBalance;
                            TOTCredit = CreditTransAction + CreditBalance;

                            if (TotalDebit > TOTCredit)
                            {
                                NetDebit = TotalDebit - TOTCredit;
                                NetTot = NetDebit;
                            }
                            if (TotalDebit < TOTCredit)
                            {
                                NetCredit = TOTCredit - TotalDebit;
                                NetTot = NetCredit;


                            }
                            NetTot = TotalDebit - TOTCredit;
                            OpenBalance = DebitBalance - CreditBalance;

                            TrialBalanceVM trialBalance = new TrialBalanceVM();
                            trialBalance.AccountNumber = Acc.AccountNumber;
                            trialBalance.Name = Acc.ArabicName;

                            trialBalance.CreditBalance = CreditBalance;
                            trialBalance.CreditTransAction = CreditTransAction;
                            trialBalance.DebitBalance = DebitBalance;
                            trialBalance.DebitTransAction = DebitTransAction;
                            trialBalance.NetCredit = NetCredit;
                            trialBalance.NetDebit = NetDebit;

                            trialBalance.January = January;
                            trialBalance.February = February;
                            trialBalance.March = March;
                            trialBalance.April = April;
                            trialBalance.May = May;
                            trialBalance.June = June;
                            trialBalance.July = July;
                            trialBalance.August = August;
                            trialBalance.September = September;
                            trialBalance.October = October;
                            trialBalance.November = November;
                            trialBalance.December = December;

                            trialBalance.OpenBalance = OpenBalance;
                            trialBalance.NetTot = NetTot;
                            BudgetData = BudgetData.Where(m => m.CostCenterNumber != null).ToList();
                            var CurrBudget = BudgetData.Where(m => m.AccountNumber == Acc.AccountNumber && m.BudgetType == 3);
                            if (CurrBudget.Count() > 0)
                            {
                                foreach (var D in CurrBudget)
                                {
                                    switch (Obj.Month)
                                    {
                                        case 1:
                                            Expected = Expected + D.January;

                                        break;
                                        case 2:
                                            Expected = Expected + D.February;
                                        break;
                                        case 3:
                                            Expected = Expected + D.March;
                                       
                                        break;
                                        case 4:
                                            Expected = Expected + D.April;
                                        break;
                                        case 5:
                                            Expected = Expected + D.May;
                                        break;
                                        case 6:
                                            Expected = Expected + D.June;
                                        break;
                                        case 7:
                                            Expected = Expected + D.July;
                                        break;
                                        case 8:
                                            Expected = Expected + D.August;
                                        break;
                                        case 9:
                                            Expected = Expected + D.September;
                                        break;
                                        case 10:
                                            Expected = Expected + D.October;
                                        break;
                                        case 11:
                                            Expected = Expected + D.November;
                                        break;
                                        case 12:
                                            Expected = Expected + D.December;
                                        break;

                                    }

                                }
                            }

                            MonthTransaction = NetTot;
                            ChangeVaule = NetTot - Expected;
                            ChangePrec = 0;
                            if (Expected != 0)
                            {
                                if (MonthTransaction != 0)
                                    ChangePrec = Math.Round((ChangeVaule / MonthTransaction) * 100, 3);
                            }



                            trialBalance.Expected = Expected;
                            trialBalance.MonthTransaction = MonthTransaction;
                            trialBalance.ChangeVaule = ChangeVaule;
                            trialBalance.ChangePrec = ChangePrec;

                            if (false/*(AccountData.FirstOrDefault(m => m.CostFather == Acc.CostNumber) != null) && (Acc.CostLevel < Obj.AccountLevelDropVMID)*/)
                            {
                                trialBalance.IsMainAccount = 1;
                                trialBalance.MainAccount = "{*}";



                                trialBalance.nCreditBalance = 0;
                                trialBalance.nCreditTransAction = 0;
                                trialBalance.nDebitBalance = 0;
                                trialBalance.nDebitTransAction = 0;
                                trialBalance.nNetCredit = 0;
                                trialBalance.nNetDebit = 0;

                            }
                            else
                            {
                                trialBalance.IsMainAccount = 0;
                                trialBalance.MainAccount = "";
                                trialBalance.nCreditBalance = CreditBalance;
                                trialBalance.nCreditTransAction = CreditTransAction;
                                trialBalance.nDebitBalance = DebitBalance;
                                trialBalance.nDebitTransAction = DebitTransAction;
                                trialBalance.nNetCredit = NetCredit;
                                trialBalance.nNetDebit = NetDebit;

                                trialBalance.nJanuary = January;
                                trialBalance.nFebruary = February;
                                trialBalance.nMarch = March;
                                trialBalance.nApril = April;
                                trialBalance.nMay = May;
                                trialBalance.nJune = June;
                                trialBalance.nJuly = July;
                                trialBalance.nAugust = August;
                                trialBalance.nSeptember = September;
                                trialBalance.nOctober = October;
                                trialBalance.nNovember = November;
                                trialBalance.nDecember = December;

                                trialBalance.nNetTot = NetTot;

                                trialBalance.nOpenBalance = OpenBalance;

                                trialBalance.nMonthTransaction = MonthTransaction;
                                trialBalance.nExpected = Expected;
                                trialBalance.nChangeVaule = ChangeVaule;
                                trialBalance.nChangePrec = ChangePrec;


                            }
                            if (!Obj.ShowEstimatedZero)
                            {
                                if ((trialBalance.Expected) != 0)
                                {
                                    TrialBalanceVMList.Add(trialBalance);
                                }
                            }
                            else
                            {
                                //if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                                //{
                                TrialBalanceVMList.Add(trialBalance);
                                //}


                            }




                        }

                    }
                    if (!Obj.ShowMainAccountValue)
                    {
                        foreach (var trialBalance in TrialBalanceVMList.Where(m => m.IsMainAccount == 1))
                        {
                            if (trialBalance.IsMainAccount == 1)
                            {
                                trialBalance.Expected = 0;
                                trialBalance.MonthTransaction = 0;
                                trialBalance.ChangeVaule = 0;
                                trialBalance.ChangePrec = 0;
                                trialBalance.CreditBalance = 0;
                                trialBalance.CreditTransAction = 0;
                                trialBalance.DebitBalance = 0;
                                trialBalance.DebitTransAction = 0;
                                trialBalance.NetCredit = 0;
                                trialBalance.NetDebit = 0;
                            }

                        }

                    }



                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("TrialBalanceVM");
                    table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                    ds.Tables.Add(table1);

                    var report = new EstimatedBudgetForCCReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/EstimatedBudgetForCCReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    //report.LbFromDate.Text = Obj.FromCollectionDate.ToString("dd/MM/yyyy");
                    //report.LbTODate.Text = Obj.ToCollectionDate.ToString("dd/MM/yyyy");

                    report.DataSource = ds;
                    report.DataMember = "TrialBalanceVM";

                report.xrLabel3.Text = CheckList + " ";

                    report.LevelName.Text = String.Format("{0} {1}", Resources.Resource.Level, Obj.AccountLevelDropVMID.ToString());


                report.CostCenterNum.Text = Obj.AccNo;

                if (!String.IsNullOrEmpty(Obj.AccNo))
                {
                    var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, Obj.AccNo);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.CostCenterName.Text = AccName.ArabicName;
                    }
                    else
                    {
                        report.CostCenterName.Text = AccName.EnglishName;
                    }

                }
                if (Obj.Month != 0)
                {
                    
                        if (Obj.Month == 1)
                            DropList += Resources.Resource.January;    
                      else 
                        if (Obj.Month ==2)
                            DropList += Resources.Resource.February;
                     
                      else
                        if (Obj.Month == 3)
                            DropList += Resources.Resource.March;
                    else
                        if (Obj.Month == 4)
                            DropList += Resources.Resource.April;
                        else
                        if (Obj.Month == 5)
                            DropList += Resources.Resource.May;
                        else
                        if (Obj.Month == 6)
                           
                            DropList += Resources.Resource.June;
                        else
                        if(Obj.Month == 7)
                            DropList += Resources.Resource.July;
                        
                        else
                        if(Obj.Month == 8)
                            DropList += Resources.Resource.August;
                        
                        else
                        if(Obj.Month == 9)
                            DropList += Resources.Resource.September;
                        
                        else
                        if(Obj.Month == 10)
                            DropList += Resources.Resource.October;
                     else
                        if(Obj.Month == 11)
                            DropList += Resources.Resource.November;
                       else
                        if(Obj.Month == 12)
                            DropList += Resources.Resource.December;
                          

                    

                    report.Month.Text = Resources.Resource.Month + DropList;

                }


                report.CreateDocument();




                    return View("ReportPDF", report);


                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                    EstimatedBudgetForCCReport report = new EstimatedBudgetForCCReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/EstimatedBudgetForCCReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("TrialBalanceVM");
                    table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "TrialBalanceVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);
                }


            }


            public ActionResult GetEstimatedBudgetForCostYearPDF(int id, int id2, string id3, int id4 , int id5)
            {
            try
            {

                var userId = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                AccountLevelRepVM Obj = new AccountLevelRepVM();
                Obj.AccNo = id3;
                Obj.AccountLevelDropVMID = id2;

                string CheckList = " ";
                if (id4 == 1)
                {
                    Obj.ShowOnlyaccountswithcostcenter = true;
                    CheckList += Resources.Resource.ShowOnlyaccountswithcostcenter + "/";
                }


                if (id5 == 1)
                {
                    Obj.ShowEstimatedZero = true;
                    CheckList += Resources.Resource.ShowEstimatedZero + "/";

                }


                if (id == 1)
                {
                    Obj.ShowMainAccountValue = true;
                    CheckList += Resources.Resource.ShowMainAccountValue + "/";

                }


                var AccountData = _unitOfWork.NativeSql.GetCostCenterByLevel(UserInfo.fCompanyId);
                int CurrYear = UserInfo.CurrYear;
                Obj.Detail = true;
                var Date = "01/01/" + CurrYear;
                var OpenDate = "31/12/" + (CurrYear - 1).ToString();
                Obj.FromDate = DateTime.Parse("01/01/" + CurrYear);
                Obj.ToDate = DateTime.Parse("31/12/" + CurrYear);



                IEnumerable<TrialBalanceVM> TotData = new List<TrialBalanceVM>();
                var TranData = _unitOfWork.NativeSql.GetTransactionForTrialCost(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                var MonthlyData = _unitOfWork.NativeSql.GetTransactionForCostMonthly(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                var BudgetData = _unitOfWork.EstimatedBudget.GetAllEstimatedBudgets(UserInfo.fCompanyId, CurrYear);

                //  if (DateTime.Parse(Date) != Obj.FromDate)
                //     TotData = _unitOfWork.NativeSql.GetTotCreditDebitForTrial(UserInfo.fCompanyId, DateTime.Parse(Date), Obj.FromDate);


                //----------------Get Open-------------//
                IEnumerable<TrialBalanceVM> TotDataOpen = new List<TrialBalanceVM>();
                TotDataOpen = _unitOfWork.NativeSql.GetTotCreditDebitForTrialOpen(UserInfo.fCompanyId, DateTime.Parse(OpenDate), DateTime.Parse(OpenDate));
                foreach (var D in TotDataOpen)
                {
                    TotData = TotData.Append(D);

                }
                //------------------------------------//


                double TotalDebit = 0;
                double TOTCredit = 0;
                double NetCredit = 0;
                double NetDebit = 0;
                double CreditBalance = 0;
                double DebitBalance = 0;
                double CreditTransAction = 0;
                double DebitTransAction = 0;

                double January = 0;
                double February = 0;
                double March = 0;
                double April = 0;
                double May = 0;
                double June = 0;
                double July = 0;
                double August = 0;
                double September = 0;
                double October = 0;
                double November = 0;
                double December = 0;

                double NetTot = 0;
                double OpenBalance = 0;

                double MonthTransaction1 = 0;
                double Expected1 = 0;
                double ChangeVaule1 = 0;
                double ChangePrec1 = 0;

                double MonthTransaction2 = 0;
                double Expected2 = 0;
                double ChangeVaule2 = 0;
                double ChangePrec2 = 0;


                double MonthTransaction3 = 0;
                double Expected3 = 0;
                double ChangeVaule3 = 0;
                double ChangePrec3 = 0;


                double MonthTransaction4 = 0;
                double Expected4 = 0;
                double ChangeVaule4 = 0;
                double ChangePrec4 = 0;


                double MonthTransaction5 = 0;
                double Expected5 = 0;
                double ChangeVaule5 = 0;
                double ChangePrec5 = 0;

                double MonthTransaction6 = 0;
                double Expected6 = 0;
                double ChangeVaule6 = 0;
                double ChangePrec6 = 0;


                double MonthTransaction7 = 0;
                double Expected7 = 0;
                double ChangeVaule7 = 0;
                double ChangePrec7 = 0;


                double MonthTransaction8 = 0;
                double Expected8 = 0;
                double ChangeVaule8 = 0;
                double ChangePrec8 = 0;


                double MonthTransaction9 = 0;
                double Expected9 = 0;
                double ChangeVaule9 = 0;
                double ChangePrec9 = 0;


                double MonthTransaction10 = 0;
                double Expected10 = 0;
                double ChangeVaule10 = 0;
                double ChangePrec10 = 0;





                double MonthTransaction11 = 0;
                double Expected11 = 0;
                double ChangeVaule11 = 0;
                double ChangePrec11 = 0;


                double MonthTransaction12 = 0;
                double Expected12 = 0;
                double ChangeVaule12 = 0;
                double ChangePrec12 = 0;

                List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                IEnumerable<CostCenter> Accounts = new List<CostCenter>();

                IEnumerable<ChartOfAccount> LessMainAccount = new List<ChartOfAccount>();




                if ((Obj.AccountLevelDropVMID > 0) && (!Obj.ShowOnlyaccountswithcostcenter))
                {

                    Accounts = AccountData.Where(m => m.CostLevel <= Obj.AccountLevelDropVMID).ToList().OrderBy(m => m.CostNumber).ThenBy(m => m.CostLevel).ToList();

                    foreach (var Acc in Accounts)//Each Main Account
                    {
                        TotalDebit = 0;
                        TOTCredit = 0;
                        NetCredit = 0;
                        NetDebit = 0;
                        CreditBalance = 0;
                        DebitBalance = 0;
                        CreditTransAction = 0;
                        DebitTransAction = 0;

                        January = 0;
                        February = 0;
                        March = 0;
                        April = 0;
                        May = 0;
                        June = 0;
                        July = 0;
                        August = 0;
                        September = 0;
                        October = 0;
                        November = 0;
                        December = 0;

                        NetTot = 0;

                        MonthTransaction1 = 0;
                        Expected1 = 0;
                        ChangeVaule1 = 0;
                        ChangePrec1 = 0;

                        MonthTransaction2 = 0;
                        Expected2 = 0;
                        ChangeVaule2 = 0;
                        ChangePrec2 = 0;


                        MonthTransaction3 = 0;
                        Expected3 = 0;
                        ChangeVaule3 = 0;
                        ChangePrec3 = 0;


                        MonthTransaction4 = 0;
                        Expected4 = 0;
                        ChangeVaule4 = 0;
                        ChangePrec4 = 0;


                        MonthTransaction5 = 0;
                        Expected5 = 0;
                        ChangeVaule5 = 0;
                        ChangePrec5 = 0;

                        MonthTransaction6 = 0;
                        Expected6 = 0;
                        ChangeVaule6 = 0;
                        ChangePrec6 = 0;


                        MonthTransaction7 = 0;
                        Expected7 = 0;
                        ChangeVaule7 = 0;
                        ChangePrec7 = 0;


                        MonthTransaction8 = 0;
                        Expected8 = 0;
                        ChangeVaule8 = 0;
                        ChangePrec8 = 0;


                        MonthTransaction9 = 0;
                        Expected9 = 0;
                        ChangeVaule9 = 0;
                        ChangePrec9 = 0;


                        MonthTransaction10 = 0;
                        Expected10 = 0;
                        ChangeVaule10 = 0;
                        ChangePrec10 = 0;



                        MonthTransaction10 = 0;
                        Expected10 = 0;
                        ChangeVaule10 = 0;
                        ChangePrec10 = 0;


                        MonthTransaction11 = 0;
                        Expected11 = 0;
                        ChangeVaule11 = 0;
                        ChangePrec11 = 0;


                        MonthTransaction12 = 0;
                        Expected12 = 0;
                        ChangeVaule12 = 0;
                        ChangePrec12 = 0;


                        var TransActionData = TranData.Where(m => m.CostCenter.StartsWith(Acc.CostNumber));
                        var BalanceData = TotData.Where(m => m.CostCenter != null);
                        var MonthlyTrans = MonthlyData.Where(m => m.CostCenter.StartsWith(Acc.CostNumber));
                        foreach (var D in TransActionData)
                        {
                            CreditTransAction += D.CreditTransAction;
                            DebitTransAction += D.DebitTransAction;
                        }

                        if (BalanceData != null)
                        {
                            foreach (var Balance in BalanceData)
                            {
                                BalanceData = TotData.Where(m => m.CostCenter.StartsWith(Acc.CostNumber));

                                CreditBalance += Balance.CreditBalance;
                                DebitBalance += Balance.DebitBalance;
                            }
                        }

                        foreach (var D in MonthlyTrans)
                        {
                            switch (D.Month)
                            {
                                case 1:
                                    January = January + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 2:
                                    February = February + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 3:
                                    March = March + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 4:
                                    April = April + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 5:
                                    May = May + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 6:
                                    June = June + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 7:
                                    July = July + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 8:
                                    August = August + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 9:
                                    September = September + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 10:
                                    October = October + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 11:
                                    November = November + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 12:
                                    December = December + (D.DebitTransAction - D.CreditTransAction);
                                    break;

                            }

                        }



                        TotalDebit = DebitTransAction + DebitBalance;
                        TOTCredit = CreditTransAction + CreditBalance;

                        if (TotalDebit > TOTCredit)
                        {
                            NetDebit = TotalDebit - TOTCredit;
                            NetTot = NetDebit;
                        }
                        if (TotalDebit < TOTCredit)
                        {
                            NetCredit = TOTCredit - TotalDebit;
                            NetTot = NetCredit;


                        }
                        NetTot = TotalDebit - TOTCredit;
                        OpenBalance = DebitBalance - CreditBalance;

                        TrialBalanceVM trialBalance = new TrialBalanceVM();
                        trialBalance.AccountNumber = Acc.CostNumber;
                        trialBalance.Name = Acc.ArabicName;

                        trialBalance.CreditBalance = CreditBalance;
                        trialBalance.CreditTransAction = CreditTransAction;
                        trialBalance.DebitBalance = DebitBalance;
                        trialBalance.DebitTransAction = DebitTransAction;
                        trialBalance.NetCredit = NetCredit;
                        trialBalance.NetDebit = NetDebit;

                        trialBalance.January = January;
                        trialBalance.February = February;
                        trialBalance.March = March;
                        trialBalance.April = April;
                        trialBalance.May = May;
                        trialBalance.June = June;
                        trialBalance.July = July;
                        trialBalance.August = August;
                        trialBalance.September = September;
                        trialBalance.October = October;
                        trialBalance.November = November;
                        trialBalance.December = December;

                        trialBalance.OpenBalance = OpenBalance;
                        trialBalance.NetTot = NetTot;
                        BudgetData = BudgetData.Where(m => m.CostCenterNumber != null).ToList();
                        var CurrBudget = BudgetData.Where(m => m.CostCenterNumber.StartsWith(Acc.CostNumber) && m.BudgetType == 2);
                        if (CurrBudget.Count() > 0)
                        {
                            foreach (var D in CurrBudget)
                            {

                                Expected1 = Expected1 + D.January;

                                Expected2 = Expected2 + D.February;

                                Expected3 = Expected3 + D.March;

                                Expected4 = Expected4 + D.April;

                                Expected5 = Expected5 + D.May;

                                Expected6 = Expected6 + D.June;

                                Expected7 = Expected7 + D.July;

                                Expected8 = Expected8 + D.August;

                                Expected9 = Expected9 + D.September;

                                Expected10 = Expected10 + D.October;


                                Expected11 = Expected11 + D.November;

                                Expected12 = Expected12 + D.December;


                            }


                        }

                        MonthTransaction1 = January;
                        ChangeVaule1 = January - Expected1;
                        ChangePrec1 = 0;
                        if (Expected1 != 0)
                        {
                            ChangePrec1 = 0;// Math.Round((ChangeVaule1 / MonthTransaction1) * 100, 3);
                        }

                        MonthTransaction2 = February;
                        ChangeVaule2 = February - Expected2;
                        ChangePrec2 = 0;
                        if (Expected2 != 0)
                        {
                            ChangePrec2 = 0;// Math.Round((ChangeVaule2 / MonthTransaction2) * 100, 3);
                        }


                        MonthTransaction3 = March;
                        ChangeVaule3 = March - Expected3;
                        ChangePrec3 = 0;
                        if (Expected3 != 0)
                        {
                            ChangePrec3 = 0;//  Math.Round((ChangeVaule3 / MonthTransaction3) * 100, 3);
                        }

                        MonthTransaction4 = April;
                        ChangeVaule4 = April - Expected4;
                        ChangePrec4 = 0;
                        if (Expected4 != 0)
                        {
                            ChangePrec4 = 0;// Math.Round((ChangeVaule4 / MonthTransaction4) * 100, 3);
                        }

                        MonthTransaction5 = May;
                        ChangeVaule5 = (May) - Expected5;
                        ChangePrec5 = 0;
                        if (Expected5 != 0)
                        {
                            ChangePrec5 = 0;// Math.Round((ChangeVaule5 / MonthTransaction5) * 100, 3);
                        }

                        MonthTransaction6 = (June);
                        ChangeVaule6 = (June) - Expected6;
                        ChangePrec6 = 0;
                        if (Expected6 != 0)
                        {
                            ChangePrec6 = 0;//  Math.Round((ChangeVaule6 / MonthTransaction6) * 100, 3);
                        }

                        MonthTransaction7 = (July);
                        ChangeVaule7 = (July) - Expected7;
                        ChangePrec7 = 0;
                        if (Expected7 != 0)
                        {
                            ChangePrec7 = 0;//  Math.Round((ChangeVaule7 / MonthTransaction7) * 100, 3);
                        }



                        MonthTransaction8 = (August);
                        ChangeVaule8 = (August) - Expected8;
                        ChangePrec8 = 0;
                        if (Expected8 != 0)
                        {
                            ChangePrec8 = 0;//  Math.Round((ChangeVaule8 / MonthTransaction8) * 100, 3);
                        }


                        MonthTransaction9 = (September);
                        ChangeVaule9 = (September) - Expected9;
                        ChangePrec9 = 0;
                        if (Expected9 != 0)
                        {
                            ChangePrec9 = 0;//  Math.Round((ChangeVaule9 / MonthTransaction9) * 100, 3);
                        }


                        MonthTransaction10 = (October);
                        ChangeVaule10 = (October) - Expected10;
                        ChangePrec10 = 0;
                        if (Expected10 != 0)
                        {
                            ChangePrec10 = 0;//  Math.Round((ChangeVaule10 / MonthTransaction10) * 100, 3);
                        }


                        MonthTransaction11 = (November);
                        ChangeVaule11 = (November) - Expected11;
                        ChangePrec11 = 0;
                        if (Expected11 != 0)
                        {
                            ChangePrec11 = 0;// Math.Round((ChangeVaule11 / MonthTransaction11) * 100, 3);
                        }


                        MonthTransaction12 = (December);
                        ChangeVaule12 = (December) - Expected12;
                        ChangePrec12 = 0;
                        if (Expected12 != 0)
                        {
                            ChangePrec12 = 0;//  Math.Round((ChangeVaule12 / MonthTransaction12) * 100, 3);
                        }


                        trialBalance.Expected1 = Expected1;
                        trialBalance.MonthTransaction1 = MonthTransaction1;
                        trialBalance.ChangeVaule1 = ChangeVaule1;
                        trialBalance.ChangePrec1 = ChangePrec1;

                        trialBalance.Expected2 = Expected2;
                        trialBalance.MonthTransaction2 = MonthTransaction2;
                        trialBalance.ChangeVaule2 = ChangeVaule2;
                        trialBalance.ChangePrec2 = ChangePrec2;


                        trialBalance.Expected3 = Expected3;
                        trialBalance.MonthTransaction3 = MonthTransaction3;
                        trialBalance.ChangeVaule3 = ChangeVaule3;
                        trialBalance.ChangePrec3 = ChangePrec3;


                        trialBalance.Expected4 = Expected4;
                        trialBalance.MonthTransaction4 = MonthTransaction4;
                        trialBalance.ChangeVaule4 = ChangeVaule4;
                        trialBalance.ChangePrec4 = ChangePrec4;


                        trialBalance.Expected5 = Expected5;
                        trialBalance.MonthTransaction5 = MonthTransaction5;
                        trialBalance.ChangeVaule5 = ChangeVaule5;
                        trialBalance.ChangePrec5 = ChangePrec5;


                        trialBalance.Expected6 = Expected6;
                        trialBalance.MonthTransaction6 = MonthTransaction6;
                        trialBalance.ChangeVaule6 = ChangeVaule6;
                        trialBalance.ChangePrec6 = ChangePrec6;


                        trialBalance.Expected7 = Expected7;
                        trialBalance.MonthTransaction7 = MonthTransaction7;
                        trialBalance.ChangeVaule7 = ChangeVaule7;
                        trialBalance.ChangePrec7 = ChangePrec7;


                        trialBalance.Expected8 = Expected8;
                        trialBalance.MonthTransaction8 = MonthTransaction8;
                        trialBalance.ChangeVaule8 = ChangeVaule8;
                        trialBalance.ChangePrec8 = ChangePrec8;


                        trialBalance.Expected9 = Expected9;
                        trialBalance.MonthTransaction9 = MonthTransaction9;
                        trialBalance.ChangeVaule9 = ChangeVaule9;
                        trialBalance.ChangePrec9 = ChangePrec9;


                        trialBalance.Expected10 = Expected10;
                        trialBalance.MonthTransaction10 = MonthTransaction10;
                        trialBalance.ChangeVaule10 = ChangeVaule10;
                        trialBalance.ChangePrec10 = ChangePrec10;


                        trialBalance.Expected11 = Expected11;
                        trialBalance.MonthTransaction11 = MonthTransaction11;
                        trialBalance.ChangeVaule11 = ChangeVaule11;
                        trialBalance.ChangePrec11 = ChangePrec11;


                        trialBalance.Expected12 = Expected12;
                        trialBalance.MonthTransaction12 = MonthTransaction12;
                        trialBalance.ChangeVaule12 = ChangeVaule12;
                        trialBalance.ChangePrec12 = ChangePrec12;






                        trialBalance.ExpectedAnnually = (trialBalance.Expected1 + trialBalance.Expected2 + trialBalance.Expected3 + trialBalance.Expected4 + trialBalance.Expected5 + trialBalance.Expected5 +
                                trialBalance.Expected7 + trialBalance.Expected8 + trialBalance.Expected9 + trialBalance.Expected10 + trialBalance.Expected11 + trialBalance.Expected12);

                        trialBalance.ActualTotal = Math.Round(NetTot, 4);
                        trialBalance.RemainingExpected = Math.Round((trialBalance.ExpectedAnnually - Math.Abs(NetTot)), 4);
                        trialBalance.RemainingRatio = 0;
                        trialBalance.ExpectedAnnually = Math.Round(trialBalance.ExpectedAnnually, 4);
                        if ((AccountData.FirstOrDefault(m => m.CostFather == Acc.CostNumber) != null) && (Acc.CostLevel < Obj.AccountLevelDropVMID))
                        {
                            trialBalance.IsMainAccount = 1;
                            trialBalance.MainAccount = "{*}";



                            trialBalance.nCreditBalance = 0;
                            trialBalance.nCreditTransAction = 0;
                            trialBalance.nDebitBalance = 0;
                            trialBalance.nDebitTransAction = 0;
                            trialBalance.nNetCredit = 0;
                            trialBalance.nNetDebit = 0;

                        }
                        else
                        {
                            trialBalance.IsMainAccount = 0;
                            trialBalance.MainAccount = "";

                            trialBalance.nExpectedAnnually = trialBalance.ExpectedAnnually;
                            trialBalance.nActualTotal = trialBalance.ActualTotal;
                            trialBalance.nRemainingExpected = trialBalance.RemainingExpected;
                            trialBalance.nRemainingRatio = trialBalance.RemainingRatio;

                            trialBalance.nCreditBalance = CreditBalance;
                            trialBalance.nCreditTransAction = CreditTransAction;
                            trialBalance.nDebitBalance = DebitBalance;
                            trialBalance.nDebitTransAction = DebitTransAction;
                            trialBalance.nNetCredit = NetCredit;
                            trialBalance.nNetDebit = NetDebit;

                            trialBalance.nJanuary = January;
                            trialBalance.nFebruary = February;
                            trialBalance.nMarch = March;
                            trialBalance.nApril = April;
                            trialBalance.nMay = May;
                            trialBalance.nJune = June;
                            trialBalance.nJuly = July;
                            trialBalance.nAugust = August;
                            trialBalance.nSeptember = September;
                            trialBalance.nOctober = October;
                            trialBalance.nNovember = November;
                            trialBalance.nDecember = December;



                        }
                        if (!Obj.ShowEstimatedZero)
                        {
                            if ((trialBalance.Expected1 + trialBalance.Expected2 + trialBalance.Expected3 + trialBalance.Expected4 + trialBalance.Expected5 + trialBalance.Expected5 +
                                trialBalance.Expected7 + trialBalance.Expected8 + trialBalance.Expected9 + trialBalance.Expected10 + trialBalance.Expected11 + trialBalance.Expected12) != 0)
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }
                        }
                        else
                        {
                            //if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                            //{
                            TrialBalanceVMList.Add(trialBalance);
                            //}


                        }




                    }

                }
                else if ((Obj.ShowOnlyaccountswithcostcenter) && !String.IsNullOrEmpty(Obj.AccNo))
                {
                    var AccountByCost = _unitOfWork.NativeSql.GetChartOfAccountByCostCenterID(UserInfo.fCompanyId, Obj.AccNo, 3);
                    TranData = _unitOfWork.NativeSql.GetTransactionForTrial(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                    MonthlyData = _unitOfWork.NativeSql.GetTransactionForTrialYearly(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                    BudgetData = _unitOfWork.EstimatedBudget.GetAllEstimatedBudgets(UserInfo.fCompanyId, CurrYear);

                    foreach (var Acc in AccountByCost)//Each Main Account
                    {
                        TotalDebit = 0;
                        TOTCredit = 0;
                        NetCredit = 0;
                        NetDebit = 0;
                        CreditBalance = 0;
                        DebitBalance = 0;
                        CreditTransAction = 0;
                        DebitTransAction = 0;

                        January = 0;
                        February = 0;
                        March = 0;
                        April = 0;
                        May = 0;
                        June = 0;
                        July = 0;
                        August = 0;
                        September = 0;
                        October = 0;
                        November = 0;
                        December = 0;

                        NetTot = 0;

                        MonthTransaction1 = 0;
                        Expected1 = 0;
                        ChangeVaule1 = 0;
                        ChangePrec1 = 0;

                        MonthTransaction2 = 0;
                        Expected2 = 0;
                        ChangeVaule2 = 0;
                        ChangePrec2 = 0;


                        MonthTransaction3 = 0;
                        Expected3 = 0;
                        ChangeVaule3 = 0;
                        ChangePrec3 = 0;


                        MonthTransaction4 = 0;
                        Expected4 = 0;
                        ChangeVaule4 = 0;
                        ChangePrec4 = 0;


                        MonthTransaction5 = 0;
                        Expected5 = 0;
                        ChangeVaule5 = 0;
                        ChangePrec5 = 0;

                        MonthTransaction6 = 0;
                        Expected6 = 0;
                        ChangeVaule6 = 0;
                        ChangePrec6 = 0;


                        MonthTransaction7 = 0;
                        Expected7 = 0;
                        ChangeVaule7 = 0;
                        ChangePrec7 = 0;


                        MonthTransaction8 = 0;
                        Expected8 = 0;
                        ChangeVaule8 = 0;
                        ChangePrec8 = 0;


                        MonthTransaction9 = 0;
                        Expected9 = 0;
                        ChangeVaule9 = 0;
                        ChangePrec9 = 0;


                        MonthTransaction10 = 0;
                        Expected10 = 0;
                        ChangeVaule10 = 0;
                        ChangePrec10 = 0;



                        MonthTransaction10 = 0;
                        Expected10 = 0;
                        ChangeVaule10 = 0;
                        ChangePrec10 = 0;


                        MonthTransaction11 = 0;
                        Expected11 = 0;
                        ChangeVaule11 = 0;
                        ChangePrec11 = 0;


                        MonthTransaction12 = 0;
                        Expected12 = 0;
                        ChangeVaule12 = 0;
                        ChangePrec12 = 0;

                        var TransActionData = TranData.Where(m => m.AccountNumber == Acc.AccountNumber);
                        var BalanceData = TotData.Where(m => m.AccountNumber == Acc.AccountNumber);
                        var MonthlyTrans = MonthlyData.Where(m => m.AccountNumber == Acc.AccountNumber);
                        foreach (var D in TransActionData)
                        {
                            CreditTransAction += D.CreditTransAction;
                            DebitTransAction += D.DebitTransAction;
                        }
                        foreach (var Balance in BalanceData)
                        {
                            CreditBalance += Balance.CreditBalance;
                            DebitBalance += Balance.DebitBalance;
                        }
                        foreach (var D in MonthlyTrans)
                        {
                            switch (D.Month)
                            {
                                case 1:
                                    January = January + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 2:
                                    February = February + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 3:
                                    March = March + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 4:
                                    April = April + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 5:
                                    May = May + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 6:
                                    June = June + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 7:
                                    July = July + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 8:
                                    August = August + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 9:
                                    September = September + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 10:
                                    October = October + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 11:
                                    November = November + (D.DebitTransAction - D.CreditTransAction);
                                    break;
                                case 12:
                                    December = December + (D.DebitTransAction - D.CreditTransAction);
                                    break;

                            }

                        }



                        TotalDebit = DebitTransAction + DebitBalance;
                        TOTCredit = CreditTransAction + CreditBalance;

                        if (TotalDebit > TOTCredit)
                        {
                            NetDebit = TotalDebit - TOTCredit;
                            NetTot = NetDebit;
                        }
                        if (TotalDebit < TOTCredit)
                        {
                            NetCredit = TOTCredit - TotalDebit;
                            NetTot = NetCredit;


                        }
                        NetTot = TotalDebit - TOTCredit;
                        OpenBalance = DebitBalance - CreditBalance;

                        TrialBalanceVM trialBalance = new TrialBalanceVM();
                        trialBalance.AccountNumber = Acc.AccountNumber;
                        trialBalance.Name = Acc.ArabicName;

                        trialBalance.CreditBalance = CreditBalance;
                        trialBalance.CreditTransAction = CreditTransAction;
                        trialBalance.DebitBalance = DebitBalance;
                        trialBalance.DebitTransAction = DebitTransAction;
                        trialBalance.NetCredit = NetCredit;
                        trialBalance.NetDebit = NetDebit;

                        trialBalance.January = January;
                        trialBalance.February = February;
                        trialBalance.March = March;
                        trialBalance.April = April;
                        trialBalance.May = May;
                        trialBalance.June = June;
                        trialBalance.July = July;
                        trialBalance.August = August;
                        trialBalance.September = September;
                        trialBalance.October = October;
                        trialBalance.November = November;
                        trialBalance.December = December;

                        trialBalance.OpenBalance = OpenBalance;
                        trialBalance.NetTot = NetTot;
                        BudgetData = BudgetData.Where(m => m.CostCenterNumber != null).ToList();
                        var CurrBudget = BudgetData.Where(m => m.AccountNumber == Acc.AccountNumber && m.BudgetType == 3);
                        if (CurrBudget.Count() > 0)
                        {
                            foreach (var D in CurrBudget)
                            {

                                Expected1 = Expected1 + D.January;

                                Expected2 = Expected2 + D.February;

                                Expected3 = Expected3 + D.March;

                                Expected4 = Expected4 + D.April;

                                Expected5 = Expected5 + D.May;

                                Expected6 = Expected6 + D.June;

                                Expected7 = Expected7 + D.July;

                                Expected8 = Expected8 + D.August;

                                Expected9 = Expected9 + D.September;

                                Expected10 = Expected10 + D.October;


                                Expected11 = Expected11 + D.November;

                                Expected12 = Expected12 + D.December;


                            }


                        }

                        MonthTransaction1 = January;
                        ChangeVaule1 = January - Expected1;
                        ChangePrec1 = 0;
                        if (Expected1 != 0)
                        {
                            ChangePrec1 = 0;// Math.Round((ChangeVaule1 / MonthTransaction1) * 100, 3);
                        }

                        MonthTransaction2 = February;
                        ChangeVaule2 = February - Expected2;
                        ChangePrec2 = 0;
                        if (Expected2 != 0)
                        {
                            ChangePrec2 = 0;// Math.Round((ChangeVaule2 / MonthTransaction2) * 100, 3);
                        }


                        MonthTransaction3 = March;
                        ChangeVaule3 = March - Expected3;
                        ChangePrec3 = 0;
                        if (Expected3 != 0)
                        {
                            ChangePrec3 = 0;//  Math.Round((ChangeVaule3 / MonthTransaction3) * 100, 3);
                        }

                        MonthTransaction4 = April;
                        ChangeVaule4 = April - Expected4;
                        ChangePrec4 = 0;
                        if (Expected4 != 0)
                        {
                            ChangePrec4 = 0;// Math.Round((ChangeVaule4 / MonthTransaction4) * 100, 3);
                        }

                        MonthTransaction5 = May;
                        ChangeVaule5 = (May) - Expected5;
                        ChangePrec5 = 0;
                        if (Expected5 != 0)
                        {
                            ChangePrec5 = 0;// Math.Round((ChangeVaule5 / MonthTransaction5) * 100, 3);
                        }

                        MonthTransaction6 = (June);
                        ChangeVaule6 = (June) - Expected6;
                        ChangePrec6 = 0;
                        if (Expected6 != 0)
                        {
                            ChangePrec6 = 0;//  Math.Round((ChangeVaule6 / MonthTransaction6) * 100, 3);
                        }

                        MonthTransaction7 = (July);
                        ChangeVaule7 = (July) - Expected7;
                        ChangePrec7 = 0;
                        if (Expected7 != 0)
                        {
                            ChangePrec7 = 0;//  Math.Round((ChangeVaule7 / MonthTransaction7) * 100, 3);
                        }



                        MonthTransaction8 = (August);
                        ChangeVaule8 = (August) - Expected8;
                        ChangePrec8 = 0;
                        if (Expected8 != 0)
                        {
                            ChangePrec8 = 0;//  Math.Round((ChangeVaule8 / MonthTransaction8) * 100, 3);
                        }


                        MonthTransaction9 = (September);
                        ChangeVaule9 = (September) - Expected9;
                        ChangePrec9 = 0;
                        if (Expected9 != 0)
                        {
                            ChangePrec9 = 0;//  Math.Round((ChangeVaule9 / MonthTransaction9) * 100, 3);
                        }


                        MonthTransaction10 = (October);
                        ChangeVaule10 = (October) - Expected10;
                        ChangePrec10 = 0;
                        if (Expected10 != 0)
                        {
                            ChangePrec10 = 0;//  Math.Round((ChangeVaule10 / MonthTransaction10) * 100, 3);
                        }


                        MonthTransaction11 = (November);
                        ChangeVaule11 = (November) - Expected11;
                        ChangePrec11 = 0;
                        if (Expected11 != 0)
                        {
                            ChangePrec11 = 0;// Math.Round((ChangeVaule11 / MonthTransaction11) * 100, 3);
                        }


                        MonthTransaction12 = (December);
                        ChangeVaule12 = (December) - Expected12;
                        ChangePrec12 = 0;
                        if (Expected12 != 0)
                        {
                            ChangePrec12 = 0;//  Math.Round((ChangeVaule12 / MonthTransaction12) * 100, 3);
                        }


                        trialBalance.Expected1 = Expected1;
                        trialBalance.MonthTransaction1 = MonthTransaction1;
                        trialBalance.ChangeVaule1 = ChangeVaule1;
                        trialBalance.ChangePrec1 = ChangePrec1;

                        trialBalance.Expected2 = Expected2;
                        trialBalance.MonthTransaction2 = MonthTransaction2;
                        trialBalance.ChangeVaule2 = ChangeVaule2;
                        trialBalance.ChangePrec2 = ChangePrec2;


                        trialBalance.Expected3 = Expected3;
                        trialBalance.MonthTransaction3 = MonthTransaction3;
                        trialBalance.ChangeVaule3 = ChangeVaule3;
                        trialBalance.ChangePrec3 = ChangePrec3;


                        trialBalance.Expected4 = Expected4;
                        trialBalance.MonthTransaction4 = MonthTransaction4;
                        trialBalance.ChangeVaule4 = ChangeVaule4;
                        trialBalance.ChangePrec4 = ChangePrec4;


                        trialBalance.Expected5 = Expected5;
                        trialBalance.MonthTransaction5 = MonthTransaction5;
                        trialBalance.ChangeVaule5 = ChangeVaule5;
                        trialBalance.ChangePrec5 = ChangePrec5;


                        trialBalance.Expected6 = Expected6;
                        trialBalance.MonthTransaction6 = MonthTransaction6;
                        trialBalance.ChangeVaule6 = ChangeVaule6;
                        trialBalance.ChangePrec6 = ChangePrec6;


                        trialBalance.Expected7 = Expected7;
                        trialBalance.MonthTransaction7 = MonthTransaction7;
                        trialBalance.ChangeVaule7 = ChangeVaule7;
                        trialBalance.ChangePrec7 = ChangePrec7;


                        trialBalance.Expected8 = Expected8;
                        trialBalance.MonthTransaction8 = MonthTransaction8;
                        trialBalance.ChangeVaule8 = ChangeVaule8;
                        trialBalance.ChangePrec8 = ChangePrec8;


                        trialBalance.Expected9 = Expected9;
                        trialBalance.MonthTransaction9 = MonthTransaction9;
                        trialBalance.ChangeVaule9 = ChangeVaule9;
                        trialBalance.ChangePrec9 = ChangePrec9;


                        trialBalance.Expected10 = Expected10;
                        trialBalance.MonthTransaction10 = MonthTransaction10;
                        trialBalance.ChangeVaule10 = ChangeVaule10;
                        trialBalance.ChangePrec10 = ChangePrec10;


                        trialBalance.Expected11 = Expected11;
                        trialBalance.MonthTransaction11 = MonthTransaction11;
                        trialBalance.ChangeVaule11 = ChangeVaule11;
                        trialBalance.ChangePrec11 = ChangePrec11;


                        trialBalance.Expected12 = Expected12;
                        trialBalance.MonthTransaction12 = MonthTransaction12;
                        trialBalance.ChangeVaule12 = ChangeVaule12;
                        trialBalance.ChangePrec12 = ChangePrec12;


                        trialBalance.Expected1 = Expected1;
                        trialBalance.MonthTransaction1 = MonthTransaction1;
                        trialBalance.ChangeVaule1 = ChangeVaule1;
                        trialBalance.ChangePrec1 = ChangePrec1;



                        trialBalance.Expected1 = Expected1;
                        trialBalance.MonthTransaction1 = MonthTransaction1;
                        trialBalance.ChangeVaule1 = ChangeVaule1;
                        trialBalance.ChangePrec1 = ChangePrec1;


                        trialBalance.Expected1 = Expected1;
                        trialBalance.MonthTransaction1 = MonthTransaction1;
                        trialBalance.ChangeVaule1 = ChangeVaule1;
                        trialBalance.ChangePrec1 = ChangePrec1;

                        trialBalance.ExpectedAnnually = (trialBalance.Expected1 + trialBalance.Expected2 + trialBalance.Expected3 + trialBalance.Expected4 + trialBalance.Expected5 + trialBalance.Expected5 +
                                trialBalance.Expected7 + trialBalance.Expected8 + trialBalance.Expected9 + trialBalance.Expected10 + trialBalance.Expected11 + trialBalance.Expected12);

                        trialBalance.ActualTotal = Math.Round(NetTot, 4);
                        trialBalance.RemainingExpected = Math.Round((trialBalance.ExpectedAnnually - Math.Abs(NetTot)), 4);
                        trialBalance.RemainingRatio = 0;
                        trialBalance.ExpectedAnnually = Math.Round(trialBalance.ExpectedAnnually, 4);
                        if (false/*(AccountData.FirstOrDefault(m => m.CostFather == Acc.CostNumber) != null) && (Acc.CostLevel < Obj.AccountLevelDropVMID)*/)
                        {
                            trialBalance.IsMainAccount = 1;
                            trialBalance.MainAccount = "{*}";



                            trialBalance.nCreditBalance = 0;
                            trialBalance.nCreditTransAction = 0;
                            trialBalance.nDebitBalance = 0;
                            trialBalance.nDebitTransAction = 0;
                            trialBalance.nNetCredit = 0;
                            trialBalance.nNetDebit = 0;

                        }
                        else
                        {
                            trialBalance.IsMainAccount = 0;
                            trialBalance.MainAccount = "";
                            trialBalance.MainAccount = "{*}";
                            trialBalance.nExpectedAnnually = trialBalance.ExpectedAnnually;
                            trialBalance.nActualTotal = trialBalance.ActualTotal;
                            trialBalance.nRemainingExpected = trialBalance.RemainingExpected;
                            trialBalance.nRemainingRatio = trialBalance.RemainingRatio;

                            trialBalance.nCreditBalance = CreditBalance;
                            trialBalance.nCreditTransAction = CreditTransAction;
                            trialBalance.nDebitBalance = DebitBalance;
                            trialBalance.nDebitTransAction = DebitTransAction;
                            trialBalance.nNetCredit = NetCredit;
                            trialBalance.nNetDebit = NetDebit;

                            trialBalance.nJanuary = January;
                            trialBalance.nFebruary = February;
                            trialBalance.nMarch = March;
                            trialBalance.nApril = April;
                            trialBalance.nMay = May;
                            trialBalance.nJune = June;
                            trialBalance.nJuly = July;
                            trialBalance.nAugust = August;
                            trialBalance.nSeptember = September;
                            trialBalance.nOctober = October;
                            trialBalance.nNovember = November;
                            trialBalance.nDecember = December;



                        }
                        if (!Obj.ShowEstimatedZero)
                        {
                            if ((trialBalance.Expected1 + trialBalance.Expected2 + trialBalance.Expected3 + trialBalance.Expected4 + trialBalance.Expected5 + trialBalance.Expected5 +
                                trialBalance.Expected7 + trialBalance.Expected8 + trialBalance.Expected9 + trialBalance.Expected10 + trialBalance.Expected11 + trialBalance.Expected12) != 0)
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }
                        }
                        else
                        {
                            //if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                            //{
                            TrialBalanceVMList.Add(trialBalance);
                            //}


                        }




                    }

                }
                if (!Obj.ShowMainAccountValue)
                {
                    foreach (var trialBalance in TrialBalanceVMList.Where(m => m.IsMainAccount == 1))
                    {
                        if (trialBalance.IsMainAccount == 1)
                        {
                            trialBalance.ActualTotal = 0;
                            trialBalance.RemainingExpected = 0;
                            trialBalance.RemainingRatio = 0;
                            trialBalance.ExpectedAnnually = 0;

                            trialBalance.Expected = 0;
                            trialBalance.MonthTransaction = 0;
                            trialBalance.ChangeVaule = 0;
                            trialBalance.ChangePrec = 0;
                            trialBalance.CreditBalance = 0;
                            trialBalance.CreditTransAction = 0;
                            trialBalance.DebitBalance = 0;
                            trialBalance.DebitTransAction = 0;
                            trialBalance.NetCredit = 0;
                            trialBalance.NetDebit = 0;


                            trialBalance.Expected1 = 0;
                            trialBalance.MonthTransaction1 = 0;
                            trialBalance.ChangeVaule1 = 0;
                            trialBalance.ChangePrec1 = 0;

                            trialBalance.Expected2 = 0;
                            trialBalance.MonthTransaction2 = 0;
                            trialBalance.ChangeVaule2 = 0;
                            trialBalance.ChangePrec2 = 0;


                            trialBalance.Expected3 = 0;
                            trialBalance.MonthTransaction3 = 0;
                            trialBalance.ChangeVaule3 = 0;
                            trialBalance.ChangePrec3 = 0;


                            trialBalance.Expected4 = 0;
                            trialBalance.MonthTransaction4 = 0;
                            trialBalance.ChangeVaule4 = 0;
                            trialBalance.ChangePrec4 = 0;


                            trialBalance.Expected5 = 0;
                            trialBalance.MonthTransaction5 = 0;
                            trialBalance.ChangeVaule5 = 0;
                            trialBalance.ChangePrec5 = 0;


                            trialBalance.Expected6 = 0;
                            trialBalance.MonthTransaction6 = 0;
                            trialBalance.ChangeVaule6 = 0;
                            trialBalance.ChangePrec6 = 0;


                            trialBalance.Expected7 = 0;
                            trialBalance.MonthTransaction7 = 0;
                            trialBalance.ChangeVaule7 = 0;
                            trialBalance.ChangePrec7 = 0;


                            trialBalance.Expected8 = 0;
                            trialBalance.MonthTransaction8 = 0;
                            trialBalance.ChangeVaule8 = 0;
                            trialBalance.ChangePrec8 = 0;


                            trialBalance.Expected9 = 0;
                            trialBalance.MonthTransaction9 = 0;
                            trialBalance.ChangeVaule9 = 0;
                            trialBalance.ChangePrec9 = 0;


                            trialBalance.Expected10 = 0;
                            trialBalance.MonthTransaction10 = 0;
                            trialBalance.ChangeVaule10 = 0;
                            trialBalance.ChangePrec10 = 0;


                            trialBalance.Expected11 = 0;
                            trialBalance.MonthTransaction11 = 0;
                            trialBalance.ChangeVaule11 = 0;
                            trialBalance.ChangePrec11 = 0;


                            trialBalance.Expected12 = 0;
                            trialBalance.MonthTransaction12 = 0;
                            trialBalance.ChangeVaule12 = 0;
                            trialBalance.ChangePrec12 = 0;


                            trialBalance.January = 0;
                            trialBalance.February = 0;
                            trialBalance.March = 0;
                            trialBalance.April = 0;
                            trialBalance.May = 0;
                            trialBalance.June = 0;
                            trialBalance.July = 0;
                            trialBalance.August = 0;
                            trialBalance.September = 0;
                            trialBalance.October = 0;
                            trialBalance.November = 0;
                            trialBalance.December = 0;

                            trialBalance.nActualTotal = 0;
                            trialBalance.nRemainingExpected = 0;
                            trialBalance.nRemainingRatio = 0;
                            trialBalance.nExpectedAnnually = 0;

                            trialBalance.nExpected = 0;
                            trialBalance.nMonthTransaction = 0;
                            trialBalance.nChangeVaule = 0;
                            trialBalance.nChangePrec = 0;
                            trialBalance.nCreditBalance = 0;
                            trialBalance.nCreditTransAction = 0;
                            trialBalance.nDebitBalance = 0;
                            trialBalance.nDebitTransAction = 0;
                            trialBalance.nNetCredit = 0;
                            trialBalance.nNetDebit = 0;


                            trialBalance.nExpected1 = 0;
                            trialBalance.nMonthTransaction1 = 0;
                            trialBalance.nChangeVaule1 = 0;
                            trialBalance.nChangePrec1 = 0;

                            trialBalance.nExpected2 = 0;
                            trialBalance.nMonthTransaction2 = 0;
                            trialBalance.nChangeVaule2 = 0;
                            trialBalance.nChangePrec2 = 0;


                            trialBalance.nExpected3 = 0;
                            trialBalance.nMonthTransaction3 = 0;
                            trialBalance.nChangeVaule3 = 0;
                            trialBalance.nChangePrec3 = 0;


                            trialBalance.nExpected4 = 0;
                            trialBalance.nMonthTransaction4 = 0;
                            trialBalance.nChangeVaule4 = 0;
                            trialBalance.nChangePrec4 = 0;


                            trialBalance.nExpected5 = 0;
                            trialBalance.nMonthTransaction5 = 0;
                            trialBalance.nChangeVaule5 = 0;
                            trialBalance.nChangePrec5 = 0;


                            trialBalance.nExpected6 = 0;
                            trialBalance.nMonthTransaction6 = 0;
                            trialBalance.nChangeVaule6 = 0;
                            trialBalance.nChangePrec6 = 0;


                            trialBalance.nExpected7 = 0;
                            trialBalance.nMonthTransaction7 = 0;
                            trialBalance.nChangeVaule7 = 0;
                            trialBalance.nChangePrec7 = 0;


                            trialBalance.nExpected8 = 0;
                            trialBalance.nMonthTransaction8 = 0;
                            trialBalance.nChangeVaule8 = 0;
                            trialBalance.nChangePrec8 = 0;


                            trialBalance.nExpected9 = 0;
                            trialBalance.nMonthTransaction9 = 0;
                            trialBalance.nChangeVaule9 = 0;
                            trialBalance.nChangePrec9 = 0;


                            trialBalance.nExpected10 = 0;
                            trialBalance.nMonthTransaction10 = 0;
                            trialBalance.nChangeVaule10 = 0;
                            trialBalance.nChangePrec10 = 0;


                            trialBalance.nExpected11 = 0;
                            trialBalance.nMonthTransaction11 = 0;
                            trialBalance.nChangeVaule11 = 0;
                            trialBalance.nChangePrec11 = 0;


                            trialBalance.nExpected12 = 0;
                            trialBalance.nMonthTransaction12 = 0;
                            trialBalance.nChangeVaule12 = 0;
                            trialBalance.nChangePrec12 = 0;


                            trialBalance.nJanuary = 0;
                            trialBalance.nFebruary = 0;
                            trialBalance.nMarch = 0;
                            trialBalance.nApril = 0;
                            trialBalance.nMay = 0;
                            trialBalance.nJune = 0;
                            trialBalance.nJuly = 0;
                            trialBalance.nAugust = 0;
                            trialBalance.nSeptember = 0;
                            trialBalance.nOctober = 0;
                            trialBalance.nNovember = 0;
                            trialBalance.nDecember = 0;
                        }

                    }

                }



                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TrialBalanceVM");
                table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                ds.Tables.Add(table1);

                var report = new EstimatedBudgetForCCYearReport();

                string reportFilePath = Server.MapPath("/ReportLayout/EstimatedBudgetForCCYearReport.repx");
                report.LoadLayoutFromXml(reportFilePath);

                report.LbCoName.Text = CoInfo.ArabicName;
                //report.LbFromDate.Text = Obj.FromCollectionDate.ToString("dd/MM/yyyy");
                //report.LbTODate.Text = Obj.ToCollectionDate.ToString("dd/MM/yyyy");

                report.DataSource = ds;
                report.DataMember = "TrialBalanceVM";

                report.xrLabel3.Text = CheckList;

                report.LevelName.Text = String.Format("{0} {1}", Resources.Resource.Level, Obj.AccountLevelDropVMID.ToString());

                report.CostCenterNum.Text = Obj.AccNo.ToString();

                if (!String.IsNullOrEmpty(Obj.AccNo))
                {
                    var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, Obj.AccNo);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.CostCenterName.Text = AccName.ArabicName;
                    }
                    else
                    {
                        report.CostCenterName.Text = AccName.EnglishName;
                    }

                }

            
                    ////report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();




                    return View("ReportPDF", report);



                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                    EstimatedBudgetForCCYearReport report = new EstimatedBudgetForCCYearReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/EstimatedBudgetForCCYearReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("TrialBalanceVM");
                    table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "TrialBalanceVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);

                }


            }



            public ActionResult ServiceReportPDF(string id, string id2, int id3, string id4, int id5, int id6, int id7, int id8, int id9, int id10, int id11, int id12, int id13, int id14, int id15, int id16, int id17)
            {
            try
            {
                int Email = id17;
                ServiceReportVM Obj = new ServiceReportVM();

                var userId = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                Obj.FromDate = fromDate;
                Obj.ToDate = toDate;
                Obj.BillID = id3;
                Obj.AccountNumber = id4;
                Obj.SaleID = id5;
                Obj.ServiceNo = id16;

                string CheckList = "  ";
                string List = " ";
                if (id6 == 1)
                {
                    Obj.Detailed = true;
                    List += Resources.Resource.Detailed + " ";

                }
                if (id7 == 1)
                {
                    Obj.Collection = true;
                    List += Resources.Resource.Collection + " ";

                }
                if (id8 == 1)
                {
                    Obj.SaleService = true;
                    CheckList += Resources.Resource.SaleService + " / ";

                }
                if (id9 == 1)
                {
                    Obj.SaleMultiService = true;
                    CheckList += Resources.Resource.SaleMultiService + " / ";

                }
                if (id10 == 1)
                {
                    Obj.ReturnService = true;
                    CheckList += Resources.Resource.ReturnService + " / ";

                }
                if (id11 == 1)
                {
                    Obj.ReturnMultiService = true;
                    CheckList += Resources.Resource.ReturnMultiService + " / ";

                }
                if (id12 == 1)
                {
                    Obj.PurchaseService = true;
                    CheckList += Resources.Resource.PurchaseService + " / ";

                }
                if (id13 == 1)
                {
                    Obj.PurchaseMultiService = true;
                    CheckList += Resources.Resource.PurchaseMultiService + " / ";

                }
                if (id14 == 1)
                {
                    Obj.ReturnPurchaseService = true;
                    CheckList += Resources.Resource.ReturnPurchaseService + " / ";

                }

                if (id15 == 1)
                {
                    Obj.ReturnPurchaseMultiService = true;
                    CheckList += Resources.Resource.ReturnPurchaseMultiService + " / ";


                }

                if (Obj.AccountNumber == "0")
                {
                    Obj.AccountNumber = "";
                }
          
                IEnumerable<ServiceReportVM> AllServiceReportVM=new List<ServiceReportVM>();

                if (id6 == 1)
                {
                     AllServiceReportVM = _unitOfWork.NativeSql.GetServiceReportDetailed(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                }
                else
                {
                     AllServiceReportVM = _unitOfWork.NativeSql.GetServiceReport(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                }
                


                List<ServiceReportVM> AllData = new List<ServiceReportVM>();
                List<ServiceReportVM> Ch1 = new List<ServiceReportVM>();
                List<ServiceReportVM> Ch2 = new List<ServiceReportVM>();
                List<ServiceReportVM> Ch3 = new List<ServiceReportVM>();
                List<ServiceReportVM> Ch4 = new List<ServiceReportVM>();
                List<ServiceReportVM> Ch5 = new List<ServiceReportVM>();
                List<ServiceReportVM> Ch6 = new List<ServiceReportVM>();
                List<ServiceReportVM> Ch7 = new List<ServiceReportVM>();
                List<ServiceReportVM> Ch8 = new List<ServiceReportVM>();

                if (AllServiceReportVM == null)
                {
                    return Json(new List<ServiceReportVM>(), JsonRequestBehavior.AllowGet);
                }
                if (Obj.SaleID != 0)
                {
                    AllServiceReportVM = AllServiceReportVM.Where(m => m.SaleID == Obj.SaleID).ToList();
                }
                if (Obj.BillID != 0)
                {
                    AllServiceReportVM = AllServiceReportVM.Where(m => m.BillID == Obj.BillID).ToList();
                }
                if (!String.IsNullOrEmpty(Obj.AccountNumber))
                {
                    AllServiceReportVM = AllServiceReportVM.Where(m => m.AccountNumber == Obj.AccountNumber).ToList();
                }
                if (Obj.ServiceNo != 0)
                {
                    AllServiceReportVM = AllServiceReportVM.Where(m => m.ServiceNo == Obj.ServiceNo).ToList();
                }

                if (Obj.SaleService)
                {
                    Ch1 = AllServiceReportVM.Where(m => m.TransactionKindNo == 10).ToList();
                }
                if (Obj.SaleMultiService)
                {
                    Ch2 = AllServiceReportVM.Where(m => m.TransactionKindNo == 11).ToList();
                }
                if (Obj.ReturnService)
                {
                    Ch3 = AllServiceReportVM.Where(m => m.TransactionKindNo == 19).ToList();
                }
                if (Obj.ReturnMultiService)
                {
                    Ch4 = AllServiceReportVM.Where(m => m.TransactionKindNo == 20).ToList();
                }
                if (Obj.PurchaseService)
                {
                    Ch5 = AllServiceReportVM.Where(m => m.TransactionKindNo == 12).ToList();
                }
                if (Obj.PurchaseMultiService)
                {
                    Ch6 = AllServiceReportVM.Where(m => m.TransactionKindNo == 13).ToList();
                }
                if (Obj.ReturnPurchaseService)
                {
                    Ch7 = AllServiceReportVM.Where(m => m.TransactionKindNo == 21).ToList();
                }
                if (Obj.ReturnPurchaseMultiService)
                {
                    Ch8 = AllServiceReportVM.Where(m => m.TransactionKindNo == 22).ToList();
                }
                if (Ch1.Count > 0)
                {
                    foreach (var c in Ch1)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch2.Count > 0)
                {
                    foreach (var c in Ch2)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch3.Count > 0)
                {
                    foreach (var c in Ch3)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch4.Count > 0)
                {
                    foreach (var c in Ch4)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch5.Count > 0)
                {
                    foreach (var c in Ch5)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch6.Count > 0)
                {
                    foreach (var c in Ch6)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch7.Count > 0)
                {
                    foreach (var c in Ch7)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch8.Count > 0)
                {
                    foreach (var c in Ch8)
                    {
                        AllData.Add(c);
                    }
                }
                if (Obj.SaleService == false && Obj.SaleMultiService == false && Obj.ReturnService == false && Obj.ReturnMultiService == false &&
                    Obj.PurchaseService == false && Obj.PurchaseMultiService == false && Obj.ReturnPurchaseService == false && Obj.ReturnPurchaseMultiService == false)
                {
                    if (id6 == 1)
                    {
                        DataSet ds = new DataSet();
                        DataTable table1 = new DataTable("ServiceReportVM");
                        table1 = FunctionUnit.LINQResultToDataTable(AllServiceReportVM);

                        ds.Tables.Add(table1);

                        var report = new XtraServiceReportDetail();

                        string reportFilePath = Server.MapPath("/ReportLayout/XtraServiceReportDetail.repx");
                        report.LoadLayoutFromXml(reportFilePath);

                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");

                        report.ServiceNumber.Text = Obj.ServiceNo.ToString();

                        report.ToAccountNumber.Text = Obj.AccountNumber;


                        int count = AllServiceReportVM.Sum(m => m.ServiceNo);
                        report.Num.Text = AllServiceReportVM.Count().ToString();



                        Obj.SumTotal = AllServiceReportVM.Sum(m => (m.Total)).ToString();
                        Obj.SumDiscount = AllServiceReportVM.Sum(m => (m.Discount)).ToString();


                        Obj.NetTotalAfterDiscount = AllServiceReportVM.Sum(m => (m.NetTotalAfterDiscount));

                        Obj.SumTax = AllServiceReportVM.Sum(m => (m.Tax)).ToString();
                        Obj.SumNetTotal = AllServiceReportVM.Sum(m => (m.NetTotal)).ToString();

                        Obj.SumTotalAfterDiscount = (double.Parse(Obj.SumTotal) - double.Parse(Obj.SumDiscount)).ToString();

                        if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                        {
                            Obj.SumTotal = "" + String.Format("{0:n2}", Obj.SumTotal) + "";
                            Obj.SumDiscount = "" + String.Format("{0:n2}", Obj.SumDiscount) + "";
                            //Obj.NetTotalAfterDiscount = "" + String.Format("{0:n2}", Obj.NetTotalAfterDiscount.ToString()) + "";
                            Obj.SumTax = "" + String.Format("{0:n2}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n2}", Obj.SumNetTotal) + "";
                            Obj.SumTotalAfterDiscount = "" + String.Format("{0:n2}", Obj.SumTotalAfterDiscount) + "";

                        }
                        else
                        {
                            Obj.SumTotal = "" + String.Format("{0:n3}", Obj.SumTotal) + "";
                            Obj.SumDiscount = "" + String.Format("{0:n3}", Obj.SumDiscount) + "";
                            //Obj.NetTotalAfterDiscount = "" + String.Format("{0:n3}", Obj.NetTotalAfterDiscount.ToString()) + "";
                            Obj.SumTax = "" + String.Format("{0:n3}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n3}", Obj.SumNetTotal) + "";
                            Obj.SumTotalAfterDiscount = "" + String.Format("{0:n3}", Obj.SumTotalAfterDiscount) + "";
                        }

                        report.SumTotal.Text = Obj.SumTotal;
                        report.SumDiscount.Text = Obj.SumDiscount;
                        report.SumTotalAfterDiscount.Text = Obj.SumTotalAfterDiscount;
                        report.SumTax.Text = Obj.SumTax;
                        report.SumNetTotal.Text = Obj.SumNetTotal;
                        report.LbVoucherNo.Text = Obj.BillID.ToString();

                        report.xrLabel11.Text = CheckList;
                        report.xrLabel14.Text = List;

                        if (!String.IsNullOrEmpty(Obj.AccountNumber))
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.AccountNumber);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.AccountName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.AccountName.Text = AccName.EnglishName;
                            }

                        }
                        if (Obj.ServiceNo != 0)
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.ServiceNo.ToString());
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.ServiceName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.ServiceName.Text = AccName.EnglishName;
                            }

                        }

                        if (Obj.SaleID != 0)
                        {
                            report.LbSaleMan.Text = String.Format("{0} {1}", Resources.Resource.SaleManName, Obj.SaleID.ToString());

                        }
                        else
                        {
                            report.LbSaleMan.Text = " ";

                        }

                        report.DataSource = ds;
                        report.DataMember = "ServiceReportVM";
                        report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                        report.CreateDocument();

                        if (Email == 1)
                        {
                            if (!String.IsNullOrEmpty(CoInfo.PDFEmail))
                            {
                                MemoryStream mem = new MemoryStream();
                                report.ExportToPdf(mem);

                                mem.Seek(0, System.IO.SeekOrigin.Begin);
                                Attachment att = new Attachment(mem, "ServiceReport.pdf", "application/pdf");

                                MailMessage mail = new MailMessage();
                                mail.Attachments.Add(att);


                                mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                                mail.To.Add(CoInfo.PDFEmail);

                                mail.Subject = report.LbReporttitle.Text;
                                mail.Body = "This is a  e-mail message sent by an application.";



                                SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                                //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                                NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                                smtp.Credentials = Credentials;


                                smtp.Send(mail);



                                // Close the memory stream.
                                mem.Close();
                                mem.Flush();

                            }
                        }
                        return View("ReportPDF", report);

                    }

                    else
                    {
                        DataSet ds = new DataSet();
                        DataTable table1 = new DataTable("ServiceReportVM");
                        table1 = FunctionUnit.LINQResultToDataTable(AllServiceReportVM);

                        ds.Tables.Add(table1);

                        var report = new XtraServiceReport();

                        string reportFilePath = Server.MapPath("/ReportLayout/XtraServiceReport.repx");
                        report.LoadLayoutFromXml(reportFilePath);



                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");

                        report.ServiceNumber.Text = Obj.ServiceNo.ToString();

                        report.ToAccountNumber.Text = Obj.AccountNumber;


                        int count = AllServiceReportVM.Sum(m => m.ServiceNo);
                        report.Num.Text = AllServiceReportVM.Count().ToString();



                        Obj.SumTotal = AllServiceReportVM.Sum(m => (m.Total)).ToString();
                        Obj.SumDiscount = AllServiceReportVM.Sum(m => (m.Discount)).ToString();


                        Obj.NetTotalAfterDiscount = AllServiceReportVM.Sum(m => (m.NetTotalAfterDiscount));

                        Obj.SumTax = AllServiceReportVM.Sum(m => (m.Tax)).ToString();
                        Obj.SumNetTotal = AllServiceReportVM.Sum(m => (m.NetTotal)).ToString();

                        Obj.SumTotalAfterDiscount = (double.Parse(Obj.SumTotal) - double.Parse(Obj.SumDiscount)).ToString();

                        if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                        {
                            Obj.SumTotal = "" + String.Format("{0:n2}", Obj.SumTotal) + "";
                            Obj.SumDiscount = "" + String.Format("{0:n2}", Obj.SumDiscount) + "";
                            //Obj.NetTotalAfterDiscount = "" + String.Format("{0:n2}", Obj.NetTotalAfterDiscount.ToString()) + "";
                            Obj.SumTax = "" + String.Format("{0:n2}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n2}", Obj.SumNetTotal) + "";
                            Obj.SumTotalAfterDiscount = "" + String.Format("{0:n2}", Obj.SumTotalAfterDiscount) + "";

                        }
                        else
                        {
                            Obj.SumTotal = "" + String.Format("{0:n3}", Obj.SumTotal) + "";
                            Obj.SumDiscount = "" + String.Format("{0:n3}", Obj.SumDiscount) + "";
                            //Obj.NetTotalAfterDiscount = "" + String.Format("{0:n3}", Obj.NetTotalAfterDiscount.ToString()) + "";
                            Obj.SumTax = "" + String.Format("{0:n3}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n3}", Obj.SumNetTotal) + "";
                            Obj.SumTotalAfterDiscount = "" + String.Format("{0:n3}", Obj.SumTotalAfterDiscount) + "";
                        }



                        report.SumTotal.Text = Obj.SumTotal;
                        report.SumDiscount.Text = Obj.SumDiscount;
                        report.SumTotalAfterDiscount.Text = Obj.SumTotalAfterDiscount;
                        report.SumTax.Text = Obj.SumTax;
                        report.SumNetTotal.Text = Obj.SumNetTotal;
                        report.LbVoucherNo.Text = Obj.BillID.ToString();

                        report.xrLabel11.Text = CheckList;
                        report.xrLabel14.Text = List;

                        if (!String.IsNullOrEmpty(Obj.AccountNumber))
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.AccountNumber);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.AccountName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.AccountName.Text = AccName.EnglishName;
                            }

                        }
                        if (Obj.ServiceNo != 0)
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.ServiceNo.ToString());
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.ServiceName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.ServiceName.Text = AccName.EnglishName;
                            }

                        }
                        if (Obj.SaleID != 0)
                        {
                            report.LbSaleMan.Text = String.Format("{0} {1}", Resources.Resource.SaleManName, Obj.SaleID.ToString());

                        }
                        else
                        {
                            report.LbSaleMan.Text = " ";

                        }


                        report.DataSource = ds;
                        report.DataMember = "ServiceReportVM";
                        report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                        report.CreateDocument();

                        if (Email == 1)
                        {
                            if (!String.IsNullOrEmpty(CoInfo.PDFEmail))
                            {
                                MemoryStream mem = new MemoryStream();
                                report.ExportToPdf(mem);

                                mem.Seek(0, System.IO.SeekOrigin.Begin);
                                Attachment att = new Attachment(mem, "ServiceReport.pdf", "application/pdf");

                                MailMessage mail = new MailMessage();
                                mail.Attachments.Add(att);


                                mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                                mail.To.Add(CoInfo.PDFEmail);

                                mail.Subject = report.LbReporttitle.Text;
                                mail.Body = "This is a  e-mail message sent by an application.";



                                SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                                //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                                NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                                smtp.Credentials = Credentials;


                                smtp.Send(mail);



                                // Close the memory stream.
                                mem.Close();
                                mem.Flush();

                            }
                        }
                        return View("ReportPDF", report);

                    }


                }
                else
                {

                    if (id6 == 1)
                    {
                        DataSet ds = new DataSet();
                        DataTable table1 = new DataTable("ServiceReportVM");
                        table1 = FunctionUnit.LINQResultToDataTable(AllData);

                        ds.Tables.Add(table1);

                        var report = new XtraServiceReportDetail();

                        string reportFilePath = Server.MapPath("/ReportLayout/XtraServiceReportDetail.repx");
                        report.LoadLayoutFromXml(reportFilePath);


                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;
                        report.LbVoucherNo.Text = Obj.BillID.ToString();
                        report.Num.Text = AllData.Count().ToString();

                        report.ServiceNumber.Text = Obj.ServiceNo.ToString();

                        report.ToAccountNumber.Text = Obj.AccountNumber;

                        report.xrLabel14.Text = List;


                        report.xrLabel11.Text = CheckList;

                        if (!String.IsNullOrEmpty(Obj.AccountNumber))
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.AccountNumber);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.AccountName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.AccountName.Text = AccName.EnglishName;
                            }

                        }
                        if (Obj.ServiceNo != 0)
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.ServiceNo.ToString());
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.ServiceName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.ServiceName.Text = AccName.EnglishName;
                            }

                        }

                        if (Obj.SaleID != 0)
                        {
                            report.LbSaleMan.Text = String.Format("{0} {1}", Resources.Resource.SaleManName, Obj.SaleID.ToString());

                        }
                        else
                        {
                            report.LbSaleMan.Text = " ";

                        }


                        report.DataSource = ds;
                        report.DataMember = "ServiceReportVM";
                        report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();


                        Obj.SumTotal = AllData.Sum(m => (m.Total)).ToString();
                        Obj.SumDiscount = AllData.Sum(m => (m.Discount)).ToString();


                        Obj.NetTotalAfterDiscount = AllData.Sum(m => (m.NetTotalAfterDiscount));

                        Obj.SumTax = AllData.Sum(m => (m.Tax)).ToString();
                        Obj.SumNetTotal = AllData.Sum(m => (m.NetTotal)).ToString();

                        Obj.SumTotalAfterDiscount = (double.Parse(Obj.SumTotal) - double.Parse(Obj.SumDiscount)).ToString();

                        if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                        {
                            Obj.SumTotal = "" + String.Format("{0:n2}", Obj.SumTotal) + "";
                            Obj.SumDiscount = "" + String.Format("{0:n2}", Obj.SumDiscount) + "";
                            //Obj.NetTotalAfterDiscount = "" + String.Format("{0:n2}", Obj.NetTotalAfterDiscount.ToString()) + "";
                            Obj.SumTax = "" + String.Format("{0:n2}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n2}", Obj.SumNetTotal) + "";
                            Obj.SumTotalAfterDiscount = "" + String.Format("{0:n2}", Obj.SumTotalAfterDiscount) + "";

                        }
                        else
                        {
                            Obj.SumTotal = "" + String.Format("{0:n3}", Obj.SumTotal) + "";
                            Obj.SumDiscount = "" + String.Format("{0:n3}", Obj.SumDiscount) + "";
                            //Obj.NetTotalAfterDiscount = "" + String.Format("{0:n3}", Obj.NetTotalAfterDiscount.ToString()) + "";
                            Obj.SumTax = "" + String.Format("{0:n3}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n3}", Obj.SumNetTotal) + "";
                            Obj.SumTotalAfterDiscount = "" + String.Format("{0:n3}", Obj.SumTotalAfterDiscount) + "";
                        }


                        report.SumTotal.Text = Obj.SumTotal;
                        report.SumDiscount.Text = Obj.SumDiscount;
                        report.SumTotalAfterDiscount.Text = Obj.SumTotalAfterDiscount;
                        report.SumTax.Text = Obj.SumTax;
                        report.SumNetTotal.Text = Obj.SumNetTotal;


                        report.CreateDocument();
                        if (Email == 1)
                        {
                            if (!String.IsNullOrEmpty(CoInfo.PDFEmail))
                            {
                                MemoryStream mem = new MemoryStream();
                                report.ExportToPdf(mem);

                                mem.Seek(0, System.IO.SeekOrigin.Begin);
                                Attachment att = new Attachment(mem, "ServiceReport.pdf", "application/pdf");

                                MailMessage mail = new MailMessage();
                                mail.Attachments.Add(att);


                                mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                                mail.To.Add(CoInfo.PDFEmail);

                                mail.Subject = report.LbReporttitle.Text;
                                mail.Body = "This is a  e-mail message sent by an application.";



                                SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                                //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                                NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                                smtp.Credentials = Credentials;


                                smtp.Send(mail);



                                // Close the memory stream.
                                mem.Close();
                                mem.Flush();

                            }
                        }
                        return View("ReportPDF", report);

                    }


                    else
                    {
                        DataSet ds = new DataSet();
                        DataTable table1 = new DataTable("ServiceReportVM");
                        table1 = FunctionUnit.LINQResultToDataTable(AllData);

                        ds.Tables.Add(table1);

                        var report = new XtraServiceReport();

                        string reportFilePath = Server.MapPath("/ReportLayout/XtraServiceReport.repx");
                        report.LoadLayoutFromXml(reportFilePath);


                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;
                        report.LbVoucherNo.Text = Obj.BillID.ToString();
                        report.Num.Text = AllData.Count().ToString();

                        report.ServiceNumber.Text = Obj.ServiceNo.ToString();

                        report.ToAccountNumber.Text = Obj.AccountNumber;

                        report.xrLabel14.Text = List;


                        report.xrLabel11.Text = CheckList;

                        if (!String.IsNullOrEmpty(Obj.AccountNumber))
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.AccountNumber);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.AccountName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.AccountName.Text = AccName.EnglishName;
                            }

                        }
                        if (Obj.ServiceNo != 0)
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.ServiceNo.ToString());
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.ServiceName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.ServiceName.Text = AccName.EnglishName;
                            }

                        }

                        if (Obj.SaleID != 0)
                        {
                            report.LbSaleMan.Text = String.Format("{0} {1}", Resources.Resource.SaleManName, Obj.SaleID.ToString());

                        }
                        else
                        {
                            report.LbSaleMan.Text = " ";

                        }


                        report.DataSource = ds;
                        report.DataMember = "ServiceReportVM";
                        report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();


                        Obj.SumTotal = AllData.Sum(m => (m.Total)).ToString();
                        Obj.SumDiscount = AllData.Sum(m => (m.Discount)).ToString();


                        Obj.NetTotalAfterDiscount = AllData.Sum(m => (m.NetTotalAfterDiscount));

                        Obj.SumTax = AllData.Sum(m => (m.Tax)).ToString();
                        Obj.SumNetTotal = AllData.Sum(m => (m.NetTotal)).ToString();

                        Obj.SumTotalAfterDiscount = (double.Parse(Obj.SumTotal) - double.Parse(Obj.SumDiscount)).ToString();

                        if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                        {
                            Obj.SumTotal = "" + String.Format("{0:n2}", Obj.SumTotal) + "";
                            Obj.SumDiscount = "" + String.Format("{0:n2}", Obj.SumDiscount) + "";
                            //Obj.NetTotalAfterDiscount = "" + String.Format("{0:n2}", Obj.NetTotalAfterDiscount.ToString()) + "";
                            Obj.SumTax = "" + String.Format("{0:n2}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n2}", Obj.SumNetTotal) + "";
                            Obj.SumTotalAfterDiscount = "" + String.Format("{0:n2}", Obj.SumTotalAfterDiscount) + "";

                        }
                        else
                        {
                            Obj.SumTotal = "" + String.Format("{0:n3}", Obj.SumTotal) + "";
                            Obj.SumDiscount = "" + String.Format("{0:n3}", Obj.SumDiscount) + "";
                            //Obj.NetTotalAfterDiscount = "" + String.Format("{0:n3}", Obj.NetTotalAfterDiscount.ToString()) + "";
                            Obj.SumTax = "" + String.Format("{0:n3}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n3}", Obj.SumNetTotal) + "";
                            Obj.SumTotalAfterDiscount = "" + String.Format("{0:n3}", Obj.SumTotalAfterDiscount) + "";
                        }


                        report.SumTotal.Text = Obj.SumTotal;
                        report.SumDiscount.Text = Obj.SumDiscount;
                        report.SumTotalAfterDiscount.Text = Obj.SumTotalAfterDiscount;
                        report.SumTax.Text = Obj.SumTax;
                        report.SumNetTotal.Text = Obj.SumNetTotal;


                        report.CreateDocument();
                        if (Email == 1)
                        {
                            if (!String.IsNullOrEmpty(CoInfo.PDFEmail))
                            {
                                MemoryStream mem = new MemoryStream();
                                report.ExportToPdf(mem);

                                mem.Seek(0, System.IO.SeekOrigin.Begin);
                                Attachment att = new Attachment(mem, "ServiceReport.pdf", "application/pdf");

                                MailMessage mail = new MailMessage();
                                mail.Attachments.Add(att);


                                mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                                mail.To.Add(CoInfo.PDFEmail);

                                mail.Subject = report.LbReporttitle.Text;
                                mail.Body = "This is a  e-mail message sent by an application.";



                                SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                                //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                                NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                                smtp.Credentials = Credentials;


                                smtp.Send(mail);



                                // Close the memory stream.
                                mem.Close();
                                mem.Flush();

                            }
                        }
                        return View("ReportPDF", report);

                    }

                }
            }
            catch (Exception ex)
            {
                List<ServiceReportVM> TrialBalanceVMList = new List<ServiceReportVM>();

                XtraServiceReport report = new XtraServiceReport();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraServiceReport.repx");
                report.LoadLayoutFromXml(reportFilePath);



                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("ServiceReportVM");
                table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                ds.Tables.Add(table1);




                report.DataSource = ds;
                report.DataMember = "ServiceReportVM";
                report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                report.CreateDocument();

                return View("ReportPDF", report);
            }

            }

            public ActionResult GetTrialBalanceSendEmail(string id, string id2, int id3, string id4, int id5, int id6, string id7, int id8, int id9, int id10, int id11)
            {
                try
                {
                    AccountLevelRepVM Obj = new AccountLevelRepVM();
                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    Obj.AccountLevelDropVMID = id3;
                    Obj.AccNo = id4;
                    Obj.FromDate = fromDate;
                    Obj.ToDate = toDate;
                    Obj.OrderBy = id11;

                    if (id5 == 1)
                    {
                        Obj.ShowZeroBalance = true;
                    }
                    if (id6 == 1)
                    {
                        Obj.Detail = true;
                    }
                    Obj.CostCenterNumber = id7;
                    if (id8 == 1)
                    {
                        Obj.ByCostCenter = true;
                    }

                    Obj.CostSearchType = id9;
                    if (id10 == 1)
                    {
                        Obj.Partofthenumber = true;
                    }
                    if (Obj.AccNo == "0")
                    {
                        Obj.AccNo = "";
                    }

                    if (Obj.CostCenterNumber == "0")
                    {
                        Obj.CostCenterNumber = "";
                    }



                    var userId = User.Identity.GetUserId();
                    string UserID = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(UserID);
                    var AccountData = _unitOfWork.NativeSql.GetChartOfAccountByLevel(UserInfo.fCompanyId);
                    int CurrYear = UserInfo.CurrYear;
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                    var Date = "01/01/" + CurrYear;
                    var OpenDate = "31/12/" + (CurrYear - 1).ToString();

                    string TempCostID = "0";
                    int TempCostType = 0;

                    if (Obj.ByCostCenter)
                    {
                        TempCostID = Obj.CostCenterNumber;
                        if (Obj.Partofthenumber)
                        {
                            TempCostType = Obj.CostSearchType;
                        }


                    }

                    IEnumerable<TrialBalanceVM> TotData = new List<TrialBalanceVM>();
                    if (Obj.Partofthenumber)
                    {
                        if (Obj.CostSearchType == 1)
                        {
                            Obj.CostCenterNumber = Obj.CostCenterNumber + "%";
                        }
                        else if (Obj.CostSearchType == 2)
                        {
                            Obj.CostCenterNumber = "%" + Obj.CostCenterNumber;
                        }
                        else if (Obj.CostSearchType == 3)
                        {
                            Obj.CostCenterNumber = "%" + Obj.CostCenterNumber + "%";

                        }
                    }

                    var TranData = _unitOfWork.NativeSql.GetTransactionForTrial(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                    if (DateTime.Parse(Date) != Obj.FromDate)
                        TotData = _unitOfWork.NativeSql.GetTotCreditDebitForTrial(UserInfo.fCompanyId, DateTime.Parse(Date), Obj.FromDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);

                    //----------------Get Open-------------//
                    IEnumerable<TrialBalanceVM> TotDataOpen = new List<TrialBalanceVM>();
                    TotDataOpen = _unitOfWork.NativeSql.GetTotCreditDebitForTrialOpen(UserInfo.fCompanyId, DateTime.Parse(OpenDate), DateTime.Parse(OpenDate));
                    foreach (var D in TotDataOpen)
                    {
                        TotData = TotData.Append(D);

                    }
                    //------------------------------------//



                    double TotalDebit = 0;
                    double TOTCredit = 0;
                    double NetCredit = 0;
                    double NetDebit = 0;
                    double CreditBalance = 0;
                    double DebitBalance = 0;
                    double CreditTransAction = 0;
                    double DebitTransAction = 0;

                    List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                    IEnumerable<ChartOfAccount> Accounts = new List<ChartOfAccount>();

                    IEnumerable<ChartOfAccount> LessMainAccount = new List<ChartOfAccount>();
                    if (!String.IsNullOrEmpty(Obj.AccNo))
                    {

                        var MainAccount = AccountData.FirstOrDefault(m => m.AccountNumber == Obj.AccNo);
                        var MainChild = AccountData.Where(m => m.AccountFather == Obj.AccNo).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();

                        foreach (var Acc in MainChild)
                        {
                            TotalDebit = 0;
                            TOTCredit = 0;
                            NetCredit = 0;
                            NetDebit = 0;
                            CreditBalance = 0;
                            DebitBalance = 0;
                            CreditTransAction = 0;
                            DebitTransAction = 0;


                            if (AccountData.FirstOrDefault(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel) != null)//Check if Account Had Branches
                            {
                                var AllAccount = AccountData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel)
                                                .OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();//Get All Account Branches
                                int FatherLevel = Acc.AccountLevel;
                                foreach (var CurrAccLevel in AllAccount)
                                {
                                    if (CurrAccLevel.AccountLevel == FatherLevel)
                                    {
                                        break;
                                    }
                                    else
                                    {

                                        var TransActionData = TranData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                        var BalanceData = TotData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                        foreach (var D in TransActionData)
                                        {
                                            CreditTransAction += D.CreditTransAction;
                                            DebitTransAction += D.DebitTransAction;
                                        }
                                        foreach (var Balance in BalanceData)
                                        {
                                            CreditBalance += Balance.CreditBalance;
                                            DebitBalance += Balance.DebitBalance;
                                        }



                                        TotalDebit = DebitTransAction + DebitBalance;
                                        TOTCredit = CreditTransAction + CreditBalance;




                                    }
                                }




                            }
                            else
                            {
                                var TransActionData = TranData.Where(m => m.AccountNumber == Acc.AccountNumber);
                                var BalanceData = TotData.Where(m => m.AccountNumber == Acc.AccountNumber);
                                foreach (var D in TransActionData)
                                {
                                    CreditTransAction += D.CreditTransAction;
                                    DebitTransAction += D.DebitTransAction;
                                }
                                foreach (var Balance in BalanceData)
                                {
                                    CreditBalance += Balance.CreditBalance;
                                    DebitBalance += Balance.DebitBalance;
                                }
                                TotalDebit = DebitTransAction + DebitBalance;
                                TOTCredit = CreditTransAction + CreditBalance;
                            }
                            if (TotalDebit > TOTCredit)
                            {
                                NetDebit = TotalDebit - TOTCredit;
                            }
                            if (TotalDebit < TOTCredit)
                            {
                                NetCredit = TOTCredit - TotalDebit;
                            }

                            TrialBalanceVM trialBalance = new TrialBalanceVM();
                            trialBalance.AccountNumber = Acc.AccountNumber;
                            trialBalance.Name = Acc.ArabicName;

                            trialBalance.CreditBalance = CreditBalance;
                            trialBalance.CreditTransAction = CreditTransAction;
                            trialBalance.DebitBalance = DebitBalance;
                            trialBalance.DebitTransAction = DebitTransAction;
                            trialBalance.NetCredit = NetCredit;
                            trialBalance.NetDebit = NetDebit;
                            trialBalance.TempCostID = TempCostID;
                            trialBalance.TempCostType = TempCostType;

                            trialBalance.nCreditBalance = CreditBalance;
                            trialBalance.nCreditTransAction = CreditTransAction;
                            trialBalance.nDebitBalance = DebitBalance;
                            trialBalance.nDebitTransAction = DebitTransAction;
                            trialBalance.nNetCredit = NetCredit;
                            trialBalance.nNetDebit = NetDebit;



                            if (!Obj.ShowZeroBalance)
                            {
                                if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                                {
                                    TrialBalanceVMList.Add(trialBalance);
                                }
                            }
                            else
                            {
                                if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                                {
                                    TrialBalanceVMList.Add(trialBalance);
                                }


                            }
                        }


                    }
                    else

                    if ((Obj.AccountLevelDropVMID > 0) && (!Obj.Detail))
                    {


                        Accounts = AccountData.Where(m => m.AccountLevel == Obj.AccountLevelDropVMID).OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                        LessMainAccount = AccountData.Where(m => m.AccountLevel < Obj.AccountLevelDropVMID).OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                        IEnumerable<string> FaherAccount = LessMainAccount.Where(m => m.AccountFather != "0").Select(m => m.AccountFather);


                        foreach (var A in LessMainAccount)
                        {
                            if (AccountData.FirstOrDefault(m => m.AccountFather == A.AccountNumber) != null)
                            {
                                //do nothing
                            }
                            else

                            {
                                Accounts = Accounts.Append(A);
                            }

                        }
                        Accounts = Accounts.OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();
                        // var MainChild = AccountData.Where(m => m.AccountFather == MainAcc.AccountNumber).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();
                        foreach (var Acc in Accounts)
                        {
                            TotalDebit = 0;
                            TOTCredit = 0;
                            NetCredit = 0;
                            NetDebit = 0;
                            CreditBalance = 0;
                            DebitBalance = 0;
                            CreditTransAction = 0;
                            DebitTransAction = 0;


                            if (AccountData.FirstOrDefault(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel) != null)
                            {
                                var AllAccount = AccountData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel)
                                                .OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();
                                int FatherLevel = Acc.AccountLevel;

                                foreach (var CurrAccLevel in AllAccount)
                                {
                                    if (CurrAccLevel.AccountLevel == FatherLevel)
                                    {
                                        break;
                                    }
                                    else
                                    {
                                        var TransActionData = TranData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                        var BalanceData = TotData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                        foreach (var D in TransActionData)
                                        {
                                            CreditTransAction += D.CreditTransAction;
                                            DebitTransAction += D.DebitTransAction;
                                        }
                                        foreach (var Balance in BalanceData)
                                        {
                                            CreditBalance += Balance.CreditBalance;
                                            DebitBalance += Balance.DebitBalance;
                                        }
                                        TotalDebit = DebitTransAction + DebitBalance;
                                        TOTCredit = CreditTransAction + CreditBalance;
                                    }
                                }
                            }
                            else
                            {
                                var TransActionData = TranData.Where(m => m.AccountNumber == Acc.AccountNumber);
                                var BalanceData = TotData.Where(m => m.AccountNumber == Acc.AccountNumber);
                                foreach (var D in TransActionData)
                                {
                                    CreditTransAction += D.CreditTransAction;
                                    DebitTransAction += D.DebitTransAction;
                                }
                                foreach (var Balance in BalanceData)
                                {
                                    CreditBalance += Balance.CreditBalance;
                                    DebitBalance += Balance.DebitBalance;
                                }

                                TotalDebit = DebitTransAction + DebitBalance;
                                TOTCredit = CreditTransAction + CreditBalance;
                            }
                            if (TotalDebit > TOTCredit)
                            {
                                NetDebit = TotalDebit - TOTCredit;
                            }
                            if (TotalDebit < TOTCredit)
                            {
                                NetCredit = TOTCredit - TotalDebit;
                            }

                            TrialBalanceVM trialBalance = new TrialBalanceVM();
                            trialBalance.AccountNumber = Acc.AccountNumber;
                            trialBalance.Name = Acc.ArabicName;
                            trialBalance.Level = Acc.AccountLevel;
                            trialBalance.CreditBalance = CreditBalance;
                            trialBalance.CreditTransAction = CreditTransAction;
                            trialBalance.DebitBalance = DebitBalance;
                            trialBalance.DebitTransAction = DebitTransAction;
                            trialBalance.NetCredit = NetCredit;
                            trialBalance.NetDebit = NetDebit;

                            trialBalance.nCreditBalance = CreditBalance;
                            trialBalance.nCreditTransAction = CreditTransAction;
                            trialBalance.nDebitBalance = DebitBalance;
                            trialBalance.nDebitTransAction = DebitTransAction;
                            trialBalance.nNetCredit = NetCredit;
                            trialBalance.nNetDebit = NetDebit;
                            trialBalance.TempCostID = TempCostID;
                            trialBalance.TempCostType = TempCostType;
                            if (AccountData.FirstOrDefault(m => m.AccountFather == Acc.AccountNumber) != null)
                            {
                                trialBalance.IsMainAccount = 1;

                            }
                            else
                            {
                                trialBalance.IsMainAccount = 0;


                            }

                            if (!Obj.ShowZeroBalance)
                            {
                                if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                                {
                                    TrialBalanceVMList.Add(trialBalance);
                                }
                            }
                            else
                            {
                                if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                                {
                                    TrialBalanceVMList.Add(trialBalance);
                                }


                            }
                        }

                    }
                    else if ((Obj.AccountLevelDropVMID > 0) && (Obj.Detail))
                    {


                        Accounts = AccountData.Where(m => m.AccountLevel <= Obj.AccountLevelDropVMID).ToList().OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                        foreach (var Acc in Accounts)//Each Main Account
                        {
                            TotalDebit = 0;
                            TOTCredit = 0;
                            NetCredit = 0;
                            NetDebit = 0;
                            CreditBalance = 0;
                            DebitBalance = 0;
                            CreditTransAction = 0;
                            DebitTransAction = 0;

                            var MainAccount = AccountData.FirstOrDefault(m => m.AccountNumber == Acc.AccountNumber);
                            var MainChild = AccountData.Where(m => m.AccountFather == Acc.AccountNumber).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();
                            var TransActionData = new List<TrialBalanceVM>();
                            TranData = TranData.Where(m => m.AccountNumber != null).ToList();
                            if (TranData != null && TranData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber)) != null)
                            {
                                TransActionData = TranData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber)).ToList();
                            }

                            var BalanceData = TotData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));

                            if (TransActionData != null)
                            {
                                foreach (var D in TransActionData)
                                {
                                    CreditTransAction += D.CreditTransAction;
                                    DebitTransAction += D.DebitTransAction;
                                }

                            }

                            if (BalanceData != null)
                            {
                                foreach (var Balance in BalanceData)
                                {
                                    CreditBalance += Balance.CreditBalance;
                                    DebitBalance += Balance.DebitBalance;
                                }
                            }




                            TotalDebit = DebitTransAction + DebitBalance;
                            TOTCredit = CreditTransAction + CreditBalance;

                            if (TotalDebit > TOTCredit)
                            {
                                NetDebit = TotalDebit - TOTCredit;
                            }
                            if (TotalDebit < TOTCredit)
                            {
                                NetCredit = TOTCredit - TotalDebit;
                            }

                            TrialBalanceVM trialBalance = new TrialBalanceVM();
                            trialBalance.AccountNumber = Acc.AccountNumber;
                            trialBalance.Name = Acc.ArabicName;

                            trialBalance.CreditBalance = CreditBalance;
                            trialBalance.CreditTransAction = CreditTransAction;
                            trialBalance.DebitBalance = DebitBalance;
                            trialBalance.DebitTransAction = DebitTransAction;
                            trialBalance.NetCredit = NetCredit;
                            trialBalance.NetDebit = NetDebit;
                            trialBalance.TempCostID = TempCostID;
                            trialBalance.TempCostType = TempCostType;
                            if ((AccountData.FirstOrDefault(m => m.AccountFather == Acc.AccountNumber) != null) && (Acc.AccountLevel < Obj.AccountLevelDropVMID))
                            {
                                trialBalance.IsMainAccount = 1;
                                trialBalance.MainAccount = "{*}";


                                trialBalance.nCreditBalance = 0;
                                trialBalance.nCreditTransAction = 0;
                                trialBalance.nDebitBalance = 0;
                                trialBalance.nDebitTransAction = 0;
                                trialBalance.nNetCredit = 0;
                                trialBalance.nNetDebit = 0;

                            }
                            else
                            {
                                trialBalance.IsMainAccount = 0;
                                trialBalance.MainAccount = "";
                                trialBalance.nCreditBalance = CreditBalance;
                                trialBalance.nCreditTransAction = CreditTransAction;
                                trialBalance.nDebitBalance = DebitBalance;
                                trialBalance.nDebitTransAction = DebitTransAction;
                                trialBalance.nNetCredit = NetCredit;
                                trialBalance.nNetDebit = NetDebit;


                            }
                            if (!Obj.ShowZeroBalance)
                            {
                                if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                                {
                                    TrialBalanceVMList.Add(trialBalance);
                                }
                            }
                            else
                            {
                                if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                                {
                                    TrialBalanceVMList.Add(trialBalance);
                                }


                            }




                        }
                    }





                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("TrialBalanceVM");
                    if (Obj.OrderBy == 1)
                    {
                        TrialBalanceVMList = TrialBalanceVMList.OrderByDescending(m => m.NetDebit).ThenBy(m => m.NetCredit).ToList();
                    }
                    else if (Obj.OrderBy == 2)
                    {
                        TrialBalanceVMList = TrialBalanceVMList.OrderBy(m => m.NetDebit).ThenBy(m => m.NetCredit).ToList();
                    }

                    table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                    ds.Tables.Add(table1);

                    if (Obj.Detail)
                {//new XtraTrialBalanceDetailReport_1();
                    var report = new XtraTrialBalanceDetailReport();

                        string reportFilePath = Server.MapPath("/ReportLayout/XtraTrialBalanceDetailReport_1.repx");
                        report.LoadLayoutFromXml(reportFilePath);


                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;
                        report.LbLevel.Text = String.Format("{0} {1}", Resources.Resource.AccountLevel, Obj.AccountLevelDropVMID.ToString());
                        report.DataSource = ds;
                        report.DataMember = "TrialBalanceVM";

                        // DateTime Jordan_Time_Zone = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone);

                        //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                        report.LbReporttitle.Text = "ميزان مراجعة تفصيلي";
                        //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                        report.CreateDocument();


                        // Create a new memory stream and export the report into it as PDF.

                        if (!String.IsNullOrEmpty(CoInfo.PDFEmail))
                        {
                            MemoryStream mem = new MemoryStream();
                            report.ExportToPdf(mem);
                            // var path = Server.MapPath("~/ExportedPDF/");
                            // Export report to PDF file
                            //  report.ExportToPdf(path);

                            // Create a new attachment and put the PDF report into it.
                            mem.Seek(0, System.IO.SeekOrigin.Begin);
                            Attachment att = new Attachment(mem, "TrialBalance.pdf", "application/pdf");

                            // Create second attachment and put the exported PDF report into it.



                            // var currentFolder = Path.GetDirectoryName(this.GetType().Assembly.Location);
                            //  Attachment att2 = new Attachment(Path.Combine(path, "exportedFile.pdf"), "application/pdf");

                            // Create a new message and attach the PDF reports to it.
                            MailMessage mail = new MailMessage();
                            mail.Attachments.Add(att);
                            //   mail.Attachments.Add(att2);

                            // Specify sender and recipient options for the e-mail message.
                            // mail.From = new MailAddress("info@senirossoft.com", "mohammad");
                            //mail.To.Add("ayman.zuriqi@hotmail.com");
                            //mail.To.Add(new MailAddress("mohammad.alnanaa@gmail.com", "mohammad"));
                            mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                            mail.To.Add(CoInfo.PDFEmail);


                            // Specify other e-mail options.
                            mail.Subject = "ميزان مراجعة تفصيلي";
                            mail.Body = "This is a  e-mail message sent by an application.";

                            // Send the e-mail message via the specified SMTP server.
                            // SmtpClient smtp = new SmtpClient("mail.bluepages.com.sa", 8889);

                            //IMPORANT:  Your smtp login email MUST be same as your FROM address. 


                            SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                            //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                            NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                            smtp.Credentials = Credentials;


                            smtp.Send(mail);



                            // Close the memory stream.
                            mem.Close();
                            mem.Flush();

                        }




                        return View("ReportPDF", report);

                    }
                    else
                    {
                        var report = new XtraTrialBalanceReport();

                        string reportFilePath = Server.MapPath("/ReportLayout/XtraTrialBalanceReport.repx");
                        report.LoadLayoutFromXml(reportFilePath);


                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;
                        report.LbLevel.Text = String.Format("{0} {1}", Resources.Resource.AccountLevel, Obj.AccountLevelDropVMID.ToString());
                        report.DataSource = ds;
                        report.DataMember = "TrialBalanceVM";

                        if (Obj.Detail)
                        {
                            report.LbReporttitle.Text = "ميزان مراجعة تفصيلي";
                        }
                        else
                               if (!String.IsNullOrEmpty(Obj.AccNo))
                        {
                            report.LbReporttitle.Text = "تحليل حساب";
                        }
                        else
                        {
                            report.LbReporttitle.Text = "ميزان مراجعة";

                        }
                        //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                        report.CreateDocument();

                        if (!String.IsNullOrEmpty(CoInfo.PDFEmail))
                        {
                            MemoryStream mem = new MemoryStream();
                            report.ExportToPdf(mem);
                            //    var path = Server.MapPath("~/ExportedPDF/");
                            // Export report to PDF file
                            //  report.ExportToPdf(path);

                            // Create a new attachment and put the PDF report into it.
                            mem.Seek(0, System.IO.SeekOrigin.Begin);
                            Attachment att = new Attachment(mem, "TrialBalance.pdf", "application/pdf");

                            // Create second attachment and put the exported PDF report into it.



                            // var currentFolder = Path.GetDirectoryName(this.GetType().Assembly.Location);
                            //  Attachment att2 = new Attachment(Path.Combine(path, "exportedFile.pdf"), "application/pdf");

                            // Create a new message and attach the PDF reports to it.
                            MailMessage mail = new MailMessage();
                            mail.Attachments.Add(att);
                            //   mail.Attachments.Add(att2);

                            // Specify sender and recipient options for the e-mail message.
                            // mail.From = new MailAddress("info@senirossoft.com", "mohammad");
                            //mail.To.Add("ayman.zuriqi@hotmail.com");
                            //mail.To.Add(new MailAddress("mohammad.alnanaa@gmail.com", "mohammad"));
                            mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                            mail.To.Add(CoInfo.PDFEmail);


                            // Specify other e-mail options.
                            mail.Subject = report.LbReporttitle.Text;
                            mail.Body = "This is a  e-mail message sent by an application.";

                            // Send the e-mail message via the specified SMTP server.
                            // SmtpClient smtp = new SmtpClient("mail.bluepages.com.sa", 8889);

                            //IMPORANT:  Your smtp login email MUST be same as your FROM address. 


                            SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                            //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                            NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                            smtp.Credentials = Credentials;


                            smtp.Send(mail);



                            // Close the memory stream.
                            mem.Close();
                            mem.Flush();

                        }

                        return View("ReportPDF", report);


                    }






                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                    XtraTrialBalanceReport report = new XtraTrialBalanceReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/XtraTrialBalanceReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);



                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("TrialBalanceVM");
                    table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "TrialBalanceVM";
                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                    report.CreateDocument();

                    return View("ReportPDF", report);

                }


            }


            [HttpPost]
            public ActionResult SendTrialBalanceSendEmailJson(AccountLevelRepVM Obj)
            {
                MsgUnit Msg = new MsgUnit();
                try
                {

                    if (Obj.AccNo == "0")
                    {
                        Obj.AccNo = "";
                    }

                    if (Obj.CostCenterNumber == "0")
                    {
                        Obj.CostCenterNumber = "";
                    }



                    var userId = User.Identity.GetUserId();
                    string UserID = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(UserID);
                    var AccountData = _unitOfWork.NativeSql.GetChartOfAccountByLevel(UserInfo.fCompanyId);
                    int CurrYear = UserInfo.CurrYear;
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                    var Date = "01/01/" + CurrYear;
                    var OpenDate = "31/12/" + (CurrYear - 1).ToString();

                    string TempCostID = "0";
                    int TempCostType = 0;

                    if (Obj.ByCostCenter)
                    {
                        TempCostID = Obj.CostCenterNumber;
                        if (Obj.Partofthenumber)
                        {
                            TempCostType = Obj.CostSearchType;
                        }


                    }

                    IEnumerable<TrialBalanceVM> TotData = new List<TrialBalanceVM>();
                    if (Obj.Partofthenumber)
                    {
                        if (Obj.CostSearchType == 1)
                        {
                            Obj.CostCenterNumber = Obj.CostCenterNumber + "%";
                        }
                        else if (Obj.CostSearchType == 2)
                        {
                            Obj.CostCenterNumber = "%" + Obj.CostCenterNumber;
                        }
                        else if (Obj.CostSearchType == 3)
                        {
                            Obj.CostCenterNumber = "%" + Obj.CostCenterNumber + "%";

                        }
                    }

                    var TranData = _unitOfWork.NativeSql.GetTransactionForTrial(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                    if (DateTime.Parse(Date) != Obj.FromDate)
                        TotData = _unitOfWork.NativeSql.GetTotCreditDebitForTrial(UserInfo.fCompanyId, DateTime.Parse(Date), Obj.FromDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);

                    //----------------Get Open-------------//
                    IEnumerable<TrialBalanceVM> TotDataOpen = new List<TrialBalanceVM>();
                    TotDataOpen = _unitOfWork.NativeSql.GetTotCreditDebitForTrialOpen(UserInfo.fCompanyId, DateTime.Parse(OpenDate), DateTime.Parse(OpenDate));
                    foreach (var D in TotDataOpen)
                    {
                        TotData = TotData.Append(D);

                    }
                    //------------------------------------//



                    double TotalDebit = 0;
                    double TOTCredit = 0;
                    double NetCredit = 0;
                    double NetDebit = 0;
                    double CreditBalance = 0;
                    double DebitBalance = 0;
                    double CreditTransAction = 0;
                    double DebitTransAction = 0;

                    List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                    IEnumerable<ChartOfAccount> Accounts = new List<ChartOfAccount>();

                    IEnumerable<ChartOfAccount> LessMainAccount = new List<ChartOfAccount>();
                    if (!String.IsNullOrEmpty(Obj.AccNo))
                    {

                        var MainAccount = AccountData.FirstOrDefault(m => m.AccountNumber == Obj.AccNo);
                        var MainChild = AccountData.Where(m => m.AccountFather == Obj.AccNo).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();

                        foreach (var Acc in MainChild)
                        {
                            TotalDebit = 0;
                            TOTCredit = 0;
                            NetCredit = 0;
                            NetDebit = 0;
                            CreditBalance = 0;
                            DebitBalance = 0;
                            CreditTransAction = 0;
                            DebitTransAction = 0;


                            if (AccountData.FirstOrDefault(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel) != null)//Check if Account Had Branches
                            {
                                var AllAccount = AccountData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel)
                                                .OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();//Get All Account Branches
                                int FatherLevel = Acc.AccountLevel;
                                foreach (var CurrAccLevel in AllAccount)
                                {
                                    if (CurrAccLevel.AccountLevel == FatherLevel)
                                    {
                                        break;
                                    }
                                    else
                                    {

                                        var TransActionData = TranData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                        var BalanceData = TotData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                        foreach (var D in TransActionData)
                                        {
                                            CreditTransAction += D.CreditTransAction;
                                            DebitTransAction += D.DebitTransAction;
                                        }
                                        foreach (var Balance in BalanceData)
                                        {
                                            CreditBalance += Balance.CreditBalance;
                                            DebitBalance += Balance.DebitBalance;
                                        }



                                        TotalDebit = DebitTransAction + DebitBalance;
                                        TOTCredit = CreditTransAction + CreditBalance;




                                    }
                                }




                            }
                            else
                            {
                                var TransActionData = TranData.Where(m => m.AccountNumber == Acc.AccountNumber);
                                var BalanceData = TotData.Where(m => m.AccountNumber == Acc.AccountNumber);
                                foreach (var D in TransActionData)
                                {
                                    CreditTransAction += D.CreditTransAction;
                                    DebitTransAction += D.DebitTransAction;
                                }
                                foreach (var Balance in BalanceData)
                                {
                                    CreditBalance += Balance.CreditBalance;
                                    DebitBalance += Balance.DebitBalance;
                                }
                                TotalDebit = DebitTransAction + DebitBalance;
                                TOTCredit = CreditTransAction + CreditBalance;
                            }
                            if (TotalDebit > TOTCredit)
                            {
                                NetDebit = TotalDebit - TOTCredit;
                            }
                            if (TotalDebit < TOTCredit)
                            {
                                NetCredit = TOTCredit - TotalDebit;
                            }

                            TrialBalanceVM trialBalance = new TrialBalanceVM();
                            trialBalance.AccountNumber = Acc.AccountNumber;
                            trialBalance.Name = Acc.ArabicName;

                            trialBalance.CreditBalance = CreditBalance;
                            trialBalance.CreditTransAction = CreditTransAction;
                            trialBalance.DebitBalance = DebitBalance;
                            trialBalance.DebitTransAction = DebitTransAction;
                            trialBalance.NetCredit = NetCredit;
                            trialBalance.NetDebit = NetDebit;
                            trialBalance.TempCostID = TempCostID;
                            trialBalance.TempCostType = TempCostType;

                            trialBalance.nCreditBalance = CreditBalance;
                            trialBalance.nCreditTransAction = CreditTransAction;
                            trialBalance.nDebitBalance = DebitBalance;
                            trialBalance.nDebitTransAction = DebitTransAction;
                            trialBalance.nNetCredit = NetCredit;
                            trialBalance.nNetDebit = NetDebit;



                            if (!Obj.ShowZeroBalance)
                            {
                                if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                                {
                                    TrialBalanceVMList.Add(trialBalance);
                                }
                            }
                            else
                            {
                                if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                                {
                                    TrialBalanceVMList.Add(trialBalance);
                                }


                            }
                        }


                    }
                    else

                    if ((Obj.AccountLevelDropVMID > 0) && (!Obj.Detail))
                    {


                        Accounts = AccountData.Where(m => m.AccountLevel == Obj.AccountLevelDropVMID).OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                        LessMainAccount = AccountData.Where(m => m.AccountLevel < Obj.AccountLevelDropVMID).OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                        IEnumerable<string> FaherAccount = LessMainAccount.Where(m => m.AccountFather != "0").Select(m => m.AccountFather);


                        foreach (var A in LessMainAccount)
                        {
                            if (AccountData.FirstOrDefault(m => m.AccountFather == A.AccountNumber) != null)
                            {
                                //do nothing
                            }
                            else

                            {
                                Accounts = Accounts.Append(A);
                            }

                        }
                        Accounts = Accounts.OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();
                        // var MainChild = AccountData.Where(m => m.AccountFather == MainAcc.AccountNumber).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();
                        foreach (var Acc in Accounts)
                        {
                            TotalDebit = 0;
                            TOTCredit = 0;
                            NetCredit = 0;
                            NetDebit = 0;
                            CreditBalance = 0;
                            DebitBalance = 0;
                            CreditTransAction = 0;
                            DebitTransAction = 0;


                            if (AccountData.FirstOrDefault(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel) != null)
                            {
                                var AllAccount = AccountData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel)
                                                .OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();
                                int FatherLevel = Acc.AccountLevel;

                                foreach (var CurrAccLevel in AllAccount)
                                {
                                    if (CurrAccLevel.AccountLevel == FatherLevel)
                                    {
                                        break;
                                    }
                                    else
                                    {
                                        var TransActionData = TranData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                        var BalanceData = TotData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                        foreach (var D in TransActionData)
                                        {
                                            CreditTransAction += D.CreditTransAction;
                                            DebitTransAction += D.DebitTransAction;
                                        }
                                        foreach (var Balance in BalanceData)
                                        {
                                            CreditBalance += Balance.CreditBalance;
                                            DebitBalance += Balance.DebitBalance;
                                        }
                                        TotalDebit = DebitTransAction + DebitBalance;
                                        TOTCredit = CreditTransAction + CreditBalance;
                                    }
                                }
                            }
                            else
                            {
                                var TransActionData = TranData.Where(m => m.AccountNumber == Acc.AccountNumber);
                                var BalanceData = TotData.Where(m => m.AccountNumber == Acc.AccountNumber);
                                foreach (var D in TransActionData)
                                {
                                    CreditTransAction += D.CreditTransAction;
                                    DebitTransAction += D.DebitTransAction;
                                }
                                foreach (var Balance in BalanceData)
                                {
                                    CreditBalance += Balance.CreditBalance;
                                    DebitBalance += Balance.DebitBalance;
                                }

                                TotalDebit = DebitTransAction + DebitBalance;
                                TOTCredit = CreditTransAction + CreditBalance;
                            }
                            if (TotalDebit > TOTCredit)
                            {
                                NetDebit = TotalDebit - TOTCredit;
                            }
                            if (TotalDebit < TOTCredit)
                            {
                                NetCredit = TOTCredit - TotalDebit;
                            }

                            TrialBalanceVM trialBalance = new TrialBalanceVM();
                            trialBalance.AccountNumber = Acc.AccountNumber;
                            trialBalance.Name = Acc.ArabicName;
                            trialBalance.Level = Acc.AccountLevel;
                            trialBalance.CreditBalance = CreditBalance;
                            trialBalance.CreditTransAction = CreditTransAction;
                            trialBalance.DebitBalance = DebitBalance;
                            trialBalance.DebitTransAction = DebitTransAction;
                            trialBalance.NetCredit = NetCredit;
                            trialBalance.NetDebit = NetDebit;

                            trialBalance.nCreditBalance = CreditBalance;
                            trialBalance.nCreditTransAction = CreditTransAction;
                            trialBalance.nDebitBalance = DebitBalance;
                            trialBalance.nDebitTransAction = DebitTransAction;
                            trialBalance.nNetCredit = NetCredit;
                            trialBalance.nNetDebit = NetDebit;
                            trialBalance.TempCostID = TempCostID;
                            trialBalance.TempCostType = TempCostType;
                            if (AccountData.FirstOrDefault(m => m.AccountFather == Acc.AccountNumber) != null)
                            {
                                trialBalance.IsMainAccount = 1;

                            }
                            else
                            {
                                trialBalance.IsMainAccount = 0;


                            }

                            if (!Obj.ShowZeroBalance)
                            {
                                if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                                {
                                    TrialBalanceVMList.Add(trialBalance);
                                }
                            }
                            else
                            {
                                if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                                {
                                    TrialBalanceVMList.Add(trialBalance);
                                }


                            }
                        }

                    }
                    else if ((Obj.AccountLevelDropVMID > 0) && (Obj.Detail))
                    {


                        Accounts = AccountData.Where(m => m.AccountLevel <= Obj.AccountLevelDropVMID).ToList().OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                        foreach (var Acc in Accounts)//Each Main Account
                        {
                            TotalDebit = 0;
                            TOTCredit = 0;
                            NetCredit = 0;
                            NetDebit = 0;
                            CreditBalance = 0;
                            DebitBalance = 0;
                            CreditTransAction = 0;
                            DebitTransAction = 0;

                            var MainAccount = AccountData.FirstOrDefault(m => m.AccountNumber == Acc.AccountNumber);
                            var MainChild = AccountData.Where(m => m.AccountFather == Acc.AccountNumber).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();
                            var TransActionData = new List<TrialBalanceVM>();
                            TranData = TranData.Where(m => m.AccountNumber != null).ToList();
                            if (TranData != null && TranData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber)) != null)
                            {
                                TransActionData = TranData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber)).ToList();
                            }

                            var BalanceData = TotData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));

                            if (TransActionData != null)
                            {
                                foreach (var D in TransActionData)
                                {
                                    CreditTransAction += D.CreditTransAction;
                                    DebitTransAction += D.DebitTransAction;
                                }

                            }

                            if (BalanceData != null)
                            {
                                foreach (var Balance in BalanceData)
                                {
                                    CreditBalance += Balance.CreditBalance;
                                    DebitBalance += Balance.DebitBalance;
                                }
                            }




                            TotalDebit = DebitTransAction + DebitBalance;
                            TOTCredit = CreditTransAction + CreditBalance;

                            if (TotalDebit > TOTCredit)
                            {
                                NetDebit = TotalDebit - TOTCredit;
                            }
                            if (TotalDebit < TOTCredit)
                            {
                                NetCredit = TOTCredit - TotalDebit;
                            }

                            TrialBalanceVM trialBalance = new TrialBalanceVM();
                            trialBalance.AccountNumber = Acc.AccountNumber;
                            trialBalance.Name = Acc.ArabicName;

                            trialBalance.CreditBalance = CreditBalance;
                            trialBalance.CreditTransAction = CreditTransAction;
                            trialBalance.DebitBalance = DebitBalance;
                            trialBalance.DebitTransAction = DebitTransAction;
                            trialBalance.NetCredit = NetCredit;
                            trialBalance.NetDebit = NetDebit;
                            trialBalance.TempCostID = TempCostID;
                            trialBalance.TempCostType = TempCostType;
                            if ((AccountData.FirstOrDefault(m => m.AccountFather == Acc.AccountNumber) != null) && (Acc.AccountLevel < Obj.AccountLevelDropVMID))
                            {
                                trialBalance.IsMainAccount = 1;
                                trialBalance.MainAccount = "{*}";


                                trialBalance.nCreditBalance = 0;
                                trialBalance.nCreditTransAction = 0;
                                trialBalance.nDebitBalance = 0;
                                trialBalance.nDebitTransAction = 0;
                                trialBalance.nNetCredit = 0;
                                trialBalance.nNetDebit = 0;

                            }
                            else
                            {
                                trialBalance.IsMainAccount = 0;
                                trialBalance.MainAccount = "";
                                trialBalance.nCreditBalance = CreditBalance;
                                trialBalance.nCreditTransAction = CreditTransAction;
                                trialBalance.nDebitBalance = DebitBalance;
                                trialBalance.nDebitTransAction = DebitTransAction;
                                trialBalance.nNetCredit = NetCredit;
                                trialBalance.nNetDebit = NetDebit;


                            }
                            if (!Obj.ShowZeroBalance)
                            {
                                if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                                {
                                    TrialBalanceVMList.Add(trialBalance);
                                }
                            }
                            else
                            {
                                if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                                {
                                    TrialBalanceVMList.Add(trialBalance);
                                }


                            }




                        }
                    }





                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("TrialBalanceVM");
                    if (Obj.OrderBy == 1)
                    {
                        TrialBalanceVMList = TrialBalanceVMList.OrderByDescending(m => m.NetDebit).ThenBy(m => m.NetCredit).ToList();
                    }
                    else if (Obj.OrderBy == 2)
                    {
                        TrialBalanceVMList = TrialBalanceVMList.OrderBy(m => m.NetDebit).ThenBy(m => m.NetCredit).ToList();
                    }

                    table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                    ds.Tables.Add(table1);

                    if (Obj.Detail)
                {//new XtraTrialBalanceDetailReport_1();
                    var report = new XtraTrialBalanceDetailReport();

                        string reportFilePath = Server.MapPath("/ReportLayout/XtraTrialBalanceDetailReport_1.repx");
                        report.LoadLayoutFromXml(reportFilePath);


                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;
                        report.LbLevel.Text = String.Format("{0} {1}", Resources.Resource.AccountLevel, Obj.AccountLevelDropVMID.ToString());
                        report.DataSource = ds;
                        report.DataMember = "TrialBalanceVM";

                       // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                        report.LbReporttitle.Text = "ميزان مراجعة تفصيلي";
                       // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                        report.CreateDocument();


                        // Create a new memory stream and export the report into it as PDF.

                        if (!String.IsNullOrEmpty(Obj.Email))
                        {
                            MemoryStream mem = new MemoryStream();
                            report.ExportToPdf(mem);
                            // var path = Server.MapPath("~/ExportedPDF/");
                            // Export report to PDF file
                            //  report.ExportToPdf(path);

                            // Create a new attachment and put the PDF report into it.
                            mem.Seek(0, System.IO.SeekOrigin.Begin);
                            Attachment att = new Attachment(mem, "TrialBalance.pdf", "application/pdf");

                            // Create second attachment and put the exported PDF report into it.



                            // var currentFolder = Path.GetDirectoryName(this.GetType().Assembly.Location);
                            //  Attachment att2 = new Attachment(Path.Combine(path, "exportedFile.pdf"), "application/pdf");

                            // Create a new message and attach the PDF reports to it.
                            MailMessage mail = new MailMessage();
                            mail.Attachments.Add(att);
                            //   mail.Attachments.Add(att2);

                            // Specify sender and recipient options for the e-mail message.
                            // mail.From = new MailAddress("info@senirossoft.com", "mohammad");
                            //mail.To.Add("ayman.zuriqi@hotmail.com");
                            //mail.To.Add(new MailAddress("mohammad.alnanaa@gmail.com", "mohammad"));
                            mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                            mail.To.Add(Obj.Email);


                            // Specify other e-mail options.
                            mail.Subject = "ميزان مراجعة تفصيلي";
                            mail.Body = "This is a  e-mail message sent by an application.";

                            // Send the e-mail message via the specified SMTP server.
                            // SmtpClient smtp = new SmtpClient("mail.bluepages.com.sa", 8889);

                            //IMPORANT:  Your smtp login email MUST be same as your FROM address. 


                            SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                            //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                            NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                            smtp.Credentials = Credentials;


                            smtp.Send(mail);



                            // Close the memory stream.
                            mem.Close();
                            mem.Flush();

                        }




                        return View("ReportPDF", report);

                    }
                    else
                    {
                        var report = new XtraTrialBalanceReport();

                        string reportFilePath = Server.MapPath("/ReportLayout/XtraTrialBalanceReport.repx");
                        report.LoadLayoutFromXml(reportFilePath);


                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;
                        report.LbLevel.Text = String.Format("{0} {1}", Resources.Resource.AccountLevel, Obj.AccountLevelDropVMID.ToString());
                        report.DataSource = ds;
                        report.DataMember = "TrialBalanceVM";

                        if (Obj.Detail)
                        {
                            report.LbReporttitle.Text = "ميزان مراجعة تفصيلي";
                        }
                        else
                               if (!String.IsNullOrEmpty(Obj.AccNo))
                        {
                            report.LbReporttitle.Text = "تحليل حساب";
                        }
                        else
                        {
                            report.LbReporttitle.Text = "ميزان مراجعة";
                        }
                        //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                        report.CreateDocument();

                        if (!String.IsNullOrEmpty(Obj.Email))
                        {
                            MemoryStream mem = new MemoryStream();
                            report.ExportToPdf(mem);
                            //    var path = Server.MapPath("~/ExportedPDF/");
                            // Export report to PDF file
                            //  report.ExportToPdf(path);

                            // Create a new attachment and put the PDF report into it.
                            mem.Seek(0, System.IO.SeekOrigin.Begin);
                            Attachment att = new Attachment(mem, "TrialBalance.pdf", "application/pdf");

                            // Create second attachment and put the exported PDF report into it.



                            // var currentFolder = Path.GetDirectoryName(this.GetType().Assembly.Location);
                            //  Attachment att2 = new Attachment(Path.Combine(path, "exportedFile.pdf"), "application/pdf");

                            // Create a new message and attach the PDF reports to it.
                            MailMessage mail = new MailMessage();
                            mail.Attachments.Add(att);
                            //   mail.Attachments.Add(att2);

                            // Specify sender and recipient options for the e-mail message.
                            // mail.From = new MailAddress("info@senirossoft.com", "mohammad");
                            //mail.To.Add("ayman.zuriqi@hotmail.com");
                            //mail.To.Add(new MailAddress("mohammad.alnanaa@gmail.com", "mohammad"));
                            mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                            mail.To.Add(Obj.Email);


                            // Specify other e-mail options.
                            mail.Subject = report.LbReporttitle.Text;
                            mail.Body = "This is a  e-mail message sent by an application.";

                            // Send the e-mail message via the specified SMTP server.
                            // SmtpClient smtp = new SmtpClient("mail.bluepages.com.sa", 8889);

                            //IMPORANT:  Your smtp login email MUST be same as your FROM address. 


                            SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                            //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                            NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                            smtp.Credentials = Credentials;


                            smtp.Send(mail);



                            // Close the memory stream.
                            mem.Close();
                            mem.Flush();

                        }


                        Msg.Code = 1;
                        Msg.Msg = Resources.Resource.OperationCompletedSuccessfully;
                        return Json(Msg, JsonRequestBehavior.AllowGet);


                    }






                }
                catch (Exception ex)
                {
                    Msg.Msg = Resources.Resource.SomthingWentWrong + " : " + ex.Message.ToString();
                    Msg.Code = 0;
                    return Json(Msg, JsonRequestBehavior.AllowGet);



                }


            }


            [HttpPost]
            public ActionResult AccountStatmentPDFSendJason(AccountStatementSearchVM Obj)
            {
                MsgUnit Msg = new MsgUnit();
                try
                {

                    var userId = User.Identity.GetUserId();
                    string UserID = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(UserID);
                    int CurrYear = UserInfo.CurrYear;

                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);


                    if (!String.IsNullOrEmpty(Obj.FromAccAccount))
                    {

                        var AccTransAction = _unitOfWork.NativeSql.GetAccountStatement(UserInfo.fCompanyId, CurrYear, Obj.FromAccAccount, Obj.FromDate, Obj.ToDate);
                        if (Obj.ByCostCenter && (!String.IsNullOrEmpty(Obj.CostCenterNumber)))
                        {

                            if (Obj.CostSearchType == 1 && Obj.Partofthenumber)
                            {
                                AccTransAction = AccTransAction.Where(m => m.CostCenter.StartsWith(Obj.CostCenterNumber)).ToList();
                            }
                            else if (Obj.CostSearchType == 2 && Obj.Partofthenumber)
                            {
                                AccTransAction = AccTransAction.Where(m => m.CostCenter.EndsWith(Obj.CostCenterNumber)).ToList();
                            }
                            else if (Obj.CostSearchType == 3 && Obj.Partofthenumber)
                            {
                                AccTransAction = AccTransAction.Where(m => m.CostCenter.Contains(Obj.CostCenterNumber)).ToList();
                            }
                            else
                            {
                                AccTransAction = AccTransAction.Where(m => m.CostCenter == Obj.CostCenterNumber).ToList();
                            }


                        }
                        var CompanyTransAction = _unitOfWork.CompanyTransactionKind.GetAllCompanyTransactionKind(UserInfo.fCompanyId);
                        var TransActionKind = _unitOfWork.TransactionKind.GetAllTransactionKind();



                        var FromDate = Obj.FromDate;
                        var ToDate = Obj.ToDate;
                        var ObjAccountStatmentList = new List<AccountStatementVM>();
                        double LastBalance = 0;
                        double TotalDebit = 0;
                        double TotalCredit = 0;
                        double NetTotal = 0;
                        double TotalUnpaidChequesReceived = _unitOfWork.NativeSql.GetTotalUnpaidChequesReceived(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.FromAccAccount);
                        double TotalUnpaidChequesPayment = _unitOfWork.NativeSql.GetTotalUnpaidChequesPayment(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.FromAccAccount);

                        if (DateTime.Parse("31/12/" + (CurrYear - 1).ToString()) < Obj.FromDate)
                        {
                            var OpeiningBalance = _unitOfWork.NativeSql.GetOpeningBalanceTrans(UserInfo.fCompanyId, CurrYear, Obj.FromAccAccount, DateTime.Parse("31/12/" + (CurrYear - 1).ToString()), DateTime.Parse("31/12/" + (CurrYear - 1).ToString()));
                            if (OpeiningBalance.Count() > 0)
                            {
                                foreach (var Day in OpeiningBalance)
                                {
                                    TotalDebit = TotalDebit + Day.Debit;
                                    TotalCredit = TotalCredit + Day.Credit;

                                    AccountStatementVM ObjStatment = new AccountStatementVM
                                    {
                                        TransDate = Day.VoucherDate,
                                        Statment = Day.Note,
                                        TransName = "",
                                        Credit = Day.Credit * -1,
                                        Debit = Day.Debit,
                                        Balance = (LastBalance) + ((Day.Credit * -1) + Day.Debit),
                                        CompanyTransactionKindID = Day.CompanyTransactionKindNo,
                                        TransactionKindID = Day.TransactionKindNo,
                                        VHFI = Day.VHI,
                                        VoucherNumber = Day.VoucherNumber,
                                        sCredit = String.Format("{0:n3}", (Day.Credit * -1)),
                                        sDebit = String.Format("{0:n3}", (Day.Debit))



                                    };



                                    if (ObjStatment.Debit < 0)
                                    {
                                        ObjStatment.sDebit = "(" + String.Format("{0:n3}", (ObjStatment.Debit * -1)) + ")";
                                    }
                                    if (ObjStatment.Credit < 0)
                                    {
                                        ObjStatment.sCredit = "" + String.Format("{0:n3}", (ObjStatment.Credit * -1)) + "";
                                    }
                                    if (ObjStatment.Debit == 0)
                                        ObjStatment.sDebit = "";
                                    if (ObjStatment.Credit == 0)
                                        ObjStatment.sCredit = "";

                                    if (ObjStatment.Balance == 0)
                                        ObjStatment.sBalance = "";

                                    ObjStatment.TransName = "";



                                    if (ObjStatment.Balance < 0)
                                    {
                                        ObjStatment.sBalance = "(" + String.Format("{0:n3}", (ObjStatment.Balance * -1)) + ")";
                                    }
                                    else
                                    {
                                        ObjStatment.sBalance = String.Format("{0:n3}", (ObjStatment.Balance));
                                    }


                                    LastBalance = ObjStatment.Balance;

                                    ObjAccountStatmentList.Add(ObjStatment);
                                }
                            }
                        }


                        while (FromDate <= ToDate)
                        {
                            var CurrDay = AccTransAction.Where(m => m.VoucherDate >= FromDate && m.VoucherDate < FromDate.AddDays(1)).OrderBy(m => m.VHI).OrderBy(m => m.RowNumber);
                            foreach (var Day in CurrDay)
                            {
                                TotalDebit = TotalDebit + Day.Debit;
                                TotalCredit = TotalCredit + Day.Credit;

                                AccountStatementVM ObjStatment = new AccountStatementVM
                                {
                                    TransDate = Day.VoucherDate,
                                    Statment = Day.Note,
                                    TransName = Day.CompanyTransactionKindNo.ToString(),
                                    Credit = Day.Credit * -1,
                                    Debit = Day.Debit,
                                    Balance = (LastBalance) + ((Day.Credit * -1) + Day.Debit),
                                    CompanyTransactionKindID = Day.CompanyTransactionKindNo,
                                    TransactionKindID = Day.TransactionKindNo,
                                    VHFI = Day.VHI,
                                    VoucherNumber = Day.VoucherNumber,
                                    sCredit = String.Format("{0:n3}", (Day.Credit * -1)),
                                    sDebit = String.Format("{0:n3}", (Day.Debit))



                                };



                                if (ObjStatment.Debit < 0)
                                {
                                    ObjStatment.sDebit = "(" + String.Format("{0:n3}", (ObjStatment.Debit * -1)) + ")";
                                }
                                if (ObjStatment.Credit < 0)
                                {
                                    ObjStatment.sCredit = "" + String.Format("{0:n3}", (ObjStatment.Credit * -1)) + "";
                                }
                                if (ObjStatment.Debit == 0)
                                    ObjStatment.sDebit = "";
                                if (ObjStatment.Credit == 0)
                                    ObjStatment.sCredit = "";

                                if (ObjStatment.Balance == 0)
                                    ObjStatment.sBalance = "";

                                if (Day.CompanyTransactionKindNo == 0)
                                {
                                    var V = TransActionKind.FirstOrDefault(m => m.TransactionKindID == Day.TransactionKindNo);
                                    if (V != null)
                                    {
                                        ObjStatment.TransName = V.ArabicName + " (" + Day.VoucherNumber + ") ";
                                    }


                                }
                                else
                                {
                                    var V = CompanyTransAction.FirstOrDefault(m => m.TransactionKindID == Day.TransactionKindNo
                                      && m.CompanyTransactionKindID == Day.CompanyTransactionKindNo);
                                    if (V != null)
                                    {
                                        ObjStatment.TransName = V.ArabicName + " (" + Day.VoucherNumber + ") ";
                                    }


                                }

                                if (ObjStatment.Balance < 0)
                                {
                                    ObjStatment.sBalance = "(" + String.Format("{0:n3}", (ObjStatment.Balance * -1)) + ")";
                                }
                                else
                                {
                                    ObjStatment.sBalance = String.Format("{0:n3}", (ObjStatment.Balance));
                                }
                                LastBalance = ObjStatment.Balance;
                                ObjAccountStatmentList.Add(ObjStatment);
                            }



                            FromDate = FromDate.AddDays(1);
                        }
                        NetTotal = TotalDebit - TotalCredit;
                        AccountStatementHeaderVM ObjTot = new AccountStatementHeaderVM
                        {
                            AccountStatementVM = ObjAccountStatmentList,
                            TotalCredit = TotalCredit,
                            TotalDebit = TotalDebit,
                            NetTotal = NetTotal,
                            TotalUnpaidChequesReceived = TotalUnpaidChequesReceived,
                            TotalUnpaidChequesPayment = TotalUnpaidChequesPayment,
                            sTotalCredit = String.Format("{0:n3}", (TotalCredit)),
                            sTotalDebit = String.Format("{0:n3}", (TotalDebit)),
                            sNetTotal = String.Format("{0:n3}", (NetTotal)),
                            sTotalCustomerCheque = String.Format("{0:n3}", (TotalUnpaidChequesReceived)),
                            sTotalSupplierCheque = String.Format("{0:n3}", (TotalUnpaidChequesPayment))
                        };


                        XtraAccountStatmentReport report = new XtraAccountStatmentReport();

                        string reportFilePath = Server.MapPath("/ReportLayout/XtraAccountStatmentReport.repx");
                        report.LoadLayoutFromXml(reportFilePath);



                        DataSet ds = new DataSet();
                        DataTable table1 = new DataTable("AccountStatementVM");
                        table1 = FunctionUnit.LINQResultToDataTable(ObjTot.AccountStatementVM);

                        ds.Tables.Add(table1);



                        var AccountInfo = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.FromAccAccount);
                        if (AccountInfo != null)
                        {
                            Obj.FromAccName = AccountInfo.ArabicName;
                        }
                        report.DataSource = ds;
                        report.DataMember = "AccountStatementVM";
                        if (Obj.CostCenterNumber == "0")
                        {
                            Obj.CostCenterNumber = "";
                            Obj.CostCenterNumber = "";

                        }


                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;
                        report.LbAccNo.Text = Obj.FromAccAccount;
                        report.LbAccName.Text = Obj.FromAccName;

                        report.LbCostNo.Text = Obj.CostCenterNumber;
                        report.LbCostName.Text = Obj.CostCenterNumber;

                        report.LbCoName.Text = CoInfo.ArabicName;

                        report.LbTotDebit.Text = ObjTot.sTotalDebit;
                        report.LbTotCredit.Text = ObjTot.sTotalCredit;
                        report.LbTotBalance.Text = ObjTot.sNetTotal;

                        report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                        report.CreateDocument();


                        if (!String.IsNullOrEmpty(Obj.Email))
                        {
                            MemoryStream mem = new MemoryStream();
                            report.ExportToPdf(mem);

                            mem.Seek(0, System.IO.SeekOrigin.Begin);
                            Attachment att = new Attachment(mem, "AccountStatment.pdf", "application/pdf");

                            MailMessage mail = new MailMessage();
                            mail.Attachments.Add(att);


                            mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                            mail.To.Add(CoInfo.PDFEmail);

                            mail.Subject = "كشف حساب";
                            mail.Body = "This is a  e-mail message sent by an application.";



                            SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                            //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                            NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                            smtp.Credentials = Credentials;


                            smtp.Send(mail);



                            // Close the memory stream.
                            mem.Close();
                            mem.Flush();

                        }
                        Msg.Code = 1;
                        Msg.Msg = Resources.Resource.OperationCompletedSuccessfully;
                        return Json(Msg, JsonRequestBehavior.AllowGet);






                    }

                    else
                    {
                        var ObjTot = new AccountStatementHeaderVM
                        {
                            AccountStatementVM = new List<AccountStatementVM>(),
                            NetTotal = 0,
                            TotalCredit = 0,
                            TotalDebit = 0,
                        };

                        XtraAccountStatmentReport report = new XtraAccountStatmentReport();

                        string reportFilePath = Server.MapPath("/ReportLayout/XtraAccountStatmentReport.repx");


                        report.LoadLayoutFromXml(reportFilePath);

                        DataSet ds = new DataSet();
                        DataTable table1 = new DataTable("AccountStatementVM");
                        table1 = FunctionUnit.LINQResultToDataTable(ObjTot.AccountStatementVM);

                        ds.Tables.Add(table1);

                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;
                        report.LbAccNo.Text = Obj.FromAccAccount;
                        report.LbAccName.Text = Obj.FromAccName;

                        report.LbCostNo.Text = Obj.CostCenterNumber;
                        report.LbCostName.Text = Obj.CostCenterNumber;

                        report.LbCoName.Text = CoInfo.ArabicName;

                        report.LbTotDebit.Text = ObjTot.sTotalDebit;
                        report.LbTotCredit.Text = ObjTot.sTotalCredit;
                        report.LbTotBalance.Text = ObjTot.sNetTotal;

                        report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();


                        report.DataSource = ds;
                        report.DataMember = "AccountStatementVM";
                        report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                        report.CreateDocument();


                        if (!String.IsNullOrEmpty(Obj.Email))
                        {
                            MemoryStream mem = new MemoryStream();
                            report.ExportToPdf(mem);

                            mem.Seek(0, System.IO.SeekOrigin.Begin);
                            Attachment att = new Attachment(mem, "AccountStatment.pdf", "application/pdf");

                            MailMessage mail = new MailMessage();
                            mail.Attachments.Add(att);


                            mail.From = new MailAddress("info@catnipsoft.com"); //IMPORTANT: This must be same as your smtp authentication address.
                            mail.To.Add(CoInfo.PDFEmail);

                            mail.Subject = "كشف حساب";
                            mail.Body = "This is a  e-mail message sent by an application.";



                            SmtpClient smtp = new SmtpClient("mail.catnipsoft.com", 8889);

                            //IMPORANT:  Your smtp login email MUST be same as your FROM address. 
                            NetworkCredential Credentials = new NetworkCredential("info@catnipsoft.com", "Matrix__90");
                            smtp.Credentials = Credentials;


                            smtp.Send(mail);



                            // Close the memory stream.
                            mem.Close();
                            mem.Flush();

                        }


                        Msg.Code = 1;
                        Msg.Msg = Resources.Resource.OperationCompletedSuccessfully;
                        return Json(Msg, JsonRequestBehavior.AllowGet);
                    }


                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    Msg.Code = 0;
                    Msg.Msg = ex.Message;
                    return Json(Msg, JsonRequestBehavior.AllowGet);

                }


            }



        public ActionResult GetServiceTaxReportPDF(string id, string id2, string id3, int id4, int id5, int id6, int id7, int id8, int id9, int id10, int id11, int id12, int id13, int id14, int id15, int id16)
        {
            ServiceTaxReportVM Obj = new ServiceTaxReportVM();
            try
            {

                DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                Obj.FromDate = fromDate;
                Obj.ToDate = toDate;

                Obj.AccountNumber = id3;
                Obj.ServiceNo = id16;

                string CheckList = " ";
                string list1 = " ";
                string list2 = " ";


                if (id4 == 1)
                {
                    Obj.Taxable = true;
                    list1 += Resources.Resource.Taxable + " ";
                }

                if (id5 == 1)
                {
                    Obj.TaxExempt = true;
                    list1 += Resources.Resource.TaxExempt + " ";

                }

                if (id6 == 1)
                {
                    Obj.Detailed = true;
                    list2 += Resources.Resource.Detailed + " ";

                }

                if (id7 == 1)
                {
                    Obj.Collection = true;
                    list2 += Resources.Resource.Collection + " ";

                }

                if (id8 == 1)
                {
                    Obj.SaleService = true;
                    CheckList += Resources.Resource.SaleService + " /";

                }

                if (id9 == 1)
                {
                    Obj.SaleMultiService = true;
                    CheckList += Resources.Resource.SaleMultiService + " /";

                }

                if (id10 == 1)
                {
                    Obj.ReturnService = true;
                    CheckList += Resources.Resource.ReturnService + " /";

                }

                if (id11 == 1)
                {
                    Obj.ReturnMultiService = true;
                    CheckList += Resources.Resource.ReturnMultiService + " /";

                }

                if (id12 == 1)
                {
                    Obj.PurchaseService = true;
                    CheckList += Resources.Resource.PurchaseService + " /";

                }

                if (id13 == 1)
                {
                    Obj.PurchaseMultiService = true;
                    CheckList += Resources.Resource.PurchaseMultiService + " /";

                }

                if (id14 == 1)
                {
                    Obj.ReturnPurchaseService = true;
                    CheckList += Resources.Resource.ReturnPurchaseService + " /";

                }

                if (id15 == 1)
                {
                    Obj.ReturnPurchaseMultiService = true;
                    CheckList += Resources.Resource.ReturnPurchaseMultiService + " /";

                }

                IEnumerable<ServiceTaxReportVM> AllServiceTaxReport = new List<ServiceTaxReportVM>();
                var userId = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                if (id4 == 1 && id7 == 1)
                {
                     AllServiceTaxReport = _unitOfWork.NativeSql.GetServiceTaxReport(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);

                }

                else if (id5 == 1 && id7 == 1)
                {
                     AllServiceTaxReport = _unitOfWork.NativeSql.GetServiceTaxReportTaxExempt(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);

                }

                else if (id5 == 1 && id6 == 1)
                {
                    AllServiceTaxReport = _unitOfWork.NativeSql.GetServiceTaxReportDetailedTaxExempt(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                }

                else
                {
                    AllServiceTaxReport = _unitOfWork.NativeSql.GetServiceTaxReportDetailed(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);

                }
                List<ServiceTaxReportVM> AllData = new List<ServiceTaxReportVM>();
                List<ServiceTaxReportVM> Ch1 = new List<ServiceTaxReportVM>();
                List<ServiceTaxReportVM> Ch2 = new List<ServiceTaxReportVM>();
                List<ServiceTaxReportVM> Ch3 = new List<ServiceTaxReportVM>();
                List<ServiceTaxReportVM> Ch4 = new List<ServiceTaxReportVM>();
                List<ServiceTaxReportVM> Ch5 = new List<ServiceTaxReportVM>();
                List<ServiceTaxReportVM> Ch6 = new List<ServiceTaxReportVM>();
                List<ServiceTaxReportVM> Ch7 = new List<ServiceTaxReportVM>();
                List<ServiceTaxReportVM> Ch8 = new List<ServiceTaxReportVM>();
                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                if (AllServiceTaxReport == null)
                {
                    return Json(new List<ServiceTaxReportVM>(), JsonRequestBehavior.AllowGet);
                }
                if (Obj.AccountNumber == "0")
                {
                    Obj.AccountNumber = "";
                }
                if (!String.IsNullOrEmpty(Obj.AccountNumber))
                {
                    AllServiceTaxReport = AllServiceTaxReport.Where(m => m.AccountNumber == Obj.AccountNumber).ToList();
                }
                if (Obj.ServiceNo != 0 && id6 == 1)
                {
                    AllServiceTaxReport = AllServiceTaxReport.Where(m => m.ServiceNo == Obj.ServiceNo).ToList();
                }

                if (Obj.SaleService)
                {
                    Ch1 = AllServiceTaxReport.Where(m => m.TransactionKindNo == 10).ToList();
                }
                if (Obj.SaleMultiService)
                {
                    Ch2 = AllServiceTaxReport.Where(m => m.TransactionKindNo == 11).ToList();
                }
                if (Obj.ReturnService)
                {
                    Ch3 = AllServiceTaxReport.Where(m => m.TransactionKindNo == 19).ToList();
                }
                if (Obj.ReturnMultiService)
                {
                    Ch4 = AllServiceTaxReport.Where(m => m.TransactionKindNo == 20).ToList();
                }
                if (Obj.PurchaseService)
                {
                    Ch5 = AllServiceTaxReport.Where(m => m.TransactionKindNo == 12).ToList();
                }
                if (Obj.PurchaseMultiService)
                {
                    Ch6 = AllServiceTaxReport.Where(m => m.TransactionKindNo == 13).ToList();
                }
                if (Obj.ReturnPurchaseService)
                {
                    Ch7 = AllServiceTaxReport.Where(m => m.TransactionKindNo == 21).ToList();
                }
                if (Obj.ReturnPurchaseMultiService)
                {
                    Ch8 = AllServiceTaxReport.Where(m => m.TransactionKindNo == 22).ToList();
                }
                if (Ch1.Count > 0)
                {
                    foreach (var c in Ch1)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch2.Count > 0)
                {
                    foreach (var c in Ch2)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch3.Count > 0)
                {
                    foreach (var c in Ch3)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch4.Count > 0)
                {
                    foreach (var c in Ch4)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch5.Count > 0)
                {
                    foreach (var c in Ch5)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch6.Count > 0)
                {
                    foreach (var c in Ch6)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch7.Count > 0)
                {
                    foreach (var c in Ch7)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch8.Count > 0)
                {
                    foreach (var c in Ch8)
                    {
                        AllData.Add(c);
                    }
                }


                if (Obj.SaleService == false && Obj.SaleMultiService == false && Obj.ReturnService == false && Obj.ReturnMultiService == false && Obj.PurchaseService == false && Obj.PurchaseMultiService == false && Obj.ReturnPurchaseService == false && Obj.ReturnPurchaseMultiService == false)
                {
                    if (id4 == 1 && id7 == 1)
                    {
                        DataSet ds = new DataSet();
                        DataTable table1 = new DataTable("ServiceTaxReportVM");
                        table1 = FunctionUnit.LINQResultToDataTable(AllServiceTaxReport);

                        ds.Tables.Add(table1);

                        var report = new XtraServiceTaxReport();
                        string reportFilePath = Server.MapPath("/ReportLayout/XtraServiceTaxReport.repx");
                        report.LoadLayoutFromXml(reportFilePath);

                        report.DataSource = ds;
                        report.DataMember = "ServiceTaxReportVM";


                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");

                        report.ServiceNumber.Text = Obj.ServiceNo.ToString();

                        report.ToAccountNumber.Text = Obj.AccountNumber;


                        int count = AllServiceTaxReport.Sum(m => m.ServiceNo);
                        report.Num.Text = AllServiceTaxReport.Count().ToString();



                        Obj.SumTotal = AllServiceTaxReport.Sum(m => (m.Total)).ToString();
                        Obj.SumTax = AllServiceTaxReport.Sum(m => (m.Tax)).ToString();


                        Obj.SumNetTotal = AllServiceTaxReport.Sum(m => (m.NetTotal)).ToString();


                        if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                        {
                            Obj.SumTotal = "" + String.Format("{0:n2}", Obj.SumTotal) + "";
                            Obj.SumTax = "" + String.Format("{0:n2}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n2}", Obj.SumNetTotal) + "";

                        }
                        else
                        {
                            Obj.SumTotal = "" + String.Format("{0:n3}", Obj.SumTotal) + "";
                            Obj.SumTax = "" + String.Format("{0:n3}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n3}", Obj.SumNetTotal) + "";
                        }



                        report.Sum.Text = Obj.SumTotal;
                        report.Sum2.Text = Obj.SumTax;
                        report.Sum3.Text = Obj.SumNetTotal;

                        report.xrLabel3.Text = CheckList;
                        report.xrLabel6.Text = list1;
                        report.xrLabel10.Text = list2;

                        if (!String.IsNullOrEmpty(Obj.AccountNumber))
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.AccountNumber);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.AccountName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.AccountName.Text = AccName.EnglishName;
                            }

                        }
                        if (Obj.ServiceNo != 0)
                        {
                            var AccName = _unitOfWork.Service.GetServiceByID(UserInfo.fCompanyId, Obj.ServiceNo);

                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.ServiceName.Text = AccName.ArabicName;
                            }

                            else
                            {

                                report.ServiceName.Text = AccName.EnglishName;

                            }

                        }




                        report.CreateDocument();



                        return View("ReportPDF", report);


                    }

                    else if (id5 == 1 && id7 == 1)
                    {
                        DataSet ds = new DataSet();
                        DataTable table1 = new DataTable("ServiceTaxReportVM");
                        table1 = FunctionUnit.LINQResultToDataTable(AllServiceTaxReport);

                        ds.Tables.Add(table1);

                        var report = new XtraTaxExemptCollectionReport();
                        string reportFilePath = Server.MapPath("/ReportLayout/XtraTaxExemptCollectionReport.repx");
                        report.LoadLayoutFromXml(reportFilePath);

                        report.DataSource = ds;
                        report.DataMember = "ServiceTaxReportVM";

                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); 

                        report.ServiceNumber.Text = Obj.ServiceNo.ToString();

                        report.ToAccountNumber.Text = Obj.AccountNumber;


                        int count = AllServiceTaxReport.Sum(m => m.ServiceNo);
                        report.Num.Text = AllServiceTaxReport.Count().ToString();



                        Obj.SumTotal = AllServiceTaxReport.Sum(m => (m.Total)).ToString();
                        Obj.SumTax = AllServiceTaxReport.Sum(m => (m.Tax)).ToString();


                        Obj.SumNetTotal = AllServiceTaxReport.Sum(m => (m.NetTotal)).ToString();


                        if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                        {
                            Obj.SumTotal = "" + String.Format("{0:n2}", Obj.SumTotal) + "";
                            Obj.SumTax = "" + String.Format("{0:n2}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n2}", Obj.SumNetTotal) + "";

                        }
                        else
                        {
                            Obj.SumTotal = "" + String.Format("{0:n3}", Obj.SumTotal) + "";
                            Obj.SumTax = "" + String.Format("{0:n3}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n3}", Obj.SumNetTotal) + "";
                        }



                        report.Sum.Text = Obj.SumTotal;
                        report.Sum2.Text = Obj.SumTax;
                        report.Sum3.Text = Obj.SumNetTotal;

                        report.xrLabel3.Text = CheckList;
                        report.xrLabel6.Text = list1;
                        report.xrLabel10.Text = list2;

                        if (!String.IsNullOrEmpty(Obj.AccountNumber))
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.AccountNumber);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.AccountName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.AccountName.Text = AccName.EnglishName;
                            }

                        }
                        if (Obj.ServiceNo != 0)
                        {
                            var AccName = _unitOfWork.Service.GetServiceByID(UserInfo.fCompanyId, Obj.ServiceNo);

                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.ServiceName.Text = AccName.ArabicName;
                            }

                            else
                            {

                                report.ServiceName.Text = AccName.EnglishName;

                            }

                        }




                        report.CreateDocument();



                        return View("ReportPDF", report);



                    }

                    else if (id5 == 1 && id6 == 1)
                    {

                        DataSet ds = new DataSet();
                        DataTable table1 = new DataTable("ServiceTaxReportVM");
                        table1 = FunctionUnit.LINQResultToDataTable(AllServiceTaxReport);

                        ds.Tables.Add(table1);

                        var report = new XtraDetailedTaxExempt();
                        string reportFilePath = Server.MapPath("/ReportLayout/XtraDetailedTaxExempt.repx");
                        report.LoadLayoutFromXml(reportFilePath);

                        report.DataSource = ds;
                        report.DataMember = "ServiceTaxReportVM";


                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); 

                        report.ServiceNumber.Text = Obj.ServiceNo.ToString();

                        report.ToAccountNumber.Text = Obj.AccountNumber;


                        int count = AllServiceTaxReport.Sum(m => m.ServiceNo);
                        report.Num.Text = AllServiceTaxReport.Count().ToString();



                        Obj.SumTotal = AllServiceTaxReport.Sum(m => (m.Total)).ToString();
                        Obj.SumTax = AllServiceTaxReport.Sum(m => (m.Tax)).ToString();


                        Obj.SumNetTotal = AllServiceTaxReport.Sum(m => (m.NetTotal)).ToString();


                        if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                        {
                            Obj.SumTotal = "" + String.Format("{0:n2}", Obj.SumTotal) + "";
                            Obj.SumTax = "" + String.Format("{0:n2}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n2}", Obj.SumNetTotal) + "";

                        }
                        else
                        {
                            Obj.SumTotal = "" + String.Format("{0:n3}", Obj.SumTotal) + "";
                            Obj.SumTax = "" + String.Format("{0:n3}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n3}", Obj.SumNetTotal) + "";
                        }



                        report.Sum.Text = Obj.SumTotal;
                        report.Sum2.Text = Obj.SumTax;
                        report.Sum3.Text = Obj.SumNetTotal;

                        report.xrLabel3.Text = CheckList;
                        report.xrLabel6.Text = list1;
                        report.xrLabel10.Text = list2;

                        if (!String.IsNullOrEmpty(Obj.AccountNumber))
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.AccountNumber);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.AccountName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.AccountName.Text = AccName.EnglishName;
                            }

                        }
                        if (Obj.ServiceNo != 0)
                        {
                            var AccName = _unitOfWork.Service.GetServiceByID(UserInfo.fCompanyId, Obj.ServiceNo);

                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.ServiceName.Text = AccName.ArabicName;
                            }

                            else
                            {

                                report.ServiceName.Text = AccName.EnglishName;

                            }

                        }




                        report.CreateDocument();



                        return View("ReportPDF", report);
                    }

                    else 
                    {
                        DataSet ds = new DataSet();
                        DataTable table1 = new DataTable("ServiceTaxReportVM");
                        table1 = FunctionUnit.LINQResultToDataTable(AllServiceTaxReport);

                        ds.Tables.Add(table1);

                        var report = new XtraDetailedTaxableReport();
                        string reportFilePath = Server.MapPath("/ReportLayout/XtraDetailedTaxableReport.repx");
                        report.LoadLayoutFromXml(reportFilePath);

                        report.DataSource = ds;
                        report.DataMember = "ServiceTaxReportVM";


                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); 

                        report.ServiceNumber.Text = Obj.ServiceNo.ToString();

                        report.ToAccountNumber.Text = Obj.AccountNumber;


                        int count = AllServiceTaxReport.Sum(m => m.ServiceNo);
                        report.Num.Text = AllServiceTaxReport.Count().ToString();



                        Obj.SumTotal = AllServiceTaxReport.Sum(m => (m.Total)).ToString();
                        Obj.SumTax = AllServiceTaxReport.Sum(m => (m.Tax)).ToString();


                        Obj.SumNetTotal = AllServiceTaxReport.Sum(m => (m.NetTotal)).ToString();


                        if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                        {
                            Obj.SumTotal = "" + String.Format("{0:n2}", Obj.SumTotal) + "";
                            Obj.SumTax = "" + String.Format("{0:n2}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n2}", Obj.SumNetTotal) + "";

                        }
                        else
                        {
                            Obj.SumTotal = "" + String.Format("{0:n3}", Obj.SumTotal) + "";
                            Obj.SumTax = "" + String.Format("{0:n3}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n3}", Obj.SumNetTotal) + "";
                        }



                        report.Sum.Text = Obj.SumTotal;
                        report.Sum2.Text = Obj.SumTax;
                        report.Sum3.Text = Obj.SumNetTotal;

                        report.xrLabel3.Text = CheckList;
                        report.xrLabel6.Text = list1;
                        report.xrLabel10.Text = list2;

                        if (!String.IsNullOrEmpty(Obj.AccountNumber))
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.AccountNumber);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.AccountName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.AccountName.Text = AccName.EnglishName;
                            }

                        }
                        if (Obj.ServiceNo != 0)
                        {
                            var AccName = _unitOfWork.Service.GetServiceByID(UserInfo.fCompanyId, Obj.ServiceNo);

                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.ServiceName.Text = AccName.ArabicName;
                            }

                            else
                            {

                                report.ServiceName.Text = AccName.EnglishName;

                            }

                        }




                        report.CreateDocument();



                        return View("ReportPDF", report);
                    }

                }


                else
                {



                    if (id4 == 1 && id7 == 1)
                    {
                        DataSet ds = new DataSet();
                        DataTable table1 = new DataTable("ServiceTaxReportVM");
                        table1 = FunctionUnit.LINQResultToDataTable(AllData);

                        ds.Tables.Add(table1);

                        var report = new XtraServiceTaxReport();
                        string reportFilePath = Server.MapPath("/ReportLayout/XtraServiceTaxReport.repx");
                        report.LoadLayoutFromXml(reportFilePath);

                        report.DataSource = ds;
                        report.DataMember = "ServiceTaxReportVM";

                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); 

                        report.ServiceNumber.Text = Obj.ServiceNo.ToString();

                        report.ToAccountNumber.Text = Obj.AccountNumber;


                        int count = AllData.Sum(m => m.ServiceNo);
                        report.Num.Text = AllData.Count().ToString();



                        Obj.SumTotal = AllData.Sum(m => (m.Total)).ToString();
                        Obj.SumTax = AllData.Sum(m => (m.Tax)).ToString();


                        Obj.SumNetTotal = AllData.Sum(m => (m.NetTotal)).ToString();



                        if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                        {
                            Obj.SumTotal = "" + String.Format("{0:n2}", Obj.SumTotal) + "";
                            Obj.SumTax = "" + String.Format("{0:n2}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n2}", Obj.SumNetTotal) + "";

                        }
                        else
                        {
                            Obj.SumTotal = "" + String.Format("{0:n3}", Obj.SumTotal) + "";
                            Obj.SumTax = "" + String.Format("{0:n3}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n3}", Obj.SumNetTotal) + "";
                        }



                        report.Sum.Text = Obj.SumTotal;
                        report.Sum2.Text = Obj.SumTax;
                        report.Sum3.Text = Obj.SumNetTotal;

                        report.xrLabel3.Text = CheckList;
                        report.xrLabel6.Text = list1;
                        report.xrLabel10.Text = list2;

                        if (!String.IsNullOrEmpty(Obj.AccountNumber))
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.AccountNumber);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.AccountName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.AccountName.Text = AccName.EnglishName;
                            }

                        }
                        if (Obj.ServiceNo != 0)
                        {
                            var AccName = _unitOfWork.Service.GetServiceByID(UserInfo.fCompanyId, Obj.ServiceNo);

                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.ServiceName.Text = AccName.ArabicName;
                            }

                            else
                            {

                                report.ServiceName.Text = AccName.EnglishName;

                            }

                        }

                        report.CreateDocument();

                        return View("ReportPDF", report);


                    }

                    else if (id5 == 1 && id7 == 1)
                    {
                        DataSet ds = new DataSet();
                        DataTable table1 = new DataTable("ServiceTaxReportVM");
                        table1 = FunctionUnit.LINQResultToDataTable(AllData);

                        ds.Tables.Add(table1);

                        var report = new XtraTaxExemptCollectionReport();
                        string reportFilePath = Server.MapPath("/ReportLayout/XtraTaxExemptCollectionReport.repx");
                        report.LoadLayoutFromXml(reportFilePath);

                        report.DataSource = ds;
                        report.DataMember = "ServiceTaxReportVM";

                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); 

                        report.ServiceNumber.Text = Obj.ServiceNo.ToString();

                        report.ToAccountNumber.Text = Obj.AccountNumber;


                        int count = AllData.Sum(m => m.ServiceNo);
                        report.Num.Text = AllData.Count().ToString();



                        Obj.SumTotal = AllData.Sum(m => (m.Total)).ToString();
                        Obj.SumTax = AllData.Sum(m => (m.Tax)).ToString();


                        Obj.SumNetTotal = AllData.Sum(m => (m.NetTotal)).ToString();


                        if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                        {
                            Obj.SumTotal = "" + String.Format("{0:n2}", Obj.SumTotal) + "";
                            Obj.SumTax = "" + String.Format("{0:n2}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n2}", Obj.SumNetTotal) + "";

                        }
                        else
                        {
                            Obj.SumTotal = "" + String.Format("{0:n3}", Obj.SumTotal) + "";
                            Obj.SumTax = "" + String.Format("{0:n3}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n3}", Obj.SumNetTotal) + "";
                        }



                        report.Sum.Text = Obj.SumTotal;
                        report.Sum2.Text = Obj.SumTax;
                        report.Sum3.Text = Obj.SumNetTotal;

                        report.xrLabel3.Text = CheckList;
                        report.xrLabel6.Text = list1;
                        report.xrLabel10.Text = list2;

                        if (!String.IsNullOrEmpty(Obj.AccountNumber))
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.AccountNumber);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.AccountName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.AccountName.Text = AccName.EnglishName;
                            }

                        }
                        if (Obj.ServiceNo != 0)
                        {
                            var AccName = _unitOfWork.Service.GetServiceByID(UserInfo.fCompanyId, Obj.ServiceNo);

                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.ServiceName.Text = AccName.ArabicName;
                            }

                            else
                            {

                                report.ServiceName.Text = AccName.EnglishName;

                            }

                        }




                        report.CreateDocument();



                        return View("ReportPDF", report);



                    }

                    else if (id5 == 1 && id6 == 1)
                    {

                        DataSet ds = new DataSet();
                        DataTable table1 = new DataTable("ServiceTaxReportVM");
                        table1 = FunctionUnit.LINQResultToDataTable(AllData);

                        ds.Tables.Add(table1);

                        var report = new XtraDetailedTaxExempt();
                        string reportFilePath = Server.MapPath("/ReportLayout/XtraDetailedTaxExempt.repx");
                        report.LoadLayoutFromXml(reportFilePath);

                        report.DataSource = ds;
                        report.DataMember = "ServiceTaxReportVM";


                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); 

                        report.ServiceNumber.Text = Obj.ServiceNo.ToString();

                        report.ToAccountNumber.Text = Obj.AccountNumber;


                        int count = AllData.Sum(m => m.ServiceNo);
                        report.Num.Text = AllData.Count().ToString();



                        Obj.SumTotal = AllData.Sum(m => (m.Total)).ToString();
                        Obj.SumTax = AllData.Sum(m => (m.Tax)).ToString();


                        Obj.SumNetTotal = AllData.Sum(m => (m.NetTotal)).ToString();


                        if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                        {
                            Obj.SumTotal = "" + String.Format("{0:n2}", Obj.SumTotal) + "";
                            Obj.SumTax = "" + String.Format("{0:n2}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n2}", Obj.SumNetTotal) + "";

                        }
                        else
                        {
                            Obj.SumTotal = "" + String.Format("{0:n3}", Obj.SumTotal) + "";
                            Obj.SumTax = "" + String.Format("{0:n3}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n3}", Obj.SumNetTotal) + "";
                        }



                        report.Sum.Text = Obj.SumTotal;
                        report.Sum2.Text = Obj.SumTax;
                        report.Sum3.Text = Obj.SumNetTotal;

                        report.xrLabel3.Text = CheckList;
                        report.xrLabel6.Text = list1;
                        report.xrLabel10.Text = list2;

                        if (!String.IsNullOrEmpty(Obj.AccountNumber))
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.AccountNumber);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.AccountName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.AccountName.Text = AccName.EnglishName;
                            }

                        }
                        if (Obj.ServiceNo != 0)
                        {
                            var AccName = _unitOfWork.Service.GetServiceByID(UserInfo.fCompanyId, Obj.ServiceNo);

                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.ServiceName.Text = AccName.ArabicName;
                            }

                            else
                            {

                                report.ServiceName.Text = AccName.EnglishName;

                            }

                        }




                        report.CreateDocument();



                        return View("ReportPDF", report);
                    }

                    else   /*(id4 == 1 && id6 == 1)*/
                    {
                        DataSet ds = new DataSet();
                        DataTable table1 = new DataTable("ServiceTaxReportVM");
                        table1 = FunctionUnit.LINQResultToDataTable(AllData);

                        ds.Tables.Add(table1);

                        var report = new XtraDetailedTaxableReport();
                        string reportFilePath = Server.MapPath("/ReportLayout/XtraDetailedTaxableReport.repx");
                        report.LoadLayoutFromXml(reportFilePath);

                        report.DataSource = ds;
                        report.DataMember = "ServiceTaxReportVM";


                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); 

                        report.ServiceNumber.Text = Obj.ServiceNo.ToString();

                        report.ToAccountNumber.Text = Obj.AccountNumber;


                        int count = AllData.Sum(m => m.ServiceNo);
                        report.Num.Text = AllData.Count().ToString();



                        Obj.SumTotal = AllData.Sum(m => (m.Total)).ToString();
                        Obj.SumTax = AllData.Sum(m => (m.Tax)).ToString();


                        Obj.SumNetTotal = AllData.Sum(m => (m.NetTotal)).ToString();


                        if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                        {
                            Obj.SumTotal = "" + String.Format("{0:n2}", Obj.SumTotal) + "";
                            Obj.SumTax = "" + String.Format("{0:n2}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n2}", Obj.SumNetTotal) + "";

                        }
                        else
                        {
                            Obj.SumTotal = "" + String.Format("{0:n3}", Obj.SumTotal) + "";
                            Obj.SumTax = "" + String.Format("{0:n3}", Obj.SumTax) + "";
                            Obj.SumNetTotal = "" + String.Format("{0:n3}", Obj.SumNetTotal) + "";
                        }



                        report.Sum.Text = Obj.SumTotal;
                        report.Sum2.Text = Obj.SumTax;
                        report.Sum3.Text = Obj.SumNetTotal;

                        report.xrLabel3.Text = CheckList;
                        report.xrLabel6.Text = list1;
                        report.xrLabel10.Text = list2;

                        if (!String.IsNullOrEmpty(Obj.AccountNumber))
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.AccountNumber);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.AccountName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.AccountName.Text = AccName.EnglishName;
                            }

                        }
                        if (Obj.ServiceNo != 0)
                        {
                            var AccName = _unitOfWork.Service.GetServiceByID(UserInfo.fCompanyId, Obj.ServiceNo);

                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.ServiceName.Text = AccName.ArabicName;
                            }

                            else
                            {

                                report.ServiceName.Text = AccName.EnglishName;

                            }

                        }




                        report.CreateDocument();



                        return View("ReportPDF", report);
                    }


                }
            }
            catch (Exception ex)
            {
                ViewBag.Error = ex.Message.ToString();

                var AllData = new List<ServiceTaxReportVM>();
                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("ServiceTaxReportVM");
                table1 = FunctionUnit.LINQResultToDataTable(AllData);

                ds.Tables.Add(table1);

                var report = new XtraServiceTaxReport();

                report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); 

                report.DataSource = ds;
                report.DataMember = "ServiceTaxReportVM";


                report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                report.CreateDocument();



                return View("ReportPDF", report);
            }

        }

        public ActionResult GetAccountingDetailsReportPDF(string id, string id2, string id3, string id4, string id5, string id6, int id7, int id8, int id9, int id10, int id11, int id12)
            {
                AccountingDetailsReportVM Obj = new AccountingDetailsReportVM();
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);

                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    Obj.FromDate = fromDate;
                    Obj.ToDate = toDate;
                    Obj.FromVoucherNumber = int.Parse(id3);
                    Obj.ToVoucherNumber = int.Parse(id4);
                    Obj.SearchNote = id5;
                    Obj.CompanyTransactionKindNo = int.Parse(id6);

                    string checklist = "";

                    if (Obj.SearchNote == "0")
                    {
                        Obj.SearchNote = "";
                    }


                    if (id7 == 1)
                    {
                        Obj.AllTransaction = true;
                        checklist += Resources.Resource.AllTransaction + " ";

                    }
                    if (id8 == 1)
                    {
                        Obj.AllExportTransaction = true;
                        checklist += Resources.Resource.AllExportTransaction + " ";

                    }
                    if (id9 == 1)
                    {
                        Obj.AllUnExportTransaction = true;
                        checklist += Resources.Resource.AllUnExportTransaction + " ";

                    }
                    if (id10 == 1)
                    {
                        Obj.DateApproval = true;

                    }
                    if (id11 == 1)
                    {
                        Obj.VoucherApproval = true;

                    }
                    if (id12 == 1)
                    {
                        Obj.NoteApproval = true;

                    }





                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                    var AllAccountingDetails = _unitOfWork.NativeSql.GetAccountingDetailsReport(UserInfo.fCompanyId, Obj.DateApproval, Obj.FromDate, Obj.ToDate);
                    List<AccountingDetailsReportVM> AllData = new List<AccountingDetailsReportVM>();
                    List<AccountingDetailsReportVM> Ch1 = new List<AccountingDetailsReportVM>();
                    List<AccountingDetailsReportVM> Ch2 = new List<AccountingDetailsReportVM>();
                    List<AccountingDetailsReportVM> Ch3 = new List<AccountingDetailsReportVM>();
                    List<AccountingDetailsReportVM> Ch4 = new List<AccountingDetailsReportVM>();
                    if (AllAccountingDetails == null)
                    {
                        return Json(new List<AccountingDetailsReportVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (Obj.CompanyTransactionKindNo != 0)
                    {
                        AllAccountingDetails = AllAccountingDetails.Where(m => m.CompanyTransactionKindNo == Obj.CompanyTransactionKindNo).ToList();
                    }
                    if (Obj.AllExportTransaction)
                    {
                        Ch1 = AllAccountingDetails.Where(m => m.Exported == 1).ToList();
                    }
                    if (Obj.AllUnExportTransaction)
                    {
                        Ch2 = AllAccountingDetails.Where(m => m.Exported == 0).ToList();
                    }
                    if (Obj.VoucherApproval)
                    {
                        Ch3 = AllAccountingDetails.Where(m => m.VHI >= Obj.FromVoucherNumber && m.VHI <= Obj.ToVoucherNumber).ToList();
                    }
                    if (Obj.NoteApproval)
                    {
                        Ch4 = AllAccountingDetails.Where(m => m.Note.Contains(Obj.SearchNote)).ToList();
                    }

                    if (Ch1.Count > 0)
                    {
                        foreach (var c in Ch1)
                        {
                            AllData.Add(c);
                        }
                    }
                    if (Ch2.Count > 0)
                    {
                        foreach (var c in Ch2)
                        {
                            AllData.Add(c);
                        }
                    }
                    if (Ch3.Count > 0)
                    {
                        foreach (var c in Ch3)
                        {
                            AllData.Add(c);
                        }
                    }
                    if (Ch4.Count > 0)
                    {
                        foreach (var c in Ch4)
                        {
                            AllData.Add(c);
                        }
                    }
                    if (Obj.AllExportTransaction == false && Obj.AllUnExportTransaction == false && Obj.VoucherApproval == false && Obj.NoteApproval == false)
                    {

                        DataSet ds = new DataSet();
                        DataTable table1 = new DataTable("AccountingDetailsReportVM");
                        table1 = FunctionUnit.LINQResultToDataTable(AllAccountingDetails);

                        ds.Tables.Add(table1);

                        var report = new XtraAccountDetailsReport();
                        string reportFilePath = Server.MapPath("/ReportLayout/XtraAccountDetailsReport.repx");
                        report.LoadLayoutFromXml(reportFilePath);


                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");
                        report.FromAccountNumber.Text = Obj.FromVoucherNumber.ToString();
                        report.ToAccountNumber.Text = Obj.ToVoucherNumber.ToString();

                        if (Obj.CompanyTransactionKindNo != 0)
                        {
                            var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, Obj.CompanyTransactionKindNo);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                Obj.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;

                            }

                            else
                            {
                                Obj.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;

                            }


                        }

                        report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKindName;


                        report.DataSource = ds;
                        report.DataMember = "AccountingDetailsReportVM";

                        report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                        report.xrLabel4.Text = checklist;
                        report.xrLabel5.Text = Obj.SearchNote;


                        report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKindName;


                        report.CreateDocument();



                        return View("ReportPDF", report);



                    }
                    else
                    {
                        DataSet ds = new DataSet();
                        DataTable table1 = new DataTable("AccountingDetailsReportVM");
                        table1 = FunctionUnit.LINQResultToDataTable(AllData);

                        ds.Tables.Add(table1);

                        var report = new XtraAccountDetailsReport();
                        string reportFilePath = Server.MapPath("/ReportLayout/XtraAccountDetailsReport.repx");
                        report.LoadLayoutFromXml(reportFilePath);
                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;
                        report.FromAccountNumber.Text = Obj.FromVoucherNumber.ToString();
                        report.ToAccountNumber.Text = Obj.ToVoucherNumber.ToString();

                        report.xrLabel5.Text = Obj.SearchNote;


                        if (Obj.CompanyTransactionKindNo != 0)
                        {
                            var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, Obj.CompanyTransactionKindNo);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                Obj.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;

                            }

                            else
                            {
                                Obj.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;

                            }


                        }

                        report.xrLabel4.Text = checklist;

                        report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKindName;
                        report.DataSource = ds;
                        report.DataMember = "AccountingDetailsReportVM";

                        report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                        report.CreateDocument();



                        return View("ReportPDF", report);


                    }
                }
                catch (Exception ex)
                {
                    ViewBag.Error = ex.Message.ToString();


                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("AccountingDetailsReportVM");
                    table1 = FunctionUnit.LINQResultToDataTable(new List<AccountingDetailsReportVM>());

                    ds.Tables.Add(table1);

                    var report = new XtraAccountDetailsReport();
                    string reportFilePath = Server.MapPath("/ReportLayout/XtraAccountDetailsReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                    report.DataSource = ds;
                    report.DataMember = "AccountingDetailsReportVM";

                    report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);
                }

            }


      public ActionResult GetTransActionPDF(string id, string id2, string id3, string id4, string id5, string id6, string id7, int id8, int id9, int id10, int id11)
            {
                TransReportVM Obj = new TransReportVM();
                try
                {
                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));

                    Obj.FromDate = fromDate;
                    Obj.ToDate = toDate;
                    Obj.AccountNumber = id3;
                    Obj.DebitCredit = int.Parse(id4);
                    Obj.FromValue = double.Parse(id5);
                    Obj.ToValue = double.Parse(id6);
                    Obj.Note = id7;
                    if (id8 == 1)
                    {
                        Obj.ByAcc = true;
                    }
                    if (id9 == 1)
                    {
                        Obj.ByDate = true;
                    }
                    if (id10 == 1)
                    {
                        Obj.ByValue = true;
                    }
                    if (id11 == 1)
                    {
                        Obj.ByNote = true;
                    }

                    if (Obj.Note == "0")
                    {
                        Obj.Note = "";
                    }
                    if (Obj.AccountNumber == "0")
                    {
                        Obj.AccountNumber = "";
                    }

                    var userId = User.Identity.GetUserId();
                    string UserID = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(UserID);
                    int CurrYear = UserInfo.CurrYear;
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                    var TransData = _unitOfWork.NativeSql.GetTransActionDatasReport(UserInfo.fCompanyId, Obj.ByDate, Obj.FromDate, Obj.ToDate);

                    var CompanyTransAction = _unitOfWork.CompanyTransactionKind.GetAllCompanyTransactionKind(UserInfo.fCompanyId);
                    var TransActionKind = _unitOfWork.TransactionKind.GetAllTransactionKind();

                    List<TransActionDataVM> ObjAllData = new List<TransActionDataVM>();
                    if (Obj.DebitCredit == 0)
                    {
                        TransData = TransData.Where(m => m.Debit != 0).ToList();
                    }
                    else
                    {
                        TransData = TransData.Where(m => m.Credit != 0).ToList();
                    }
                    if (Obj.ByAcc)
                    {
                        TransData = TransData.Where(m => m.AccountNumber == Obj.AccountNumber).ToList();
                    }

                    if (Obj.ByValue)
                    {
                        if (Obj.DebitCredit == 0)
                        {
                            TransData = TransData.Where(m => m.Debit >= Obj.FromValue && m.Debit <= Obj.ToValue).ToList();
                        }
                        else
                        {
                            TransData = TransData.Where(m => m.Credit >= Obj.FromValue && m.Credit <= Obj.ToValue).ToList();
                        }
                    }
                    if (Obj.ByNote)
                    {
                        TransData = TransData.Where(m => m.Note != null).ToList();
                        TransData = TransData.Where(m => m.Note.Contains(Obj.Note)).ToList();
                    }
                    foreach (var D in TransData)
                    {
                        if (D.CompanyTransactionKindNo == 0)
                        {
                            var V = TransActionKind.FirstOrDefault(m => m.TransactionKindID == D.TransactionKindNo);
                            if (V != null)
                            {
                                D.TransName = V.ArabicName;
                            }


                        } //else
                        {
                            var V = CompanyTransAction.FirstOrDefault(m => m.TransactionKindID == D.TransactionKindNo
                              && m.CompanyTransactionKindID == D.CompanyTransactionKindNo);
                            if (V != null)
                            {
                                D.TransName = V.ArabicName;
                            }


                        }

                        if (Obj.DebitCredit == 0)
                        {
                            D.Value = D.Debit;

                        }
                        else
                        {
                            D.Value = D.Credit;
                        }
                        ObjAllData.Add(D);
                    }
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("TransActionDataVM");
                    table1 = FunctionUnit.LINQResultToDataTable(ObjAllData);



                    ds.Tables.Add(table1);

                    var report = new XtraSearchForTransReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/XtraSearchForTransReport.repx");

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;


                    report.FromAccountNumber.Text = Obj.FromValue.ToString();
                    report.ToAccountNumber.Text = Obj.ToValue.ToString();

                    report.xrLabel5.Text = Obj.Note;


                    report.DataSource = ds;
                    report.DataMember = "TransActionDataVM";

                    report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();



                    var TransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, Obj.DebitCredit);

                    if (Obj.DebitCredit == 0)
                    {
                        report.xrLabel4.Text = Resources.Resource.DebitTransAction + " ";


                    }


                    else
                    {
                        report.xrLabel4.Text = Resources.Resource.CreditTransAction + " ";

                    }




                    report.AccountNumber.Text = Obj.AccountNumber;
                    if (Obj.ByAcc == true)
                    {

                        if (!String.IsNullOrEmpty(Obj.AccountNumber))
                        {
                            var AccNo = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.AccountNumber);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                Obj.AccountName = AccNo.ArabicName;

                            }

                            else
                            {
                                Obj.AccountName = AccNo.EnglishName;

                            }

                        }

                    }


                    report.AccountName.Text = Obj.AccountName;

                    report.CreateDocument();

                    return View("ReportPDF", report);



                }



                catch (Exception ex)
                {
                    string err = ex.Message;
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("TransActionDataVM");
                    table1 = FunctionUnit.LINQResultToDataTable(new List<TransActionDataVM>());

                    ds.Tables.Add(table1);

                    var report = new XtraSearchForTransReport();

                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                    report.DataSource = ds;
                    report.DataMember = "TransActionDataVM";
                    report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();


                    report.CreateDocument();



                    return View("ReportPDF", report);




                }

            }
          public ActionResult GetAllChequesReportPDF(string id, string id2, string id3, string id4, string id5, string id6, int id7, int id8, int id9, int id10, int id11, int id12, int id13, int id14, int id15, int id16, int id17, int id18, int id19)
        {
            PaperFilterVM Obj = new PaperFilterVM();

            try


            {

                var userId = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                Obj.FromDate = fromDate;
                Obj.ToDate = toDate;

                Obj.SaleID = int.Parse(id3);
                Obj.BankOrEndorsementAccountNumber = id4;
                Obj.PaidInAccountNumber = id5;
                Obj.ChequeNumber = id6;

                if (Obj.BankOrEndorsementAccountNumber == "0")
                {
                    Obj.BankOrEndorsementAccountNumber = "";
                }
                if (Obj.PaidInAccountNumber == "0")
                {
                    Obj.PaidInAccountNumber = "";
                }
                if (Obj.ChequeNumber == "0")
                {
                    Obj.ChequeNumber = "";
                }

                string CheckList = " ";
                if (id7 == 1) { Obj.ChequeFund = true; CheckList += Resources.Resource.ChequeFund + "/"; }
                if (id8 == 1) { Obj.FundDrawnFromUnderCollection = true; CheckList += Resources.Resource.FundDrawnFromUnderCollection + "/"; }
                if (id9 == 1) { Obj.ReturnedChequeFundCheque = true; CheckList += Resources.Resource.ReturnedChequeFundCheque + "/"; }
                if (id10 == 1) { Obj.CourtFundCheque = true; CheckList += Resources.Resource.CourtFundCheque + "/"; }
                if (id11 == 1) { Obj.UnderCollection = true; CheckList += Resources.Resource.UnderCollection + "/"; }
                if (id12 == 1) { Obj.PaymentUnderCollection = true; CheckList += Resources.Resource.PaymentUnderCollection + "/"; }
                if (id13 == 1) { Obj.ClearingDepositCheque = true; CheckList += Resources.Resource.ClearingDepositCheque + "/"; }
                if (id14 == 1) { Obj.EndorsementCheque = true; CheckList += Resources.Resource.EndorsementCheque + "/"; }
                if (id15 == 1) { Obj.PaymentEndorsement = true; CheckList += Resources.Resource.PaymentEndorsement + "/"; }
                if (id16 == 1) { Obj.ReturnDrawingChequeToCustomer = true; CheckList += Resources.Resource.ReturnDrawingChequeToCustomer + "/"; }
                if (id17 == 1) { Obj.ReturnChequeToCustomer = true; CheckList += Resources.Resource.ReturnChequeToCustomer + "/"; }
                if (id18 == 1) { Obj.CompromiseInCourt = true; CheckList += Resources.Resource.CompromiseInCourt + "/"; }
                if (id19 == 1) { Obj.ReturnFromChequeBox = true; CheckList += Resources.Resource.ReturnFromChequeBox + "/"; }

                var AllPaper = _unitOfWork.NativeSql.GetAllCheques(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                List<PaperFilterVM> AllData = new List<PaperFilterVM>();
                List<PaperFilterVM> Ch1 = new List<PaperFilterVM>();
                List<PaperFilterVM> Ch2 = new List<PaperFilterVM>();
                List<PaperFilterVM> Ch3 = new List<PaperFilterVM>();
                List<PaperFilterVM> Ch4 = new List<PaperFilterVM>();
                List<PaperFilterVM> Ch5 = new List<PaperFilterVM>();
                List<PaperFilterVM> Ch6 = new List<PaperFilterVM>();
                List<PaperFilterVM> Ch7 = new List<PaperFilterVM>();
                List<PaperFilterVM> Ch8 = new List<PaperFilterVM>();
                List<PaperFilterVM> Ch9 = new List<PaperFilterVM>();
                List<PaperFilterVM> Ch10 = new List<PaperFilterVM>();
                List<PaperFilterVM> Ch11 = new List<PaperFilterVM>();
                List<PaperFilterVM> Ch12 = new List<PaperFilterVM>();
                List<PaperFilterVM> Ch13 = new List<PaperFilterVM>();
                if (AllPaper == null)
                {
                    return Json(new List<PaperFilterVM>(), JsonRequestBehavior.AllowGet);
                }
                if (!String.IsNullOrEmpty(Obj.ChequeNumber))
                {
                    AllPaper = AllPaper.Where(m => m.ChequeNumber == Obj.ChequeNumber).ToList();
                }
                if (!String.IsNullOrEmpty(Obj.PaidInAccountNumber))
                {
                    AllPaper = AllPaper.Where(m => m.IsBill == 1 ? m.BillCustomerNumber == Obj.PaidInAccountNumber : m.PaidInAccountNumber == Obj.PaidInAccountNumber).ToList();
                }
                if (!String.IsNullOrEmpty(Obj.BankOrEndorsementAccountNumber))
                {
                    AllPaper = AllPaper.Where(m => m.BankOrEndorsementAccountNumber == Obj.BankOrEndorsementAccountNumber).ToList();
                }
                if (Obj.SaleID != 0)
                {
                    AllPaper = AllPaper.Where(m => m.SaleID == Obj.SaleID).ToList();
                }
                if (Obj.ChequeFund)
                {
                    Ch1 = AllPaper.Where(m => m.ChequeCase == 1).ToList();
                }
                if (Obj.FundDrawnFromUnderCollection)
                {
                    Ch2 = AllPaper.Where(m => m.ChequeCase == 7).ToList();
                }
                if (Obj.ReturnedChequeFundCheque)
                {
                    Ch3 = AllPaper.Where(m => m.ChequeCase == 6 || m.ChequeCase == 10).ToList();
                }
                if (Obj.CourtFundCheque)
                {
                    Ch4 = AllPaper.Where(m => m.ChequeCase == 12).ToList();
                }
                if (Obj.UnderCollection)
                {
                    Ch5 = AllPaper.Where(m => m.ChequeCase == 2).ToList();
                }
                if (Obj.PaymentUnderCollection)
                {
                    Ch6 = AllPaper.Where(m => m.ChequeCase == 3).ToList();
                }
                if (Obj.ClearingDepositCheque)
                {
                    Ch7 = AllPaper.Where(m => m.ChequeCase == 4).ToList();
                }
                if (Obj.EndorsementCheque)
                {
                    Ch8 = AllPaper.Where(m => m.ChequeCase == 5).ToList();
                }
                if (Obj.PaymentEndorsement)
                {
                    Ch9 = AllPaper.Where(m => m.ChequeCase == 11).ToList();
                }
                if (Obj.ReturnDrawingChequeToCustomer)
                {
                    Ch10 = AllPaper.Where(m => m.ChequeCase == 9).ToList();
                }
                if (Obj.ReturnChequeToCustomer)
                {
                    Ch11 = AllPaper.Where(m => m.ChequeCase == 8).ToList();
                }
                if (Obj.CompromiseInCourt)
                {
                    Ch12 = AllPaper.Where(m => m.ChequeCase == 13).ToList();
                }
                if (Obj.ReturnFromChequeBox)
                {
                    Ch13 = AllPaper.Where(m => m.ChequeCase == 18).ToList();
                }

                if (Ch1.Count > 0)
                {
                    foreach (var c in Ch1)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch2.Count > 0)
                {
                    foreach (var c in Ch2)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch3.Count > 0)
                {
                    foreach (var c in Ch3)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch4.Count > 0)
                {
                    foreach (var c in Ch4)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch5.Count > 0)
                {
                    foreach (var c in Ch5)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch6.Count > 0)
                {
                    foreach (var c in Ch6)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch7.Count > 0)
                {
                    foreach (var c in Ch7)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch8.Count > 0)
                {
                    foreach (var c in Ch8)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch9.Count > 0)
                {
                    foreach (var c in Ch9)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch10.Count > 0)
                {
                    foreach (var c in Ch10)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch11.Count > 0)
                {
                    foreach (var c in Ch11)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch12.Count > 0)
                {
                    foreach (var c in Ch12)
                    {
                        AllData.Add(c);
                    }
                }
                if (Ch13.Count > 0)
                {
                    foreach (var c in Ch13)
                    {
                        AllData.Add(c);
                    }
                }

                if (Obj.ChequeFund == false && Obj.FundDrawnFromUnderCollection == false && Obj.ReturnedChequeFundCheque == false && Obj.CourtFundCheque == false &&
                    Obj.UnderCollection == false && Obj.PaymentUnderCollection == false && Obj.ClearingDepositCheque == false && Obj.EndorsementCheque == false &&
                    Obj.PaymentEndorsement == false && Obj.ReturnDrawingChequeToCustomer == false && Obj.ReturnChequeToCustomer == false && Obj.CompromiseInCourt == false && Obj.ReturnFromChequeBox == false)
                {
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaperFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllPaper);

                    ds.Tables.Add(table1);

                    var report = new XtraChequesReport();
                    string reportFilePath = Server.MapPath("/ReportLayout/XtraChequesReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;
                    report.LbVoucherNo.Text = Obj.ChequeNumber;
                    report.ToAccountNumber.Text = Obj.PaidInAccountNumber;
                    report.BankNumber.Text = Obj.BankOrEndorsementAccountNumber;
                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");

                    if (Obj.SaleID != 0)
                    {
                        report.LbSaleMan.Text = String.Format("{0} {1}", Resources.Resource.SaleManName, Obj.SaleID.ToString());

                    }
                    else
                    {
                        report.LbSaleMan.Text = " ";

                    }

                    report.xrLabel1.Text = CheckList + " ";

                    if (!String.IsNullOrEmpty(Obj.PaidInAccountNumber))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.PaidInAccountNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.AccountName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.AccountName.Text = AccName.EnglishName;
                        }

                    }
                    if (!String.IsNullOrEmpty(Obj.BankOrEndorsementAccountNumber))
                    {
                        var BankName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.BankOrEndorsementAccountNumber);

                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.BankName.Text = BankName.ArabicName;
                        }
                        else
                        {
                            report.BankName.Text = BankName.EnglishName;
                        }

                    }
                    Obj.PaperCount = AllPaper.Sum(m => (m.CheckPaperCount));
                    Obj.PaperAmount = AllPaper.Sum(m => (m.ChequeAmount)).ToString();



                    if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                    {
                        Obj.PaperAmount = "" + String.Format("{0:n2}", Obj.PaperAmount) + "";

                    }
                    else
                    {
                        Obj.PaperAmount = "" + String.Format("{0:n3}", Obj.PaperAmount) + "";
                    }



                    report.SumTotal.Text = Obj.PaperAmount;
                    report.Num.Text = AllPaper.Count().ToString();




                    report.DataSource = ds;
                    report.DataMember = "PaperFilterVM";
                    report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();


                    report.CreateDocument();



                    return View("ReportPDF", report);
                }
                else
                {
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaperFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllData);

                    ds.Tables.Add(table1);

                    var report = new XtraChequesReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/XtraChequesReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);
                    report.LbVoucherNo.Text = Obj.ChequeNumber;
                    report.ToAccountNumber.Text = Obj.PaidInAccountNumber;
                    report.BankNumber.Text = Obj.BankOrEndorsementAccountNumber;
                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");

                    if (Obj.SaleID != 0)
                    {
                        report.LbSaleMan.Text = String.Format("{0} {1}", Resources.Resource.SaleManName, Obj.SaleID.ToString());

                    }
                    else
                    {
                        report.LbSaleMan.Text = " ";

                    }

                    report.xrLabel1.Text = CheckList + " ";

                    if (!String.IsNullOrEmpty(Obj.PaidInAccountNumber))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.PaidInAccountNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.AccountName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.AccountName.Text = AccName.EnglishName;
                        }

                    }
                    if (!String.IsNullOrEmpty(Obj.BankOrEndorsementAccountNumber))
                    {
                        var BankName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.BankOrEndorsementAccountNumber);

                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.BankName.Text = BankName.ArabicName;
                        }
                        else
                        {
                            report.BankName.Text = BankName.EnglishName;
                        }

                    }



                    Obj.PaperCount = AllData.Sum(m => (m.PaperCount));
                    Obj.PaperAmount = AllData.Sum(m => (m.ChequeAmount)).ToString();



                    if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                    {
                        Obj.PaperAmount = "" + String.Format("{0:n2}", Obj.PaperAmount) + "";

                    }
                    else
                    {
                        Obj.PaperAmount = "" + String.Format("{0:n3}", Obj.PaperAmount) + "";
                    }



                    report.SumTotal.Text = Obj.PaperAmount;
                    report.Num.Text = AllPaper.Count().ToString();



                    report.DataSource = ds;
                    report.DataMember = "PaperFilterVM";

                    report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);


                }
            }
            catch (Exception ex)
            {
                ViewBag.Error = ex.Message.ToString();
                string err = ex.Message;
                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("PaperFilterVM");
                table1 = FunctionUnit.LINQResultToDataTable(new List<PaperFilterVM>());

                ds.Tables.Add(table1);

                var report = new XtraChequesReport();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraChequesReport.repx");
                report.LoadLayoutFromXml(reportFilePath);



                report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.DataSource = ds;
                report.DataMember = "PaperFilterVM";

                report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                report.CreateDocument();



                return View("ReportPDF", report);


            }

        }




        public ActionResult GetTrankingChequesReportPDF(string id, string id2, string id3, string id4)
            {
                PaperFilterVM Obj = new PaperFilterVM();
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    Obj.FromDate = fromDate;
                    Obj.ToDate = toDate;
                    Obj.PaidInAccountNumber = id3;
                    Obj.ChequeNumber = id4;
                    if (Obj.PaidInAccountNumber == "0")
                    {
                        Obj.PaidInAccountNumber = "";

                    }
                    if (Obj.ChequeNumber == "0")
                    {
                        Obj.ChequeNumber = "";

                    }
                    var AllPaper = _unitOfWork.NativeSql.GetTrankingChequesReport(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                    if (AllPaper == null)
                    {
                        return Json(new List<PaperFilterVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (!String.IsNullOrEmpty(Obj.ChequeNumber))
                    {
                        AllPaper = AllPaper.Where(m => m.ChequeNumber == Obj.ChequeNumber).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.PaidInAccountNumber))
                    {
                        AllPaper = AllPaper.Where(m => m.IsBill == 1 ? m.BillCustomerNumber == Obj.PaidInAccountNumber : m.PaidInAccountNumber == Obj.PaidInAccountNumber).ToList();
                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaperFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllPaper);

                    ds.Tables.Add(table1);

                    var report = new XtraTrankingChequesReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/XtraTrankingChequesReport.repx");


                    report.LoadLayoutFromXml(reportFilePath);


                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                    report.DataSource = ds;
                    report.DataMember = "PaperFilterVM";

                    report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);

                }
                catch (Exception ex)
                {
                    ViewBag.Error = ex.Message.ToString();
                    string err = ex.Message;
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaperFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(new List<PaperFilterVM>());

                    ds.Tables.Add(table1);

                    var report = new XtraTrankingChequesReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/XtraTrankingChequesReport.repx");


                    report.LoadLayoutFromXml(reportFilePath);


                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                    report.DataSource = ds;
                    report.DataMember = "PaperFilterVM";
                    report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();


                    report.CreateDocument();



                    return View("ReportPDF", report);

                }

            }


       public ActionResult GetAllChequesReportPDF2(string id, string id2, string id3, string id4, string id5, int id6, int id7, int id8, int id9, string id10)
            {


                PaperFilterVM Obj = new PaperFilterVM();
                try
                {


                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    Obj.FromDate = fromDate;
                    Obj.ToDate = toDate;


                    Obj.PaidToAccountNumber = id3;
                    Obj.BankAccountNumber = id4;
                    Obj.PostdatedAccountNumber = id5;
                    Obj.ChequeNumber = id10;

                    if (Obj.PaidToAccountNumber == "0")
                    {
                        Obj.PaidToAccountNumber = "";
                    }
                    if (Obj.BankAccountNumber == "0")
                    {
                        Obj.BankAccountNumber = "";
                    }
                    if (Obj.PostdatedAccountNumber == "0")
                    {
                        Obj.PostdatedAccountNumber = "";
                    }


                    if (Obj.ChequeNumber == "0")
                    {
                        Obj.ChequeNumber = "";
                    }
                    string CheckList = " ";

                    if (id6 == 1) { Obj.PostdatedCheques = true; CheckList += Resources.Resource.PostdatedCheque + "/"; }
                    if (id7 == 1) { Obj.PaidPostdatedCheque = true; CheckList += Resources.Resource.PaidPostdatedCheque + "/"; }
                    if (id8 == 1) { Obj.ReturnPostdatedCheque = true; CheckList += Resources.Resource.ReturnPostdatedCheque + "/"; }
                    if (id9 == 1) { Obj.ReturnPaidPostdatedCheque = true; CheckList += Resources.Resource.ReturnPaidPostdatedCheque + "/"; }



                    var AllPaper = _unitOfWork.NativeSql.GetAllPaymentCheques(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                    List<PaperFilterVM> AllData = new List<PaperFilterVM>();
                    List<PaperFilterVM> Ch14 = new List<PaperFilterVM>();
                    List<PaperFilterVM> Ch15 = new List<PaperFilterVM>();
                    List<PaperFilterVM> Ch16 = new List<PaperFilterVM>();
                    List<PaperFilterVM> Ch17 = new List<PaperFilterVM>();
                    if (AllPaper == null)
                    {
                        return Json(new List<PaperFilterVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (!String.IsNullOrEmpty(Obj.ChequeNumber))
                    {
                        AllPaper = AllPaper.Where(m => m.ChequeNumber == Obj.ChequeNumber).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.PaidToAccountNumber))
                    {
                        AllPaper = AllPaper.Where(m => m.PaidToAccountNumber == Obj.PaidToAccountNumber).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.BankAccountNumber))
                    {
                        AllPaper = AllPaper.Where(m => m.BankAccountNumber == Obj.BankAccountNumber).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.PostdatedAccountNumber))
                    {
                        AllPaper = AllPaper.Where(m => m.PostdatedAccountNumber == Obj.PostdatedAccountNumber).ToList();
                    }
                    if (Obj.PostdatedCheques)
                    {
                        Ch14 = AllPaper.Where(m => m.ChequeCase == 14).ToList();
                    }
                    if (Obj.PaidPostdatedCheque)
                    {
                        Ch15 = AllPaper.Where(m => m.ChequeCase == 15).ToList();
                    }
                    if (Obj.ReturnPostdatedCheque)
                    {
                        Ch16 = AllPaper.Where(m => m.ChequeCase == 16).ToList();
                    }
                    if (Obj.ReturnPaidPostdatedCheque)
                    {
                        Ch17 = AllPaper.Where(m => m.ChequeCase == 17).ToList();
                    }

                    if (Ch14.Count > 0)
                    {
                        foreach (var c in Ch14)
                        {
                            AllData.Add(c);
                        }
                    }
                    if (Ch15.Count > 0)
                    {
                        foreach (var c in Ch15)
                        {
                            AllData.Add(c);
                        }
                    }
                    if (Ch16.Count > 0)
                    {
                        foreach (var c in Ch16)
                        {
                            AllData.Add(c);
                        }
                    }
                    if (Ch17.Count > 0)
                    {
                        foreach (var c in Ch17)
                        {
                            AllData.Add(c);
                        }
                    }

                    if (Obj.PostdatedCheques == false && Obj.PaidPostdatedCheque == false && Obj.ReturnPostdatedCheque == false && Obj.ReturnPaidPostdatedCheque == false)
                    {
                        DataSet ds = new DataSet();
                        DataTable table1 = new DataTable("PaperFilterVM");
                        table1 = FunctionUnit.LINQResultToDataTable(AllPaper);

                        ds.Tables.Add(table1);

                        var report = new XtraAllChequesReport();

                        string reportFilePath = Server.MapPath("/ReportLayout/XtraAllChequesReport.repx");


                        report.LoadLayoutFromXml(reportFilePath);


                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");
                        report.LbVoucherNoo.Text = Obj.ChequeNumber;
                        report.toAccNum.Text = Obj.PaidToAccountNumber;
                        report.BankNumber.Text = Obj.BankAccountNumber;
                        report.AccountNumber.Text = Obj.PostdatedAccountNumber;


                        report.xrLabel1.Text = CheckList + " ";

                        if (!String.IsNullOrEmpty(Obj.PaidToAccountNumber))
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.PaidToAccountNumber);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.ToAccName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.ToAccName.Text = AccName.EnglishName;
                            }

                        } if (!String.IsNullOrEmpty(Obj.PostdatedAccountNumber))
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.PostdatedAccountNumber);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.AccountName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.AccountName.Text = AccName.EnglishName;
                            }

                        }
                        if (!String.IsNullOrEmpty(Obj.BankAccountNumber))
                        {
                            var BankName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.BankAccountNumber);

                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.BankName.Text = BankName.ArabicName;
                            }
                            else
                            {
                                report.BankName.Text = BankName.EnglishName;
                            }

                        }



                        Obj.PaperCount = AllPaper.Sum(m => (m.PaperCount));
                        Obj.PaperAmount = AllPaper.Sum(m => (m.ChequeAmount)).ToString();



                        if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                        {
                            Obj.PaperAmount = "" + String.Format("{0:n2}", Obj.PaperAmount) + "";

                        }
                        else
                        {
                            Obj.PaperAmount = "" + String.Format("{0:n3}", Obj.PaperAmount) + "";
                        }



                        report.SumTotal.Text = Obj.PaperAmount;
                        report.Num.Text = AllPaper.Count().ToString();



                        report.DataSource = ds;
                        report.DataMember = "PaperFilterVM";



                        report.CreateDocument();



                        return View("ReportPDF", report);



                    }
                    else
                    {
                        DataSet ds = new DataSet();
                        DataTable table1 = new DataTable("PaperFilterVM");
                        table1 = FunctionUnit.LINQResultToDataTable(AllData);

                        ds.Tables.Add(table1);

                        var report = new XtraAllChequesReport();

                        string reportFilePath = Server.MapPath("/ReportLayout/XtraAllChequesReport.repx");


                        report.LoadLayoutFromXml(reportFilePath);


                        report.LbCoName.Text = CoInfo.ArabicName;
                        report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                        report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");
                        report.LbVoucherNoo.Text = Obj.ChequeNumber;
                        report.toAccNum.Text = Obj.PaidToAccountNumber;
                        report.BankNumber.Text = Obj.BankAccountNumber;
                        report.AccountNumber.Text = Obj.PostdatedAccountNumber;


                        report.xrLabel1.Text = CheckList + " ";

                        if (!String.IsNullOrEmpty(Obj.PaidToAccountNumber))
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.PaidToAccountNumber);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.ToAccName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.ToAccName.Text = AccName.EnglishName;
                            }

                        }
                        if (!String.IsNullOrEmpty(Obj.PostdatedAccountNumber))
                        {
                            var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.PostdatedAccountNumber);
                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.AccountName.Text = AccName.ArabicName;
                            }
                            else
                            {
                                report.AccountName.Text = AccName.EnglishName;
                            }

                        }
                        if (!String.IsNullOrEmpty(Obj.BankAccountNumber))
                        {
                            var BankName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.BankAccountNumber);

                            if (Resources.Resource.CurLang == "Arb")
                            {
                                report.BankName.Text = BankName.ArabicName;
                            }
                            else
                            {
                                report.BankName.Text = BankName.EnglishName;
                            }

                        }



                        Obj.PaperCount = AllData.Sum(m => (m.PaperCount));
                        Obj.PaperAmount = AllData.Sum(m => (m.ChequeAmount)).ToString();



                        if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                        {
                            Obj.PaperAmount = "" + String.Format("{0:n2}", Obj.PaperAmount) + "";

                        }
                        else
                        {
                            Obj.PaperAmount = "" + String.Format("{0:n3}", Obj.PaperAmount) + "";
                        }



                        report.SumTotal.Text = Obj.PaperAmount;
                        report.Num.Text = AllPaper.Count().ToString();


                        report.DataSource = ds;
                        report.DataMember = "PaperFilterVM";

                        report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                        report.CreateDocument();



                        return View("ReportPDF", report);

                    }
                }
                catch (Exception ex)
                {
                    ViewBag.Error = ex.Message.ToString();
                    string err = ex.Message;
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaperFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(new List<PaperFilterVM>());

                    ds.Tables.Add(table1);

                    var report = new XtraAllChequesReport();


                    string reportFilePath = Server.MapPath("/ReportLayout/XtraAllChequesReport.repx");


                    report.LoadLayoutFromXml(reportFilePath);



                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                    report.DataSource = ds;
                    report.DataMember = "PaperFilterVM";

                    report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);

                }

            }


            public ActionResult GetTrankingChequesReportPDF2(string id, string id2, string id3, string id4)
            {
                PaperFilterVM Obj = new PaperFilterVM();
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);

                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    Obj.FromDate = fromDate;
                    Obj.ToDate = toDate;
                    Obj.PaidToAccountNumber = id3;
                    Obj.ChequeNumber = id4;
                    if (Obj.PaidToAccountNumber == "0")
                    {
                        Obj.PaidToAccountNumber = "";

                    }
                    if (Obj.ChequeNumber == "0")
                    {
                        Obj.ChequeNumber = "";

                    }

                    var AllPaper = _unitOfWork.NativeSql.GetTrankingPaymentChequesReport(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                    if (AllPaper == null)
                    {
                        return Json(new List<PaperFilterVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (!String.IsNullOrEmpty(Obj.ChequeNumber))
                    {
                        AllPaper = AllPaper.Where(m => m.ChequeNumber == Obj.ChequeNumber).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.PaidToAccountNumber))
                    {
                        AllPaper = AllPaper.Where(m => m.PaidToAccountNumber == Obj.PaidToAccountNumber).ToList();
                    }

                    DataSet ds = new DataSet();



                    DataTable table1 = new DataTable("PaperFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllPaper);

                    ds.Tables.Add(table1);

                    var report = new XtraTrankingChequesPayVou();


                    string reportFilePath = Server.MapPath("/ReportLayout/XtraTrankingChequesPayVou.repx");


                    report.LoadLayoutFromXml(reportFilePath);


                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                    report.DataSource = ds;
                    report.DataMember = "PaperFilterVM";

                    report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);


                }
                catch (Exception ex)
                {
                    ViewBag.Error = ex.Message.ToString();
                    string err = ex.Message;
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaperFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(new List<PaperFilterVM>());

                    ds.Tables.Add(table1);

                    var report = new XtraTrankingChequesPayVou();

                    string reportFilePath = Server.MapPath("/ReportLayout/XtraTrankingChequesPayVou.repx");


                    report.LoadLayoutFromXml(reportFilePath);



                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                    report.DataSource = ds;
                    report.DataMember = "PaperFilterVM";

                    report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);

                }

            }




            public ActionResult DetailReceiptVoucherCashPDF(string id, int id2, int id3 , int id4)
            {
                string UserID = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(UserID);
                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                var HeaderObj = _unitOfWork.Header.GetHeaderDataById(id, UserInfo.fCompanyId, id2, id3 , id4);
                var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, HeaderObj.CompanyTransactionKindNo);
                var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, HeaderObj.FCurrencyID);
                var SalesManObj = _unitOfWork.Sale.GetSaleByID(UserInfo.fCompanyId, HeaderObj.SaleID);
                var Company = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                var TransactionDebitObj = _unitOfWork.NativeSql.GetTransactionsDetailDebit(id, UserInfo.fCompanyId, id2, 1 , id4);
                var TransactionCreditObj = _unitOfWork.NativeSql.GetTransactionsDetailCredit(id, UserInfo.fCompanyId, id2, 2 , id4);
                int iRowNumber = HeaderObj.RowCount;
                var TransFixedVM = new TransactionFixedVM { };
                TransFixedVM.Header = HeaderObj;
                TransFixedVM.TransactionDebit = TransactionDebitObj;
                TransFixedVM.TransactionCredit = TransactionCreditObj;
                if (HeaderObj.SaleID == 0)
                {
                    TransFixedVM.SaleManName = "";
                }
                else
                {
                    TransFixedVM.SaleManName = SalesManObj.SalesName;
                }
                if (Resources.Resource.CurLang == "Arb")
                {
                    TransFixedVM.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                    TransFixedVM.CurrencyName = CurrencyObj.ArabicName;
                }
                else
                {
                    TransFixedVM.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;
                    TransFixedVM.CurrencyName = CurrencyObj.EnglishName;
                }
                TransFixedVM.CurrencyNewValue = Math.Round(HeaderObj.ConversionFactor, 3);
                TransFixedVM.WorkWithCostCenter = Company.WorkWithCostCenter;
                TransFixedVM.AccountDebitName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TransactionDebitObj.AccountNumber);
                TransFixedVM.AccountCreditName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TransactionCreditObj.AccountNumber);
                TransFixedVM.CostCenterDebitName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TransactionDebitObj.CostCenter);
                TransFixedVM.CostCenterCreditName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TransactionDebitObj.CostCenter);
                TransFixedVM.Amount = Math.Round(TransactionCreditObj.Credit, 3);
                TransFixedVM.TotalAmount = Math.Round(HeaderObj.TotalDebit, 3);
                TransFixedVM.ForeignAmount = Math.Round(TransactionCreditObj.CreditForeign, 3);
                TransFixedVM.TotalForeign = Math.Round(HeaderObj.TotalDebitForeign, 3);



            if (Company.WorkWithCostCenter)
            {

                DataSet ds = new DataSet();

                var report = new XtraReceiptVoucherCashPDF();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraReceiptVoucherCashPDF.repx");


                report.LoadLayoutFromXml(reportFilePath);


                report.LbCoName.Text = CoInfo.ArabicName;
                // report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                // report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.PaidCostCenter.Text = TransFixedVM.TransactionCredit.CostCenter;


                if (!String.IsNullOrEmpty(TransFixedVM.TransactionCredit.CostCenter))
                {
                    var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, TransFixedVM.TransactionCredit.CostCenter);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.CostCenterCreditName.Text = AccName.ArabicName;
                    }
                    else
                    {
                        report.CostCenterCreditName.Text = AccName.EnglishName;
                    }

                }

                report.FromCostCenter.Text = TransFixedVM.TransactionDebit.CostCenter;


                if (!String.IsNullOrEmpty(TransFixedVM.TransactionDebit.CostCenter))
                {
                    var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, TransFixedVM.TransactionDebit.CostCenter);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.CostCenterDebitName.Text = AccName.ArabicName;
                    }
                    else
                    {
                        report.CostCenterDebitName.Text = AccName.EnglishName;
                    }

                }




                report.LbVoucherNo.Text = TransFixedVM.Header.VoucherNumber;
                report.LbVDate.Text = TransFixedVM.Header.VoucherDate.ToString("dd/MM/yyyy");

                report.LbAccPaidFrom.Text = TransFixedVM.TransactionCredit.AccountNumber;
                report.LbAccFromPaidName.Text = TransFixedVM.AccountCreditName;

                report.LbDebitAccNO.Text = TransFixedVM.TransactionDebit.AccountNumber;
                report.LbAccDebitName.Text = TransFixedVM.AccountDebitName;

                report.LbSaleMan.Text = TransFixedVM.SaleManName;

                report.LbNOte.Text = TransFixedVM.Header.Note;

                report.LbNetTot.Text = TransFixedVM.Amount.ToString();


                //---Tafqet n3n3 --//
                if (Company.CurrencyRef == 0)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                else if (Company.CurrencyRef == 1)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }


                report.DataSource = ds;
                report.DataMember = "TransFixedVM";

                report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                report.CreateDocument();



                return View("ReportPDF", report);
            }

            else
            {

                DataSet ds = new DataSet();

                var report = new XtraReceiptVoucherCashWithoutCost();

                string reportFilePath = Server.MapPath("/ReportLayout/XtraReceiptVoucherCashWithoutCost.repx");


                report.LoadLayoutFromXml(reportFilePath);


                report.LbCoName.Text = CoInfo.ArabicName;
                // report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                // report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.LbVoucherNo.Text = TransFixedVM.Header.VoucherNumber;
                report.LbVDate.Text = TransFixedVM.Header.VoucherDate.ToString("dd/MM/yyyy");

                report.LbAccPaidFrom.Text = TransFixedVM.TransactionCredit.AccountNumber;
                report.LbAccFromPaidName.Text = TransFixedVM.AccountCreditName;

                report.LbDebitAccNO.Text = TransFixedVM.TransactionDebit.AccountNumber;
                report.LbAccDebitName.Text = TransFixedVM.AccountDebitName;

                report.LbSaleMan.Text = TransFixedVM.SaleManName;

                report.LbNOte.Text = TransFixedVM.Header.Note;

                report.LbNetTot.Text = TransFixedVM.Amount.ToString();


                //---Tafqet n3n3 --//
                if (Company.CurrencyRef == 0)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                else if (Company.CurrencyRef == 1)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }



                report.DataSource = ds;
                report.DataMember = "TransFixedVM";


                report.CreateDocument();



                return View("ReportPDF", report);

            }

            }

            public ActionResult ReceiptVoucherCashMultiAccounthPDF(string id, int id2, int id3 ,int id4)
            {
                string UserID = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(UserID);
                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                var HeaderObj = _unitOfWork.Header.GetHeaderDataById(id, UserInfo.fCompanyId, id2, id3 , id4);
                var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, HeaderObj.CompanyTransactionKindNo);
                var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, HeaderObj.FCurrencyID);
                var Company = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                var TransactionDebitObj = _unitOfWork.NativeSql.GetTransactionsDetailDebit(id, UserInfo.fCompanyId, id2, 1 ,id4);
                int iRowNumber = HeaderObj.RowCount;
                var TransFixedVM = new TransactionFixedVM { };
                TransFixedVM.Header = HeaderObj;
                TransFixedVM.TransactionDebit = TransactionDebitObj;
                if (Resources.Resource.CurLang == "Arb")
                {
                    TransFixedVM.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                    TransFixedVM.CurrencyName = CurrencyObj.ArabicName;
                }
                else
                {
                    TransFixedVM.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;
                    TransFixedVM.CurrencyName = CurrencyObj.EnglishName;
                }
                TransFixedVM.CurrencyNewValue = Math.Round(HeaderObj.ConversionFactor, 3);
                TransFixedVM.WorkWithCostCenter = Company.WorkWithCostCenter;
                TransFixedVM.AccountDebitName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TransactionDebitObj.AccountNumber);
                TransFixedVM.CostCenterDebitName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TransactionDebitObj.CostCenter);
                TransFixedVM.Amount = Math.Round(HeaderObj.TotalDebit, 3);
                TransFixedVM.TotalAmount = Math.Round(HeaderObj.TotalDebit, 3);
                TransFixedVM.ForeignAmount = Math.Round(HeaderObj.TotalDebitForeign, 3);
                TransFixedVM.TotalForeign = Math.Round(HeaderObj.TotalDebitForeign, 3);

                var AllTransactionsDetailCredit = _unitOfWork.NativeSql.GetAllTransactionsDetailCredit(id, (id2), UserInfo.fCompanyId, (id3) , id4);

                if (AllTransactionsDetailCredit == null)
                {
                    AllTransactionsDetailCredit = new List<TransactionFixedVM>();
                }


            if (Company.WorkWithCostCenter)
            {
                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TransactionFixedVM");
                table1 = FunctionUnit.LINQResultToDataTable(AllTransactionsDetailCredit);

                ds.Tables.Add(table1);


                var report = new XtraReceiptVoucherMultiReport();


                string reportFilePath = Server.MapPath("/ReportLayout/XtraReceiptVoucherMultiReport.repx");


                report.LoadLayoutFromXml(reportFilePath);


                report.LbNetTot.Text = TransFixedVM.Amount.ToString();
                report.TotalForeign.Text = TransFixedVM.ForeignAmount.ToString();


                report.LbCoName.Text = CoInfo.ArabicName;
                //report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                //report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.LbVoucherNo.Text = TransFixedVM.Header.VoucherNumber;
                report.LbVDate.Text = TransFixedVM.Header.VoucherDate.ToString("dd/MM/yyyy");

                report.FromCostCenter.Text = TransFixedVM.TransactionDebit.CostCenter;
                report.CostCenterDebitName.Text = TransFixedVM.CostCenterDebitName;


                report.LbNOte.Text = TransFixedVM.Header.Note;


                report.AccountDebitName.Text = TransFixedVM.AccountDebitName;

                report.xrCompanyTransactionKindName.Text = TransFixedVM.CompanyTransactionKindName;

                report.xrCurrencyNewValue.Text = TransFixedVM.CurrencyNewValue.ToString();
                report.xrCurrencyID.Text = TransFixedVM.CurrencyName;


                report.FromAccountNumber.Text = TransFixedVM.TransactionDebit.AccountNumber;

                report.LbNOte.Text = TransFixedVM.Header.Note;



                report.DataSource = ds;
                report.DataMember = "TransactionFixedVM";


                //---Tafqet n3n3 --//
                if (Company.CurrencyRef == 0)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                else if (Company.CurrencyRef == 1)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }

                //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                report.CreateDocument();



                return View("ReportPDF", report);

            }

            else
            {
                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TransactionFixedVM");
                table1 = FunctionUnit.LINQResultToDataTable(AllTransactionsDetailCredit);

                ds.Tables.Add(table1);


                var report = new XtraReceiptiVoucherCashMultiWithoutCost();


                string reportFilePath = Server.MapPath("/ReportLayout/XtraReceiptiVoucherCashMultiWithoutCost.repx");


                report.LoadLayoutFromXml(reportFilePath);


                report.LbNetTot.Text = TransFixedVM.Amount.ToString();
                report.TotalForeign.Text = TransFixedVM.ForeignAmount.ToString();


                report.LbCoName.Text = CoInfo.ArabicName;
                //report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                //report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.LbVoucherNo.Text = TransFixedVM.Header.VoucherNumber;
                report.LbVDate.Text = TransFixedVM.Header.VoucherDate.ToString("dd/MM/yyyy");

              

                report.LbNOte.Text = TransFixedVM.Header.Note;


                report.AccountDebitName.Text = TransFixedVM.AccountDebitName;

                report.xrCompanyTransactionKindName.Text = TransFixedVM.CompanyTransactionKindName;

                report.xrCurrencyNewValue.Text = TransFixedVM.CurrencyNewValue.ToString();
                report.xrCurrencyID.Text = TransFixedVM.CurrencyName;


                report.FromAccountNumber.Text = TransFixedVM.TransactionDebit.AccountNumber;

                report.LbNOte.Text = TransFixedVM.Header.Note;

                //---Tafqet n3n3 --//
                if (Company.CurrencyRef == 0)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                else if (Company.CurrencyRef == 1)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }



                report.DataSource = ds;
                report.DataMember = "TransactionFixedVM";


                //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                report.CreateDocument();



                return View("ReportPDF", report);

            }
            }

        public ActionResult DetailPaymentVoucherCashMultiAccountPDF(string id, int id2, int id3 , int id4)
        {
            string UserID = User.Identity.GetUserId();
            var UserInfo = _unitOfWork.User.GetMyInfo(UserID);
            var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
            var HeaderObj = _unitOfWork.Header.GetHeaderDataById(id, UserInfo.fCompanyId, id2, id3 , id4);
            var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, HeaderObj.CompanyTransactionKindNo);
            var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, HeaderObj.FCurrencyID);
            var Company = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
            var TransactionCreditObj = _unitOfWork.NativeSql.GetTransactionsDetailCredit(id, UserInfo.fCompanyId, id2, 1 , id4);
            int iRowNumber = HeaderObj.RowCount;
            var TransFixedVM = new TransactionFixedVM { };
            TransFixedVM.Header = HeaderObj;
            TransFixedVM.TransactionCredit = TransactionCreditObj;
            if (Resources.Resource.CurLang == "Arb")
            {
                TransFixedVM.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                TransFixedVM.CurrencyName = CurrencyObj.ArabicName;
            }
            else
            {
                TransFixedVM.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;
                TransFixedVM.CurrencyName = CurrencyObj.EnglishName;
            }
            TransFixedVM.CurrencyNewValue = Math.Round(HeaderObj.ConversionFactor, 3);
            TransFixedVM.WorkWithCostCenter = Company.WorkWithCostCenter;
            TransFixedVM.AccountCreditName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TransactionCreditObj.AccountNumber);
            TransFixedVM.CostCenterCreditName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TransactionCreditObj.CostCenter);
            TransFixedVM.Amount = Math.Round(HeaderObj.TotalCredit, 3);
            TransFixedVM.TotalAmount = Math.Round(HeaderObj.TotalCredit, 3);
            TransFixedVM.ForeignAmount = Math.Round(HeaderObj.TotalCreditForeign, 3);
            TransFixedVM.TotalForeign = Math.Round(HeaderObj.TotalCreditForeign, 3);
            var AllTransactionsDetailCredit = _unitOfWork.NativeSql.GetAllTransactionsDetailDebit(id, (id2), UserInfo.fCompanyId, (id3) , id4);

            if (AllTransactionsDetailCredit == null)
            {
                AllTransactionsDetailCredit = new List<TransactionFixedVM>();
            }

            if (Company.WorkWithCostCenter)
            {


                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TransactionFixedVM");
                table1 = FunctionUnit.LINQResultToDataTable(AllTransactionsDetailCredit);

                ds.Tables.Add(table1);


                var report = new XtraPaymentVoucherMultiReport();


                string reportFilePath = Server.MapPath("/ReportLayout/XtraPaymentVoucherMultiReport.repx");


                report.LoadLayoutFromXml(reportFilePath);

                report.FromCostCenter.Text = TransFixedVM.TransactionCredit.CostCenter;


                if (!String.IsNullOrEmpty(TransFixedVM.TransactionCredit.CostCenter))
                {
                    var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, TransFixedVM.TransactionCredit.CostCenter);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.CostCenterCreditName.Text = AccName.ArabicName;
                    }
                    else
                    {
                        report.CostCenterCreditName.Text = AccName.EnglishName;
                    }

                }





                report.LbNetTot.Text = TransFixedVM.Amount.ToString();
                report.TotalForeign.Text = TransFixedVM.ForeignAmount.ToString();


                report.LbCoName.Text = CoInfo.ArabicName;
                //report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                //report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.LbVoucherNo.Text = TransFixedVM.Header.VoucherNumber;
                report.LbVDate.Text = TransFixedVM.Header.VoucherDate.ToString("dd/MM/yyyy");


                report.LbNOte.Text = TransFixedVM.Header.Note;


                report.AccountCreditName.Text = TransFixedVM.AccountCreditName;

                report.xrCompanyTransactionKindName.Text = TransFixedVM.CompanyTransactionKindName;

                report.xrCurrencyNewValue.Text = TransFixedVM.CurrencyNewValue.ToString();
                report.xrCurrencyID.Text = TransFixedVM.CurrencyName;


                report.FromAccountNumber.Text = TransFixedVM.TransactionCredit.AccountNumber;

                report.LbNOte.Text = TransFixedVM.Header.Note;

                //---Tafqet n3n3 --//
                if (Company.CurrencyRef == 0)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                else if (Company.CurrencyRef == 1)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }

                report.DataSource = ds;
                report.DataMember = "TransactionFixedVM";

                //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                report.CreateDocument();



                return View("ReportPDF", report);

            }

            else 
            {
            DataSet ds = new DataSet();
            DataTable table1 = new DataTable("TransactionFixedVM");
            table1 = FunctionUnit.LINQResultToDataTable(AllTransactionsDetailCredit);

            ds.Tables.Add(table1);


            var report = new XtraPaymentVoucherMultiWithoutCost();


            string reportFilePath = Server.MapPath("/ReportLayout/XtraPaymentVoucherMultiWithoutCost.repx");


            report.LoadLayoutFromXml(reportFilePath);




            report.LbNetTot.Text = TransFixedVM.Amount.ToString();
            report.TotalForeign.Text = TransFixedVM.ForeignAmount.ToString();


            report.LbCoName.Text = CoInfo.ArabicName;
            //report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
            //report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

            report.LbVoucherNo.Text = TransFixedVM.Header.VoucherNumber;
            report.LbVDate.Text = TransFixedVM.Header.VoucherDate.ToString("dd/MM/yyyy");

           

            report.AccountCreditName.Text = TransFixedVM.AccountCreditName;

            report.xrCompanyTransactionKindName.Text = TransFixedVM.CompanyTransactionKindName;

            report.xrCurrencyNewValue.Text = TransFixedVM.CurrencyNewValue.ToString();
            report.xrCurrencyID.Text = TransFixedVM.CurrencyName;


            report.FromAccountNumber.Text = TransFixedVM.TransactionCredit.AccountNumber;

            report.LbNOte.Text = TransFixedVM.Header.Note;


                //---Tafqet n3n3 --//
                if (Company.CurrencyRef == 0)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                else if (Company.CurrencyRef == 1)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                report.DataSource = ds;
            report.DataMember = "TransactionFixedVM";

            //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

            report.CreateDocument();



            return View("ReportPDF", report);
        }
            }



            public ActionResult DetailPaymentVoucherCashPDF(string id, int id2, int id3 , int id4)
            {
                string UserID = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(UserID);
                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                var HeaderObj = _unitOfWork.Header.GetHeaderDataById(id, UserInfo.fCompanyId, id2, id3 , id4);
                var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, HeaderObj.CompanyTransactionKindNo);
                var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, HeaderObj.FCurrencyID);
                var Company = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                var TransactionCreditObj = _unitOfWork.NativeSql.GetTransactionsDetailCredit(id, UserInfo.fCompanyId, id2, 1, id4);
                var TransactionDebitObj = _unitOfWork.NativeSql.GetTransactionsDetailDebit(id, UserInfo.fCompanyId, id2, 2 , id4);
                int iRowNumber = HeaderObj.RowCount;
                var TransFixedVM = new TransactionFixedVM { };
                TransFixedVM.Header = HeaderObj;
                TransFixedVM.TransactionDebit = TransactionDebitObj;
                TransFixedVM.TransactionCredit = TransactionCreditObj;
                if (Resources.Resource.CurLang == "Arb")
                {
                    TransFixedVM.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                    TransFixedVM.CurrencyName = CurrencyObj.ArabicName;
                }
                else
                {
                    TransFixedVM.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;
                    TransFixedVM.CurrencyName = CurrencyObj.EnglishName;
                }
                TransFixedVM.CurrencyNewValue = Math.Round(HeaderObj.ConversionFactor, 3);
                TransFixedVM.WorkWithCostCenter = Company.WorkWithCostCenter;
                TransFixedVM.AccountDebitName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TransactionDebitObj.AccountNumber);
                TransFixedVM.AccountCreditName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, TransactionCreditObj.AccountNumber);
                TransFixedVM.CostCenterDebitName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TransactionDebitObj.CostCenter);
                TransFixedVM.CostCenterCreditName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, TransactionDebitObj.CostCenter);
                TransFixedVM.Amount = Math.Round(TransactionDebitObj.Debit, 3);
                TransFixedVM.TotalAmount = Math.Round(HeaderObj.TotalDebit, 3);
                TransFixedVM.ForeignAmount = Math.Round(TransactionDebitObj.DebitForeign, 3);
                TransFixedVM.TotalForeign = Math.Round(HeaderObj.TotalDebitForeign, 3);



            if (Company.WorkWithCostCenter)
            {
                DataSet ds = new DataSet();

                var report = new XtraPaymentVoucherCashReport();


                string reportFilePath = Server.MapPath("/ReportLayout/XtraPaymentVoucherCashReport.repx");
                report.LoadLayoutFromXml(reportFilePath);

                report.xrFromCostCenter.Text = TransFixedVM.TransactionCredit.CostCenter;


                if (!String.IsNullOrEmpty(TransFixedVM.TransactionCredit.CostCenter))
                {
                    var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, TransFixedVM.TransactionCredit.CostCenter);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.xrCostCenterCreditName.Text = AccName.ArabicName;
                    }
                    else
                    {
                        report.xrCostCenterCreditName.Text = AccName.EnglishName;
                    }

                }

                report.xrToCostCenter.Text = TransFixedVM.TransactionDebit.CostCenter;


                if (!String.IsNullOrEmpty(TransFixedVM.TransactionDebit.CostCenter))
                {
                    var AccName = _unitOfWork.CostCenter.GetCostCenterById(UserInfo.fCompanyId, TransFixedVM.TransactionDebit.CostCenter);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.xrCostCenterDebitName.Text = AccName.ArabicName;
                    }
                    else
                    {
                        report.xrCostCenterDebitName.Text = AccName.EnglishName;
                    }

                }

                report.LbCoName.Text = CoInfo.ArabicName;
                //report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                //report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.LbVoucherNo.Text = TransFixedVM.Header.VoucherNumber;
                report.LbVDate.Text = TransFixedVM.Header.VoucherDate.ToString("dd/MM/yyyy");

                report.ToAccountNumber.Text = TransFixedVM.TransactionDebit.AccountNumber;
                report.FromAccountNumber.Text = TransFixedVM.TransactionCredit.AccountNumber;
                report.AccountCreditName.Text = TransFixedVM.AccountCreditName;

                report.AccountDebitName.Text = TransFixedVM.AccountDebitName;
                report.LbNOte.Text = TransFixedVM.Header.Note;


              
                report.LbNetTot.Text = TransFixedVM.Amount.ToString();

                report.xrCompanyTransactionKindName.Text = TransFixedVM.CompanyTransactionKindName;

                report.xrCurrencyNewValue.Text = TransFixedVM.CurrencyNewValue.ToString();
                report.xrCurrencyID.Text = TransFixedVM.CurrencyName;
                report.ToAccountNumber.Text = TransFixedVM.TransactionDebit.AccountNumber;

                //---Tafqet n3n3 --//
                if (Company.CurrencyRef == 0)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                else if (Company.CurrencyRef == 1)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }

                report.DataSource = ds;
                report.DataMember = "TransFixedVM";


                report.CreateDocument();



                return View("ReportPDF", report);


            }
            else
            {
                DataSet ds = new DataSet();

                var report = new XtraPaymentVoucherCashWithotCost();


                string reportFilePath = Server.MapPath("/ReportLayout/XtraPaymentVoucherCashWithotCost.repx");
                report.LoadLayoutFromXml(reportFilePath);



                report.LbCoName.Text = CoInfo.ArabicName;
                //report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                //report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                report.LbVoucherNo.Text = TransFixedVM.Header.VoucherNumber;
                report.LbVDate.Text = TransFixedVM.Header.VoucherDate.ToString("dd/MM/yyyy");

                report.ToAccountNumber.Text = TransFixedVM.TransactionDebit.AccountNumber;
                report.FromAccountNumber.Text = TransFixedVM.TransactionCredit.AccountNumber;
                report.AccountCreditName.Text = TransFixedVM.AccountCreditName;

                report.AccountDebitName.Text = TransFixedVM.AccountDebitName;
                report.LbNOte.Text = TransFixedVM.Header.Note;


             
                report.LbNetTot.Text = TransFixedVM.Amount.ToString();

                report.xrCompanyTransactionKindName.Text = TransFixedVM.CompanyTransactionKindName;

                report.xrCurrencyNewValue.Text = TransFixedVM.CurrencyNewValue.ToString();
                report.xrCurrencyID.Text = TransFixedVM.CurrencyName;
                report.ToAccountNumber.Text = TransFixedVM.TransactionDebit.AccountNumber;

                //---Tafqet n3n3 --//
                if (Company.CurrencyRef == 0)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.Jo);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }
                else if (Company.CurrencyRef == 1)
                {
                    CurrencyInfo currency = new CurrencyInfo(CurrencyInfo.Currencies.SaudiArabia);
                    ToWord Tfqet = new ToWord(Decimal.Parse(TransFixedVM.Amount.ToString()), currency);
                    report.LbTafqet.Text = Tfqet.ConvertToArabic();
                }

                report.DataSource = ds;
                report.DataMember = "TransFixedVM";


                report.CreateDocument();



                return View("ReportPDF", report);

            }
            }


            public ActionResult GetAssetsReportPDF(string id, string id2, string id3, string id4, string id5, string id6, int id7, int id8, int id9)
            {

                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    DefinitionAssetSiteVM Obj = new DefinitionAssetSiteVM();
                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    Obj.FromConsStartDate = fromDate;
                    Obj.ToConsStartDate = toDate;


                    DateTime fromDate2 = DateTime.Parse(id3.Substring(0, 2) + "/" + id3.Substring(2, 2) + "/" + id3.Substring(4, 4));
                    DateTime toDate2 = DateTime.Parse(id4.Substring(0, 2) + "/" + id4.Substring(2, 2) + "/" + id4.Substring(4, 4));
                    Obj.FromCombinedtDate = fromDate2;
                    Obj.ToCombinedtDate = toDate2;


                    Obj.DebitAccountNo = id5;
                    Obj.CreditAccountNo = id6;
                    Obj.AssetTypeID = id7;

                    if (id8 == 1) { Obj.ApproveConsStartDate = true; }
                    if (id9 == 1) { Obj.ApproveCombinedtDate = true; }

                    if (Obj.DebitAccountNo == "0")
                    {
                        Obj.DebitAccountNo = "";

                    }
                    if (Obj.CreditAccountNo == "0")
                    {
                        Obj.CreditAccountNo = "";

                    }

                    var AllDefinitionAssetSiteVM = _unitOfWork.NativeSql.GetAssetsReport(UserInfo.fCompanyId, Obj.ApproveCombinedtDate, Obj.ApproveConsStartDate, Obj.FromCombinedtDate, Obj.ToCombinedtDate, Obj.FromConsStartDate, Obj.ToConsStartDate);
                    if (AllDefinitionAssetSiteVM == null)
                    {
                        return Json(new List<DefinitionAssetSiteVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (Obj.AssetTypeID != 0)
                    {
                        AllDefinitionAssetSiteVM = AllDefinitionAssetSiteVM.Where(m => m.AssetTypeID == Obj.AssetTypeID).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.DebitAccountNo))
                    {
                        AllDefinitionAssetSiteVM = AllDefinitionAssetSiteVM.Where(m => m.DebitAccountNo == Obj.DebitAccountNo).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.CreditAccountNo))
                    {
                        AllDefinitionAssetSiteVM = AllDefinitionAssetSiteVM.Where(m => m.CreditAccountNo == Obj.CreditAccountNo).ToList();
                    }



                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("DefinitionAssetSiteVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllDefinitionAssetSiteVM);

                    ds.Tables.Add(table1);

                    var report = new AssetReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/AssetReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.AccountNumber.Text = Obj.CreditAccountNo;
                    report.AccountNumberSecound.Text = Obj.DebitAccountNo;

                    report.LbFromDate.Text = Obj.FromConsStartDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToConsStartDate.ToString("dd/MM/yyyy");
                    report.From.Text = Obj.FromCombinedtDate.ToString("dd/MM/yyyy");
                    report.to.Text = Obj.ToCombinedtDate.ToString("dd/MM/yyyy");
                    report.Kind.Text = Obj.AssetTypeID.ToString();

                    Obj.Count = AllDefinitionAssetSiteVM.Sum(m => m.Count);

                    report.Num.Text = AllDefinitionAssetSiteVM.Count().ToString();

                    Obj.SumAssetCost = AllDefinitionAssetSiteVM.Sum(m => (m.AssetCost)).ToString();

                    Obj.SumCombinedConsum = AllDefinitionAssetSiteVM.Sum(m => (m.CombinedConsum)).ToString();

                    Obj.SumBookValue = AllDefinitionAssetSiteVM.Sum(m => (m.BookValue)).ToString();




                    if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                    {
                        Obj.SumAssetCost = "" + String.Format("{0:n2}", Obj.SumAssetCost) + "";
                        Obj.SumCombinedConsum = "" + String.Format("{0:n2}", Obj.SumCombinedConsum) + "";
                        Obj.SumBookValue = "" + String.Format("{0:n2}", Obj.SumBookValue) + "";

                    }
                    else
                    {
                        Obj.SumAssetCost = "" + String.Format("{0:n2}", Obj.SumAssetCost) + "";
                        Obj.SumCombinedConsum = "" + String.Format("{0:n2}", Obj.SumCombinedConsum) + "";
                        Obj.SumBookValue = "" + String.Format("{0:n2}", Obj.SumBookValue) + "";
                    }



                    report.sum1.Text = Obj.SumAssetCost;
                    report.sum2.Text = Obj.SumCombinedConsum;
                    report.sum3.Text = Obj.SumBookValue;


                    if (Obj.AssetTypeID != 0)
                    {
                        var AssetKind = _unitOfWork.AssetType.GetAssetTypeByID(UserInfo.fCompanyId, Obj.AssetTypeID);
                        report.Kind.Text = AssetKind.Name;


                    }

                    else
                {
                    report.Kind.Text = Resources.Resource.All;


                }

                    if (!String.IsNullOrEmpty(Obj.CreditAccountNo))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.CreditAccountNo);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.AccountName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.AccountName.Text = AccName.EnglishName;
                        }

                    }

                    if (!String.IsNullOrEmpty(Obj.DebitAccountNo))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.DebitAccountNo);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.AccountNameSecound.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.AccountNameSecound.Text = AccName.EnglishName;
                        }

                    }


                    report.DataSource = ds;
                    report.DataMember = "DefinitionAssetSiteVM";

                    report.CreateDocument();
                    return View("ReportPDF", report);

                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<DefinitionAssetSiteVM> MList = new List<DefinitionAssetSiteVM>();

                    AssetReport report = new AssetReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/AssetReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("DefinitionAssetSiteVM");
                    table1 = FunctionUnit.LINQResultToDataTable(MList);

                    ds.Tables.Add(table1);

                    report.DataSource = ds;
                    report.DataMember = "DefinitionAssetSiteVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);
                }

            }



            public ActionResult GetAssetDepreciationTransactionReportPDF(int id, int id2, int id3, string id4 , string id5, string id6, string id7, string id8, int id9, int id10 )
            {
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    DefinitionAssetSiteVM Obj = new DefinitionAssetSiteVM();

                    DateTime Date = DateTime.Parse(id4.Substring(0, 2) + "/" + id4.Substring(2, 2) + "/" + id4.Substring(4, 4));
                    DateTime fromDate = DateTime.Parse(id5.Substring(0, 2) + "/" + id5.Substring(2, 2) + "/" + id5.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id6.Substring(0, 2) + "/" + id6.Substring(2, 2) + "/" + id6.Substring(4, 4)); 
                    DateTime fromDate2 = DateTime.Parse(id7.Substring(0, 2) + "/" + id7.Substring(2, 2) + "/" + id7.Substring(4, 4));
                    DateTime toDate2 = DateTime.Parse(id8.Substring(0, 2) + "/" + id8.Substring(2, 2) + "/" + id8.Substring(4, 4));
                Obj.VouchrDate = Date;
                Obj.FromCombinedtDate = fromDate;
                    Obj.ToCombinedtDate = toDate;
                    Obj.FromLastConsumptionDate = fromDate2;
                    Obj.ToLastConsumptionDate = toDate2;
                    Obj.AssetTypeID = id;
                    Obj.AssetID = id2;
                    Obj.VouchrNo = id3;

                    if (id9 == 1)
                    {
                        Obj.ApproveConsumptionDate = true;
                    }

                    if (id10 == 1)
                    {
                        Obj.ApproveLastConsumptionDate = true;
                    }


                    var AssetDepreciationTransactionReport = _unitOfWork.NativeSql.GetAssetDepreciationTransactionReport(UserInfo.fCompanyId, Obj.VouchrNo, Obj.ApproveLastConsumptionDate,
                    Obj.ApproveConsumptionDate, Obj.FromLastConsumptionDate, Obj.ToLastConsumptionDate, Obj.FromConsumptionDate,Obj.ToConsumptionDate);
                if (AssetDepreciationTransactionReport == null)
                {
                    return Json(new List<DefinitionAssetSiteVM>(), JsonRequestBehavior.AllowGet);
                }
                if (Obj.AssetTypeID != 0)
                {
                    AssetDepreciationTransactionReport = AssetDepreciationTransactionReport.Where(m => m.AssetTypeID == Obj.AssetTypeID).ToList();
                }
                if (Obj.AssetID != 0)
                {
                    AssetDepreciationTransactionReport = AssetDepreciationTransactionReport.Where(m => m.AssetID == Obj.AssetID).ToList();
                }
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("DefinitionAssetSiteVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AssetDepreciationTransactionReport);

                    ds.Tables.Add(table1);

                    var report = new AssetDepreciationReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/AssetDepreciationReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;

                report.date.Text = Obj.VouchrDate.ToString("dd/MM/yyyy");

                if (id10 == 1)
                {
                    report.LbFromDate.Text = Obj.FromConsumptionDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToConsumptionDate.ToString("dd/MM/yyyy");

                }
                report.From.Text = Obj.FromLastConsumptionDate.ToString("dd/MM/yyyy");
                    report.to.Text = Obj.ToLastConsumptionDate.ToString("dd/MM/yyyy");
                    report.Kind.Text = Obj.AssetTypeID.ToString();




                    Obj.SumAssetCost = AssetDepreciationTransactionReport.Sum(m => (m.AssetCost)).ToString();

                    Obj.SumAnnualConsumption = AssetDepreciationTransactionReport.Sum(m => (m.AnnualConsumption)).ToString();

                    Obj.SumValueofConsumption = AssetDepreciationTransactionReport.Sum(m => (m.ValueofConsumption)).ToString();
                    Obj.SumPreviousConsumption = AssetDepreciationTransactionReport.Sum(m => (m.PreviousConsumption)).ToString();
                    Obj.SumCombinedConsum = AssetDepreciationTransactionReport.Sum(m => (m.CombinedConsum)).ToString();
                    Obj.SumBookValue = AssetDepreciationTransactionReport.Sum(m => (m.BookValue)).ToString();



                    if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                    {
                        Obj.SumAssetCost = "" + String.Format("{0:n3}", Obj.SumAssetCost) + "";
                        Obj.SumAnnualConsumption = "" + String.Format("{0:n3}", Obj.SumAnnualConsumption) + "";
                        Obj.SumValueofConsumption = "" + String.Format("{0:n3}", Obj.SumValueofConsumption) + "";
                        Obj.SumPreviousConsumption = "" + String.Format("{0:n3}", Obj.SumPreviousConsumption) + "";
                        Obj.SumCombinedConsum = "" + String.Format("{0:n3}", Obj.SumCombinedConsum) + "";
                        Obj.SumBookValue = "" + String.Format("{0:n3}", Obj.SumBookValue) + "";

                    }
                    else
                    {

                        Obj.SumAssetCost = "" + String.Format("{0:n2}", Obj.SumAssetCost) + "";
                        Obj.SumAnnualConsumption = "" + String.Format("{0:n2}", Obj.SumAnnualConsumption) + "";
                        Obj.SumValueofConsumption = "" + String.Format("{0:n2}", Obj.SumValueofConsumption) + "";
                        Obj.SumPreviousConsumption = "" + String.Format("{0:n2}", Obj.SumPreviousConsumption) + "";
                        Obj.SumCombinedConsum = "" + String.Format("{0:n2}", Obj.SumCombinedConsum) + "";
                        Obj.SumBookValue = "" + String.Format("{0:n2}", Obj.SumBookValue) + "";

                    }



                    report.Sum.Text = Obj.SumAssetCost;
                    report.SumTotal.Text = Obj.SumAnnualConsumption;
                    report.Sum3.Text = Obj.SumValueofConsumption;
                    report.Sum4.Text = Obj.SumPreviousConsumption;
                    report.Sum5.Text = Obj.SumCombinedConsum;
                    report.Sum6.Text = Obj.SumBookValue;


                    if (Obj.AssetTypeID != 0)
                    {
                        var AssetKind = _unitOfWork.AssetType.GetAssetTypeByID(UserInfo.fCompanyId, Obj.AssetTypeID);
                        report.Kind.Text = AssetKind.Name;

                    }

                    else
                {

                    report.Kind.Text = Resources.Resource.All;
                }


                    report.serialNo.Text = Obj.VouchrNo.ToString();
                    report.Total.Text = Obj.Total.ToString();

                    report.ID.Text = Obj.AssetID.ToString();


                    report.DataSource = ds;
                    report.DataMember = "DefinitionAssetSiteVM";



                    //report.LevelName.Text = String.Format("{0} {1}", Resources.Resource.Level, Obj.AccountLevelDropVMID.ToString());


                    //report.PrepaidExpenseAccountNumber.Text = Obj.RevenueAccountNumber;
                    //report.PrepaidExpenseAccountName.Text = Obj.RevenueAccountName;


                    ////report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();




                    return View("ReportPDF", report);

                }
                catch (Exception ex)
                {

                    string err = ex.Message;

                    List<DefinitionAssetSiteVM> VMList = new List<DefinitionAssetSiteVM>();

                    AssetDepreciationReport report = new AssetDepreciationReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/AssetDepreciationReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("DefinitionAssetSiteVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "DefinitionAssetSiteVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                    report.CreateDocument();

                    return View("ReportPDF", report);
                }

            }

            public ActionResult GetConsumptionByTypeReportPDF(int id, string id2, string id3, int id4)
            {
                try
                {

                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    DefinitionAssetSiteVM Obj = new DefinitionAssetSiteVM();

                    DateTime fromDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id3.Substring(0, 2) + "/" + id3.Substring(2, 2) + "/" + id3.Substring(4, 4));
                    Obj.FromConsStartDate = fromDate;
                    Obj.ToConsStartDate = toDate;
                    Obj.AssetTypeID = id;

                    if (id4 == 1)
                    {
                        Obj.ApproveConsStartDate = true;
                    }


                    var AllDefinitionAssetSiteVM = _unitOfWork.NativeSql.GetConsumptionByTypeReport(UserInfo.fCompanyId, Obj.ApproveConsStartDate, Obj.FromConsStartDate, Obj.ToConsStartDate);
                    if (AllDefinitionAssetSiteVM == null)
                    {
                        return Json(new List<DefinitionAssetSiteVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (Obj.AssetTypeID != 0)
                    {
                        AllDefinitionAssetSiteVM = AllDefinitionAssetSiteVM.Where(m => m.AssetTypeID == Obj.AssetTypeID).ToList();
                    }




                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("DefinitionAssetSiteVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllDefinitionAssetSiteVM);

                    ds.Tables.Add(table1);

                    var report = new ConsumptionByTypeReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/ConsumptionByTypeReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);


                    report.DataSource = ds;
                    report.DataMember = "DefinitionAssetSiteVM";
                    report.LbCoName.Text = CoInfo.ArabicName;

                    report.LbFromDate.Text = Obj.FromConsStartDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToConsStartDate.ToString("dd/MM/yyyy");
                    report.Kind.Text = Obj.AssetTypeID.ToString();

                    if (Obj.AssetTypeID != 0)
                    {
                        var AssetKind = _unitOfWork.AssetType.GetAssetTypeByID(UserInfo.fCompanyId, Obj.AssetTypeID);
                        report.Kind.Text = AssetKind.Name;


                    }

                else
                {
                    report.Kind.Text = Resources.Resource.All;

                }





                report.CreateDocument();




                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<DefinitionAssetSiteVM> VMList = new List<DefinitionAssetSiteVM>();

                    ConsumptionByTypeReport report = new ConsumptionByTypeReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/ConsumptionByTypeReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("DefinitionAssetSiteVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "DefinitionAssetSiteVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                    report.CreateDocument();

                    return View("ReportPDF", report);



                }

            }


            public ActionResult GetSoldAssetPDF(string id, string id2, int id3)
            {
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                    var AllAsset = _unitOfWork.Asset.GetAllAssetNative(UserInfo.fCompanyId, 1);

                    AssetFilterVM Obj = new AssetFilterVM();
                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    Obj.FromDate = fromDate;
                    Obj.ToDate = toDate;
                    Obj.AssetTypeID = id3;


                    if (AllAsset == null)
                    {
                        return Json(new List<AssetVM>(), JsonRequestBehavior.AllowGet);
                    }
                    AllAsset = AllAsset.Where(m => m.SaleDate >= Obj.FromDate && m.SaleDate <= Obj.ToDate).ToList();
                    if (Obj.AssetTypeID != 0)
                    {
                        AllAsset = AllAsset.Where(m => m.FAssetTypeID == Obj.AssetTypeID).ToList();
                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("AssetVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllAsset);

                    ds.Tables.Add(table1);

                    var report = new SoldAssetReport();
                    report.LbCoName.Text = CoInfo.ArabicName;
                    string reportFilePath = Server.MapPath("/ReportLayout/SoldAssetReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);
                    report.LbCoName.Text = CoInfo.ArabicName;

                    report.DataSource = ds;
                    report.DataMember = "AssetVM";

                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");
                    report.Kind.Text = Obj.AssetTypeID.ToString();

                    if (Obj.AssetTypeID != 0)
                    {
                        var AssetKind = _unitOfWork.AssetType.GetAssetTypeByID(UserInfo.fCompanyId, Obj.AssetTypeID);
                        report.Kind.Text = AssetKind.Name;


                    }
                    else
                {
                    report.Kind.Text = Resources.Resource.All;

                }


                    report.CreateDocument();
                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<AssetVM> VMList = new List<AssetVM>();

                    SoldAssetReport report = new SoldAssetReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/SoldAssetReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("AssetVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);
                    report.DataSource = ds;
                    report.DataMember = "AssetVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();
                    report.CreateDocument();

                    return View("ReportPDF", report);
                }

            }

            public ActionResult GetAssetSiteReportPDF(int id, int id2, int id3, int id4, int id5, int id6, int id7, int id8, int id9, string id10, string id11, string id12, string id13, int id14)
            {
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                    var AllAsset = _unitOfWork.Asset.GetAllAssetNative(UserInfo.fCompanyId, 1);

                    DefinitionAssetSiteVM Obj = new DefinitionAssetSiteVM();
                    DateTime fromDate = DateTime.Parse(id10.Substring(0, 2) + "/" + id10.Substring(2, 2) + "/" + id10.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id11.Substring(0, 2) + "/" + id11.Substring(2, 2) + "/" + id11.Substring(4, 4));
                    DateTime fromDate2 = DateTime.Parse(id12.Substring(0, 2) + "/" + id12.Substring(2, 2) + "/" + id12.Substring(4, 4));
                    DateTime toDate2 = DateTime.Parse(id13.Substring(0, 2) + "/" + id13.Substring(2, 2) + "/" + id13.Substring(4, 4));
                    Obj.FromTransferDate = fromDate;
                    Obj.ToTransferDate = toDate;
                    Obj.FromDeliveryDate = fromDate2;
                    Obj.ToDeliveryDate = toDate2;
                    Obj.AssetTypeID = id;
                    Obj.AdministrationID = id2;
                    Obj.CircleID = id3;
                    Obj.SectionID = id4;
                    Obj.SiteID = id5;
                    Obj.TrusteeID = id6;
                    Obj.AssetID = id9;
                    Obj.VouchrNo = id14;



                    if (id7 == 1)
                    {
                        Obj.ApproveTransferDate = true;
                    }

                    if (id8 == 1)
                    {
                        Obj.ApproveDeliveryDate = true;
                    }

                    var AllDefinitionAssetSiteVM = _unitOfWork.NativeSql.GetAssetSiteReport(UserInfo.fCompanyId, Obj.ApproveDeliveryDate,
                    Obj.ApproveTransferDate, Obj.FromTransferDate, Obj.ToTransferDate, Obj.FromDeliveryDate, Obj.ToDeliveryDate);
                    if (AllDefinitionAssetSiteVM == null)
                    {
                        return Json(new List<DefinitionAssetSiteVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (Obj.AssetTypeID != 0)
                    {
                        AllDefinitionAssetSiteVM = AllDefinitionAssetSiteVM.Where(m => m.AssetTypeID == Obj.AssetTypeID).ToList();
                    }
                    if (Obj.AdministrationID != 0)
                    {
                        AllDefinitionAssetSiteVM = AllDefinitionAssetSiteVM.Where(m => m.AdministrationID == Obj.AdministrationID).ToList();
                    }
                    if (Obj.CircleID != 0)
                    {
                        AllDefinitionAssetSiteVM = AllDefinitionAssetSiteVM.Where(m => m.CircleID == Obj.CircleID).ToList();
                    }
                    if (Obj.SectionID != 0)
                    {
                        AllDefinitionAssetSiteVM = AllDefinitionAssetSiteVM.Where(m => m.SectionID == Obj.SectionID).ToList();
                    }
                    if (Obj.SiteID != 0)
                    {
                        AllDefinitionAssetSiteVM = AllDefinitionAssetSiteVM.Where(m => m.SiteID == Obj.SiteID).ToList();
                    }
                    if (Obj.TrusteeID != 0)
                    {
                        AllDefinitionAssetSiteVM = AllDefinitionAssetSiteVM.Where(m => m.TrusteeID == Obj.TrusteeID).ToList();
                    }
                    if (Obj.AssetID != 0)
                    {
                        AllDefinitionAssetSiteVM = AllDefinitionAssetSiteVM.Where(m => m.AssetID == Obj.AssetID).ToList();
                    }
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("DefinitionAssetSiteVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllDefinitionAssetSiteVM);

                    ds.Tables.Add(table1);

                    var report = new DefinitionAssetSiteReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/DefinitionAssetSiteReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    //report.LbFromDate.Text = Obj.FromCollectionDate.ToString("dd/MM/yyyy");
                    //report.LbTODate.Text = Obj.ToCollectionDate.ToString("dd/MM/yyyy");

                    report.DataSource = ds;
                    report.DataMember = "DefinitionAssetSiteVM";



                    report.LbFromDate.Text = Obj.FromTransferDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToTransferDate.ToString("dd/MM/yyyy");
                    report.From.Text = Obj.FromDeliveryDate.ToString("dd/MM/yyyy");
                    report.to.Text = Obj.ToDeliveryDate.ToString("dd/MM/yyyy");
                    report.Kind.Text = Obj.AssetTypeID.ToString();
                    report.Mange.Text = Obj.AdministrationID.ToString();
                    report.circle.Text = Obj.CircleID.ToString();
                    report.Department.Text = Obj.SectionID.ToString();
                    report.Site.Text = Obj.SiteID.ToString();
                    report.trustee.Text = Obj.TrusteeID.ToString();
                    report.ID.Text = Obj.AssetID.ToString();

                    report.Num.Text = AllDefinitionAssetSiteVM.Count().ToString();


                    if (Obj.AssetTypeID != 0)
                    {
                        var AssetKind = _unitOfWork.AssetType.GetAssetTypeByID(UserInfo.fCompanyId, Obj.AssetTypeID);
                        report.Kind.Text = AssetKind.Name;


                    }

                    else
                {

                    report.Kind.Text = Resources.Resource.All;

                }
                if (Obj.AdministrationID != 0)
                    {
                        var AssetAdmin = _unitOfWork.AssetAdministration.GetAssetAdministrationByID(UserInfo.fCompanyId, Obj.AdministrationID);
                        report.Mange.Text = AssetAdmin.AdministrationName;


                    }
                    if (Obj.CircleID != 0)
                    {
                        var AssetCircle = _unitOfWork.AssetCircle.GetAssetCircleByID(UserInfo.fCompanyId, Obj.CircleID);
                        report.circle.Text = AssetCircle.CircleName;


                    }

                    if (Obj.CircleID != 0)
                    {
                        var AssetCircle = _unitOfWork.AssetCircle.GetAssetCircleByID(UserInfo.fCompanyId, Obj.CircleID);
                        report.circle.Text = AssetCircle.CircleName;


                    }
                    if (Obj.SectionID != 0)
                    {
                        var AssetSection = _unitOfWork.AssetSection.GetAssetSectionByID(UserInfo.fCompanyId, Obj.SectionID);
                        report.Department.Text = AssetSection.SectionName;


                    }
                    if (Obj.SiteID != 0)
                    {
                        var AssetSite = _unitOfWork.AssetSite.GetAssetSiteByID(UserInfo.fCompanyId, Obj.SiteID);
                        report.Site.Text = AssetSite.SiteName;


                    } if (Obj.TrusteeID != 0)
                    {
                        var AssetTrustee = _unitOfWork.AssetTrustee.GetAssetTrusteeByID(UserInfo.fCompanyId, Obj.TrusteeID);
                        report.trustee.Text = AssetTrustee.TrusteeName;


                    }



                    // Obj.Count = AllDefinitionAssetSiteVM.Count(m => m.AssetID);



                    Obj.SumAssetCost = AllDefinitionAssetSiteVM.Sum(m => (m.AssetCost)).ToString();
                    Obj.SumCombinedConsum = AllDefinitionAssetSiteVM.Sum(m => (m.CombinedConsum)).ToString();


                    Obj.SumBookValue = AllDefinitionAssetSiteVM.Sum(m => (m.BookValue)).ToString();


                    if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                    {
                        Obj.SumAssetCost = "" + String.Format("{0:n3}", Obj.SumAssetCost) + "";
                        Obj.SumCombinedConsum = "" + String.Format("{0:n3}", Obj.SumCombinedConsum) + "";
                        //Obj.NetTotalAfterDiscount = "" + String.Format("{0:n2}", Obj.NetTotalAfterDiscount.ToString()) + "";
                        Obj.SumBookValue = "" + String.Format("{0:n3}", Obj.SumBookValue) + "";

                    }
                    else
                    {
                        Obj.SumAssetCost = "" + String.Format("{0:n2}", Obj.SumAssetCost) + "";
                        Obj.SumCombinedConsum = "" + String.Format("{0:n2}", Obj.SumCombinedConsum) + "";
                        //Obj.NetTotalAfterDiscount = "" + String.Format("{0:n2}", Obj.NetTotalAfterDiscount.ToString()) + "";
                        Obj.SumBookValue = "" + String.Format("{0:n2}", Obj.SumBookValue) + "";
                    }


                    report.Sum.Text = Obj.SumAssetCost;
                    report.Sum2.Text = Obj.SumCombinedConsum;
                    report.Sum3.Text = Obj.SumBookValue;


                    report.CreateDocument();




                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<DefinitionAssetSiteVM> VMList = new List<DefinitionAssetSiteVM>();

                    DefinitionAssetSiteReport report = new DefinitionAssetSiteReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/DefinitionAssetSiteReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("DefinitionAssetSiteVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "DefinitionAssetSiteVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);

                }

            }

        public ActionResult GetConsumAssetPDF(string id, string id2, int id3)
        {
            try
            {
                var userId = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                var AllAsset = _unitOfWork.Asset.GetAllAssetNative(UserInfo.fCompanyId, 2);

                AssetFilterVM Obj = new AssetFilterVM();

                DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                Obj.FromDate = fromDate;
                Obj.ToDate = toDate;
                Obj.AssetTypeID = id3;

                if (AllAsset == null)
                {
                    return Json(new List<AssetVM>(), JsonRequestBehavior.AllowGet);
                }
                AllAsset = AllAsset.Where(m => m.ConsumingDate >= Obj.FromDate && m.ConsumingDate <= Obj.ToDate).ToList();
                if (Obj.AssetTypeID != 0)
                {
                    AllAsset = AllAsset.Where(m => m.FAssetTypeID == Obj.AssetTypeID).ToList();
                }




                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("AssetVM");
                table1 = FunctionUnit.LINQResultToDataTable(AllAsset);

                ds.Tables.Add(table1);

                var report = new ConsumAssetReport();

                string reportFilePath = Server.MapPath("/ReportLayout/ConsumAssetReport.repx");
                report.LoadLayoutFromXml(reportFilePath);

                report.LbCoName.Text = CoInfo.ArabicName;
               
                report.DataSource = ds;
                report.DataMember = "AssetVM";




                report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");

                report.Kind.Text = Obj.AssetTypeID.ToString();

                if (Obj.AssetTypeID != 0)
                {
                    var AssetKind = _unitOfWork.AssetType.GetAssetTypeByID(UserInfo.fCompanyId, Obj.AssetTypeID);
                    report.Kind.Text = AssetKind.Name;


                }
                else
                {

                    report.Kind.Text = Resources.Resource.All;

                }

                report.CreateDocument();


                return View("ReportPDF", report);
            }
            catch (Exception ex)
            {
                string err = ex.Message;

                List<AssetVM> VMList = new List<AssetVM>();

                ConsumAssetReport report = new ConsumAssetReport();

                string reportFilePath = Server.MapPath("/ReportLayout/ConsumAssetReport.repx");
                report.LoadLayoutFromXml(reportFilePath);

                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("AssetVM");
                table1 = FunctionUnit.LINQResultToDataTable(VMList);

                ds.Tables.Add(table1);




                report.DataSource = ds;
                report.DataMember = "AssetVM";
                // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                report.CreateDocument();

                return View("ReportPDF", report);
            }

        }

        public ActionResult GetAssetMaintenancePDF(string id, string id2, int id3, string id4)
            {
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                    var AllAsset = _unitOfWork.AssetMaintenance.GetAllAssetMaintenanceNative(UserInfo.fCompanyId);

                    AssetFilterVM Obj = new AssetFilterVM();

                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    Obj.FromDate = fromDate;
                    Obj.ToDate = toDate;
                    Obj.AssetTypeID = id3;
                    Obj.AssetID = id4;


                    if (Obj.AssetID == "0")
                    {
                        Obj.AssetID = "";
                    }

                    int AssetID = 0;
                    if (!String.IsNullOrEmpty(Obj.AssetID))
                    {
                        try
                        {
                            AssetID = int.Parse(Obj.AssetID);
                        }
                        catch
                        {
                            AssetID = 0;
                        }
                    }

                    if (AllAsset == null)
                    {
                        return Json(new List<AssetMaintenanceVM>(), JsonRequestBehavior.AllowGet);
                    }
                    AllAsset = AllAsset.Where(m => m.TrDate >= Obj.FromDate && m.TrDate <= Obj.ToDate).ToList();
                    if (Obj.AssetTypeID != 0)
                    {
                        AllAsset = AllAsset.Where(m => m.FAssetTypeID == Obj.AssetTypeID).ToList();
                    }

                    if (AssetID != 0)
                    {
                        AllAsset = AllAsset.Where(m => m.AssetID == AssetID).ToList();
                    }


                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("AssetMaintenanceVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllAsset);

                    ds.Tables.Add(table1);

                    var report = new AssetMaintenanceReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/AssetMaintenanceReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    //report.LbFromDate.Text = Obj.FromCollectionDate.ToString("dd/MM/yyyy");
                    //report.LbTODate.Text = Obj.ToCollectionDate.ToString("dd/MM/yyyy");

                    report.DataSource = ds;
                    report.DataMember = "AssetMaintenanceVM";

                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");

                    report.Kind.Text = Obj.AssetTypeID.ToString();


                    if (Obj.AssetTypeID != 0)
                    {
                        var AssetKind = _unitOfWork.AssetType.GetAssetTypeByID(UserInfo.fCompanyId, Obj.AssetTypeID);
                        report.Kind.Text = AssetKind.Name;



                    }

                    else
                {
                    report.Kind.Text = Resources.Resource.All;

                }
                    report.ID.Text = Obj.AssetID.ToString();



                    report.CreateDocument();



                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<AssetMaintenanceVM> VMList = new List<AssetMaintenanceVM>();

                    AssetMaintenanceReport report = new AssetMaintenanceReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/AssetMaintenanceReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("AssetMaintenanceVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "AssetMaintenanceVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);

                }

            }

        public ActionResult GetAssetsTransferMovementsReportPDF(int id, int id2, int id3, int id4, int id5, int id6, int id7, int id8, int id9, string id10, string id11, string id12, string id13)
            {
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                    var AllAsset = _unitOfWork.Asset.GetAllAssetNative(UserInfo.fCompanyId, 1);

                    DefinitionAssetSiteVM Obj = new DefinitionAssetSiteVM();
                    DateTime fromDate = DateTime.Parse(id10.Substring(0, 2) + "/" + id10.Substring(2, 2) + "/" + id10.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id11.Substring(0, 2) + "/" + id11.Substring(2, 2) + "/" + id11.Substring(4, 4));
                    DateTime fromDate2 = DateTime.Parse(id12.Substring(0, 2) + "/" + id12.Substring(2, 2) + "/" + id12.Substring(4, 4));
                    DateTime toDate2 = DateTime.Parse(id13.Substring(0, 2) + "/" + id13.Substring(2, 2) + "/" + id13.Substring(4, 4));
                    Obj.FromTransferDate = fromDate;
                    Obj.ToTransferDate = toDate;
                    Obj.FromDeliveryDate = fromDate2;
                    Obj.ToDeliveryDate = toDate2;
                    Obj.AssetTypeID = id;
                    Obj.AdministrationID = id2;
                    Obj.CircleID = id3;
                    Obj.SectionID = id4;
                    Obj.SiteID = id5;
                    Obj.TrusteeID = id6;
                    Obj.AssetID = id9;




                    if (id7 == 1)
                    {
                        Obj.ApproveTransferDate = true;
                    }

                    if (id8 == 1)
                    {
                        Obj.ApproveDeliveryDate = true;
                    }

                    var AllDefinitionAssetSiteVM = _unitOfWork.NativeSql.GetAssetsTransferMovementsReport(UserInfo.fCompanyId, Obj.ApproveDeliveryDate,
                    Obj.ApproveTransferDate, Obj.FromTransferDate, Obj.ToTransferDate, Obj.FromDeliveryDate, Obj.ToDeliveryDate);
                    if (AllDefinitionAssetSiteVM == null)
                    {
                        return Json(new List<DefinitionAssetSiteVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (Obj.AssetTypeID != 0)
                    {
                        AllDefinitionAssetSiteVM = AllDefinitionAssetSiteVM.Where(m => m.AssetTypeID == Obj.AssetTypeID).ToList();
                    }
                    if (Obj.AdministrationID != 0)
                    {
                        AllDefinitionAssetSiteVM = AllDefinitionAssetSiteVM.Where(m => m.AdministrationID == Obj.AdministrationID).ToList();
                    }
                    if (Obj.CircleID != 0)
                    {
                        AllDefinitionAssetSiteVM = AllDefinitionAssetSiteVM.Where(m => m.CircleID == Obj.CircleID).ToList();
                    }
                    if (Obj.SectionID != 0)
                    {
                        AllDefinitionAssetSiteVM = AllDefinitionAssetSiteVM.Where(m => m.SectionID == Obj.SectionID).ToList();
                    }
                    if (Obj.SiteID != 0)
                    {
                        AllDefinitionAssetSiteVM = AllDefinitionAssetSiteVM.Where(m => m.SiteID == Obj.SiteID).ToList();
                    }
                    if (Obj.TrusteeID != 0)
                    {
                        AllDefinitionAssetSiteVM = AllDefinitionAssetSiteVM.Where(m => m.TrusteeID == Obj.TrusteeID).ToList();
                    }
                    if (Obj.AssetID != 0)
                    {
                        AllDefinitionAssetSiteVM = AllDefinitionAssetSiteVM.Where(m => m.AssetID == Obj.AssetID).ToList();
                    }
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("DefinitionAssetSiteVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllDefinitionAssetSiteVM);

                    ds.Tables.Add(table1);

                    var report = new AssetTransferMovementReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/AssetTransferMovementReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    //report.LbFromDate.Text = Obj.FromCollectionDate.ToString("dd/MM/yyyy");
                    //report.LbTODate.Text = Obj.ToCollectionDate.ToString("dd/MM/yyyy");

                    report.DataSource = ds;
                    report.DataMember = "DefinitionAssetSiteVM";

                    report.LbFromDate.Text = Obj.FromTransferDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToTransferDate.ToString("dd/MM/yyyy");
                    report.From.Text = Obj.FromDeliveryDate.ToString("dd/MM/yyyy");
                    report.to.Text = Obj.ToDeliveryDate.ToString("dd/MM/yyyy");
                    report.Kind.Text = Obj.AssetTypeID.ToString();
                    report.Mange.Text = Obj.AdministrationID.ToString();
                    report.circle.Text = Obj.CircleID.ToString();
                    report.Department.Text = Obj.SectionID.ToString();
                    report.Site2.Text = Obj.SiteID.ToString();
                    report.trustee.Text = Obj.TrusteeID.ToString();
                    report.ID.Text = Obj.AssetID.ToString();




                    if (Obj.AssetTypeID != 0)
                    {
                        var AssetKind = _unitOfWork.AssetType.GetAssetTypeByID(UserInfo.fCompanyId, Obj.AssetTypeID);
                        report.Kind.Text = AssetKind.Name;


                    }

                    else
                {

                    report.Kind.Text = Resources.Resource.All;

                }
                if (Obj.AdministrationID != 0)
                    {
                        var AssetAdmin = _unitOfWork.AssetAdministration.GetAssetAdministrationByID(UserInfo.fCompanyId, Obj.AdministrationID);
                        report.Mange.Text = AssetAdmin.AdministrationName;


                    }
                    if (Obj.CircleID != 0)
                    {
                        var AssetCircle = _unitOfWork.AssetCircle.GetAssetCircleByID(UserInfo.fCompanyId, Obj.CircleID);
                        report.circle.Text = AssetCircle.CircleName;


                    }

                    if (Obj.CircleID != 0)
                    {
                        var AssetCircle = _unitOfWork.AssetCircle.GetAssetCircleByID(UserInfo.fCompanyId, Obj.CircleID);
                        report.circle.Text = AssetCircle.CircleName;


                    }
                    if (Obj.SectionID != 0)
                    {
                        var AssetSection = _unitOfWork.AssetSection.GetAssetSectionByID(UserInfo.fCompanyId, Obj.SectionID);
                        report.Department.Text = AssetSection.SectionName;


                    }
                    if (Obj.SiteID != 0)
                    {
                        var AssetSite = _unitOfWork.AssetSite.GetAssetSiteByID(UserInfo.fCompanyId, Obj.SiteID);
                        report.Site2.Text = AssetSite.SiteName;


                    }
                    if (Obj.TrusteeID != 0)
                    {
                        var AssetTrustee = _unitOfWork.AssetTrustee.GetAssetTrusteeByID(UserInfo.fCompanyId, Obj.TrusteeID);
                        report.trustee.Text = AssetTrustee.TrusteeName;


                    }



                    report.CreateDocument();




                    return View("ReportPDF", report);

                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<DefinitionAssetSiteVM> VMList = new List<DefinitionAssetSiteVM>();

                    AssetTransferMovementReport report = new AssetTransferMovementReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/AssetTransferMovementReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("DefinitionAssetSiteVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "DefinitionAssetSiteVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);

                }

            }


            public ActionResult GetTrialBalanceYearlyPDF(int id, int id2, string id3, int id4, int id5, int id6)
            {
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                    var AccountData = _unitOfWork.NativeSql.GetChartOfAccountByLevel(UserInfo.fCompanyId);

                    AccountLevelRepVM Obj = new AccountLevelRepVM();
                    Obj.AccountLevelDropVMID = id;
                    Obj.CostCenterNumber = id3;
                    Obj.CostSearchType = id5;


                    if (id2 == 1)
                    {
                        Obj.ShowZeroBalance = true;
                    }

                    if (id4  == 1)
                    {
                        Obj.ByCostCenter = true;
                    }

                    if (id6 == 1)
                    {
                        Obj.Partofthenumber = true;
                    }



                    if (Obj.CostCenterNumber == "0")
                    {
                        Obj.CostCenterNumber = "";
                    }

                    int CurrYear = UserInfo.CurrYear;
                    Obj.Detail = true;
                    var Date = "01/01/" + CurrYear;
                    var OpenDate = "31/12/" + (CurrYear - 1).ToString();
                    Obj.FromDate = DateTime.Parse("01/01/" + CurrYear);
                    Obj.ToDate = DateTime.Parse("31/12/" + CurrYear);
                    string TempCostID = "0";
                    int TempCostType = 0;

                    if (Obj.ByCostCenter)
                    {
                        TempCostID = Obj.CostCenterNumber;
                        if (Obj.Partofthenumber)
                        {
                            TempCostType = Obj.CostSearchType;
                        }


                    }



                    IEnumerable<TrialBalanceVM> TotData = new List<TrialBalanceVM>();

                    if (Obj.Partofthenumber)
                    {
                        if (Obj.CostSearchType == 1)
                        {
                            Obj.CostCenterNumber = Obj.CostCenterNumber + "%";
                        }
                        else if (Obj.CostSearchType == 2)
                        {
                            Obj.CostCenterNumber = "%" + Obj.CostCenterNumber;
                        }
                        else if (Obj.CostSearchType == 3)
                        {
                            Obj.CostCenterNumber = "%" + Obj.CostCenterNumber + "%";

                        }
                    }
                    var TranData = _unitOfWork.NativeSql.GetTransactionForTrial(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);
                    var MonthlyData = _unitOfWork.NativeSql.GetTransactionForTrialYearly(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);

                    if (DateTime.Parse(Date) != Obj.FromDate)
                        TotData = _unitOfWork.NativeSql.GetTotCreditDebitForTrial(UserInfo.fCompanyId, DateTime.Parse(Date), Obj.FromDate, Obj.ByCostCenter, Obj.CostCenterNumber, Obj.Partofthenumber, Obj.CostSearchType);


                    //----------------Get Open-------------//
                    IEnumerable<TrialBalanceVM> TotDataOpen = new List<TrialBalanceVM>();
                    TotDataOpen = _unitOfWork.NativeSql.GetTotCreditDebitForTrialOpen(UserInfo.fCompanyId, DateTime.Parse(OpenDate), DateTime.Parse(OpenDate));
                    foreach (var D in TotDataOpen)
                    {
                        TotData = TotData.Append(D);

                    }
                    //------------------------------------//


                    double TotalDebit = 0;
                    double TOTCredit = 0;
                    double NetCredit = 0;
                    double NetDebit = 0;
                    double CreditBalance = 0;
                    double DebitBalance = 0;
                    double CreditTransAction = 0;
                    double DebitTransAction = 0;

                    double January = 0;
                    double February = 0;
                    double March = 0;
                    double April = 0;
                    double May = 0;
                    double June = 0;
                    double July = 0;
                    double August = 0;
                    double September = 0;
                    double October = 0;
                    double November = 0;
                    double December = 0;

                    double NetTot = 0;
                    double OpenBalance = 0;
                    List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                    IEnumerable<ChartOfAccount> Accounts = new List<ChartOfAccount>();

                    IEnumerable<ChartOfAccount> LessMainAccount = new List<ChartOfAccount>();



                if ((Obj.AccountLevelDropVMID > 0) && (!Obj.Detail))
                {


                    Accounts = AccountData.Where(m => m.AccountLevel == Obj.AccountLevelDropVMID).OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                    LessMainAccount = AccountData.Where(m => m.AccountLevel < Obj.AccountLevelDropVMID).OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                    IEnumerable<string> FaherAccount = LessMainAccount.Where(m => m.AccountFather != "0").Select(m => m.AccountFather);


                    foreach (var A in LessMainAccount)
                    {
                        if (AccountData.FirstOrDefault(m => m.AccountFather == A.AccountNumber) != null)
                        {
                            //do nothing
                        }
                        else

                        {
                            Accounts = Accounts.Append(A);
                        }

                    }
                    Accounts = Accounts.OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();
                    // var MainChild = AccountData.Where(m => m.AccountFather == MainAcc.AccountNumber).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();
                    foreach (var Acc in Accounts)
                    {
                        TotalDebit = 0;
                        TOTCredit = 0;
                        NetCredit = 0;
                        NetDebit = 0;
                        CreditBalance = 0;
                        DebitBalance = 0;
                        CreditTransAction = 0;
                        DebitTransAction = 0;


                        if (AccountData.FirstOrDefault(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel) != null)
                        {
                            var AllAccount = AccountData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber) && m.AccountLevel > Acc.AccountLevel)
                                            .OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();
                            int FatherLevel = Acc.AccountLevel;

                            foreach (var CurrAccLevel in AllAccount)
                            {
                                if (CurrAccLevel.AccountLevel == FatherLevel)
                                {
                                    break;
                                }
                                else
                                {
                                    var TransActionData = TranData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    var BalanceData = TotData.Where(m => m.AccountNumber == CurrAccLevel.AccountNumber);
                                    foreach (var D in TransActionData)
                                    {
                                        CreditTransAction += D.CreditTransAction;
                                        DebitTransAction += D.DebitTransAction;
                                    }
                                    foreach (var Balance in BalanceData)
                                    {
                                        CreditBalance += Balance.CreditBalance;
                                        DebitBalance += Balance.DebitBalance;
                                    }
                                    TotalDebit = DebitTransAction + DebitBalance;
                                    TOTCredit = CreditTransAction + CreditBalance;
                                }
                            }
                        }
                        else
                        {
                            var TransActionData = TranData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            var BalanceData = TotData.Where(m => m.AccountNumber == Acc.AccountNumber);
                            foreach (var D in TransActionData)
                            {
                                CreditTransAction += D.CreditTransAction;
                                DebitTransAction += D.DebitTransAction;
                            }
                            foreach (var Balance in BalanceData)
                            {
                                CreditBalance += Balance.CreditBalance;
                                DebitBalance += Balance.DebitBalance;
                            }

                            TotalDebit = DebitTransAction + DebitBalance;
                            TOTCredit = CreditTransAction + CreditBalance;
                        }
                        if (TotalDebit > TOTCredit)
                        {
                            NetDebit = TotalDebit - TOTCredit;
                        }
                        if (TotalDebit < TOTCredit)
                        {
                            NetCredit = TOTCredit - TotalDebit;
                        }

                        TrialBalanceVM trialBalance = new TrialBalanceVM();
                        trialBalance.AccountNumber = Acc.AccountNumber;
                        trialBalance.Name = Acc.ArabicName;
                        trialBalance.Level = Acc.AccountLevel;
                        trialBalance.CreditBalance = CreditBalance;
                        trialBalance.CreditTransAction = CreditTransAction;
                        trialBalance.DebitBalance = DebitBalance;
                        trialBalance.DebitTransAction = DebitTransAction;
                        trialBalance.NetCredit = NetCredit;
                        trialBalance.NetDebit = NetDebit;

                        trialBalance.nCreditBalance = CreditBalance;
                        trialBalance.nCreditTransAction = CreditTransAction;
                        trialBalance.nDebitBalance = DebitBalance;
                        trialBalance.nDebitTransAction = DebitTransAction;
                        trialBalance.nNetCredit = NetCredit;
                        trialBalance.nNetDebit = NetDebit;
                        trialBalance.TempCostID = TempCostID;
                        trialBalance.TempCostType = TempCostType;
                        if (AccountData.FirstOrDefault(m => m.AccountFather == Acc.AccountNumber) != null)
                        {
                            trialBalance.IsMainAccount = 1;

                        }
                        else
                        {
                            trialBalance.IsMainAccount = 0;


                        }

                        if (!Obj.ShowZeroBalance)
                        {
                            if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }
                        }
                        else
                        {
                            if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                            {
                                TrialBalanceVMList.Add(trialBalance);
                            }


                        }
                    }

                }
               else if ((Obj.AccountLevelDropVMID > 0) && (Obj.Detail))
                    {


                        Accounts = AccountData.Where(m => m.AccountLevel <= Obj.AccountLevelDropVMID).ToList().OrderBy(m => m.AccountNumber).ThenBy(m => m.AccountLevel).ToList();

                        foreach (var Acc in Accounts)//Each Main Account
                        {
                            TotalDebit = 0;
                            TOTCredit = 0;
                            NetCredit = 0;
                            NetDebit = 0;
                            CreditBalance = 0;
                            DebitBalance = 0;
                            CreditTransAction = 0;
                            DebitTransAction = 0;

                            January = 0;
                            February = 0;
                            March = 0;
                            April = 0;
                            May = 0;
                            June = 0;
                            July = 0;
                            August = 0;
                            September = 0;
                            October = 0;
                            November = 0;
                            December = 0;

                            NetTot = 0;

                            var MainAccount = AccountData.FirstOrDefault(m => m.AccountNumber == Acc.AccountNumber);
                            var MainChild = AccountData.Where(m => m.AccountFather == Acc.AccountNumber).OrderBy(m => m.AccountNumber).OrderBy(m => m.AccountLevel).ToList();


                        var TransActionData = TranData.Where(m => m.AccountNumber != null);

                        var BalanceData = TotData.Where(m => m.AccountNumber != null);
                        var MonthlyTrans = MonthlyData.Where(m => m.AccountNumber != null);

                            foreach (var D in TransActionData)
                            {
                            TransActionData = TranData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));
                            CreditTransAction += D.CreditTransAction;
                                DebitTransAction += D.DebitTransAction;
                            }
                            foreach (var Balance in BalanceData)
                            {
                             BalanceData = TotData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));
                            CreditBalance += Balance.CreditBalance;
                                DebitBalance += Balance.DebitBalance;
                            }
                            foreach (var D in MonthlyTrans)
                            {
                             MonthlyTrans = MonthlyData.Where(m => m.AccountNumber.StartsWith(Acc.AccountNumber));
                            switch (D.Month)
                                {
                                    case 1:
                                        January = January + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 2:
                                        February = February + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 3:
                                        March = March + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 4:
                                        April = April + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 5:
                                        May = May + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 6:
                                        June = June + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 7:
                                        July = July + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 8:
                                        August = August + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 9:
                                        September = September + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 10:
                                        October = October + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 11:
                                        November = November + (D.DebitTransAction - D.CreditTransAction);
                                        break;
                                    case 12:
                                        December = December + (D.DebitTransAction - D.CreditTransAction);
                                        break;

                                }

                            }


                           

                            TotalDebit = DebitTransAction + DebitBalance;
                            TOTCredit = CreditTransAction + CreditBalance;

                            if (TotalDebit > TOTCredit)
                            {
                                NetDebit = TotalDebit - TOTCredit;
                                NetTot = NetDebit;
                            }
                            if (TotalDebit < TOTCredit)
                            {
                                NetCredit = TOTCredit - TotalDebit;
                                NetTot = NetCredit;


                            }
                            NetTot = TotalDebit - TOTCredit;
                            OpenBalance = DebitBalance - CreditBalance;

                            TrialBalanceVM trialBalance = new TrialBalanceVM();
                            trialBalance.AccountNumber = Acc.AccountNumber;
                            trialBalance.Name = Acc.ArabicName;

                            trialBalance.CreditBalance = CreditBalance;
                            trialBalance.CreditTransAction = CreditTransAction;
                            trialBalance.DebitBalance = DebitBalance;
                            trialBalance.DebitTransAction = DebitTransAction;
                            trialBalance.NetCredit = NetCredit;
                            trialBalance.NetDebit = NetDebit;

                            trialBalance.January = January;
                            trialBalance.February = February;
                            trialBalance.March = March;
                            trialBalance.April = April;
                            trialBalance.May = May;
                            trialBalance.June = June;
                            trialBalance.July = July;
                            trialBalance.August = August;
                            trialBalance.September = September;
                            trialBalance.October = October;
                            trialBalance.November = November;
                            trialBalance.December = December;

                            trialBalance.OpenBalance = OpenBalance;
                            trialBalance.NetTot = NetTot;
                            trialBalance.TempCostID = TempCostID;
                            trialBalance.TempCostType = TempCostType;
                            //  NetTot = January + February + March + April + May + June + July + August + September + October + November + December+ OpenBalance;

                            if ((AccountData.FirstOrDefault(m => m.AccountFather == Acc.AccountNumber) != null) && (Acc.AccountLevel < Obj.AccountLevelDropVMID))
                            {
                                trialBalance.IsMainAccount = 1;
                                trialBalance.MainAccount = "{*}";


                                trialBalance.nCreditBalance = 0;
                                trialBalance.nCreditTransAction = 0;
                                trialBalance.nDebitBalance = 0;
                                trialBalance.nDebitTransAction = 0;
                                trialBalance.nNetCredit = 0;
                                trialBalance.nNetDebit = 0;

                            }
                            else
                            {
                                trialBalance.IsMainAccount = 0;
                                trialBalance.MainAccount = "";
                                trialBalance.nCreditBalance = CreditBalance;
                                trialBalance.nCreditTransAction = CreditTransAction;
                                trialBalance.nDebitBalance = DebitBalance;
                                trialBalance.nDebitTransAction = DebitTransAction;
                                trialBalance.nNetCredit = NetCredit;
                                trialBalance.nNetDebit = NetDebit;

                                trialBalance.nJanuary = January;
                                trialBalance.nFebruary = February;
                                trialBalance.nMarch = March;
                                trialBalance.nApril = April;
                                trialBalance.nMay = May;
                                trialBalance.nJune = June;
                                trialBalance.nJuly = July;
                                trialBalance.nAugust = August;
                                trialBalance.nSeptember = September;
                                trialBalance.nOctober = October;
                                trialBalance.nNovember = November;
                                trialBalance.nDecember = December;

                                trialBalance.nNetTot = NetTot;

                                trialBalance.nOpenBalance = OpenBalance;


                            }
                            if (!Obj.ShowZeroBalance)
                            {
                                if ((trialBalance.NetCredit - trialBalance.NetDebit) != 0)
                                {
                                    TrialBalanceVMList.Add(trialBalance);
                                }
                            }
                            else
                            {
                                if ((trialBalance.NetCredit != 0) || (trialBalance.NetDebit != 0) || (TotalDebit != 0) || (NetCredit != 0))
                                {
                                    TrialBalanceVMList.Add(trialBalance);
                                }


                            }




                        }






                    }




                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("TrialBalanceVM");
                    table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                    ds.Tables.Add(table1);

                    var report = new TrialBalanceYearlyReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/TrialBalanceYearlyReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    //report.LbFromDate.Text = Obj.FromCollectionDate.ToString("dd/MM/yyyy");
                    //report.LbTODate.Text = Obj.ToCollectionDate.ToString("dd/MM/yyyy");

                    report.DataSource = ds;
                    report.DataMember = "TrialBalanceVM";



                    report.LevelName.Text = String.Format("{0} {1}", Resources.Resource.Level, Obj.AccountLevelDropVMID.ToString());


                    //report.PrepaidExpenseAccountNumber.Text = Obj.RevenueAccountNumber;
                    //report.PrepaidExpenseAccountName.Text = Obj.RevenueAccountName;


                    ////report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();




                    return View("ReportPDF", report);


                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<TrialBalanceVM> TrialBalanceVMList = new List<TrialBalanceVM>();

                    TrialBalanceYearlyReport report = new TrialBalanceYearlyReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/TrialBalanceYearlyReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("TrialBalanceVM");
                    table1 = FunctionUnit.LINQResultToDataTable(TrialBalanceVMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "TrialBalanceVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);

                }


            }


            public ActionResult GetHeadersPDF(string id, string id2, string id3, int id4, int id5)
            {

                var userId = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                TransActionFilter Obj = new TransActionFilter();
                DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                Obj.FromDate = fromDate;
                Obj.ToDate = toDate;

                Obj.VoucherNumber = id3;
                Obj.CompanyTransactionKindNo = id4;
                Obj.CurrencyID = id5;


                if (Obj.VoucherNumber == "0")
                {
                    Obj.VoucherNumber = "";
                }

                var u = _unitOfWork.NativeSql.GetHeadersForReport(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                if (u == null)
                {
                    return Json(new List<TransActionFilter>(), JsonRequestBehavior.AllowGet);
                }
                if (!String.IsNullOrEmpty(Obj.VoucherNumber))
                {
                    u = u.Where(m => m.VoucherNumber == Obj.VoucherNumber).ToList();
                }
                if (Obj.CurrencyID != 0)
                {
                    u = u.Where(m => m.CurrencyID == Obj.CurrencyID).ToList();
                }
                if (Obj.CompanyTransactionKindNo != 0)
                {
                    u = u.Where(m => m.CompanyTransactionKindNo == Obj.CompanyTransactionKindNo).ToList();
                }

                int iRow = 0;
                foreach (var iRowCount in u)
                {
                    iRowCount.iRowTable = iRow;
                    iRow = iRow + 1;
                }
                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TransActionFilter");
                table1 = FunctionUnit.LINQResultToDataTable(u);

                ds.Tables.Add(table1);

                var report = new TransActionReport();

                string reportFilePath = Server.MapPath("/ReportLayout/TransActionReport.repx");
                report.LoadLayoutFromXml(reportFilePath);

                report.LbCoName.Text = CoInfo.ArabicName;
                report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");
                report.LbVoucherNo.Text = Obj.VoucherNumber;
                report.DataSource = ds;
                report.DataMember = "TransActionFilter";



                if (Obj.CurrencyID != 0)
                {
                    var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, Obj.CurrencyID);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CurrencyName = CurrencyObj.ArabicName;

                    }

                    else
                    {
                        Obj.CurrencyName = CurrencyObj.EnglishName;
                    }

                }





                if (Obj.CompanyTransactionKindNo != 0)
                {
                    var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, Obj.CompanyTransactionKindNo);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CompanyTransactionName = CompanyTransactionObj.ArabicName;

                    }

                    else
                    {
                        Obj.CompanyTransactionName = CompanyTransactionObj.EnglishName;

                    }


                }



                report.CreateDocument();




                return View("ReportPDF", report);
            }

            public ActionResult GetAllReceiptVoucherBankPDF(string id, string id2, string id3, int id4, int id5, string id6, int id7)
            {
                try
                {

                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    ReceiptBankFilterVM Obj = new ReceiptBankFilterVM();
                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    Obj.FromDate = fromDate;
                    Obj.ToDate = toDate;
                    Obj.VoucherNumber = id3;
                    Obj.CompanyTransactionKindNo = id4;
                    Obj.CurrencyID = id5;
                    Obj.PaidAccountNumber = id6;
                    Obj.SaleID = id7;


                    if (Obj.VoucherNumber == "0")
                    {
                        Obj.VoucherNumber = "";
                    }
                    if (Obj.PaidAccountNumber == "0")
                    {
                        Obj.PaidAccountNumber = "";
                    }
                    var AllReceiptBank = _unitOfWork.NativeSql.GetAllReceiptBankFromHeader(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                    if (AllReceiptBank == null)
                    {
                        return Json(new List<ReceiptBankFilterVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (!String.IsNullOrEmpty(Obj.VoucherNumber))
                    {
                        AllReceiptBank = AllReceiptBank.Where(m => m.VoucherNumber == Obj.VoucherNumber).ToList();
                    }
                    if (Obj.CurrencyID != 0)
                    {
                        AllReceiptBank = AllReceiptBank.Where(m => m.CurrencyID == Obj.CurrencyID).ToList();
                    }
                    if (Obj.SaleID != 0)
                    {
                        AllReceiptBank = AllReceiptBank.Where(m => m.SaleID == Obj.SaleID).ToList();
                    }
                    if (Obj.CompanyTransactionKindNo != 0)
                    {
                        AllReceiptBank = AllReceiptBank.Where(m => m.CompanyTransactionKindNo == Obj.CompanyTransactionKindNo).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.PaidAccountNumber))
                    {
                        AllReceiptBank = AllReceiptBank.Where(m => m.PaidAccountNumber == Obj.PaidAccountNumber).ToList();
                    }
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("ReceiptBankFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllReceiptBank);

                    ds.Tables.Add(table1);

                    var report = new ReceiptVoucherBankReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/ReceiptVoucherBankReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;


                    report.DataSource = ds;
                    report.DataMember = "ReceiptBankFilterVM";

                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");
                    report.LbVoucherNo.Text = Obj.VoucherNumber;
                    //report.InsertUser.Text = HeaderObj.InsUserID;


                    if (Obj.CurrencyID != 0)
                    {
                        var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, Obj.CurrencyID);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            Obj.CurrencyName = CurrencyObj.ArabicName;

                        }

                        else
                        {
                            Obj.CurrencyName = CurrencyObj.EnglishName;
                        }

                    }





                    if (Obj.CompanyTransactionKindNo != 0)
                    {
                        var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, Obj.CompanyTransactionKindNo);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            Obj.CompanyTransactionName = CompanyTransactionObj.ArabicName;

                        }

                        else
                        {
                            Obj.CompanyTransactionName = CompanyTransactionObj.EnglishName;

                        }


                    }

                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionName;
                    report.xrCurrencyID.Text = Obj.CurrencyName;



                //report.LevelName.Text = String.Format("{0} {1}", Resources.Resource.Level, Obj.AccountLevelDropVMID.ToString());

                if (Obj.SaleID != 0)
                {
                    report.LbSaleMan.Text = String.Format("{0} {1}", Resources.Resource.SaleManName, Obj.SaleID.ToString());

                }
                else
                {
                    report.LbSaleMan.Text = " ";

                }



                    report.ToAccountNumber.Text = Obj.PaidAccountNumber;


                    if (!String.IsNullOrEmpty(Obj.PaidAccountNumber))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.PaidAccountNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.AccountName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.AccountName.Text = AccName.EnglishName;
                        }

                    }


                    report.CreateDocument();




                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<ReceiptBankFilterVM> VMList = new List<ReceiptBankFilterVM>();

                    ReceiptVoucherBankReport report = new ReceiptVoucherBankReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/ReceiptVoucherBankReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("ReceiptBankFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "ReceiptBankFilterVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);

                }

            }

            public ActionResult GetAllReceiptVoucherCashPDF(string id, string id2, string id3, int id4, int id5, string id6, int id7)
            {
                try
                {

                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                    //  var HeaderObj = _unitOfWork.Header.GetHeaderDataById(id, UserInfo.fCompanyId, id4, id5);
                    ReceiptCashFilterVM Obj = new ReceiptCashFilterVM();
                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    Obj.FromDate = fromDate;
                    Obj.ToDate = toDate;
                    Obj.VoucherNumber = id3;
                    Obj.CompanyTransactionKindNo = id4;
                    Obj.CurrencyID = id5;
                    Obj.PaidAccountNumber = id6;
                    Obj.SaleID = id7;


                    if (Obj.VoucherNumber == "0")
                    {
                        Obj.VoucherNumber = "";
                    }
                    if (Obj.PaidAccountNumber == "0")
                    {
                        Obj.PaidAccountNumber = "";
                    }
                    var AllReceiptCash = _unitOfWork.NativeSql.GetAllReceiptCashFromHeader(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                    if (AllReceiptCash == null)
                    {
                        return Json(new List<ReceiptCashFilterVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (!String.IsNullOrEmpty(Obj.VoucherNumber))
                    {
                        AllReceiptCash = AllReceiptCash.Where(m => m.VoucherNumber == Obj.VoucherNumber).ToList();
                    }
                    if (Obj.CurrencyID != 0)
                    {
                        AllReceiptCash = AllReceiptCash.Where(m => m.CurrencyID == Obj.CurrencyID).ToList();
                    }
                    if (Obj.SaleID != 0)
                    {
                        AllReceiptCash = AllReceiptCash.Where(m => m.SaleID == Obj.SaleID).ToList();
                    }
                    if (Obj.CompanyTransactionKindNo != 0)
                    {
                        AllReceiptCash = AllReceiptCash.Where(m => m.CompanyTransactionKindNo == Obj.CompanyTransactionKindNo).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.PaidAccountNumber))
                    {
                        AllReceiptCash = AllReceiptCash.Where(m => m.PaidAccountNumber == Obj.PaidAccountNumber).ToList();
                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("ReceiptCashFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllReceiptCash);

                    ds.Tables.Add(table1);

                    var report = new ReceiptVoucherCashReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/ReceiptVoucherCashReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;


                    report.DataSource = ds;
                    report.DataMember = "ReceiptCashFilterVM";


                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");
                    report.LbVoucherNo.Text = Obj.VoucherNumber;

                    if (Obj.CurrencyID != 0)
                    {
                        var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, Obj.CurrencyID);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            Obj.CurrencyName = CurrencyObj.ArabicName;

                        }

                        else
                        {
                            Obj.CurrencyName = CurrencyObj.EnglishName;
                        }

                    }





                    if (Obj.CompanyTransactionKindNo != 0)
                    {
                        var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, Obj.CompanyTransactionKindNo);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            Obj.CompanyTransactionName = CompanyTransactionObj.ArabicName;

                        }

                        else
                        {
                            Obj.CompanyTransactionName = CompanyTransactionObj.EnglishName;

                        }


                    }




                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionName;
                    report.xrCurrencyID.Text = Obj.CurrencyName;

                if (Obj.SaleID != 0)
                {
                    report.LbSaleMan.Text = String.Format("{0} {1}", Resources.Resource.SaleManName, Obj.SaleID.ToString());

                }
                else
                {
                    report.LbSaleMan.Text = " ";

                }

                    report.ToAccountNumber.Text = Obj.PaidAccountNumber;

                    if (!String.IsNullOrEmpty(Obj.PaidAccountNumber))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.PaidAccountNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.AccountName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.AccountName.Text = AccName.EnglishName;
                        }


                    }
                    report.CreateDocument();




                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<ReceiptCashFilterVM> VMList = new List<ReceiptCashFilterVM>();

                    ReceiptVoucherCashReport report = new ReceiptVoucherCashReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/ReceiptVoucherCashReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("ReceiptCashFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "ReceiptCashFilterVM";

                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);
                }

            }

            public ActionResult GetAllReceiptVoucherCashMultiAccountPDF(string id, string id2, string id3, int id4, int id5, string id6)
            {
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    ReceiptCashFilterVM Obj = new ReceiptCashFilterVM();
                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    Obj.FromDate = fromDate;
                    Obj.ToDate = toDate;
                    Obj.VoucherNumber = id3;
                    Obj.CompanyTransactionKindNo = id4;
                    Obj.CurrencyID = id5;
                    Obj.FundAccountNumber = id6;



                    if (Obj.VoucherNumber == "0")
                    {
                        Obj.VoucherNumber = "";
                    }
                    if (Obj.FundAccountNumber == "0")
                    {
                        Obj.FundAccountNumber = "";
                    }
                    var AllReceiptCashMultiAccount = _unitOfWork.NativeSql.GetAllReceiptCashMultiAccountFromHeader(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                    if (AllReceiptCashMultiAccount == null)
                    {
                        return Json(new List<ReceiptCashFilterVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (!String.IsNullOrEmpty(Obj.VoucherNumber))
                    {
                        AllReceiptCashMultiAccount = AllReceiptCashMultiAccount.Where(m => m.VoucherNumber == Obj.VoucherNumber).ToList();
                    }
                    if (Obj.CurrencyID != 0)
                    {
                        AllReceiptCashMultiAccount = AllReceiptCashMultiAccount.Where(m => m.CurrencyID == Obj.CurrencyID).ToList();
                    }
                    if (Obj.CompanyTransactionKindNo != 0)
                    {
                        AllReceiptCashMultiAccount = AllReceiptCashMultiAccount.Where(m => m.CompanyTransactionKindNo == Obj.CompanyTransactionKindNo).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.FundAccountNumber))
                    {
                        AllReceiptCashMultiAccount = AllReceiptCashMultiAccount.Where(m => m.FundAccountNumber == Obj.FundAccountNumber).ToList();
                    }
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("ReceiptCashFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllReceiptCashMultiAccount);

                    ds.Tables.Add(table1);

                    var report = new ReceiptVoucherCashMultiReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/ReceiptVoucherCashMultiReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;


                    report.DataSource = ds;
                    report.DataMember = "ReceiptCashFilterVM";

                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");
                    report.LbVoucherNo.Text = Obj.VoucherNumber;


                    if (Obj.CurrencyID != 0)
                    {
                        var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, Obj.CurrencyID);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            Obj.CurrencyName = CurrencyObj.ArabicName;

                        }

                        else
                        {
                            Obj.CurrencyName = CurrencyObj.EnglishName;
                        }

                    }





                    if (Obj.CompanyTransactionKindNo != 0)
                    {
                        var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, Obj.CompanyTransactionKindNo);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            Obj.CompanyTransactionName = CompanyTransactionObj.ArabicName;

                        }

                        else
                        {
                            Obj.CompanyTransactionName = CompanyTransactionObj.EnglishName;

                        }


                    }


                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionName;
                    report.xrCurrencyID.Text = Obj.CurrencyName;

                    report.ToAccountNumber.Text = Obj.FundAccountNumber;
                    if (!String.IsNullOrEmpty(Obj.FundAccountNumber))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.FundAccountNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.AccountName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.AccountName.Text = AccName.EnglishName;
                        }

                    }



                    report.CreateDocument();




                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<ReceiptCashFilterVM> VMList = new List<ReceiptCashFilterVM>();

                    ReceiptVoucherCashMultiReport report = new ReceiptVoucherCashMultiReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/ReceiptVoucherCashMultiReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("ReceiptCashFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "ReceiptCashFilterVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);
                }

            }


            public ActionResult GetAllPaymentVoucherBankPDF(string id, string id2, string id3, int id4, int id5, string id6)
            {
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);


                    PaymentBankFilterVM Obj = new PaymentBankFilterVM();
                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    Obj.FromDate = fromDate;
                    Obj.ToDate = toDate;
                    Obj.VoucherNumber = id3;
                    Obj.CompanyTransactionKindNo = id4;
                    Obj.CurrencyID = id5;
                    Obj.PaidAccountNumber = id6;

                    if (Obj.VoucherNumber == "0")
                    {
                        Obj.VoucherNumber = "";
                    }
                    if (Obj.PaidAccountNumber == "0")
                    {
                        Obj.PaidAccountNumber = "";
                    }
                    var AllPaymentBank = _unitOfWork.NativeSql.GetAllPaymentBankFromHeader(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                    if (AllPaymentBank == null)
                    {
                        return Json(new List<PaymentBankFilterVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (!String.IsNullOrEmpty(Obj.VoucherNumber))
                    {
                        AllPaymentBank = AllPaymentBank.Where(m => m.VoucherNumber == Obj.VoucherNumber).ToList();
                    }
                    if (Obj.CurrencyID != 0)
                    {
                        AllPaymentBank = AllPaymentBank.Where(m => m.CurrencyID == Obj.CurrencyID).ToList();
                    }
                    if (Obj.CompanyTransactionKindNo != 0)
                    {
                        AllPaymentBank = AllPaymentBank.Where(m => m.CompanyTransactionKindNo == Obj.CompanyTransactionKindNo).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.PaidAccountNumber))
                    {
                        AllPaymentBank = AllPaymentBank.Where(m => m.PaidAccountNumber == Obj.PaidAccountNumber).ToList();
                    }
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaymentBankFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllPaymentBank);

                    ds.Tables.Add(table1);

                    var report = new PaymentVoucherBankReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/PaymentVoucherBankReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;

                    report.DataSource = ds;
                    report.DataMember = "PaymentBankFilterVM";

                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");
                    report.LbVoucherNo.Text = Obj.VoucherNumber;


                    if (Obj.CurrencyID != 0)
                    {
                        var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, Obj.CurrencyID);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            Obj.CurrencyName = CurrencyObj.ArabicName;

                        }

                        else
                        {
                            Obj.CurrencyName = CurrencyObj.EnglishName;
                        }

                    }





                    if (Obj.CompanyTransactionKindNo != 0)
                    {
                        var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, Obj.CompanyTransactionKindNo);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            Obj.CompanyTransactionName = CompanyTransactionObj.ArabicName;

                        }

                        else
                        {
                            Obj.CompanyTransactionName = CompanyTransactionObj.EnglishName;

                        }


                    }


                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionName;
                    report.xrCurrencyID.Text = Obj.CurrencyName;

                    report.ToAccountNumber.Text = Obj.PaidAccountNumber;
                    if (!String.IsNullOrEmpty(Obj.PaidAccountNumber))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.PaidAccountNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.AccountName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.AccountName.Text = AccName.EnglishName;
                        }

                    }



                    report.CreateDocument();




                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<PaymentBankFilterVM> VMList = new List<PaymentBankFilterVM>();

                    PaymentVoucherBankReport report = new PaymentVoucherBankReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/PaymentVoucherBankReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaymentBankFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "PaymentBankFilterVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);
                }

            }


            public ActionResult GetAllPaymentVoucherCashPDF(string id, string id2, string id3, int id4, int id5, string id6)
            {
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    PaymentCashFilterVM Obj = new PaymentCashFilterVM();
                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    Obj.FromDate = fromDate;
                    Obj.ToDate = toDate;
                    Obj.VoucherNumber = id3;
                    Obj.CompanyTransactionKindNo = id4;
                    Obj.CurrencyID = id5;
                    Obj.FundAccountNumber = id6;

                    if (Obj.VoucherNumber == "0")
                    {
                        Obj.VoucherNumber = "";
                    }
                    if (Obj.FundAccountNumber == "0")
                    {
                        Obj.FundAccountNumber = "";
                    }
                    var AllPaymentCash = _unitOfWork.NativeSql.GetAllPaymentCashFromHeader(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                    if (AllPaymentCash == null)
                    {
                        return Json(new List<PaymentCashFilterVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (!String.IsNullOrEmpty(Obj.VoucherNumber))
                    {
                        AllPaymentCash = AllPaymentCash.Where(m => m.VoucherNumber == Obj.VoucherNumber).ToList();
                    }
                    if (Obj.CurrencyID != 0)
                    {
                        AllPaymentCash = AllPaymentCash.Where(m => m.CurrencyID == Obj.CurrencyID).ToList();
                    }
                    if (Obj.CompanyTransactionKindNo != 0)
                    {
                        AllPaymentCash = AllPaymentCash.Where(m => m.CompanyTransactionKindNo == Obj.CompanyTransactionKindNo).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.PaidAccountNumber))
                    {
                        AllPaymentCash = AllPaymentCash.Where(m => m.PaidAccountNumber == Obj.PaidAccountNumber).ToList();
                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaymentCashFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllPaymentCash);

                    ds.Tables.Add(table1);

                    var report = new PaymentVoucherCashReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/PaymentVoucherCashReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;


                    report.DataSource = ds;
                    report.DataMember = "PaymentCashFilterVM";


                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");
                    report.LbVoucherNo.Text = Obj.VoucherNumber;


                    if (Obj.CurrencyID != 0)
                    {
                        var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, Obj.CurrencyID);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            Obj.CurrencyName = CurrencyObj.ArabicName;

                        }

                        else
                        {
                            Obj.CurrencyName = CurrencyObj.EnglishName;
                        }

                    }


                    if (Obj.CompanyTransactionKindNo != 0)
                    {
                        var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, Obj.CompanyTransactionKindNo);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            Obj.CompanyTransactionName = CompanyTransactionObj.ArabicName;

                        }

                        else
                        {
                            Obj.CompanyTransactionName = CompanyTransactionObj.EnglishName;

                        }


                    }



                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionName;
                    report.xrCurrencyID.Text = Obj.CurrencyName;

                    report.ToAccountNumber.Text = Obj.PaidAccountNumber;
                    if (!String.IsNullOrEmpty(Obj.PaidAccountNumber))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.PaidAccountNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.AccountName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.AccountName.Text = AccName.EnglishName;
                        }

                    }

                    report.CreateDocument();




                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<ReceiptCashFilterVM> VMList = new List<ReceiptCashFilterVM>();

                    PaymentVoucherCashReport report = new PaymentVoucherCashReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/PaymentVoucherCashReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaymentCashFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "PaymentCashFilterVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);
                }

            }

            public ActionResult GetAllPaymentVoucherCashMultiAccountPDF(string id, string id2, string id3, int id4, int id5, string id6)
            {
                try
                {

                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                    PaymentCashFilterVM Obj = new PaymentCashFilterVM();
                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    Obj.FromDate = fromDate;
                    Obj.ToDate = toDate;
                    Obj.VoucherNumber = id3;
                    Obj.CompanyTransactionKindNo = id4;
                    Obj.CurrencyID = id5;
                    Obj.FundAccountNumber = id6;



                    if (Obj.VoucherNumber == "0")
                    {
                        Obj.VoucherNumber = "";
                    }
                    if (Obj.FundAccountNumber == "0")
                    {
                        Obj.FundAccountNumber = "";
                    }

                    var AllPaymentCashMultiAccount = _unitOfWork.NativeSql.GetAllPaymentCashMultiAccountFromHeader(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                    if (AllPaymentCashMultiAccount == null)
                    {
                        return Json(new List<PaymentCashFilterVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (!String.IsNullOrEmpty(Obj.VoucherNumber))
                    {
                        AllPaymentCashMultiAccount = AllPaymentCashMultiAccount.Where(m => m.VoucherNumber == Obj.VoucherNumber).ToList();
                    }
                    if (Obj.CurrencyID != 0)
                    {
                        AllPaymentCashMultiAccount = AllPaymentCashMultiAccount.Where(m => m.CurrencyID == Obj.CurrencyID).ToList();
                    }
                    if (Obj.CompanyTransactionKindNo != 0)
                    {
                        AllPaymentCashMultiAccount = AllPaymentCashMultiAccount.Where(m => m.CompanyTransactionKindNo == Obj.CompanyTransactionKindNo).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.FundAccountNumber))
                    {
                        AllPaymentCashMultiAccount = AllPaymentCashMultiAccount.Where(m => m.FundAccountNumber == Obj.FundAccountNumber).ToList();
                    }
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaymentCashFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllPaymentCashMultiAccount);

                    ds.Tables.Add(table1);

                    var report = new PaymentVoucherCashMultiReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/PaymentVoucherCashMultiReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;


                    report.DataSource = ds;
                    report.DataMember = "PaymentCashFilterVM";

                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");
                    report.LbVoucherNo.Text = Obj.VoucherNumber;


                    if (Obj.CurrencyID != 0)
                    {
                        var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, Obj.CurrencyID);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            Obj.CurrencyName = CurrencyObj.ArabicName;

                        }

                        else
                        {
                            Obj.CurrencyName = CurrencyObj.EnglishName;
                        }

                    }





                    if (Obj.CompanyTransactionKindNo != 0)
                    {
                        var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, Obj.CompanyTransactionKindNo);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            Obj.CompanyTransactionName = CompanyTransactionObj.ArabicName;

                        }

                        else
                        {
                            Obj.CompanyTransactionName = CompanyTransactionObj.EnglishName;

                        }


                    }


                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionName;
                    report.xrCurrencyID.Text = Obj.CurrencyName;

                    report.ToAccountNumber.Text = Obj.FundAccountNumber;
                    if (!String.IsNullOrEmpty(Obj.FundAccountNumber))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.FundAccountNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.AccountName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.AccountName.Text = AccName.EnglishName;
                        }

                    }



                    //report.LevelName.Text = String.Format("{0} {1}", Resources.Resource.Level, Obj.AccountLevelDropVMID.ToString());


                    //report.PrepaidExpenseAccountNumber.Text = Obj.RevenueAccountNumber;
                    //report.PrepaidExpenseAccountName.Text = Obj.RevenueAccountName;


                    ////report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();




                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<PaymentCashFilterVM> VMList = new List<PaymentCashFilterVM>();

                    PaymentVoucherCashMultiReport report = new PaymentVoucherCashMultiReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/PaymentVoucherCashMultiReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaymentCashFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "PaymentCashFilterVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);
                }

            }


            public ActionResult GetDepositInTheBankPDF(string id, string id2, int id3, string id4, int id5)
            {
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    DepositInTheBankFilter Obj = new DepositInTheBankFilter();
                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    Obj.FromDate = fromDate;
                    Obj.ToDate = toDate;
                    Obj.CompanyTransactionKindNo = id3;
                    Obj.VoucherNumber = id4;
                    Obj.CurrencyID = id5;

                    if (Obj.VoucherNumber == "0")
                    {
                        Obj.VoucherNumber = "";
                    }


                    var AllDepositInTheBank = _unitOfWork.NativeSql.GetAllDepositInTheBankFromHeader(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                    if (AllDepositInTheBank == null)
                    {
                        return Json(new List<DepositInTheBankFilter>(), JsonRequestBehavior.AllowGet);
                    }
                    if (!String.IsNullOrEmpty(Obj.VoucherNumber))
                    {
                        AllDepositInTheBank = AllDepositInTheBank.Where(m => m.VoucherNumber == Obj.VoucherNumber).ToList();
                    }
                    if (Obj.CurrencyID != 0)
                    {
                        AllDepositInTheBank = AllDepositInTheBank.Where(m => m.CurrencyID == Obj.CurrencyID).ToList();
                    }
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("DepositInTheBankFilter");
                    table1 = FunctionUnit.LINQResultToDataTable(AllDepositInTheBank);

                    ds.Tables.Add(table1);

                    var report = new DepositInTheBankReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/DepositInTheBankReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    //report.LbFromDate.Text = Obj.FromCollectionDate.ToString("dd/MM/yyyy");
                    //report.LbTODate.Text = Obj.ToCollectionDate.ToString("dd/MM/yyyy");

                    report.DataSource = ds;
                    report.DataMember = "DepositInTheBankFilter";


                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");
                    report.LbVoucherNo.Text = Obj.VoucherNumber;


                    if (Obj.CurrencyID != 0)
                    {
                        var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, Obj.CurrencyID);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            Obj.CurrencyName = CurrencyObj.ArabicName;

                        }

                        else
                        {
                            Obj.CurrencyName = CurrencyObj.EnglishName;
                        }

                    }





                    if (Obj.CompanyTransactionKindNo != 0)
                    {
                        var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, Obj.CompanyTransactionKindNo);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            Obj.CompanyTransactionName = CompanyTransactionObj.ArabicName;

                        }

                        else
                        {
                            Obj.CompanyTransactionName = CompanyTransactionObj.EnglishName;

                        }


                    }


                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionName;
                    report.xrCurrencyID.Text = Obj.CurrencyName;




                    report.CreateDocument();




                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<DepositInTheBankFilter> VMList = new List<DepositInTheBankFilter>();

                    DepositInTheBankReport report = new DepositInTheBankReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/DepositInTheBankReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("DepositInTheBankFilter");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "DepositInTheBankFilter";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);
                }

            }


            public ActionResult GetPrepaidPDF(string id, string id2, string id3, string id4, string id5, string id6, string id7)
            {
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    TempPrepaidAndRevenueReceivedFilterVM Obj = new TempPrepaidAndRevenueReceivedFilterVM();
                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    DateTime fromDate2 = DateTime.Parse(id6.Substring(0, 2) + "/" + id6.Substring(2, 2) + "/" + id6.Substring(4, 4));
                    DateTime toDate2 = DateTime.Parse(id7.Substring(0, 2) + "/" + id7.Substring(2, 2) + "/" + id7.Substring(4, 4));
                    Obj.FromDate = fromDate;
                    Obj.ToDate = toDate;
                    Obj.FromDateFirstPayment = fromDate2;
                    Obj.ToDateFirstPayment = toDate2;
                    Obj.ExpenseAccountNumber = id3;
                    Obj.PrepaidExpenseAccountNumber = id4;
                    Obj.VoucherNumber = id5;


                    if (Obj.VoucherNumber == "0")
                    {
                        Obj.VoucherNumber = "";
                    }

                    if (Obj.PrepaidExpenseAccountNumber == "0")
                    {
                        Obj.PrepaidExpenseAccountNumber = "";
                    }

                    if (Obj.ExpenseAccountNumber == "0")
                    {
                        Obj.ExpenseAccountNumber = "";
                    }
                    var AllTempPrepaidAndRevenueReceive = _unitOfWork.NativeSql.GetAllTempPrepaid(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.FromDateFirstPayment, Obj.ToDateFirstPayment);
                    if (AllTempPrepaidAndRevenueReceive == null)
                    {
                        return Json(new List<TempPrepaidAndRevenueReceivedFilterVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (!String.IsNullOrEmpty(Obj.VoucherNumber))
                    {
                        AllTempPrepaidAndRevenueReceive = AllTempPrepaidAndRevenueReceive.Where(m => m.VoucherNumber == Obj.VoucherNumber).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.ExpenseAccountNumber))
                    {
                        AllTempPrepaidAndRevenueReceive = AllTempPrepaidAndRevenueReceive.Where(m => m.ExpenseAccountNumber == Obj.ExpenseAccountNumber).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.PrepaidExpenseAccountNumber))
                    {
                        AllTempPrepaidAndRevenueReceive = AllTempPrepaidAndRevenueReceive.Where(m => m.PrepaidExpenseAccountNumber == Obj.PrepaidExpenseAccountNumber).ToList();
                    }
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("TempPrepaidAndRevenueReceivedFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllTempPrepaidAndRevenueReceive);

                    ds.Tables.Add(table1);

                    var report = new TempPrepaidReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/TempPrepaidReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbFromDate.Text = Obj.FromCollectionDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToCollectionDate.ToString("dd/MM/yyyy");
                    report.FirstPayment.Text = Obj.FromDateFirstPayment.ToString("dd/MM/yyyy");
                    report.ToFirstPayment.Text = Obj.ToDateFirstPayment.ToString("dd/MM/yyyy");

                    report.LbVoucherNo.Text = Obj.VoucherNumber;


                    report.DataSource = ds;
                    report.DataMember = "TempPrepaidAndRevenueReceivedFilterVM";

                    report.ExpenseAccountNumber.Text = Obj.ExpenseAccountNumber;

                    report.PrepaidExpenseAccountNumber.Text = Obj.PrepaidExpenseAccountNumber;



                    //report.LevelName.Text = String.Format("{0} {1}", Resources.Resource.Level, Obj.AccountLevelDropVMID.ToString());


                    // report.PrepaidExpenseAccountNumber.Text = Obj.RevenueAccountNumber;


                    if (!String.IsNullOrEmpty(Obj.PrepaidExpenseAccountNumber))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.PrepaidExpenseAccountNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.PrepaidExpenseAccountName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.PrepaidExpenseAccountName.Text = AccName.EnglishName;
                        }

                    }

                    if (!String.IsNullOrEmpty(Obj.ExpenseAccountNumber))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.ExpenseAccountNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.AccountName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.AccountName.Text = AccName.EnglishName;
                        }

                    }
                    ////report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();




                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<TempPrepaidAndRevenueReceivedFilterVM> VMList = new List<TempPrepaidAndRevenueReceivedFilterVM>();

                    TempPrepaidReport report = new TempPrepaidReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/TempPrepaidReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("TempPrepaidAndRevenueReceivedFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "TempPrepaidAndRevenueReceivedFilterVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);
                }

            }

            public ActionResult GetRevenuePDF(string id, string id2, string id3, string id4, string id5, string id6, string id7)
            {
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    TempPrepaidAndRevenueReceivedFilterVM Obj = new TempPrepaidAndRevenueReceivedFilterVM();
                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    DateTime fromDate2 = DateTime.Parse(id4.Substring(0, 2) + "/" + id4.Substring(2, 2) + "/" + id4.Substring(4, 4));
                    DateTime toDate2 = DateTime.Parse(id5.Substring(0, 2) + "/" + id5.Substring(2, 2) + "/" + id5.Substring(4, 4));
                    Obj.FromDate = fromDate;
                    Obj.ToDate = toDate;
                    Obj.FromDateFirstPayment = fromDate2;
                    Obj.ToDateFirstPayment = toDate2;
                    Obj.VoucherNumber = id3;
                    Obj.RevenueReceivedAccountNumber = id6;
                    Obj.RevenueAccountNumber = id7;


                    if (Obj.VoucherNumber == "0")
                    {
                        Obj.VoucherNumber = "";
                    }

                    if (Obj.RevenueReceivedAccountNumber == "0")
                    {
                        Obj.RevenueReceivedAccountNumber = "";
                    }

                    if (Obj.RevenueAccountNumber == "0")
                    {
                        Obj.RevenueAccountNumber = "";
                    }
                    var AllTempPrepaidAndRevenueReceive = _unitOfWork.NativeSql.GetAllTempRevenue(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate, Obj.FromDateFirstPayment, Obj.ToDateFirstPayment);
                    if (AllTempPrepaidAndRevenueReceive == null)
                    {
                        return Json(new List<TempPrepaidAndRevenueReceivedFilterVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (!String.IsNullOrEmpty(Obj.VoucherNumber))
                    {
                        AllTempPrepaidAndRevenueReceive = AllTempPrepaidAndRevenueReceive.Where(m => m.VoucherNumber == Obj.VoucherNumber).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.RevenueReceivedAccountNumber))
                    {
                        AllTempPrepaidAndRevenueReceive = AllTempPrepaidAndRevenueReceive.Where(m => m.RevenueReceivedAccountNumber == Obj.RevenueReceivedAccountNumber).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.RevenueAccountNumber))
                    {
                        AllTempPrepaidAndRevenueReceive = AllTempPrepaidAndRevenueReceive.Where(m => m.RevenueAccountNumber == Obj.RevenueAccountNumber).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.RevenueReceivedCostNumber))
                    {
                        AllTempPrepaidAndRevenueReceive = AllTempPrepaidAndRevenueReceive.Where(m => m.RevenueReceivedCostNumber == Obj.RevenueReceivedCostNumber).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.RevenueCostNumber))
                    {
                        AllTempPrepaidAndRevenueReceive = AllTempPrepaidAndRevenueReceive.Where(m => m.RevenueCostNumber == Obj.RevenueCostNumber).ToList();
                    }
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("TempPrepaidAndRevenueReceivedFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllTempPrepaidAndRevenueReceive);

                    ds.Tables.Add(table1);

                    var report = new TempRevenuePrepaidReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/TempRevenuePrepaidReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");
                    report.FirstPayment.Text = Obj.FromDateFirstPayment.ToString("dd/MM/yyyy");
                    report.ToFirstPayment.Text = Obj.ToDateFirstPayment.ToString("dd/MM/yyyy");

                    report.DataSource = ds;
                    report.DataMember = "TempPrepaidAndRevenueReceivedFilterVM";
                    report.LbVoucherNo.Text = Obj.VoucherNumber;



                    report.RevenueReceivedAccountNumber.Text = Obj.RevenueReceivedAccountNumber;
                    report.RevenueAccountNumber.Text = Obj.RevenueAccountNumber;

                    if (!String.IsNullOrEmpty(Obj.RevenueReceivedAccountNumber))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.RevenueReceivedAccountNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.AccountName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.AccountName.Text = AccName.EnglishName;
                        }

                    }

                    if (!String.IsNullOrEmpty(Obj.RevenueAccountNumber))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.RevenueAccountNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.RevenueAccountName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.RevenueAccountName.Text = AccName.EnglishName;
                        }

                    }

                    //report.PrepaidExpenseAccountNumber.Text = Obj.RevenueAccountNumber;
                    //report.PrepaidExpenseAccountName.Text = Obj.RevenueAccountName;


                    ////report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();




                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<TempPrepaidAndRevenueReceivedFilterVM> VMList = new List<TempPrepaidAndRevenueReceivedFilterVM>();

                    TempRevenuePrepaidReport report = new TempRevenuePrepaidReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/TempRevenuePrepaidReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("TempPrepaidAndRevenueReceivedFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "TempPrepaidAndRevenueReceivedFilterVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);
                }

            }

            public ActionResult GetAllDebitNotePDF(string id, string id2, string id3, int id4, int id5, string id6, int id7)
            {
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);


                    DebitNoteFilterVM Obj = new DebitNoteFilterVM();
                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    Obj.FromDate = fromDate;
                    Obj.ToDate = toDate;
                    Obj.VoucherNumber = id3;
                    Obj.CompanyTransactionKindNo = id4;
                    Obj.CurrencyID = id5;
                    Obj.PaidAccountNumber = id6;
                    Obj.SaleID = id7;


                    if (Obj.VoucherNumber == "0")
                    {
                        Obj.VoucherNumber = "";
                    }
                    if (Obj.PaidAccountNumber == "0")
                    {
                        Obj.PaidAccountNumber = "";
                    }
                    var AllDebitNote = _unitOfWork.NativeSql.GetAllDebitNoteFromHeader(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                    if (AllDebitNote == null)
                    {
                        return Json(new List<DebitNoteFilterVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (!String.IsNullOrEmpty(Obj.VoucherNumber))
                    {
                        AllDebitNote = AllDebitNote.Where(m => m.VoucherNumber == Obj.VoucherNumber).ToList();
                    }
                    if (Obj.CurrencyID != 0)
                    {
                        AllDebitNote = AllDebitNote.Where(m => m.CurrencyID == Obj.CurrencyID).ToList();
                    }
                    if (Obj.SaleID != 0)
                    {
                        AllDebitNote = AllDebitNote.Where(m => m.SaleID == Obj.SaleID).ToList();
                    }
                    if (Obj.CompanyTransactionKindNo != 0)
                    {
                        AllDebitNote = AllDebitNote.Where(m => m.CompanyTransactionKindNo == Obj.CompanyTransactionKindNo).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.PaidAccountNumber))
                    {
                        AllDebitNote = AllDebitNote.Where(m => m.PaidAccountNumber == Obj.PaidAccountNumber).ToList();
                    }
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("DebitNoteFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllDebitNote);

                    ds.Tables.Add(table1);

                    var report = new DebitNoteReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/DebitNoteReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");
                    report.LbVoucherNo.Text = Obj.VoucherNumber;


                    if (Obj.CurrencyID != 0)
                    {
                        var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, Obj.CurrencyID);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            Obj.CurrencyName = CurrencyObj.ArabicName;

                        }

                        else
                        {
                            Obj.CurrencyName = CurrencyObj.EnglishName;
                        }

                    }

                    if (Obj.CompanyTransactionKindNo != 0)
                    {
                        var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, Obj.CompanyTransactionKindNo);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            Obj.CompanyTransactionName = CompanyTransactionObj.ArabicName;

                        }

                        else
                        {
                            Obj.CompanyTransactionName = CompanyTransactionObj.EnglishName;

                        }


                    }


                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionName;
                    report.xrCurrencyID.Text = Obj.CurrencyName;



                    //report.LevelName.Text = String.Format("{0} {1}", Resources.Resource.Level, Obj.AccountLevelDropVMID.ToString());
                    report.LbSaleMan.Text = Obj.SaleName;
                    report.ToAccountNumber.Text = Obj.PaidAccountNumber;
                    if (!String.IsNullOrEmpty(Obj.PaidAccountNumber))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.PaidAccountNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.AccountName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.AccountName.Text = AccName.EnglishName;
                        }

                    }


                    report.DataSource = ds;
                    report.DataMember = "DebitNoteFilterVM";
                    report.CreateDocument();




                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<DebitNoteFilterVM> VMList = new List<DebitNoteFilterVM>();

                    DebitNoteReport report = new DebitNoteReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/DebitNoteReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("DebitNoteFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "DebitNoteFilterVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);
                }

            }

            public ActionResult GetAllCreditNotePDF(string id, string id2, string id3, int id4, int id5, string id6)
            {
                try
                {

                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);


                    CreditNoteFilterVM Obj = new CreditNoteFilterVM();
                    DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    Obj.FromDate = fromDate;
                    Obj.ToDate = toDate;
                    Obj.VoucherNumber = id3;
                    Obj.CompanyTransactionKindNo = id4;
                    Obj.CurrencyID = id5;
                    Obj.PaidAccountNumber = id6;

                    if (Obj.VoucherNumber == "0")
                    {
                        Obj.VoucherNumber = "";
                    }
                    if (Obj.PaidAccountNumber == "0")
                    {
                        Obj.PaidAccountNumber = "";
                    }

                    var AllCreditNote = _unitOfWork.NativeSql.GetAllCreditNoteFromHeader(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                    if (AllCreditNote == null)
                    {
                        return Json(new List<CreditNoteFilterVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (!String.IsNullOrEmpty(Obj.VoucherNumber))
                    {
                        AllCreditNote = AllCreditNote.Where(m => m.VoucherNumber == Obj.VoucherNumber).ToList();
                    }
                    if (Obj.CurrencyID != 0)
                    {
                        AllCreditNote = AllCreditNote.Where(m => m.CurrencyID == Obj.CurrencyID).ToList();
                    }
                    if (Obj.CompanyTransactionKindNo != 0)
                    {
                        AllCreditNote = AllCreditNote.Where(m => m.CompanyTransactionKindNo == Obj.CompanyTransactionKindNo).ToList();
                    }
                    if (!String.IsNullOrEmpty(Obj.PaidAccountNumber))
                    {
                        AllCreditNote = AllCreditNote.Where(m => m.PaidAccountNumber == Obj.PaidAccountNumber).ToList();
                    }
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("CreditNoteFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllCreditNote);

                    ds.Tables.Add(table1);

                    var report = new CreditNoteReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/CreditNoteReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");
                    report.LbVoucherNo.Text = Obj.VoucherNumber;


                    if (Obj.CurrencyID != 0)
                    {
                        var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, Obj.CurrencyID);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            Obj.CurrencyName = CurrencyObj.ArabicName;

                        }

                        else
                        {
                            Obj.CurrencyName = CurrencyObj.EnglishName;
                        }

                    }





                    if (Obj.CompanyTransactionKindNo != 0)
                    {
                        var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, Obj.CompanyTransactionKindNo);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            Obj.CompanyTransactionName = CompanyTransactionObj.ArabicName;

                        }

                        else
                        {
                            Obj.CompanyTransactionName = CompanyTransactionObj.EnglishName;

                        }


                    }



                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionName;
                    report.xrCurrencyID.Text = Obj.CurrencyName;



                    //report.LevelName.Text = String.Format("{0} {1}", Resources.Resource.Level, Obj.AccountLevelDropVMID.ToString());
                    report.ToAccountNumber.Text = Obj.PaidAccountNumber;
                    if (!String.IsNullOrEmpty(Obj.PaidAccountNumber))
                    {
                        var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.PaidAccountNumber);
                        if (Resources.Resource.CurLang == "Arb")
                        {
                            report.AccountName.Text = AccName.ArabicName;
                        }
                        else
                        {
                            report.AccountName.Text = AccName.EnglishName;
                        }

                    }


                    report.DataSource = ds;
                    report.DataMember = "CreditNoteFilterVM";
                    report.CreateDocument();




                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<CreditNoteFilterVM> VMList = new List<CreditNoteFilterVM>();

                    CreditNoteReport report = new CreditNoteReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/CreditNoteReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("CreditNoteFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "CreditNoteFilterVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);
                }

            }


            public ActionResult GetHeadersServicePDF(string id, string id2, string id3, int id4, string id5, int id6, int id7)
            {
                var userId = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

            TransActionFilter Obj = new TransActionFilter();
                DateTime fromDate = DateTime.Parse(id.Substring(0, 2) + "/" + id.Substring(2, 2) + "/" + id.Substring(4, 4));
                DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                Obj.FromDate = fromDate;
                Obj.ToDate = toDate;
                Obj.VoucherNumber = id3;
                Obj.CompanyTransactionKindNo = id4;
                Obj.AccountNumber = id5;
                Obj.SaleManNo = id6;
                Obj.CurrencyID = id7;

                if (Obj.VoucherNumber == "0")
                {
                    Obj.VoucherNumber = "";
                }
                if (Obj.AccountNumber == "0")
                {
                    Obj.AccountNumber = "";
                }


            var u = _unitOfWork.NativeSql.GetServiceBillHeaders(UserInfo.fCompanyId, Obj.FromDate, Obj.ToDate);
                if (u == null)
                {
                    return Json(new List<TransActionFilter>(), JsonRequestBehavior.AllowGet);
                }
                if (!String.IsNullOrEmpty(Obj.VoucherNumber))
                {
                    u = u.Where(m => m.VoucherNumber == Obj.VoucherNumber).ToList();
                }
                if (Obj.CurrencyID != 0)
                {
                    u = u.Where(m => m.CurrencyID == Obj.CurrencyID).ToList();
                }
                if (Obj.CompanyTransactionKindNo != 0)
                {
                    u = u.Where(m => m.CompanyTransactionKindNo == Obj.CompanyTransactionKindNo).ToList();
                }
                if (!String.IsNullOrEmpty(Obj.AccountNumber))
                {
                    u = u.Where(m => m.AccountNumber == Obj.AccountNumber).ToList();
                }
                if (Obj.SaleManNo != 0)
                {
                   u = u.Where(m => m.SaleManNo == Obj.SaleManNo).ToList();
                }
                int iRow = 0;
                foreach (var iRowCount in u)
                {
                    iRowCount.iRowTable = iRow;
                    iRow = iRow + 1;
                }
                DataSet ds = new DataSet();
                DataTable table1 = new DataTable("TransActionFilter");
                table1 = FunctionUnit.LINQResultToDataTable(u);

                ds.Tables.Add(table1);

                var report = new ServiceBillReport();

                string reportFilePath = Server.MapPath("/ReportLayout/ServiceBillReport.repx");
                report.LoadLayoutFromXml(reportFilePath);

                report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy");
                report.LbVoucherNo.Text = Obj.VoucherNumber;
                 report.LbCoName.Text = CoInfo.ArabicName;


                 if (Obj.CurrencyID != 0)
                {
                    var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, Obj.CurrencyID);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CurrencyName = CurrencyObj.ArabicName;

                    }

                    else
                    {
                        Obj.CurrencyName = CurrencyObj.EnglishName;
                    }

                }

                if (Obj.CompanyTransactionKindNo != 0)
                {
                    var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, Obj.CompanyTransactionKindNo);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CompanyTransactionName = CompanyTransactionObj.ArabicName;

                    }

                    else
                    {
                        Obj.CompanyTransactionName = CompanyTransactionObj.EnglishName;

                    }


                }


            

                report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionName;
                report.xrCurrencyID.Text = Obj.CurrencyName;




            if (Obj.SaleManNo != 0)
            {
                report.LbSaleMan.Text = String.Format("{0} {1}", Resources.Resource.SaleManName, Obj.SaleManNo.ToString());

            }
            else
            {
                report.LbSaleMan.Text = " ";

            }



            report.ToAccountNumber.Text = Obj.AccountNumber;


                if (!String.IsNullOrEmpty(Obj.AccountNumber))
                {
                    var AccName = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.AccountNumber);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        report.AccountName.Text = AccName.ArabicName;
                    }
                    else
                    {
                        report.AccountName.Text = AccName.EnglishName;
                    }

                }


            //if (Obj.SaleManNo != 0)
            //{
            //    var SalesManObj = _unitOfWork.Sale.GetSaleByID(UserInfo.fCompanyId, Obj.SaleManNo);


            //    report.LbSaleMan.Text = SalesManObj.SalesName;


            //}



                report.DataSource = ds;
                report.DataMember = "TransActionFilter";
                report.CreateDocument();

                return View("ReportPDF", report);
            }

            public ActionResult DetailServiceBill(int id, int id2, int id3,int id4)
            {
                var userId = User.Identity.GetUserId();
                var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                var ObjGet = _unitOfWork.DefinitionOtherAccount.GetDefinitionOtherAccountByID(UserInfo.fCompanyId);
                var HeaderData = _unitOfWork.ServiceBillHeader.GetHeaderDataById(UserInfo.fCompanyId, id, id2, id3, id4);
                var AllServiceDetails = _unitOfWork.NativeSql.GetTransActionServiceBillsData(UserInfo.fCompanyId, id, id2, id3, id4);
                var CompanyTransactionKind = _unitOfWork.NativeSql.GetCompanyTransactionKindAll(UserInfo.fCompanyId);
                var CurrencyObj = _unitOfWork.Currency.GetCurrencyByID(UserInfo.fCompanyId, HeaderData.FCurrencyID);
                var CompanyTransactionObj = _unitOfWork.CompanyTransactionKind.GetCompanyTransactionKindByID(UserInfo.fCompanyId, HeaderData.CompanyTransactionKindNo);
                CompanyTransactionKind = CompanyTransactionKind.Where(m => m.TransactionKindID == id3).ToList();
                var SaleMan = _unitOfWork.Sale.GetAllSale(UserInfo.fCompanyId);
                var Company = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                HeaderServiceBillVM Obj = new HeaderServiceBillVM();
                Obj.AccountNumber = HeaderData.AccountNumber;
                Obj.CompanyID = HeaderData.CompanyID;
                Obj.CompanyTransactionKindID = HeaderData.CompanyTransactionKindNo;
                Obj.CompanyYear = HeaderData.CompanyYear;
                Obj.CreditAccountNumber = HeaderData.CreditAccountNumber;
                Obj.CreditCostNumber = HeaderData.CreditCostNumber;
                Obj.DebitAccountNumber = HeaderData.DebitAccountNumber;
                Obj.DebitCostNumber = HeaderData.DebitCostNumber;
                Obj.Discount = HeaderData.Discount;
                Obj.CurrencyNewValue = HeaderData.ConversionFactor;
                Obj.Currency = _unitOfWork.Currency.GetAllCurrency(UserInfo.fCompanyId);
                Obj.CurrencyID = HeaderData.FCurrencyID;
                Obj.NetTotal = HeaderData.NetTotal;
                Obj.NoTax = HeaderData.NoTax;
                Obj.Note = HeaderData.Note;
                Obj.TransactionKindNo = HeaderData.TransactionKindNo;
                Obj.Tax = HeaderData.Tax;
                Obj.TaxCostNumber = HeaderData.TaxCostNumber;
                Obj.Total = HeaderData.Total;
                Obj.BillDate = HeaderData.BillDate;
                Obj.BillID = HeaderData.BillID;
                Obj.ForeignAmount = HeaderData.ForeignAmount;
                Obj.ForeignAmountTax = HeaderData.ForeignAmountTax;
                Obj.NetTotalForeignAmount = HeaderData.NetTotalForeignAmount;
                Obj.SaleMan = SaleMan;
                Obj.SaleManNo = HeaderData.SaleManNo;
                Obj.TaxAccountNumber = HeaderData.TaxAccountNumber;
                Obj.DebitAccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, Obj.DebitAccountNumber);
                Obj.CreditAccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, Obj.CreditAccountNumber);
                Obj.TaxAccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, Obj.TaxAccountNumber);
                Obj.AccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, Obj.AccountNumber);
                Obj.DebitCostName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, Obj.DebitCostNumber);
                Obj.CreditCostName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, Obj.CreditCostNumber);
                Obj.TaxCostName = _unitOfWork.NativeSql.GetCostCenterName(UserInfo.fCompanyId, Obj.TaxCostNumber);
                Obj.CompanyTransactionKind = CompanyTransactionKind;
                Obj.CompanyTransactionKindID = HeaderData.CompanyTransactionKindNo;
                Obj.WorkWithCostCenter = Company.WorkWithCostCenter;
                Obj.TheDecimalPointForTheLocalCurrency = Company.TheDecimalPointForTheLocalCurrency;
                Obj.TheDecimalPointForTheForeignCurrency = Company.TheDecimalPointForTheForeignCurrency;
                if (id3 == 11)
                {
                    FixAccountInfoVM ObjFix = new FixAccountInfoVM
                    {
                        AccountNo = "",
                        AccountName = ""
                    };
                    if (ObjGet != null)
                    {
                        ObjFix.AccountNo = ObjGet.SalesTaxAccountNumber;
                        ObjFix.AccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, ObjGet.SalesTaxAccountNumber);
                    }
                    Obj.OrignailTaxAccountNumber = ObjFix.AccountNo;
                    Obj.OrignailTaxAccountName = ObjFix.AccountName;

                if (Company.WorkWithCostCenter)
                {

                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CurrencyName = CurrencyObj.ArabicName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                    }
                    else
                    {
                        Obj.CurrencyName = CurrencyObj.EnglishName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;

                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("HeaderServiceBillVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllServiceDetails);

                    ds.Tables.Add(table1);

                    var report = new DetailMulti();

                    string reportFilePath = Server.MapPath("/ReportLayout/DetailMulti.repx");


                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;

                    report.LbVoucherNo.Text = Obj.BillID.ToString();
                    report.LbVDate.Text = Obj.BillDate.ToString("dd/MM/yyyy");


                    //report.LbNOte.Text = HeaderServiceBillVM.Header.Note;

                    report.LbReporttitle.Text = Obj.CompanyTransactionKindName;

                    report.AccountNumber.Text = Obj.AccountNumber.ToString();

                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKindName;

                    report.xrCurrencyNewValue.Text = Obj.CurrencyNewValue.ToString();
                    report.xrCurrencyID.Text = Obj.CurrencyName;
                    report.LbSaleMan.Text = Obj.SaleManName;


                    report.AccountName.Text = Obj.AccountName;
                    report.DebitAccountNumber.Text = Obj.DebitAccountNumber;
                    report.DebitAccountName.Text = Obj.DebitAccountName;
                    report.DebitCostName.Text = Obj.DebitCostName;
                    report.DebitCostNumber.Text = Obj.DebitCostNumber;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountNum.Text = Obj.TaxAccountNumber;
                    report.TaxCostNumber.Text = Obj.TaxCostNumber;
                    report.TaxCostName.Text = Obj.TaxCostName;






                    report.L1.Text = Obj.Discount.ToString();
                    report.L2.Text = Obj.Total.ToString();
                    report.L3.Text = Obj.Tax.ToString();
                    report.L4.Text = Obj.NetTotal.ToString();
                    report.L5.Text = Obj.ForeignAmount.ToString();
                    report.L6.Text = Obj.ForeignAmountTax.ToString();
                    report.L7.Text = Obj.NetTotalForeignAmount.ToString();





                    report.LbNOte.Text = Obj.Note;





                    report.DataSource = ds;
                    report.DataMember = "HeaderServiceBillVM";

                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);

                }


                else
                {

                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CurrencyName = CurrencyObj.ArabicName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                    }
                    else
                    {
                        Obj.CurrencyName = CurrencyObj.EnglishName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;

                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("HeaderServiceBillVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllServiceDetails);

                    ds.Tables.Add(table1);

                    var report = new DetailMultiWithoutCost();

                    string reportFilePath = Server.MapPath("/ReportLayout/DetailMultiWithoutCost.repx");


                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;

                    report.LbVoucherNo.Text = Obj.BillID.ToString();
                    report.LbVDate.Text = Obj.BillDate.ToString("dd/MM/yyyy");


                    //report.LbNOte.Text = HeaderServiceBillVM.Header.Note;

                    report.LbReporttitle.Text = Obj.CompanyTransactionKindName;

                    report.AccountNumber.Text = Obj.AccountNumber.ToString();

                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKindName;

                    report.xrCurrencyNewValue.Text = Obj.CurrencyNewValue.ToString();
                    report.xrCurrencyID.Text = Obj.CurrencyName;
                    report.LbSaleMan.Text = Obj.SaleManName;


                    report.AccountName.Text = Obj.AccountName;
                    report.DebitAccountNumber.Text = Obj.DebitAccountNumber;
                    report.DebitAccountName.Text = Obj.DebitAccountName;
                     report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountNum.Text = Obj.TaxAccountNumber;
                   





                    report.L1.Text = Obj.Discount.ToString();
                    report.L2.Text = Obj.Total.ToString();
                    report.L3.Text = Obj.Tax.ToString();
                    report.L4.Text = Obj.NetTotal.ToString();
                    report.L5.Text = Obj.ForeignAmount.ToString();
                    report.L6.Text = Obj.ForeignAmountTax.ToString();
                    report.L7.Text = Obj.NetTotalForeignAmount.ToString();





                    report.LbNOte.Text = Obj.Note;





                    report.DataSource = ds;
                    report.DataMember = "HeaderServiceBillVM";

                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);

                }


            }
                else if (id3 == 12)
                {
                    FixAccountInfoVM ObjFix = new FixAccountInfoVM
                    {
                        AccountNo = "",
                        AccountName = ""
                    };
                    if (ObjGet != null)
                    {
                        ObjFix.AccountNo = ObjGet.PurchasesTaxAccountNumber;
                        ObjFix.AccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, ObjGet.PurchasesTaxAccountNumber);
                    }
                    Obj.OrignailTaxAccountNumber = ObjFix.AccountNo;
                    Obj.OrignailTaxAccountName = ObjFix.AccountName;

                if (Company.WorkWithCostCenter)
                {

                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CurrencyName = CurrencyObj.ArabicName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                    }
                    else
                    {
                        Obj.CurrencyName = CurrencyObj.EnglishName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;

                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("HeaderServiceBillVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllServiceDetails);

                    ds.Tables.Add(table1);

                    var report = new DetailPurchase();

                    string reportFilePath = Server.MapPath("/ReportLayout/DetailPurchase.repx");


                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;

                    report.LbVoucherNo.Text = Obj.BillID.ToString();
                    report.LbVDate.Text = Obj.BillDate.ToString("dd/MM/yyyy");


                    //report.LbNOte.Text = HeaderServiceBillVM.Header.Note;


                    report.AccountNumber.Text = Obj.AccountNumber.ToString();

                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKindName;

                    report.xrCurrencyNewValue.Text = Obj.CurrencyNewValue.ToString();
                    report.xrCurrencyID.Text = Obj.CurrencyName;
                    report.LbSaleMan.Text = Obj.SaleManName;


                    report.AccountName.Text = Obj.AccountName;
                    report.DebitAccountNumber.Text = Obj.DebitAccountNumber;
                    report.DebitAccountName.Text = Obj.DebitAccountName;
                    report.DebitCostName.Text = Obj.DebitCostName;
                    report.DebitCostNumber.Text = Obj.DebitCostNumber;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountNum.Text = Obj.TaxAccountNumber;
                    report.TaxCostNumber.Text = Obj.TaxCostNumber;
                    report.TaxCostName.Text = Obj.TaxCostName;

                    report.L1.Text = Obj.Discount.ToString();
                    report.L2.Text = Obj.Total.ToString();
                    report.L3.Text = Obj.Tax.ToString();
                    report.L4.Text = Obj.NetTotal.ToString();
                    report.L5.Text = Obj.ForeignAmount.ToString();
                    report.L6.Text = Obj.ForeignAmountTax.ToString();
                    report.L7.Text = Obj.NetTotalForeignAmount.ToString();



                    report.LbNOte.Text = Obj.Note;
                    report.LbReporttitle.Text = Obj.CompanyTransactionKindName;





                    report.DataSource = ds;
                    report.DataMember = "HeaderServiceBillVM";

                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);
                }

                else
                {

                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CurrencyName = CurrencyObj.ArabicName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                    }
                    else
                    {
                        Obj.CurrencyName = CurrencyObj.EnglishName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;

                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("HeaderServiceBillVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllServiceDetails);

                    ds.Tables.Add(table1);

                    var report = new DetailPurchaseWithoutCost();

                    string reportFilePath = Server.MapPath("/ReportLayout/DetailPurchaseWithoutCost.repx");


                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;

                    report.LbVoucherNo.Text = Obj.BillID.ToString();
                    report.LbVDate.Text = Obj.BillDate.ToString("dd/MM/yyyy");


                    //report.LbNOte.Text = HeaderServiceBillVM.Header.Note;


                    report.AccountNumber.Text = Obj.AccountNumber.ToString();

                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKindName;

                    report.xrCurrencyNewValue.Text = Obj.CurrencyNewValue.ToString();
                    report.xrCurrencyID.Text = Obj.CurrencyName;
                    report.LbSaleMan.Text = Obj.SaleManName;


                    report.AccountName.Text = Obj.AccountName;
                    report.DebitAccountNumber.Text = Obj.DebitAccountNumber;
                    report.DebitAccountName.Text = Obj.DebitAccountName;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountNum.Text = Obj.TaxAccountNumber;
                    
                    report.L1.Text = Obj.Discount.ToString();
                    report.L2.Text = Obj.Total.ToString();
                    report.L3.Text = Obj.Tax.ToString();
                    report.L4.Text = Obj.NetTotal.ToString();
                    report.L5.Text = Obj.ForeignAmount.ToString();
                    report.L6.Text = Obj.ForeignAmountTax.ToString();
                    report.L7.Text = Obj.NetTotalForeignAmount.ToString();



                    report.LbNOte.Text = Obj.Note;
                    report.LbReporttitle.Text = Obj.CompanyTransactionKindName;





                    report.DataSource = ds;
                    report.DataMember = "HeaderServiceBillVM";

                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);
                }
                }
                else if (id3 == 13)
                {
                    FixAccountInfoVM ObjFix = new FixAccountInfoVM
                    {
                        AccountNo = "",
                        AccountName = ""
                    };
                    if (ObjGet != null)
                    {
                        ObjFix.AccountNo = ObjGet.PurchasesTaxAccountNumber;
                        ObjFix.AccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, ObjGet.PurchasesTaxAccountNumber);
                    }
                    Obj.OrignailTaxAccountNumber = ObjFix.AccountNo;
                    Obj.OrignailTaxAccountName = ObjFix.AccountName;

                if (Company.WorkWithCostCenter)
                {

                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CurrencyName = CurrencyObj.ArabicName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                    }
                    else
                    {
                        Obj.CurrencyName = CurrencyObj.EnglishName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;

                    }
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("HeaderServiceBillVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllServiceDetails);

                    ds.Tables.Add(table1);

                    var report = new DetailMultiPurchaseReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/DetailMultiPurchaseReport.repx");


                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbVoucherNo.Text = Obj.BillID.ToString();
                    report.LbVDate.Text = Obj.BillDate.ToString("dd/MM/yyyy");


                    //report.LbNOte.Text = HeaderServiceBillVM.Header.Note;


                    report.AccountNumber.Text = Obj.AccountNumber.ToString();


                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKindName;

                    report.xrCurrencyNewValue.Text = Obj.CurrencyNewValue.ToString();

                    report.LbSaleMan.Text = Obj.SaleManName;


                    report.AccountName.Text = Obj.AccountName;
                    report.DebitAccountNumber.Text = Obj.DebitAccountNumber;
                    report.DebitAccountName.Text = Obj.DebitAccountName;
                    report.DebitCostName.Text = Obj.DebitCostName;
                    report.DebitCostNumber.Text = Obj.DebitCostNumber;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountNum.Text = Obj.TaxAccountNumber;
                    report.TaxCostNumber.Text = Obj.TaxCostNumber;
                    report.TaxCostName.Text = Obj.TaxCostName;
                    report.xrCurrencyID.Text = Obj.CurrencyName;
                    report.name.Text = Obj.CompanyTransactionKindName;


                    report.L1.Text = Obj.Discount.ToString();
                    report.L2.Text = Obj.Total.ToString();
                    report.L3.Text = Obj.Tax.ToString();
                    report.L4.Text = Obj.NetTotal.ToString();
                    report.L5.Text = Obj.ForeignAmount.ToString();
                    report.L6.Text = Obj.ForeignAmountTax.ToString();
                    report.L7.Text = Obj.NetTotalForeignAmount.ToString();



                    report.LbNOte.Text = Obj.Note;

                    report.DataSource = ds;
                    report.DataMember = "HeaderServiceBillVM";

                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);


                }
                else
                {
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CurrencyName = CurrencyObj.ArabicName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                    }
                    else
                    {
                        Obj.CurrencyName = CurrencyObj.EnglishName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;

                    }
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("HeaderServiceBillVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllServiceDetails);

                    ds.Tables.Add(table1);

                    var report = new DetailMultiPurchaseWithoutCost();

                    string reportFilePath = Server.MapPath("/ReportLayout/DetailMultiPurchaseWithoutCost.repx");


                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbVoucherNo.Text = Obj.BillID.ToString();
                    report.LbVDate.Text = Obj.BillDate.ToString("dd/MM/yyyy");


                    //report.LbNOte.Text = HeaderServiceBillVM.Header.Note;


                    report.AccountNumber.Text = Obj.AccountNumber.ToString();


                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKindName;

                    report.xrCurrencyNewValue.Text = Obj.CurrencyNewValue.ToString();

                    report.LbSaleMan.Text = Obj.SaleManName;


                    report.AccountName.Text = Obj.AccountName;
                    report.DebitAccountNumber.Text = Obj.DebitAccountNumber;
                    report.DebitAccountName.Text = Obj.DebitAccountName;
                   report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountNum.Text = Obj.TaxAccountNumber;
                    report.xrCurrencyID.Text = Obj.CurrencyName;
                    report.name.Text = Obj.CompanyTransactionKindName;


                    report.L1.Text = Obj.Discount.ToString();
                    report.L2.Text = Obj.Total.ToString();
                    report.L3.Text = Obj.Tax.ToString();
                    report.L4.Text = Obj.NetTotal.ToString();
                    report.L5.Text = Obj.ForeignAmount.ToString();
                    report.L6.Text = Obj.ForeignAmountTax.ToString();
                    report.L7.Text = Obj.NetTotalForeignAmount.ToString();



                    report.LbNOte.Text = Obj.Note;

                    report.DataSource = ds;
                    report.DataMember = "HeaderServiceBillVM";

                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);


                }
            }
                else if (id3 == 19)
                {
                    FixAccountInfoVM ObjFix = new FixAccountInfoVM
                    {
                        AccountNo = "",
                        AccountName = ""
                    };
                    if (ObjGet != null)
                    {
                        ObjFix.AccountNo = ObjGet.ReturnSalesTaxAccountNumber;
                        ObjFix.AccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, ObjGet.ReturnSalesTaxAccountNumber);
                    }
                    Obj.OrignailTaxAccountNumber = ObjFix.AccountNo;
                    Obj.OrignailTaxAccountName = ObjFix.AccountName;


                if (Company.WorkWithCostCenter)
                {

                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CurrencyName = CurrencyObj.ArabicName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                    }
                    else
                    {
                        Obj.CurrencyName = CurrencyObj.EnglishName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;

                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("HeaderServiceBillVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllServiceDetails);

                    ds.Tables.Add(table1);

                    var report = new DetailReturn();

                    string reportFilePath = Server.MapPath("/ReportLayout/DetailReturn.repx");


                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbVoucherNo.Text = Obj.BillID.ToString();
                    report.LbVDate.Text = Obj.BillDate.ToString("dd/MM/yyyy");


                    //report.LbNOte.Text = HeaderServiceBillVM.Header.Note;


                    report.AccountNumber.Text = Obj.AccountNumber.ToString();

                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKindName;

                    report.xrCurrencyNewValue.Text = Obj.CurrencyNewValue.ToString();
                    report.xrCurrencyID.Text = Obj.CurrencyName;
                    report.LbSaleMan.Text = Obj.SaleManName;


                    report.AccountName.Text = Obj.AccountName;
                    report.DebitAccountNumber.Text = Obj.DebitAccountNumber;
                    report.DebitAccountName.Text = Obj.DebitAccountName;
                    report.DebitCostName.Text = Obj.DebitCostName;
                    report.DebitCostNumber.Text = Obj.DebitCostNumber;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountNum.Text = Obj.TaxAccountNumber;
                    report.TaxCostNumber.Text = Obj.TaxCostNumber;
                    report.TaxCostName.Text = Obj.TaxCostName;
                    report.LbReporttitle.Text = Obj.CompanyTransactionKindName;



                    report.L1.Text = Obj.Discount.ToString();
                    report.L2.Text = Obj.Total.ToString();
                    report.L3.Text = Obj.Tax.ToString();
                    report.L4.Text = Obj.NetTotal.ToString();
                    report.L5.Text = Obj.ForeignAmount.ToString();
                    report.L6.Text = Obj.ForeignAmountTax.ToString();
                    report.L7.Text = Obj.NetTotalForeignAmount.ToString();



                    report.LbNOte.Text = Obj.Note;





                    report.DataSource = ds;
                    report.DataMember = "HeaderServiceBillVM";

                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);

                }
                else
                {
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CurrencyName = CurrencyObj.ArabicName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                    }
                    else
                    {
                        Obj.CurrencyName = CurrencyObj.EnglishName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;

                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("HeaderServiceBillVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllServiceDetails);

                    ds.Tables.Add(table1);

                    var report = new DetailReturnWithoutCost();

                    string reportFilePath = Server.MapPath("/ReportLayout/DetailReturnWithoutCost.repx");


                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbVoucherNo.Text = Obj.BillID.ToString();
                    report.LbVDate.Text = Obj.BillDate.ToString("dd/MM/yyyy");


                    //report.LbNOte.Text = HeaderServiceBillVM.Header.Note;


                    report.AccountNumber.Text = Obj.AccountNumber.ToString();

                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKindName;

                    report.xrCurrencyNewValue.Text = Obj.CurrencyNewValue.ToString();
                    report.xrCurrencyID.Text = Obj.CurrencyName;
                    report.LbSaleMan.Text = Obj.SaleManName;


                    report.AccountName.Text = Obj.AccountName;
                    report.DebitAccountNumber.Text = Obj.DebitAccountNumber;
                    report.DebitAccountName.Text = Obj.DebitAccountName;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountNum.Text = Obj.TaxAccountNumber;
                    report.LbReporttitle.Text = Obj.CompanyTransactionKindName;



                    report.L1.Text = Obj.Discount.ToString();
                    report.L2.Text = Obj.Total.ToString();
                    report.L3.Text = Obj.Tax.ToString();
                    report.L4.Text = Obj.NetTotal.ToString();
                    report.L5.Text = Obj.ForeignAmount.ToString();
                    report.L6.Text = Obj.ForeignAmountTax.ToString();
                    report.L7.Text = Obj.NetTotalForeignAmount.ToString();


                    report.LbNOte.Text = Obj.Note;


                    report.DataSource = ds;
                    report.DataMember = "HeaderServiceBillVM";

                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);

                }

            }
                else if (id3 == 20)
                {
                    FixAccountInfoVM ObjFix = new FixAccountInfoVM
                    {
                        AccountNo = "",
                        AccountName = ""
                    };
                    if (ObjGet != null)
                    {
                        ObjFix.AccountNo = ObjGet.ReturnSalesTaxAccountNumber;
                        ObjFix.AccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, ObjGet.ReturnSalesTaxAccountNumber);
                    }
                    Obj.OrignailTaxAccountNumber = ObjFix.AccountNo;
                    Obj.OrignailTaxAccountName = ObjFix.AccountName;

                if (Company.WorkWithCostCenter)
                {
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CurrencyName = CurrencyObj.ArabicName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                    }
                    else
                    {
                        Obj.CurrencyName = CurrencyObj.EnglishName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;

                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("HeaderServiceBillVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllServiceDetails);

                    ds.Tables.Add(table1);


                    var report = new DetailMultiReturn();

                    string reportFilePath = Server.MapPath("/ReportLayout/DetailMultiReturn.repx");


                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbVoucherNo.Text = Obj.BillID.ToString();
                    report.LbVDate.Text = Obj.BillDate.ToString("dd/MM/yyyy");


                    //report.LbNOte.Text = HeaderServiceBillVM.Header.Note;

                    report.name.Text = Obj.CompanyTransactionKindName;

                    report.AccountNumber.Text = Obj.AccountNumber.ToString();

                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKindName;

                    report.xrCurrencyNewValue.Text = Obj.CurrencyNewValue.ToString();
                    report.xrCurrencyID.Text = Obj.CurrencyName;
                    report.LbSaleMan.Text = Obj.SaleManName;


                    report.AccountName.Text = Obj.AccountName;
                    report.DebitAccountNumber.Text = Obj.DebitAccountNumber;
                    report.DebitAccountName.Text = Obj.DebitAccountName;
                    report.DebitCostName.Text = Obj.DebitCostName;
                    report.DebitCostNumber.Text = Obj.DebitCostNumber;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountNum.Text = Obj.TaxAccountNumber;
                    report.TaxCostNumber.Text = Obj.TaxCostNumber;
                    report.TaxCostName.Text = Obj.TaxCostName;

                    report.L1.Text = Obj.Discount.ToString();
                    report.L2.Text = Obj.Total.ToString();
                    report.L3.Text = Obj.Tax.ToString();
                    report.L4.Text = Obj.NetTotal.ToString();
                    report.L5.Text = Obj.ForeignAmount.ToString();
                    report.L6.Text = Obj.ForeignAmountTax.ToString();
                    report.L7.Text = Obj.NetTotalForeignAmount.ToString();



                    report.LbNOte.Text = Obj.Note;





                    report.DataSource = ds;
                    report.DataMember = "HeaderServiceBillVM";

                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);
                }
                else
                {
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CurrencyName = CurrencyObj.ArabicName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                    }
                    else
                    {
                        Obj.CurrencyName = CurrencyObj.EnglishName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;

                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("HeaderServiceBillVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllServiceDetails);

                    ds.Tables.Add(table1);


                    var report = new DetailMultiReturnWithoutCost();

                    string reportFilePath = Server.MapPath("/ReportLayout/DetailMultiReturnWithoutCost.repx");


                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbVoucherNo.Text = Obj.BillID.ToString();
                    report.LbVDate.Text = Obj.BillDate.ToString("dd/MM/yyyy");


                    //report.LbNOte.Text = HeaderServiceBillVM.Header.Note;

                    report.name.Text = Obj.CompanyTransactionKindName;

                    report.AccountNumber.Text = Obj.AccountNumber.ToString();

                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKindName;

                    report.xrCurrencyNewValue.Text = Obj.CurrencyNewValue.ToString();
                    report.xrCurrencyID.Text = Obj.CurrencyName;
                    report.LbSaleMan.Text = Obj.SaleManName;


                    report.AccountName.Text = Obj.AccountName;
                    report.DebitAccountNumber.Text = Obj.DebitAccountNumber;
                    report.DebitAccountName.Text = Obj.DebitAccountName;
                     report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountNum.Text = Obj.TaxAccountNumber;
                   
                    report.L1.Text = Obj.Discount.ToString();
                    report.L2.Text = Obj.Total.ToString();
                    report.L3.Text = Obj.Tax.ToString();
                    report.L4.Text = Obj.NetTotal.ToString();
                    report.L5.Text = Obj.ForeignAmount.ToString();
                    report.L6.Text = Obj.ForeignAmountTax.ToString();
                    report.L7.Text = Obj.NetTotalForeignAmount.ToString();



                    report.LbNOte.Text = Obj.Note;





                    report.DataSource = ds;
                    report.DataMember = "HeaderServiceBillVM";

                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);
                }


                }
                else if (id3 == 21)
                {
                    FixAccountInfoVM ObjFix = new FixAccountInfoVM
                    {
                        AccountNo = "",
                        AccountName = ""
                    };
                    if (ObjGet != null)
                    {
                        ObjFix.AccountNo = ObjGet.ReturnPurchasesTaxAccountNumber;
                        ObjFix.AccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, ObjGet.ReturnPurchasesTaxAccountNumber);
                    }
                    Obj.OrignailTaxAccountNumber = ObjFix.AccountNo;
                    Obj.OrignailTaxAccountName = ObjFix.AccountName;

                if (Company.WorkWithCostCenter)
                {

                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CurrencyName = CurrencyObj.ArabicName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                    }
                    else
                    {
                        Obj.CurrencyName = CurrencyObj.EnglishName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;

                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("HeaderServiceBillVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllServiceDetails);

                    ds.Tables.Add(table1);

                    var report = new DetailPurchaseReturn();

                    string reportFilePath = Server.MapPath("/ReportLayout/DetailPurchaseReturn.repx");


                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbVoucherNo.Text = Obj.BillID.ToString();
                    report.LbVDate.Text = Obj.BillDate.ToString("dd/MM/yyyy");


                    //report.LbNOte.Text = HeaderServiceBillVM.Header.Note;


                    report.AccountNumber.Text = Obj.AccountNumber.ToString();

                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKindName;

                    report.xrCurrencyNewValue.Text = Obj.CurrencyNewValue.ToString();
                    report.xrCurrencyID.Text = Obj.CurrencyName;

                    report.LbReporttitle.Text = Obj.CompanyTransactionKindName;

                    report.AccountName.Text = Obj.AccountName;
                    report.DebitAccountNumber.Text = Obj.DebitAccountNumber;
                    report.DebitAccountName.Text = Obj.DebitAccountName;
                    report.DebitCostName.Text = Obj.DebitCostName;
                    report.DebitCostNumber.Text = Obj.DebitCostNumber;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountNum.Text = Obj.TaxAccountNumber;
                    report.TaxCostNumber.Text = Obj.TaxCostNumber;
                    report.TaxCostName.Text = Obj.TaxCostName;

                    report.L1.Text = Obj.Discount.ToString();
                    report.L2.Text = Obj.Total.ToString();
                    report.L3.Text = Obj.Tax.ToString();
                    report.L4.Text = Obj.NetTotal.ToString();
                    report.L5.Text = Obj.ForeignAmount.ToString();
                    report.L6.Text = Obj.ForeignAmountTax.ToString();
                    report.L7.Text = Obj.NetTotalForeignAmount.ToString();



                    report.LbNOte.Text = Obj.Note;





                    report.DataSource = ds;
                    report.DataMember = "HeaderServiceBillVM";

                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);
                }
                else
                {
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CurrencyName = CurrencyObj.ArabicName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                    }
                    else
                    {
                        Obj.CurrencyName = CurrencyObj.EnglishName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;

                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("HeaderServiceBillVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllServiceDetails);

                    ds.Tables.Add(table1);

                    var report = new DetailPurchaseReturnWithoutCost();

                    string reportFilePath = Server.MapPath("/ReportLayout/DetailPurchaseReturnWithoutCost.repx");


                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbVoucherNo.Text = Obj.BillID.ToString();
                    report.LbVDate.Text = Obj.BillDate.ToString("dd/MM/yyyy");


                    //report.LbNOte.Text = HeaderServiceBillVM.Header.Note;


                    report.AccountNumber.Text = Obj.AccountNumber.ToString();

                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKindName;

                    report.xrCurrencyNewValue.Text = Obj.CurrencyNewValue.ToString();
                    report.xrCurrencyID.Text = Obj.CurrencyName;

                    report.LbReporttitle.Text = Obj.CompanyTransactionKindName;

                    report.AccountName.Text = Obj.AccountName;
                    report.DebitAccountNumber.Text = Obj.DebitAccountNumber;
                    report.DebitAccountName.Text = Obj.DebitAccountName;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountNum.Text = Obj.TaxAccountNumber;
                  
                    report.L1.Text = Obj.Discount.ToString();
                    report.L2.Text = Obj.Total.ToString();
                    report.L3.Text = Obj.Tax.ToString();
                    report.L4.Text = Obj.NetTotal.ToString();
                    report.L5.Text = Obj.ForeignAmount.ToString();
                    report.L6.Text = Obj.ForeignAmountTax.ToString();
                    report.L7.Text = Obj.NetTotalForeignAmount.ToString();



                    report.LbNOte.Text = Obj.Note;





                    report.DataSource = ds;
                    report.DataMember = "HeaderServiceBillVM";

                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);
                }
                }
                else if (id3 == 22)
                {
                    FixAccountInfoVM ObjFix = new FixAccountInfoVM
                    {
                        AccountNo = "",
                        AccountName = ""
                    };
                    if (ObjGet != null)
                    {
                        ObjFix.AccountNo = ObjGet.ReturnPurchasesTaxAccountNumber;
                        ObjFix.AccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, ObjGet.ReturnPurchasesTaxAccountNumber);
                    }
                    Obj.OrignailTaxAccountNumber = ObjFix.AccountNo;
                    Obj.OrignailTaxAccountName = ObjFix.AccountName;

                if (Company.WorkWithCostCenter)
                {

                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CurrencyName = CurrencyObj.ArabicName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                    }
                    else
                    {
                        Obj.CurrencyName = CurrencyObj.EnglishName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;

                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("HeaderServiceBillVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllServiceDetails);

                    ds.Tables.Add(table1);

                    var report = new DetailMultiPurchaseReturn();

                    string reportFilePath = Server.MapPath("/ReportLayout/DetailMultiPurchaseReturn.repx");


                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbVoucherNo.Text = Obj.BillID.ToString();
                    report.LbVDate.Text = Obj.BillDate.ToString("dd/MM/yyyy");


                    //report.LbNOte.Text = HeaderServiceBillVM.Header.Note;


                    report.AccountNumber.Text = Obj.AccountNumber.ToString();

                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKindName;

                    report.xrCurrencyNewValue.Text = Obj.CurrencyNewValue.ToString();
                    report.xrCurrencyID.Text = Obj.CurrencyName;
                    report.LbSaleMan.Text = Obj.SaleManName;


                    report.AccountName.Text = Obj.AccountName;
                    report.DebitAccountNumber.Text = Obj.DebitAccountNumber;
                    report.DebitAccountName.Text = Obj.DebitAccountName;
                    report.DebitCostName.Text = Obj.DebitCostName;
                    report.DebitCostNumber.Text = Obj.DebitCostNumber;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountNum.Text = Obj.TaxAccountNumber;
                    report.TaxCostNumber.Text = Obj.TaxCostNumber;
                    report.TaxCostName.Text = Obj.TaxCostName;
                    report.LbReporttitle.Text = Obj.CompanyTransactionKindName;

                    report.L1.Text = Obj.Discount.ToString();
                    report.L2.Text = Obj.Total.ToString();
                    report.L3.Text = Obj.Tax.ToString();
                    report.L4.Text = Obj.NetTotal.ToString();
                    report.L5.Text = Obj.ForeignAmount.ToString();
                    report.L6.Text = Obj.ForeignAmountTax.ToString();
                    report.L7.Text = Obj.NetTotalForeignAmount.ToString();


                    report.LbNOte.Text = Obj.Note;

                    report.DataSource = ds;
                    report.DataMember = "HeaderServiceBillVM";

                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);
                }
                else
                {

                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CurrencyName = CurrencyObj.ArabicName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                    }
                    else
                    {
                        Obj.CurrencyName = CurrencyObj.EnglishName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;

                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("HeaderServiceBillVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllServiceDetails);

                    ds.Tables.Add(table1);

                    var report = new DetailMultiPurchaseReturnWithoutCost();

                    string reportFilePath = Server.MapPath("/ReportLayout/DetailMultiPurchaseReturnWithoutCost.repx");


                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbVoucherNo.Text = Obj.BillID.ToString();
                    report.LbVDate.Text = Obj.BillDate.ToString("dd/MM/yyyy");


                    //report.LbNOte.Text = HeaderServiceBillVM.Header.Note;


                    report.AccountNumber.Text = Obj.AccountNumber.ToString();

                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKindName;

                    report.xrCurrencyNewValue.Text = Obj.CurrencyNewValue.ToString();
                    report.xrCurrencyID.Text = Obj.CurrencyName;
                    report.LbSaleMan.Text = Obj.SaleManName;


                    report.AccountName.Text = Obj.AccountName;
                    report.DebitAccountNumber.Text = Obj.DebitAccountNumber;
                    report.DebitAccountName.Text = Obj.DebitAccountName;
                     report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountNum.Text = Obj.TaxAccountNumber;
                    report.LbReporttitle.Text = Obj.CompanyTransactionKindName;

                    report.L1.Text = Obj.Discount.ToString();
                    report.L2.Text = Obj.Total.ToString();
                    report.L3.Text = Obj.Tax.ToString();
                    report.L4.Text = Obj.NetTotal.ToString();
                    report.L5.Text = Obj.ForeignAmount.ToString();
                    report.L6.Text = Obj.ForeignAmountTax.ToString();
                    report.L7.Text = Obj.NetTotalForeignAmount.ToString();


                    report.LbNOte.Text = Obj.Note;

                    report.DataSource = ds;
                    report.DataMember = "HeaderServiceBillVM";

                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);
                }
                }
                else
                {
                    FixAccountInfoVM ObjFix = new FixAccountInfoVM
                    {
                        AccountNo = "",
                        AccountName = ""
                    };
                    if (ObjGet != null)
                    {
                        ObjFix.AccountNo = ObjGet.SalesTaxAccountNumber;
                        ObjFix.AccountName = _unitOfWork.NativeSql.GetAccountName(UserInfo.fCompanyId, ObjGet.SalesTaxAccountNumber);
                    }
                    Obj.OrignailTaxAccountNumber = ObjFix.AccountNo;
                    Obj.OrignailTaxAccountName = ObjFix.AccountName;

                if (Company.WorkWithCostCenter)
                {
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CurrencyName = CurrencyObj.ArabicName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                    }
                    else
                    {
                        Obj.CurrencyName = CurrencyObj.EnglishName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;

                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("HeaderServiceBillVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllServiceDetails);

                    ds.Tables.Add(table1);


                    var report = new XtraServiceBillDetailReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/XtraServiceBillDetailReport.repx");


                    report.LoadLayoutFromXml(reportFilePath);


                    // report.LbNetTot.Text = TransFixedVM.Amount.ToString();
                    // report.TotalForeign.Text = TransFixedVM.ForeignAmount.ToString();


                    // report.LbCoName.Text = CoInfo.ArabicName;
                    //report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    //report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbVoucherNo.Text = Obj.BillID.ToString();
                    report.LbVDate.Text = Obj.BillDate.ToString("dd/MM/yyyy");


                    //report.LbNOte.Text = HeaderServiceBillVM.Header.Note;


                    report.AccountNumber.Text = Obj.AccountNumber.ToString();

                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKindName;

                    report.xrCurrencyNewValue.Text = Obj.CurrencyNewValue.ToString();
                    report.xrCurrencyID.Text = Obj.CurrencyName;
                    report.LbSaleMan.Text = Obj.SaleManName;


                    report.AccountName.Text = Obj.AccountName;
                    report.DebitAccountNumber.Text = Obj.DebitAccountNumber;
                    report.DebitAccountName.Text = Obj.DebitAccountName;
                    report.DebitCostName.Text = Obj.DebitCostName;
                    report.DebitCostNumber.Text = Obj.DebitCostNumber;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountNum.Text = Obj.TaxAccountNumber;
                    report.TaxCostNumber.Text = Obj.TaxCostNumber;
                    report.TaxCostName.Text = Obj.TaxCostName;

                    report.LbReporttitle.Text = Obj.CompanyTransactionKindName;


                    report.LbNOte.Text = Obj.Note;


                    report.L1.Text = Obj.Discount.ToString();
                    report.L2.Text = Obj.Total.ToString();
                    report.L3.Text = Obj.Tax.ToString();
                    report.L4.Text = Obj.NetTotal.ToString();
                    report.L5.Text = Obj.ForeignAmount.ToString();
                    report.L6.Text = Obj.ForeignAmountTax.ToString();
                    report.L7.Text = Obj.NetTotalForeignAmount.ToString();




                    report.DataSource = ds;
                    report.DataMember = "HeaderServiceBillVM";

                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);

                }
                else
                {
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    if (Resources.Resource.CurLang == "Arb")
                    {
                        Obj.CurrencyName = CurrencyObj.ArabicName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.ArabicName;
                    }
                    else
                    {
                        Obj.CurrencyName = CurrencyObj.EnglishName;
                        Obj.CompanyTransactionKindName = CompanyTransactionObj.EnglishName;

                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("HeaderServiceBillVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllServiceDetails);

                    ds.Tables.Add(table1);


                    var report = new XtraServiceBillDetailWithoutCost();

                    string reportFilePath = Server.MapPath("/ReportLayout/XtraServiceBillDetailWithoutCost.repx");


                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.LbVoucherNo.Text = Obj.BillID.ToString();
                    report.LbVDate.Text = Obj.BillDate.ToString("dd/MM/yyyy");


                    //report.LbNOte.Text = HeaderServiceBillVM.Header.Note;


                    report.AccountNumber.Text = Obj.AccountNumber.ToString();

                    report.xrCompanyTransactionKindName.Text = Obj.CompanyTransactionKindName;

                    report.xrCurrencyNewValue.Text = Obj.CurrencyNewValue.ToString();
                    report.xrCurrencyID.Text = Obj.CurrencyName;
                    report.LbSaleMan.Text = Obj.SaleManName;


                    report.AccountName.Text = Obj.AccountName;
                    report.DebitAccountNumber.Text = Obj.DebitAccountNumber;
                    report.DebitAccountName.Text = Obj.DebitAccountName;
                     report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountName.Text = Obj.TaxAccountName;
                    report.TaxAccountNum.Text = Obj.TaxAccountNumber;
                   
                    report.LbReporttitle.Text = Obj.CompanyTransactionKindName;


                    report.LbNOte.Text = Obj.Note;


                    report.L1.Text = Obj.Discount.ToString();
                    report.L2.Text = Obj.Total.ToString();
                    report.L3.Text = Obj.Tax.ToString();
                    report.L4.Text = Obj.NetTotal.ToString();
                    report.L5.Text = Obj.ForeignAmount.ToString();
                    report.L6.Text = Obj.ForeignAmountTax.ToString();
                    report.L7.Text = Obj.NetTotalForeignAmount.ToString();




                    report.DataSource = ds;
                    report.DataMember = "HeaderServiceBillVM";

                    //report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();



                    return View("ReportPDF", report);

                }



            }
            }



            public ActionResult GetTrankingChequesReportPayment(string id, string id2, int id3, double id4, int id5, string id6, int id7, int id8, string id9)
            {
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var ShowPaperDetails = _unitOfWork.NativeSql.GetPaymentChequeDetails(UserInfo.fCompanyId, id, id2, id3, id4, id5, id6, id7, id8, id9);
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaperFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(ShowPaperDetails);

                    ds.Tables.Add(table1);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    var report = new TrankingChequesReportPayment();

                    string reportFilePath = Server.MapPath("/ReportLayout/TrankingChequesReportPayment.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
            

                    report.DataSource = ds;
                    report.DataMember = "PaperFilterVM";




                    report.CreateDocument();




                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<PaperFilterVM> VMList = new List<PaperFilterVM>();

                    TrankingChequesReportPayment report = new TrankingChequesReportPayment();

                    string reportFilePath = Server.MapPath("/ReportLayout/TrankingChequesReportPayment.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaperFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "PaperFilterVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);

                }

            }



            public ActionResult GetTrankingChequesReportReceipt(string id, string id2, int id3, double id4, int id5, string id6, int id7, int id8, string id9)
            {
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var ShowPaperDetails = _unitOfWork.NativeSql.GetChequeDetails(UserInfo.fCompanyId, id, id2, id3, id4, id5, id6, id7, id8, id9);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaperFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(ShowPaperDetails);

                    ds.Tables.Add(table1);

                    var report = new TrankingChequesReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/TrankingChequesReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    //report.LbFromDate.Text = Obj.FromCollectionDate.ToString("dd/MM/yyyy");
                    //report.LbTODate.Text = Obj.ToCollectionDate.ToString("dd/MM/yyyy");

                    report.DataSource = ds;
                    report.DataMember = "PaperFilterVM";



                    ////report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();




                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<PaperFilterVM> VMList = new List<PaperFilterVM>();

                    TrankingChequesReport report = new TrankingChequesReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/TrankingChequesReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaperFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "PaperFilterVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);

                }

            }


            public ActionResult GetAllAssetPDF(int id)
            {
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    AssetVM Obj = new AssetVM();
                    Obj.FAssetTypeID = id;

                    var AllAsset = _unitOfWork.Asset.GetAllAssetNative(UserInfo.fCompanyId, 0);
                    if (AllAsset == null)
                    {
                        return Json(new List<AssetVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (Obj.FAssetTypeID != 0)
                    {
                        AllAsset = AllAsset.Where(m => m.FAssetTypeID == Obj.FAssetTypeID).ToList();
                    }

                string assetType = (id.ToString());

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("AssetVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllAsset);

                    ds.Tables.Add(table1);

                    var report = new AssetIndexReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/AssetIndexReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    //report.LbFromDate.Text = Obj.FromCollectionDate.ToString("dd/MM/yyyy");
                    //report.LbTODate.Text = Obj.ToCollectionDate.ToString("dd/MM/yyyy");

                    report.DataSource = ds;
                    report.DataMember = "AssetVM";
                     report.Kind.Text = Obj.FAssetTypeID.ToString();

                if (assetType != "0" && assetType.Trim() != "")
                {
                    var AssetKind = _unitOfWork.AssetType.GetAssetTypeByID(UserInfo.fCompanyId, int.Parse(Obj.FAssetTypeID.ToString()));
                    report.Kind.Text = AssetKind.Name;


                }
                else
                {
                    report.Kind.Text = Resources.Resource.All;
                }


                report.CreateDocument();




                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<AssetVM> VMList = new List<AssetVM>();

                    AssetIndexReport report = new AssetIndexReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/AssetIndexReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("AssetVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "AssetVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);

                }

            }


            public ActionResult GetAssetCalculationPDF(int id, string id2)
            {
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);

                    AssetVMFilter Obj = new AssetVMFilter();
                    DateTime toDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    Obj.ToDate = toDate;
                    Obj.FAssetTypeID = id;

                    var assetType = (id.ToString());


                    if (assetType == "0")
                    {
                        assetType = "";
                    }



                    var AllAsset = _unitOfWork.Asset.GetAllAssetNativePrint(UserInfo.fCompanyId, 0);
                    if (AllAsset == null)
                    {
                        return Json(new List<AssetVM>(), JsonRequestBehavior.AllowGet);
                    }
                    if (Obj.FAssetTypeID != 0)
                    {
                        AllAsset = AllAsset.Where(m => m.FAssetTypeID == int.Parse(Obj.FAssetTypeID.ToString())).ToList();
                    }
                    int CurrYear = UserInfo.CurrYear;
                    DateTime dec31 = new DateTime(CurrYear, 12, 31);
                    int DaysInYear = dec31.DayOfYear;
                    double Years = 0;
                    foreach (var A in AllAsset)
                    {


                        Years = (100 / A.AssetConsumRatio);
                        A.AnnualConsumption = Math.Round((A.AssetCost / Years), 3);
                        A.ConsumptionPerDay = Math.Round(A.AnnualConsumption / DaysInYear, 3);

                        if (A.LastConsumptionDate < Obj.ToDate)
                        {
                            var DiffDays = (Obj.ToDate - A.LastConsumptionDate).TotalDays;
                            A.ValueofConsumption = Math.Round(DiffDays * A.ConsumptionPerDay, 3);
                            A.ConsumptionEndPeriod = (A.ValueofConsumption + A.CombinedConsum);
                            A.BookValue = (A.AssetCost - (A.ValueofConsumption + A.CombinedConsum));

                        }
                        else
                        {
                            A.ValueofConsumption = 0;

                        }

                    }

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("AssetInofVM");
                    table1 = FunctionUnit.LINQResultToDataTable(AllAsset);

                    ds.Tables.Add(table1);

                    var report = new CalculationOfConsumption();

                    string reportFilePath = Server.MapPath("/ReportLayout/CalculationOfConsumption.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    report.LbCoName.Text = CoInfo.ArabicName;
                    report.Kind.Text = Obj.FAssetTypeID.ToString();
                    report.date.Text = Obj.ToDate.ToString("dd/MM/yyyy");

                report.DataSource = ds;
                if (assetType != "0" && assetType.Trim() != "")
                    {
                        var AssetKind = _unitOfWork.AssetType.GetAssetTypeByID(UserInfo.fCompanyId, int.Parse(Obj.FAssetTypeID.ToString()));
                        report.Kind.Text = AssetKind.Name;


                    }
                else
                {
                    report.Kind.Text = Resources.Resource.All;
                }


                    report.CreateDocument();

                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    ViewBag.Error = ex.Message.ToString();
                    List<AssetInofVM> VMList = new List<AssetInofVM>();

                    CalculationOfConsumption report = new CalculationOfConsumption();

                    string reportFilePath = Server.MapPath("/ReportLayout/CalculationOfConsumption.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("AssetInofVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);



                report.DataMember = "AssetVM";
                report.DataSource = ds;
                 
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);

                }

            }


            public ActionResult GetVoucherDetailsPDF(string id, int id2, int id3, int id4)
            {
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                    AccountingDetailsReportVM Obj = new AccountingDetailsReportVM();
                    var ShowVoucherDetails = _unitOfWork.NativeSql.GetVoucherDetails(UserInfo.fCompanyId, id, id2, id3, id4);

                    AccountingDetailsReport report = new AccountingDetailsReport();

                    // cokin 
                    string reportFilePath = Server.MapPath("/ReportLayout/AccountingDetailsReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("AccountingDetailsReportVM");
                    table1 = FunctionUnit.LINQResultToDataTable(ShowVoucherDetails);

                    ds.Tables.Add(table1);


                    report.LbCoName.Text = CoInfo.ArabicName;
                    //report.LbFromDate.Text = Obj.FromCollectionDate.ToString("dd/MM/yyyy");
                    //report.LbTODate.Text = Obj.ToCollectionDate.ToString("dd/MM/yyyy");

                    report.DataSource = ds;
                    report.DataMember = "AccountingDetailsReportVM";




                    report.CreateDocument();




                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<AccountingDetailsReportVM> VMList = new List<AccountingDetailsReportVM>();

                    AccountingDetailsReport report = new AccountingDetailsReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/AccountingDetailsReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("AccountingDetailsReportVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "AccountingDetailsReportVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);

                }

            }



            public ActionResult GetServiceDetails(string id, int id2, int id3, int id4)
            {
                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                    var ShowVoucherDetails = _unitOfWork.NativeSql.GetServiceDetails(UserInfo.fCompanyId, id, id2, id3, id4);
                    AccountingServiceDetailReport report = new AccountingServiceDetailReport();

                    // cokin 
                    string reportFilePath = Server.MapPath("/ReportLayout/AccountingServiceDetailReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("AccountingServiceDetailReport");
                    table1 = FunctionUnit.LINQResultToDataTable(ShowVoucherDetails);

                    ds.Tables.Add(table1);


                    report.LbCoName.Text = CoInfo.ArabicName;
                    //report.LbFromDate.Text = Obj.FromCollectionDate.ToString("dd/MM/yyyy");
                    //report.LbTODate.Text = Obj.ToCollectionDate.ToString("dd/MM/yyyy");

                    report.DataSource = ds;
                    report.DataMember = "AccountingDetailsReportVM";




                    report.CreateDocument();




                    return View("ReportPDF", report);
                }
                catch (Exception ex)
                {
                    string err = ex.Message;

                    List<AccountingDetailsReportVM> VMList = new List<AccountingDetailsReportVM>();

                    AccountingServiceDetailReport report = new AccountingServiceDetailReport();

                    string reportFilePath = Server.MapPath("/ReportLayout/AccountingServiceDetailReport.repx");
                    report.LoadLayoutFromXml(reportFilePath);

                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("AccountingDetailsReportVM");
                    table1 = FunctionUnit.LINQResultToDataTable(VMList);

                    ds.Tables.Add(table1);




                    report.DataSource = ds;
                    report.DataMember = "AccountingDetailsReportVM";
                    // report.LbPrintTime.Text = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, FunctionUnit.Jordan_Time_Zone).ToString();

                    report.CreateDocument();

                    return View("ReportPDF", report);

                }

            }



            public ActionResult GetShowCustomerChequePDF(string id, string id2, string id3)
            {
                PaperFilterVM Obj = new PaperFilterVM();

                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                    var FromDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    var ToDate = DateTime.Parse(id3.Substring(0, 2) + "/" + id3.Substring(2, 2) + "/" + id3.Substring(4, 4));
                    Obj.FromDate = FromDate;
                    Obj.ToDate = ToDate;
                    Obj.FromAccAccount = id;
                    if (Obj.FromAccAccount == "0")
                    {
                        Obj.FromAccAccount = "";

                    }


                    var ShowPaperDetails = _unitOfWork.NativeSql.GetUnpaidChequesReceived(UserInfo.fCompanyId, FromDate, ToDate, id);
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaperFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(ShowPaperDetails);

                    ds.Tables.Add(table1);

                    var report = new ShowCustomerCheque();

                    string reportFilePath = Server.MapPath("/ReportLayout/ShowCustomerCheque.repx");


                    report.LoadLayoutFromXml(reportFilePath);
                    Obj.PaperAmount = ShowPaperDetails.Sum(m => (m.ChequeAmount)).ToString();



                    if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                    {
                        Obj.PaperAmount = "" + String.Format("{0:n2}", Obj.PaperAmount) + "";

                    }
                    else
                    {
                        Obj.PaperAmount = "" + String.Format("{0:n3}", Obj.PaperAmount) + "";
                    }



                    report.SumTotal.Text = Obj.PaperAmount;
                    report.Num.Text = ShowPaperDetails.Count().ToString();

                    AccountStatementSearchVM Obj2 = new AccountStatementSearchVM();

                    var AccountInfo = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.FromAccAccount);
                    if (AccountInfo != null)
                    {

                        Obj2.FromAccName = AccountInfo.ArabicName;
                    }


                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                    report.LbAccNo.Text = Obj.FromAccAccount;
                    report.LbAccName.Text = Obj2.FromAccName;


                    report.DataSource = ds;
                    report.DataMember = "PaperFilterVM";



                    report.CreateDocument();



                    return View("ReportPDF", report);

                }
                catch (Exception ex)
                {
                    ViewBag.Error = ex.Message.ToString();
                    string err = ex.Message;
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaperFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(new List<PaperFilterVM>());

                    ds.Tables.Add(table1);

                    var report = new ShowCustomerCheque();

                    string reportFilePath = Server.MapPath("/ReportLayout/ShowCustomerCheque.repx");


                    report.LoadLayoutFromXml(reportFilePath);



                    report.DataSource = ds;
                    report.DataMember = "PaperFilterVM";


                    report.CreateDocument();



                    return View("ReportPDF", report);

                }

            }


            public ActionResult GetShowSupplierChequePDF(string id, string id2, string id3)
            {
                PaperFilterVM Obj = new PaperFilterVM();

                try
                {
                    var userId = User.Identity.GetUserId();
                    var UserInfo = _unitOfWork.User.GetMyInfo(userId);
                    var CoInfo = _unitOfWork.Company.GetMyCompany(UserInfo.fCompanyId);
                    var FromDate = DateTime.Parse(id2.Substring(0, 2) + "/" + id2.Substring(2, 2) + "/" + id2.Substring(4, 4));
                    var ToDate = DateTime.Parse(id3.Substring(0, 2) + "/" + id3.Substring(2, 2) + "/" + id3.Substring(4, 4));
                    Obj.FromDate = FromDate;
                    Obj.ToDate = ToDate;
                    Obj.FromAccAccount = id;
                    if (Obj.FromAccAccount == "0")
                    {
                        Obj.FromAccAccount = "";

                    }
                    var ShowPaperDetails = _unitOfWork.NativeSql.GetUnpaidChequesPayment(UserInfo.fCompanyId, FromDate, ToDate, id);
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaperFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(ShowPaperDetails);

                    ds.Tables.Add(table1);

                    var report = new ShowSupplierCheque();

                    string reportFilePath = Server.MapPath("/ReportLayout/ShowSupplierCheque.repx");


                    report.LoadLayoutFromXml(reportFilePath);
                    Obj.PaperAmount = ShowPaperDetails.Sum(m => (m.ChequeAmount)).ToString();



                    if (CoInfo.TheDecimalPointForTheLocalCurrency == 2)
                    {
                        Obj.PaperAmount = "" + String.Format("{0:n2}", Obj.PaperAmount) + "";

                    }
                    else
                    {
                        Obj.PaperAmount = "" + String.Format("{0:n3}", Obj.PaperAmount) + "";
                    }



                    report.SumTotal.Text = Obj.PaperAmount;
                    report.Num.Text = ShowPaperDetails.Count().ToString();


                    AccountStatementSearchVM Obj2 = new AccountStatementSearchVM();

                    var AccountInfo = _unitOfWork.ChartOfAccount.GetAccountByID(UserInfo.fCompanyId, Obj.FromAccAccount);
                    if (AccountInfo != null)
                    {
                        Obj2.FromAccName = AccountInfo.ArabicName;
                    }


                    report.LbFromDate.Text = Obj.FromDate.ToString("dd/MM/yyyy");
                    report.LbTODate.Text = Obj.ToDate.ToString("dd/MM/yyyy"); ;

                    report.LbAccNo.Text = Obj.FromAccAccount;
                    report.LbAccName.Text = Obj2.FromAccName;



                    report.DataSource = ds;
                    report.DataMember = "PaperFilterVM";



                    report.CreateDocument();



                    return View("ReportPDF", report);

                }
                catch (Exception ex)
                {
                    ViewBag.Error = ex.Message.ToString();
                    string err = ex.Message;
                    DataSet ds = new DataSet();
                    DataTable table1 = new DataTable("PaperFilterVM");
                    table1 = FunctionUnit.LINQResultToDataTable(new List<PaperFilterVM>());

                    ds.Tables.Add(table1);

                    var report = new ShowSupplierCheque();

                    string reportFilePath = Server.MapPath("/ReportLayout/ShowSupplierCheque.repx");


                    report.LoadLayoutFromXml(reportFilePath);



                    report.DataSource = ds;
                    report.DataMember = "PaperFilterVM";


                    report.CreateDocument();



                    return View("ReportPDF", report);

                }

            }


        }
    }


