@model Acc.ViewModels.St_HeaderVM
@{
    ViewBag.Title = @Resources.Resource.Copy;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .panel-body {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-footer {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-title {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .dt-button {
        display: none !important;
    }

    #ItemsGrid_DXHeadersRow0 {
        font-family: Verdana, Geneva, Tahoma, sans-serif !important;
        font-size: 10pt;
    }

    .dxgvBatchEditNewItem_iOS {
        font-family: Verdana, Geneva, Tahoma, sans-serif !important;
        font-size: 10pt;
    }

    .dxgvControl_iOS {
        width: 100% !important;
    }

    #ItemsGrid_col0 {
        width: 55px;
    }

    .hideColumn {
        display: none !important;
    }

    .dxgvControl_iOS td.dxgvBatchEditModifiedCell_iOS {
        background: #007bf7 !important;
    }
</style>
<link href="~/Content/jquery-ui.css" rel="stylesheet" />
<script>
    var LastStatment = "";
    var SumDebit = 0;
    var SumCredit = 0;
    var preventEndEditOnLostFocus = false;
    var currentEditedValue;
    var SelectAccount;
    var lastVisibleIndex;
    var FocusedCellColumnIndex = 0;
    var FocusedCellRowIndex = 0;
    function GetSelectedSaleVoucherItemCode(data) {
        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemCode", data.ItemCode);
        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemName", data.ItemName);
        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemUnitName", data.ItemUnitName);
        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TaxRate", data.TaxRate);
        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "SimilarItemCode", data.ItemCode);
        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalBeforDiscount", data.SalePrice);
        var ItemCode = data.ItemCode;
        $.getJSON('@Url.Action("CheckItemOtherUnit", "St_ItemCard")', { id: ItemCode }, function (Data2) {
            if (Data2 != "") {
                var url = '/St_ReturnSaleVoucherLocal/St_ItemOtherUnit/' + data.ItemCode;
                $.get(url, function (data) {
                   $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })

            }
            else {

            }
        });
    }
    var SaleVoucherItem = [];
     $.getJSON('@Url.Action("GetAllSt_ItemCard", "MultiUse")', { id: 0 }, function (Data) {
         SaleVoucherItem = [];
         for (var i = 0, len = Data.length; i < len; i++) {
             var r = {
                 label: Data[i].ItemName, value: Data[i].ItemCode, stop: Data[i].StopItem, unit: Data[i].ItemUnitName, taxrate: Data[i].TaxRate, saleprice: Data[i].SalePrice
             };
             SaleVoucherItem.push(r);
         }
     });
    function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
        try {
            decimalCount = Math.abs(decimalCount);
            decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

            const negativeSign = amount < 0 ? "-" : "";

            let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
            let j = (i.length > 3) ? i.length % 3 : 0;

            return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
        } catch (e) {
            console.log(e)
        }
    };
    function validatedate(dateString) {
        var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
        if (dateString.match(dateformat)) {
            var operator = dateString.split('/');
            var datepart = [];
            if (operator.length > 1) {
                datepart = dateString.split('/');
            }
            var month = parseInt(datepart[1]);
            var day = parseInt(datepart[0]);
            var year = parseInt(datepart[2]);
            var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
            if (month == 1 || month > 2) {
                if (day > ListofDays[month - 1]) {
                    return false;
                }
            } else if (month == 2) {
                var leapYear = false;
                if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                    leapYear = true;
                }
                if ((leapYear == false) && (day >= 29)) {
                    return false;
                } else
                    if ((leapYear == true) && (day > 29)) {
                        return false;
                    }
            }
        }
        else {
            return false;
        }
        return true;
    }
    function AutoCompleteItems(s, e) {
        $(s.GetInputElement()).autocomplete({
          minLength: 0,
            source: SaleVoucherItem,
             select: function (event, ui) {
                 if (ui.item.stop == '0') {
                     s.SetValue(ui.item.value);
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemCode", data.ItemCode);
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemName", data.ItemName);
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemUnitName", data.ItemUnitName);
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "Quantity", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "Bonus", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalBeforDiscount", data.SalePrice);
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLineDiscountLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalAfterLineDiscount", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLocalAfterLineDiscount", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TaxRate", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalTaxAfterLineDiscountLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceAfterLineDiscountBeforDiscountAllLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalDiscountLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "CostPieceLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalTaxLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceTaxLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLocalBeforDiscount", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "LineDiscountPercentage", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalAfterLineDiscountBeforDiscountAllLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "DiscountPercentage", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalCostLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLineDiscountLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceTaxAfterLineDiscountLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceDiscountLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalAfterDiscount", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceTotalLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "SimilarItemCode", data.ItemCode);
                     ItemsGrid.batchEditApi.GetCellValue()
                 }
                 else {
                     bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheItemCardIsSuspended</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                     FocusedCellColumnIndexAlternativeItemCode = 1;
                     s.SetValue('');
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemCode", "");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemName", "");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemUnitName", "");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "Quantity", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "Bonus", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalBeforDiscount", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLineDiscountLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalAfterLineDiscount", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLocalAfterLineDiscount", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TaxRate", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalTaxAfterLineDiscountLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceAfterLineDiscountBeforDiscountAllLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalDiscountLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "CostPieceLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalTaxLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceTaxLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLocalBeforDiscount", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "LineDiscountPercentage", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalAfterLineDiscountBeforDiscountAllLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "DiscountPercentage", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalCostLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLineDiscountLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceTaxAfterLineDiscountLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceDiscountLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalAfterDiscount", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceTotalLocal", "0");
                     ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "SimilarItemCode", "");
                 }
             return false;
             },
             position:
             {
                 my: "left top",
                 at: "left bottom",
                 of: s.GetMainElement()
             }

        });
    }
    function ClearGrid(s, e)
    {
        ItemsGrid.PerformCallback('clear');
        setTimeout(function () {
            RecalccSum();
        }, 1000);
    }
    function RecalccSum() {
        var Quantity = 0;
        var Bonus = 0;
        var TaxRate = 0;
        var PricePieceLocalBeforDiscount = 0;
        var PricePieceLineDiscountLocal = 0;
        var LineDiscountPercentage = 0;
        var PricePieceLocalAfterLineDiscount = 0;
        var PricePieceTaxAfterLineDiscountLocal = 0;
        var PricePieceAfterLineDiscountBeforDiscountAllLocal = 0;
        var PricePieceDiscountLocal = 0;
        var PricePieceLocalAfterDiscount = 0;
        var PricePieceTaxLocal = 0;
        var PricePieceTotalLocal = 0;
        var CostPieceLocal = 0;
        var DiscountPercentage = 0;
        var TotalLineDiscountLocal = 0;
        var TotalLocalBeforDiscount = 0;
        var TotalLocalAfterLineDiscount = 0;
        var TotalTaxAfterLineDiscountLocal = 0;
        var TotalAfterLineDiscountBeforDiscountAllLocal = 0;
        var TotalDiscountLocal = 0;
        var TotalLocalAfterDiscount = 0;
        var TotalTaxLocal = 0;
        var TotalLocal = 0;
        var TotalCostLocal = 0;
        var NetTotalLocalBeforDiscount = 0;
        var NetTotalLineDiscountLocal = 0;
        var NetTotalLocalAfterLineDiscount = 0;
        var NetTotalTaxAfterLineDiscountLocal = 0;
        var NetTotalAfterLineDiscountBeforDiscountAllLocal = 0;
        var NetTotalDiscountLocal = 0;
        var NetTotalLocalAfterDiscount = 0;
        var NetTotalTaxLocal = 0;
        var NetTotalLocal = 0;
        var NetTotalLocalAfterLineDiscount1 = 0;
        var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
        var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;
        var CurrencyAmount = document.getElementById("ConversionFactor").value;
        var TaxType = document.getElementById("TaxType").value;
        var DiscountPercentage1 = document.getElementById("DiscountPercentage").value;
        NetTotalDiscountLocal = document.getElementById("NetTotalDiscountLocal").value;
        NetTotalLocalAfterLineDiscount1 = document.getElementById("NetTotalLocalAfterLineDiscount").value;
        var visibleRowIndices = ItemsGrid.batchEditApi.GetRowVisibleIndices();
        for (var i = 0; i < visibleRowIndices.length; i++) {

            PricePieceLocalBeforDiscount = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "PricePieceLocalBeforDiscount");
            PricePieceLineDiscountLocal = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "PricePieceLineDiscountLocal");
            PricePieceLocalAfterLineDiscount = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "PricePieceLocalAfterLineDiscount");
            PricePieceTaxAfterLineDiscountLocal = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "PricePieceTaxAfterLineDiscountLocal");
            PricePieceAfterLineDiscountBeforDiscountAllLocal = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "PricePieceAfterLineDiscountBeforDiscountAllLocal");
            PricePieceDiscountLocal = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "PricePieceDiscountLocal");
            PricePieceTaxLocal = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "PricePieceTaxLocal");
            PricePieceLocalAfterDiscount = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "PricePieceLocalAfterDiscount");
            PricePieceTotalLocal = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "PricePieceTotalLocal");
            CostPieceLocal = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "CostPieceLocal");

            LineDiscountPercentage = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "LineDiscountPercentage");
            DiscountPercentage = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "DiscountPercentage");

            TotalLocalBeforDiscount = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalLocalBeforDiscount");
            TotalLineDiscountLocal = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalLineDiscountLocal");
            TotalLocalAfterLineDiscount = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalLocalAfterLineDiscount");
            TotalTaxAfterLineDiscountLocal = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalTaxAfterLineDiscountLocal");
            TotalAfterLineDiscountBeforDiscountAllLocal = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalAfterLineDiscountBeforDiscountAllLocal");
            TotalDiscountLocal = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalDiscountLocal");
            TotalLocalAfterDiscount = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalLocalAfterDiscount");
            TotalTaxLocal = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalTaxLocal");
            TotalLocal = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalLocal");
            TotalCostLocal = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalCostLocal");

            Quantity = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Quantity");
            Bonus = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Bonus");
            TaxRate = ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TaxRate");

            TaxRate = TaxRate / 100;
            if (TaxType == 2 || TaxType == 3) {
                TaxRate = 0;
            }
            TotalLocalBeforDiscount = Quantity * PricePieceLocalBeforDiscount;
            if (TotalLineDiscountLocal > TotalLocalBeforDiscount) {
                TotalLineDiscountLocal = TotalLocalBeforDiscount;
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheDiscountValueIsGreaterThanTheActualValue</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            if (TotalLocalBeforDiscount > 0) {
                LineDiscountPercentage = (TotalLineDiscountLocal / TotalLocalBeforDiscount) * 100; //5
            }
            else {
                LineDiscountPercentage = 0;
            }

            if (Quantity > 0) {

                PricePieceLineDiscountLocal = TotalLineDiscountLocal / Quantity;
            }
            else {
                PricePieceLineDiscountLocal = 0;
            }
            PricePieceLocalAfterLineDiscount = PricePieceLocalBeforDiscount - PricePieceLineDiscountLocal;
            TotalLocalAfterLineDiscount = TotalLocalBeforDiscount - TotalLineDiscountLocal;
            if (TaxRate == 0) {
                PricePieceTaxAfterLineDiscountLocal = 0;
                TotalTaxAfterLineDiscountLocal = 0;
            }
            else {
                PricePieceTaxAfterLineDiscountLocal = PricePieceLocalAfterLineDiscount * TaxRate;
                TotalTaxAfterLineDiscountLocal = TotalLocalAfterLineDiscount * TaxRate;
            }
            PricePieceAfterLineDiscountBeforDiscountAllLocal = PricePieceTaxAfterLineDiscountLocal + PricePieceLocalAfterLineDiscount;
            TotalAfterLineDiscountBeforDiscountAllLocal = TotalTaxAfterLineDiscountLocal + TotalLocalAfterLineDiscount;
            if (DiscountPercentage1 > 0) {
                TotalDiscountLocal = (TotalLocalAfterLineDiscount * DiscountPercentage1) / 100;
                if (Quantity > 0) {
                    PricePieceDiscountLocal = TotalDiscountLocal / Quantity;
                }
                else {
                    PricePieceDiscountLocal = 0;
                }
            }
            else {
                TotalDiscountLocal = 0;
                PricePieceDiscountLocal = 0;
            }
            DiscountPercentage = DiscountPercentage1;
            PricePieceLocalAfterDiscount = PricePieceLocalAfterLineDiscount - PricePieceDiscountLocal;
            TotalLocalAfterDiscount = TotalLocalAfterLineDiscount - TotalDiscountLocal;
            if (TaxRate == 0) {
                PricePieceTaxLocal = 0;
                TotalTaxLocal = 0;
            }
            else {
                PricePieceTaxLocal = PricePieceLocalAfterDiscount * TaxRate;
                TotalTaxLocal = TotalLocalAfterDiscount * TaxRate;
            }


            PricePieceTotalLocal = PricePieceTaxLocal + PricePieceLocalAfterDiscount;
            TotalLocal = TotalTaxLocal + TotalLocalAfterDiscount;
            if ((Quantity + Bonus) > 0) {
                CostPieceLocal = TotalLocalAfterDiscount / (Quantity + Bonus)
            }
            else {
                CostPieceLocal = 0;
            }
            TotalCostLocal = CostPieceLocal * (Quantity + Bonus);

            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "LineDiscountPercentage", LineDiscountPercentage);
            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "PricePieceLineDiscountLocal", PricePieceLineDiscountLocal);
            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "PricePieceLocalAfterLineDiscount", PricePieceLocalAfterLineDiscount);
            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "PricePieceTaxAfterLineDiscountLocal", PricePieceTaxAfterLineDiscountLocal);
            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "PricePieceAfterLineDiscountBeforDiscountAllLocal", PricePieceAfterLineDiscountBeforDiscountAllLocal);
            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "PricePieceLocalAfterDiscount", PricePieceLocalAfterDiscount);
            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "PricePieceTaxLocal", PricePieceTaxLocal);
            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "PricePieceTotalLocal", PricePieceTotalLocal);
            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "CostPieceLocal", CostPieceLocal);
            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "PricePieceDiscountLocal", PricePieceDiscountLocal);

            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "TotalLineDiscountLocal", TotalLineDiscountLocal);
            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "TotalLocalBeforDiscount", TotalLocalBeforDiscount);
            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "TotalLocalAfterLineDiscount", TotalLocalAfterLineDiscount);
            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "TotalTaxAfterLineDiscountLocal", TotalTaxAfterLineDiscountLocal);
            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "TotalAfterLineDiscountBeforDiscountAllLocal", TotalAfterLineDiscountBeforDiscountAllLocal);
            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "TotalLocalAfterDiscount", TotalLocalAfterDiscount);
            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "TotalTaxLocal", TotalTaxLocal);
            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "TotalLocal", TotalLocal);
            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "TotalCostLocal", TotalCostLocal);
            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "TotalDiscountLocal", TotalDiscountLocal);
            ItemsGrid.batchEditApi.SetCellValue(visibleRowIndices[i], "DiscountPercentage", DiscountPercentage);

            NetTotalLocalBeforDiscount = NetTotalLocalBeforDiscount + TotalLocalBeforDiscount;
            NetTotalLineDiscountLocal = NetTotalLineDiscountLocal + TotalLineDiscountLocal;
            NetTotalLocalAfterLineDiscount = NetTotalLocalAfterLineDiscount + TotalLocalAfterLineDiscount;
            NetTotalTaxAfterLineDiscountLocal = NetTotalTaxAfterLineDiscountLocal + TotalTaxAfterLineDiscountLocal;
            NetTotalAfterLineDiscountBeforDiscountAllLocal = NetTotalAfterLineDiscountBeforDiscountAllLocal + TotalAfterLineDiscountBeforDiscountAllLocal;
            NetTotalDiscountLocal = NetTotalDiscountLocal + TotalDiscountLocal;
            NetTotalLocalAfterDiscount = NetTotalLocalAfterDiscount + TotalLocalAfterDiscount;
            NetTotalTaxLocal = NetTotalTaxLocal + TotalTaxLocal;
            NetTotalLocal = NetTotalLocal + TotalLocal;
        }
        document.getElementById("NetTotalLocalBeforDiscount").value = (NetTotalLocalBeforDiscount).toFixed(TheDecimalPointForTheLocalCurrency);
        document.getElementById("NetTotalLineDiscountLocal").value = (NetTotalLineDiscountLocal).toFixed(TheDecimalPointForTheLocalCurrency);
        document.getElementById("NetTotalLocalAfterLineDiscount").value = (NetTotalLocalAfterLineDiscount).toFixed(TheDecimalPointForTheLocalCurrency);
        document.getElementById("NetTotalTaxAfterLineDiscountLocal").value = (NetTotalTaxAfterLineDiscountLocal).toFixed(TheDecimalPointForTheLocalCurrency);
        document.getElementById("NetTotalAfterLineDiscountBeforDiscountAllLocal").value = (NetTotalAfterLineDiscountBeforDiscountAllLocal).toFixed(TheDecimalPointForTheLocalCurrency);
        document.getElementById("NetTotalLocalAfterDiscount").value = (NetTotalLocalAfterDiscount).toFixed(TheDecimalPointForTheLocalCurrency);
        document.getElementById("NetTotalTaxLocal").value = (NetTotalTaxLocal).toFixed(TheDecimalPointForTheLocalCurrency);
        document.getElementById("NetTotalLocal").value = (NetTotalLocal).toFixed(TheDecimalPointForTheLocalCurrency);

        document.getElementById("sNetTotalLocalAfterLineDiscount").value = formatMoney(NetTotalLocalAfterLineDiscount, TheDecimalPointForTheLocalCurrency);
        document.getElementById("sNetTotalLocalAfterDiscount").value = formatMoney(NetTotalLocalAfterDiscount, TheDecimalPointForTheLocalCurrency);
        document.getElementById("sNetTotalTaxLocal").value = formatMoney(NetTotalTaxLocal, TheDecimalPointForTheLocalCurrency);
        document.getElementById("sNetTotalLocal").value = formatMoney(NetTotalLocal, TheDecimalPointForTheLocalCurrency);

        var NetTotalDiscountLocal = document.getElementById("NetTotalDiscountLocal").value;
        var NetTotalLocalAfterLineDiscount = document.getElementById("NetTotalLocalAfterLineDiscount").value;
        var DiscountPercentage = 0;
        if (NetTotalLocalAfterLineDiscount > 0) {
            DiscountPercentage = (NetTotalDiscountLocal / NetTotalLocalAfterLineDiscount) * 100;
        }
        document.getElementById("DiscountPercentage").value = DiscountPercentage;
        document.getElementById("sDiscountPercentage").value = formatMoney(DiscountPercentage, TheDecimalPointForTheLocalCurrency);
        document.getElementById("sDiscountPercentageForeign").value = formatMoney(DiscountPercentage, TheDecimalPointForTheLocalCurrency);

        if (CurrencyAmount == 1) {
            document.getElementById("sNetTotalForeignAfterLineDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
            document.getElementById("NetTotalDiscountForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
            document.getElementById("sNetTotalForeignAfterDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
            document.getElementById("sNetTotalTaxForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
            document.getElementById("sNetTotalForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
            document.getElementById("NetTotalForeignBeforDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
            document.getElementById("NetTotalLineDiscountForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
            document.getElementById("NetTotalForeignAfterLineDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
            document.getElementById("NetTotalTaxAfterLineDiscounForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
            document.getElementById("NetTotalAfterLineDiscountBeforDiscountAllForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
            document.getElementById("NetTotalForeignAfterDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
            document.getElementById("NetTotalTaxForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
            document.getElementById("NetTotalForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
        }
        else {
            document.getElementById("sNetTotalForeignAfterLineDiscount").value = formatMoney((document.getElementById("NetTotalLocalAfterLineDiscount").value / CurrencyAmount), TheDecimalPointForTheForeignCurrency);
            document.getElementById("sNetTotalDiscountForeign").value = formatMoney((document.getElementById("NetTotalDiscountLocal").value / CurrencyAmount), TheDecimalPointForTheForeignCurrency);
            document.getElementById("NetTotalDiscountForeign").value = (document.getElementById("NetTotalDiscountLocal").value / CurrencyAmount).toFixed(TheDecimalPointForTheForeignCurrency);
            document.getElementById("sNetTotalForeignAfterDiscount").value = formatMoney((document.getElementById("NetTotalLocalAfterDiscount").value / CurrencyAmount), TheDecimalPointForTheForeignCurrency);
            document.getElementById("sNetTotalTaxForeign").value = formatMoney((document.getElementById("NetTotalTaxLocal").value / CurrencyAmount), TheDecimalPointForTheForeignCurrency);
            document.getElementById("sNetTotalForeign").value = formatMoney((document.getElementById("NetTotalLocal").value / CurrencyAmount), TheDecimalPointForTheForeignCurrency);
            document.getElementById("NetTotalForeignBeforDiscount").value = formatMoney((document.getElementById("NetTotalLocalBeforDiscount").value / CurrencyAmount), TheDecimalPointForTheForeignCurrency);
            document.getElementById("NetTotalLineDiscountForeign").value = formatMoney((document.getElementById("NetTotalLineDiscountLocal").value / CurrencyAmount), TheDecimalPointForTheForeignCurrency);
            document.getElementById("NetTotalForeignAfterLineDiscount").value = formatMoney((document.getElementById("NetTotalLocalAfterLineDiscount").value / CurrencyAmount), TheDecimalPointForTheForeignCurrency);
            document.getElementById("NetTotalTaxAfterLineDiscounForeign").value = formatMoney((document.getElementById("NetTotalTaxAfterLineDiscountLocal").value / CurrencyAmount), TheDecimalPointForTheForeignCurrency);
            document.getElementById("NetTotalAfterLineDiscountBeforDiscountAllForeign").value = formatMoney((document.getElementById("NetTotalAfterLineDiscountBeforDiscountAllLocal").value / CurrencyAmount), TheDecimalPointForTheForeignCurrency);
            document.getElementById("NetTotalForeignAfterDiscount").value = formatMoney((document.getElementById("NetTotalLocalAfterDiscount").value / CurrencyAmount), TheDecimalPointForTheForeignCurrency);
            document.getElementById("NetTotalTaxForeign").value = formatMoney((document.getElementById("NetTotalTaxLocal").value / CurrencyAmount), TheDecimalPointForTheForeignCurrency);
            document.getElementById("NetTotalForeign").value = formatMoney((document.getElementById("NetTotalLocal").value / CurrencyAmount), TheDecimalPointForTheForeignCurrency);
        }
    }
    function LoopGrid(s, e) {
        RecalccSum();
        var iError = 0;
        var TaxType = document.getElementById("TaxType").value;
        var dVoucherDate = document.getElementById("VoucherDate").value;
        var visibleRowIndices = ItemsGrid.batchEditApi.GetRowVisibleIndices();
        for (var i = 0; i < visibleRowIndices.length; i++) {
            if (ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ItemCode") == "" || ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ItemCode") == null) {
                iError = 1;
                break;
            }
            else if (ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ItemName") == "" || ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ItemName") == null) {
                iError = 1;
                break;
            }
            else if (ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Quantity") == "" || ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Quantity") == null
                || ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Quantity") == 0) {
                iError = 2;
                break;
            }
        }
        if (!validatedate(dVoucherDate) && dVoucherDate != null && dVoucherDate != '') {
            bootbox.alert({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                className: 'rubberBand animated',
                buttons: {
                    ok: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                        className: 'btn-primary'
                    }
                }
            });
        }
        else if (dVoucherDate != null && dVoucherDate != '') {
            var dd = parseInt(dVoucherDate.substring(0, 2));
            if (dd < 10) {
                dd = '0' + dd;
            }
            var mm = parseInt(dVoucherDate.substring(3, 5));
            if (mm < 10) {
                mm = '0' + mm;
            }
            var yyyy = parseInt(dVoucherDate.substring(6, 10));
            dVoucherDate = mm + '/' + dd + '/' + yyyy;
            $.getJSON('@Url.Action("CheckDateIsFreezeDate", "FreezeTransaction")', { id: dVoucherDate }, function (Data) {
                if (Data >= 1) {
                    bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThisDateIsFrozen</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                }
                else {
                    if (iError == 1) {
                        bootbox.alert({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillItemCode</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                ok: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                    className: 'btn-primary'
                                }
                            }
                        });
                    }
                    else if (iError == 2) {
                        bootbox.alert({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillQuantity</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                ok: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                    className: 'btn-primary'
                                }
                            }
                        });
                    }
                    else if ($("#AccountNumber").val() == '') {
                        bootbox.alert({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                ok: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                    className: 'btn-primary'
                                }
                            }
                        });
                    }
                    else if ($("#DebitAccountNumber").val() == '') {
                        bootbox.alert({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                ok: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                    className: 'btn-primary'
                                }
                            }
                        });
                    }
                    else if ($("#CreditAccountNumber").val() == '') {
                        bootbox.alert({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                ok: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                    className: 'btn-primary'
                                }
                            }
                        });
                    }
                    else if (TaxType == 1 && $("#TaxCostNumber").val() == '') {
                        bootbox.alert({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                ok: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                    className: 'btn-primary'
                                }
                            }
                        });
                    }
                    else if ($("#DebitCostNumber").val() == '') {
                        bootbox.alert({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                ok: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                    className: 'btn-primary'
                                }
                            }
                        });
                    }
                    else if ($("#CreditCostNumber").val() == '') {
                        bootbox.alert({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                ok: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                    className: 'btn-primary'
                                }
                            }
                        });
                    }
                    else if ($("#NetTotalLocal").val() == '' || $("#NetTotalLocal").val() == 0) {
                        bootbox.alert({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                ok: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                    className: 'btn-primary'
                                }
                            }
                        });
                    }
                    else {
                        bootbox.confirm({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                confirm: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                    className: 'btn-success'
                                },
                                cancel: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                    className: 'btn-danger'
                                }
                            },
                            callback: function (result) {
                                if (result) {
                                    var dialog = bootbox.dialog({
                                        title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                        message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Copying...</p>',
                                        closeButton: false
                                    });
                                    var visibleRowIndices = ItemsGrid.batchEditApi.GetRowVisibleIndices();
                                    var Itemslist = [];
                                    for (var i = 0; i < visibleRowIndices.length; i++) {
                                        var Items = {
                                            ItemCode: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ItemCode"),
                                            Quantity: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Quantity"),
                                            Bonus: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Bonus"),
                                            PricePieceTaxLocal: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "PricePieceTaxLocal"),
                                            PricePieceLocalBeforDiscount: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "PricePieceLocalBeforDiscount"),
                                            TotalLineDiscountLocal: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalLineDiscountLocal"),
                                            LineDiscountPercentage: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "LineDiscountPercentage"),
                                            PricePieceLocalAfterLineDiscount: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "PricePieceLocalAfterLineDiscount"),
                                            TotalLocalAfterLineDiscount: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalLocalAfterLineDiscount"),
                                            TaxRate: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TaxRate"),
                                            TotalTaxAfterLineDiscountLocal: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalTaxAfterLineDiscountLocal"),
                                            PricePieceAfterLineDiscountBeforDiscountAllLocal: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "PricePieceAfterLineDiscountBeforDiscountAllLocal"),
                                            TotalDiscountLocal: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalDiscountLocal"),
                                            TotalLocalAfterDiscount: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalLocalAfterDiscount"),
                                            CostPieceLocal: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "CostPieceLocal"),
                                            TotalTaxLocal: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalTaxLocal"),
                                            PricePieceTotalLocal: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "PricePieceTotalLocal"),
                                            TotalLocal: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalLocal"),
                                            TotalLocalBeforDiscount: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalLocalBeforDiscount"),
                                            TotalAfterLineDiscountBeforDiscountAllLocal: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalAfterLineDiscountBeforDiscountAllLocal"),
                                            DiscountPercentage: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "DiscountPercentage"),
                                            TotalCostLocal: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalCostLocal"),
                                            PricePieceLineDiscountLocal: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "PricePieceLineDiscountLocal"),
                                            PricePieceTaxAfterLineDiscountLocal: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "PricePieceTaxAfterLineDiscountLocal"),
                                            PricePieceDiscountLocal: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "PricePieceDiscountLocal"),
                                            PricePieceLocalAfterDiscount: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "PricePieceLocalAfterDiscount"),
                                            SimilarItemCode: ItemsGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "SimilarItemCode"),
                                            RowNumber: i
                                        };
                                        Itemslist.push(Items);

                                    }
                                    var WorkWithCostCenter = document.getElementById("WorkWithCostCenter").checked;
                                    var DebitCostNumber = "";
                                    var CreditCostNumber = "";
                                    var TaxCostNumber = "";
                                    if (WorkWithCostCenter) {
                                        DebitCostNumber = $("#DebitCostNumber").val();
                                        CreditCostNumber = $("#CreditCostNumber").val();
                                        TaxCostNumber = $("#TaxCostNumber").val();
                                    }
                                    var SaleID = "";
                                    if ($("#SaleID").val() == "") {
                                        SaleID = 0;
                                    }
                                    else {
                                        SaleID = $("#SaleID").val();
                                    }
                                    var dataToSave = {
                                        St_Transaction: Itemslist,
                                        StockCode: $("#StockCode").val(),
                                        TaxType: $("#TaxType").val(),
                                        VoucherCase: $("#VoucherCase").val(),
                                        VoucherDate: $("#VoucherDate").val(),
                                        AccountNumber: $("#AccountNumber").val(),
                                        DebitAccountNumber: $("#DebitAccountNumber").val(),
                                        CreditAccountNumber: $("#CreditAccountNumber").val(),
                                        TaxAccountNumber: $("#TaxAccountNumber").val(),
                                        OriginalVoucherNumber: $("#OriginalVoucherNumber").val(),
                                        DebitCostNumber: DebitCostNumber,
                                        CreditCostNumber: CreditCostNumber,
                                        TaxCostNumber: TaxCostNumber,
                                        VoucherCase: $("#VoucherCase").val(),
                                        TaxType: $("#TaxType").val(),
                                        VoucherDate: $("#VoucherDate").val(),
                                        Remark: $("#Remark").val(),
                                        Hint: $("#Hint").val(),
                                        SaleID: SaleID,
                                        NetTotalDiscountLocal: $("#NetTotalDiscountLocal").val(),
                                        DiscountPercentage: $("#DiscountPercentage").val(),
                                        NetTotalLocalBeforDiscount: $("#NetTotalLocalBeforDiscount").val(),
                                        NetTotalLineDiscountLocal: $("#NetTotalLineDiscountLocal").val(),
                                        NetTotalLocalAfterLineDiscount: $("#NetTotalLocalAfterLineDiscount").val(),
                                        NetTotalTaxAfterLineDiscountLocal: $("#NetTotalTaxAfterLineDiscountLocal").val(),
                                        NetTotalAfterLineDiscountBeforDiscountAllLocal: $("#NetTotalAfterLineDiscountBeforDiscountAllLocal").val(),
                                        NetTotalLocalAfterDiscount: $("#NetTotalLocalAfterDiscount").val(),
                                        NetTotalTaxLocal: $("#NetTotalTaxLocal").val(),
                                        NetTotalLocal: $("#NetTotalLocal").val(),
                                        CompanyTransactionKindNo: $("#CompanyTransactionKindNo").val(),
                                        TransactionKindNo: $("#TransactionKindNo").val(),
                                        CurrencyID: $("#CurrencyID").val(),
                                        ConversionFactor: $("#ConversionFactor").val(),
                                        CompanyYear: $("#CompanyYear").val()
                                    }
                                    $.ajax({
                                        type: "POST",
                                        url: "/St_ReturnSaleVoucherLocal/Save",
                                        data: JSON.stringify(dataToSave),
                                        contentType: 'application/json',
                                        success: function (data) {
                                            dialog.modal('hide');
                                            if (data.Code == 0) {
                                                toastr.error(data.Msg);
                                            }
                                            else if (data.Code == 1) {
                                                $('#modal-container').modal('hide');
                                                toastr.success(data.Msg);
                                        bootbox.confirm({
                                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.DoYouWantToUploadAttachments</h6>',
                                            className: 'rubberBand animated',
                                            buttons: {
                                                confirm: {
                                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                                    className: 'btn-success'
                                                },
                                                cancel: {
                                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                                    className: 'btn-danger'
                                                }
                                            },
                                            callback: function (result) {
                                                if (result) {
                                                    window.open('/St_ReturnPurchaseVoucherLocal/ShowAttach/' + data.Year + '/' + data.VoucherNumber + '/' + data.CompanyTransactionKindNo + '/' + data.TransactionKindNo, '_blank');
                                                    bootbox.confirm({
                                                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.DoYouWantToPrint</h6>',
                                                        className: 'rubberBand animated',
                                                        buttons: {
                                                            confirm: {
                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                                                className: 'btn-success'
                                                            },
                                                            cancel: {
                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                                                className: 'btn-danger'
                                                            }
                                                        },
                                                        callback: function (result) {
                                                            if (result) {
                                                                window.open('/St_PDFReport/St_ReturnSaleVoucherDetailPDF/' + data.VoucherNumber + '/' + data.CompanyTransactionKindNo + '/' + data.TransactionKindNo + '/' + data.Year + '/' + data.StockCode, '_blank');
                                                                window.location = "/St_ReturnSaleVoucherLocal/Index";

                                                            }
                                                            else {

                                                                window.location = "/St_ReturnSaleVoucherLocal/Index";

                                                            }
                                                        }
                                                    });

                                                }
                                                else {

                                                    bootbox.confirm({
                                                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.DoYouWantToPrint</h6>',
                                                        className: 'rubberBand animated',
                                                        buttons: {
                                                            confirm: {
                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                                                className: 'btn-success'
                                                            },
                                                            cancel: {
                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                                                className: 'btn-danger'
                                                            }
                                                        },
                                                        callback: function (result) {
                                                            if (result) {
                                                                window.open('/St_PDFReport/St_ReturnSaleVoucherDetailPDF/' + data.VoucherNumber + '/' + data.CompanyTransactionKindNo + '/' + data.TransactionKindNo + '/' + data.Year + '/' + data.StockCode, '_blank');
                                                                window.location = "/St_ReturnSaleVoucherLocal/Index";

                                                            }
                                                            else {
                                                                window.location = "/St_ReturnSaleVoucherLocal/Index";

                                                            }
                                                        }
                                                    });

                                                }

                                            }
                                        });
                                            }
                                        },
                                        error: function (data) {
                                            dialog.modal('hide');
                                            toastr.error(data);
                                        }
                                    });
                                }
                            }
                        });
                    }
                };
            });
        }
    }
    function OnInit(s, e) {
        ASPxClientUtils.AttachEventToElement(
            s.GetMainElement(),
            "keydown",
            function (evt) {
                if (evt.ctrlKey && FocusedCellColumnIndex == 1) {
                    var dialog = bootbox.dialog({
                        title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                        message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                        closeButton: false
                    });
                    var url = '/MultiUse/SearchSt_ItemCard/SaleVoucherItemCode';
                    $.get(url, function (data) {
                        $('#modal-container').html(data);
                        $('#modal-container').modal('show');
                        dialog.modal('hide');
                    })
                }
                switch (evt.keyCode) {
                    case 13:
                        if (FocusedCellColumnIndex == 8) {
                            s.AddNewRow();
                        }
                        break;
                }
            });
    };
    function Grid_BatchEditEndEditing(s, e) {
        var productNameColumn = s.GetColumnByField("ItemCode");
        if (!e.rowValues.hasOwnProperty(productNameColumn.index))
            return;
        if (FocusedCellColumnIndex == 1) {
            var ItemCodeIndex = s.GetColumnByField("ItemCode").index;
            var ItemCode = e.rowValues[ItemCodeIndex].value;
            if (!ItemCode) {
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemCode", "");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemName", "");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemUnitName", "");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "Quantity", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "Bonus", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalBeforDiscount", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLineDiscountLocal", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalAfterLineDiscount", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLocalAfterLineDiscount", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TaxRate", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalTaxAfterLineDiscountLocal", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceAfterLineDiscountBeforDiscountAllLocal", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalDiscountLocal", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "CostPieceLocal", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalTaxLocal", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceTaxLocal", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLocal", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLocalBeforDiscount", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "LineDiscountPercentage", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalAfterLineDiscountBeforDiscountAllLocal", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "DiscountPercentage", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalCostLocal", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLineDiscountLocal", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceTaxAfterLineDiscountLocal", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceDiscountLocal", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalAfterDiscount", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceTotalLocal", "0");
                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "SimilarItemCode", "");
            }
            else {
                if (ItemCode != null && ItemCode != '') {
                    $.getJSON('@Url.Action("CheckItemCode", "St_ItemCard")', { id: ItemCode }, function (Data) {
                        if (Data == "") {
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemCode", "");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemName", "");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemUnitName", "");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "Quantity", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "Bonus", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalBeforDiscount", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLineDiscountLocal", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalAfterLineDiscount", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLocalAfterLineDiscount", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TaxRate", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalTaxAfterLineDiscountLocal", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceAfterLineDiscountBeforDiscountAllLocal", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalDiscountLocal", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "CostPieceLocal", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalTaxLocal", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceTaxLocal", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLocal", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLocalBeforDiscount", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "LineDiscountPercentage", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalAfterLineDiscountBeforDiscountAllLocal", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "DiscountPercentage", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalCostLocal", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLineDiscountLocal", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceTaxAfterLineDiscountLocal", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceDiscountLocal", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalAfterDiscount", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceTotalLocal", "0");
                            ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "SimilarItemCode", "");
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheItemCardDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            FocusedCellColumnIndex = 1;
                        }
                        else {
                            if (Data.StopItem) {
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemCode", "");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemName", "");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemUnitName", "");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "Quantity", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "Bonus", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalBeforDiscount", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLineDiscountLocal", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalAfterLineDiscount", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLocalAfterLineDiscount", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TaxRate", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalTaxAfterLineDiscountLocal", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceAfterLineDiscountBeforDiscountAllLocal", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalDiscountLocal", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "CostPieceLocal", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalTaxLocal", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceTaxLocal", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLocal", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLocalBeforDiscount", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "LineDiscountPercentage", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalAfterLineDiscountBeforDiscountAllLocal", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "DiscountPercentage", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalCostLocal", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLineDiscountLocal", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceTaxAfterLineDiscountLocal", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceDiscountLocal", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalAfterDiscount", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceTotalLocal", "0");
                                ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "SimilarItemCode", "");
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheItemCardIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                FocusedCellColumnIndex = 1;
                            }
                            else {
                                $.getJSON('@Url.Action("CheckItemOtherUnit", "St_ItemCard")', { id: ItemCode }, function (Data2) {
                                    if (Data2 != "") {
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemCode", Data.ItemCode);
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemName", Data.ItemName);
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemUnitName", Data.ItemUnitName);
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TaxRate", Data.TaxRate);
                                        var url = '/St_ReturnSaleVoucherLocal/St_ItemOtherUnit/' + Data.ItemCode;
                                        $.get(url, function (data) {
                                            $('#modal-container').html(data);
                                            $('#modal-container').modal('show');
                                            dialog.modal('hide');
                                        })

                                    }
                                    else {
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemCode", Data.ItemCode);
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemName", Data.ItemName);
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "ItemUnitName", Data.ItemUnitName);
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TaxRate", Data.TaxRate);
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "Quantity", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "Bonus", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalBeforDiscount", Data.SalePrice);
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLineDiscountLocal", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalAfterLineDiscount", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLocalAfterLineDiscount", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalTaxAfterLineDiscountLocal", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceAfterLineDiscountBeforDiscountAllLocal", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalDiscountLocal", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "CostPieceLocal", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalTaxLocal", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceTaxLocal", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLocal", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalLocalBeforDiscount", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "LineDiscountPercentage", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalAfterLineDiscountBeforDiscountAllLocal", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "DiscountPercentage", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "TotalCostLocal", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLineDiscountLocal", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceTaxAfterLineDiscountLocal", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceDiscountLocal", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalAfterDiscount", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceTotalLocal", "0");
                                        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "SimilarItemCode", ItemCode);
                                    }
                                });
                            }
                        }
                    });
                }
            }
        }
        FocusedCellColumnIndex = 1;
        FocusedCellRowIndex = 1;
    }
    function Grid_BatchEditStartEditing(s, e) {
        FocusedCellColumnIndex = e.focusedColumn.index;
        FocusedCellRowIndex = e.visibleIndex;
        var productNameColumn = s.GetColumnByField("ItemCode");
        if (!e.rowValues.hasOwnProperty(productNameColumn.index))
            return;
        lastVisibleIndex = e.visibleIndex;
        currentEditedValue = s.GetRowKey(e.visibleIndex);
        currentKey = s.GetRowKey(e.visibleIndex);
        RecalccSum();
    }
    function OnBeginCallback(s, e) {
        e.customArgs["Reference"] = $("#Reference").val();
    }
    function OnEndCallback(s, e) {
        if (s.cpSuccessFlag) {
            alert("All changes were saved");
            window.location = "@Url.Action("Success","Test1")";
        }
    }
    function OnClickPostData(s, e) {
        if (ItemsGrid.batchEditApi.HasChanges())
            ItemsGrid.UpdateEdit();
        else
            ItemsGrid.PerformCallback();
    }
    function Grid_DeleteRowEvent(s, e) {
        setTimeout(function () {
            RecalccSum();
        }, 1000);
    }
    function GetSelectedAccount(data) {
        if (data.AccountNumber != null && data.AccountNumber != '') {
            document.getElementById("AccountNumber").value = data.AccountNumber;
            document.getElementById("AccountName").value = data.AccountName;
            var SelectedValue = $("#AccountNumber").val();
            if (SelectedValue != null && SelectedValue != '') {
                $.getJSON('@Url.Action("GetSaleManID", "ChartOfAccount")', { id: SelectedValue }, function (Data) {
                    if (Data == 0) {
                        document.getElementById("SaleID").selectedIndex = "0";
                    }
                    else {
                        document.getElementById("SaleID").value = Data;
                    }
                });
            }
            else {
                document.getElementById("SaleID").selectedIndex = "0";
            }
        }
        else {
            document.getElementById("AccountNumber").value = '';
            document.getElementById("AccountName").value = '';
            document.getElementById("SaleID").selectedIndex = "0";
        }
        var VoucherCase = document.getElementById("VoucherCase").value;
        if (VoucherCase == 2) {
            document.getElementById("CreditAccountNumber").value = document.getElementById("AccountNumber").value;
            document.getElementById("CreditAccountName").value = document.getElementById("AccountName").value;
        }
    }
    function GetSelectedDebitCostAccNo(data) {
        if (data.CostNumber != null && data.CostNumber != '') {
            document.getElementById("DebitCostNumber").value = data.CostNumber;
            document.getElementById("DebitCostName").value = data.CostName;
        }
        else {
            document.getElementById("DebitCostNumber").value = '';
            document.getElementById("DebitCostName").value = '';
        }
    }
    function GetSelectedCreditAccNo(data) {
        if (data.AccountNumber != null && data.AccountNumber != '') {
            document.getElementById("CreditAccountNumber").value = data.AccountNumber;
            document.getElementById("CreditAccountName").value = data.AccountName;
        }
        else {
            document.getElementById("CreditAccountNumber").value = '';
            document.getElementById("CreditAccountName").value = '';
        }
    }
    function GetSelectedCreditCostAccNo(data) {
        if (data.CostNumber != null && data.CostNumber != '') {
            document.getElementById("CreditCostNumber").value = data.CostNumber;
            document.getElementById("CreditCostName").value = data.CostName;
        }
        else {
            document.getElementById("CreditCostNumber").value = '';
            document.getElementById("CreditCostName").value = '';
        }
    }
    function GetSelectedTaxCostAccNo(data) {
        if (data.CostNumber != null && data.CostNumber != '') {
            document.getElementById("TaxCostNumber").value = data.CostNumber;
            document.getElementById("TaxCostName").value = data.CostName;
        }
        else {
            document.getElementById("TaxCostNumber").value = '';
            document.getElementById("TaxCostName").value = '';
        }
    }
    var AccNumber = [];
    $.getJSON('@Url.Action("GetAcountAcc", "MultiUse")', { id: 0 }, function (Data) {
        AccNumber = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].AccountName, value: Data[i].AccountNumber, stop: Data[i].StoppedAccount};
                AccNumber.push(r);
            }
    });
    var CostNumber = [];
    $.getJSON('@Url.Action("GetCostCenter", "MultiUse")', { id: 0 }, function (Data) {
        CostNumber = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].CostName, value: Data[i].CostNumber, stop: Data[i].StoppedCost };
                CostNumber.push(r);
            }
    });
    $(function () {
        $("#AccountNumber").autocomplete({
            source: AccNumber,
            select: function (event, ui) {
                document.getElementById("AccountNumber").value = ui.item.value;
                document.getElementById("AccountName").value = ui.item.label;
            }
        });
        var VoucherCase = document.getElementById("VoucherCase").value;
        if (VoucherCase == 2) {
            document.getElementById("CreditAccountNumber").value = document.getElementById("AccountNumber").value;
            document.getElementById("CreditAccountName").value = document.getElementById("AccountName").value;
        }
    });
    $(function () {
        $("#CreditAccountNumber").autocomplete({
            source: AccNumber,
            select: function (event, ui) {
                document.getElementById("CreditAccountNumber").value = ui.item.value;
                document.getElementById("CreditAccountName").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#DebitCostNumber").autocomplete({
            source: CostNumber,
            select: function (event, ui) {
                document.getElementById("DebitCostNumber").value = ui.item.value;
                document.getElementById("DebitCostName").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#CreditCostNumber").autocomplete({
            source: CostNumber,
            select: function (event, ui) {
                document.getElementById("CreditCostNumber").value = ui.item.value;
                document.getElementById("CreditCostName").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#TaxCostNumber").autocomplete({
            source: CostNumber,
            select: function (event, ui) {
                document.getElementById("TaxCostNumber").value = ui.item.value;
                document.getElementById("TaxCostName").value = ui.item.label;
            }
        });
    });
    function GetSelectedItemUnit(data) {
        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "Quantity", data.OtherUnitQuantityTotal);
        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "PricePieceLocalBeforDiscount", data.OtherUnitPrice);
        ItemsGrid.batchEditApi.SetCellValue(lastVisibleIndex, "SimilarItemCode", data.OtherUnitBarcode);
        RecalccSum();
    }
</script>


@using (Html.BeginForm("Copy", "St_ReturnSaleVoucherLocal", FormMethod.Post, new { id = "myForm" }))
{
    <div style="padding-top: 20px;">
        <div class="panel card-view">
            <div class="panel-heading" style="background-color: #34495E">
                <div class="pull-left">
                    <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.Copy - @Resources.Resource.LocalReturnSaleVoucher</h6>
                </div>
                <div class="clearfix"></div>
            </div>
            <div class="panel-body">
                <div class="col-lg-12">
                    <div class="col-lg-3">
                        @Html.Label(Resources.Resource.Warehouses)<span style="color:red">*</span>
                        <div class="form-group">
                            @if (Resources.Resource.CurLang == "Arb")
                            {
                                @Html.DropDownListFor(m => m.StockCode, new SelectList(Model.St_Warehouse, "StockCode", "ArabicName"), new { @id = "StockCode", @class = "form-control input-sml" })

                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.StockCode, new SelectList(Model.St_Warehouse, "StockCode", "EnglishName"), new { @id = "StockCode", @class = "form-control input-sml" })
                            }
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.VoucherCase)
                            @Html.DropDownListFor(m => m.VoucherCase, new List<SelectListItem>{
                           new SelectListItem{ Text=Resources.Resource.Cash, Value = "1",Selected=true },
                           new SelectListItem{ Text=Resources.Resource.VoucherCredit, Value = "2",Selected=false },
                       }, new { @id = "VoucherCase", @class = "form-control input-sml" })
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.TaxType)
                            @Html.DropDownListFor(m => m.TaxType, new List<SelectListItem>{
                           new SelectListItem{ Text=Resources.Resource.Taxable, Value = "1",Selected=true },
                           new SelectListItem{ Text=Resources.Resource. TaxableByZero, Value = "2",Selected=false },
                           new SelectListItem{ Text=Resources.Resource. TaxExempt, Value = "3",Selected=false }
                       }, new { @id = "TaxType", @class = "form-control input-sml" })
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.OriginalVoucher)
                            @Html.TextBoxFor(m => m.OriginalVoucherNumber, new { @id = "OriginalVoucherNumber", @class = "form-control input-sml" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-12">
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.BillID)
                            @Html.TextBoxFor(m => m.VoucherNumber, new { @id = "VoucherNumber", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.BillDate)
                            @Html.TextBoxFor(model => model.VoucherDate, new { @id = "VoucherDate", @class = "form-control input-sml", @Value = Model.VoucherDate.ToString("dd/MM/yyyy"), data_val = "false" })
                            @Html.ValidationMessageFor(m => m.VoucherDate)
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.CurrencyID)
                            @if (Resources.Resource.CurLang == "Arb")
                            {
                                @Html.DropDownListFor(m => m.CurrencyID, new SelectList(Model.Currency, "CurrencyID", "ArabicName"), new { @id = "CurrencyID", @class = "form-control input-sml" })
                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.CurrencyID, new SelectList(Model.Currency, "CurrencyID", "EnglishName"), new { @id = "CurrencyID", @class = "form-control input-sml" })
                            }
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.ConversionFactor)
                            @Html.ValidationMessageFor(m => m.ConversionFactor)
                            @Html.TextBoxFor(m => m.ConversionFactor, new { @id = "ConversionFactor", @class = "form-control input-sml", @readonly = "@readonly" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-12">
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.CustomerAccountNumber) <span style="color:red">*</span>
                            <div class="form-group  input-group">
                                @Html.TextBoxFor(m => m.AccountNumber, new { @id = "AccountNumber", @class = "form-control input-sml" })
                                <span class="input-group-btn">
                                    <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnAccountNumber">
                                        <i class="fa fa-search"></i>
                                    </button>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.AccountName)
                            <div class="form-group input-group">
                                @Html.TextBoxFor(m => m.AccountName, new { @id = "AccountName", @class = "form-control input-sml", @readonly = "readonly" })
                                <span class="input-group-btn">
                                    <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearAccountNumber">
                                        <i class="fa fa-minus-square"></i>
                                    </button>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.SaleManID)
                            <div class="form-group  input-group">
                                @Html.DropDownListFor(m => m.SaleID, new SelectList(Model.SaleMan, "SalesID", "SalesName"), Resources.Resource.SalesMan, new { @id = "SaleID", @class = "form-control input-sml" })
                                <span class="input-group-btn">
                                    <a class="btn btn-primary btn-icon-anim btn-square js-Pop" id="AddNew" href="/Sale/AddNew">
                                        <i class="fa fa-plus" style="margin-top : 12px"></i>
                                    </a>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-12">
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.CreditAccountNumber) <span style="color:red">*</span>
                            <div class="form-group input-group">
                                @Html.TextBoxFor(m => m.CreditAccountNumber, new { @id = "CreditAccountNumber", @class = "form-control input-sml" })
                                <span class="input-group-btn">
                                    <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnCreditAccountNumber">
                                        <i class="fa fa-search"></i>
                                    </button>
                                </span>
                                @Html.ValidationMessageFor(m => m.CreditAccountNumber)
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.AccountName)
                            <div class="form-group input-group">
                                @Html.TextBoxFor(m => m.CreditAccountName, new { @id = "CreditAccountName", @class = "form-control input-sml", @readonly = "readonly" })
                                <span class="input-group-btn">
                                    <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearCreditAccountNumber">
                                        <i class="fa fa-minus-square"></i>
                                    </button>
                                </span>
                            </div>
                        </div>
                    </div>
                    @if (Model.WorkWithCostCenter)
                    {
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.Label(Resources.Resource.CreditCostCenter) <span style="color:red">*</span>
                                <div class="form-group input-group">
                                    @Html.TextBoxFor(m => m.CreditCostNumber, new { @id = "CreditCostNumber", @class = "form-control input-sml" })
                                    <span class="input-group-btn">
                                        <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnCreditCostCenter">
                                            <i class="fa fa-search"></i>
                                        </button>
                                    </span>
                                    @Html.ValidationMessageFor(m => m.CreditCostNumber)
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.Label(Resources.Resource.CostCenterName)
                                <div class="form-group input-group">
                                    @Html.TextBoxFor(m => m.CreditCostName, new { @id = "CreditCostName", @class = "form-control input-sml", @readonly = "readonly" })
                                    <span class="input-group-btn">
                                        <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearCreditCostCenter">
                                            <i class="fa fa-minus-square"></i>
                                        </button>
                                    </span>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="col-lg-12">
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.DebitAccountNumber) <span style="color:red">*</span>
                            <div class="form-group">
                                @Html.TextBoxFor(m => m.DebitAccountNumber, new { @id = "DebitAccountNumber", @class = "form-control input-sml", @readonly = "readonly" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.AccountName)
                            <div class="form-group">
                                @Html.TextBoxFor(m => m.DebitAccountName, new { @id = "DebitAccountName", @class = "form-control input-sml", @readonly = "readonly" })
                            </div>
                        </div>
                    </div>
                    @if (Model.WorkWithCostCenter)
                    {
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.Label(Resources.Resource.DebitCostNumber) <span style="color:red">*</span>
                                <div class="form-group input-group">
                                    @Html.TextBoxFor(m => m.DebitCostNumber, new { @id = "DebitCostNumber", @class = "form-control input-sml" })
                                    <span class="input-group-btn">
                                        <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnDebitCostCenter">
                                            <i class="fa fa-search"></i>
                                        </button>
                                    </span>
                                    @Html.ValidationMessageFor(m => m.DebitCostNumber)
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.Label(Resources.Resource.CostCenterName)
                                <div class="form-group input-group">
                                    @Html.TextBoxFor(m => m.DebitCostName, new { @id = "DebitCostName", @class = "form-control input-sml", @readonly = "readonly" })
                                    <span class="input-group-btn">
                                        <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearDebitCostCenter">
                                            <i class="fa fa-minus-square"></i>
                                        </button>
                                    </span>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="col-lg-12">
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.TaxAccountNumber)
                            @Html.TextBoxFor(m => m.TaxAccountNumber, new { @id = "TaxAccountNumber", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.AccountName)
                            @Html.TextBoxFor(m => m.TaxAccountName, new { @id = "TaxAccountName", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                    @if (Model.WorkWithCostCenter)
                    {
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.Label(Resources.Resource.TaxCostCenter)
                                <div class="form-group input-group">
                                    @Html.TextBoxFor(m => m.TaxCostNumber, new { @id = "TaxCostNumber", @class = "form-control input-sml" })
                                    <span class="input-group-btn">
                                        <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnTaxCostCenter">
                                            <i class="fa fa-search"></i>
                                        </button>
                                    </span>
                                    @Html.ValidationMessageFor(m => m.TaxCostNumber)
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.Label(Resources.Resource.CostCenterName)
                                <div class="form-group input-group">
                                    @Html.TextBoxFor(m => m.TaxCostName, new { @id = "TaxCostName", @class = "form-control input-sml", @readonly = "readonly" })
                                    <span class="input-group-btn">
                                        <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearTaxCostCenter">
                                            <i class="fa fa-minus-square"></i>
                                        </button>
                                    </span>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="col-lg-12" style="padding-top:20px;">
                    <div class="col-lg-12">
                        @Html.Action("GridViewItems", new { id = Model.VoucherNumber, id2 = Model.CompanyTransactionKindNo, id3 = Model.TransactionKindNo, id4 = Model.CompanyYear, id5 = Model.StockCode })
                    </div>
                </div>
                <div class="col-lg-12" style="margin-top : 5px">
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.Total)
                            @Html.TextBoxFor(m => m.sNetTotalLocalAfterLineDiscount, new { @id = "sNetTotalLocalAfterLineDiscount", @class = "form-control input-sml", @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.NetTotalLocalAfterLineDiscount)
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.Discount)
                            @Html.TextBoxFor(m => m.NetTotalDiscountLocal, new { @id = "NetTotalDiscountLocal", @class = "form-control input-sml", @type = "number", @min = 0 })
                            @Html.ValidationMessageFor(m => m.NetTotalDiscountLocal)
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.DiscountPercentage)
                            @Html.TextBoxFor(m => m.sDiscountPercentage, new { @id = "sDiscountPercentage", @class = "form-control input-sml", @readonly = "readonly" })@*3*@
                            @Html.ValidationMessageFor(m => m.DiscountPercentage)
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.TotalAfterDiscount)
                            @Html.TextBoxFor(m => m.sNetTotalLocalAfterDiscount, new { @id = "sNetTotalLocalAfterDiscount", @class = "form-control input-sml", @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.NetTotalLocalAfterDiscount)
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.Tax)
                            @Html.TextBoxFor(m => m.sNetTotalTaxLocal, new { @id = "sNetTotalTaxLocal", @class = "form-control input-sml", @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.NetTotalTaxLocal)
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.NetTotal)
                            @Html.TextBoxFor(m => m.sNetTotalLocal, new { @id = "sNetTotalLocal", @class = "form-control input-sml", @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.NetTotalLocal)
                        </div>
                    </div>
                </div>
                <div class="col-lg-12" style="margin-top : 5px">
                    <div class="col-lg-2" id="Foreign1" style="display:none;">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.ForeignTotal)
                            @Html.TextBoxFor(m => m.sNetTotalForeignAfterLineDiscount, new { @id = "sNetTotalForeignAfterLineDiscount", @class = "form-control input-sml", @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.NetTotalForeignAfterLineDiscount)
                        </div>
                    </div>
                    <div class="col-lg-2" id="Foreign2" style="display:none;">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.DiscountForeign)
                            @Html.TextBoxFor(m => m.sNetTotalDiscountForeign, new { @id = "sNetTotalDiscountForeign", @class = "form-control input-sml", @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.NetTotalDiscountForeign)
                        </div>
                    </div>
                    <div class="col-lg-2" id="Foreign3" style="display:none;">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.DiscountPercentage)
                            @Html.TextBoxFor(m => m.sDiscountPercentageForeign, new { @id = "sDiscountPercentageForeign", @class = "form-control input-sml", @readonly = "readonly" })@*3*@
                        </div>
                    </div>
                    <div class="col-lg-2" id="Foreign4" style="display:none;">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.TotalAfterDiscountForeign)
                            @Html.TextBoxFor(m => m.sNetTotalForeignAfterDiscount, new { @id = "sNetTotalForeignAfterDiscount", @class = "form-control input-sml", @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.NetTotalForeignAfterDiscount)
                        </div>
                    </div>
                    <div class="col-lg-2" id="Foreign5" style="display:none;">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.TaxForeign)
                            @Html.TextBoxFor(m => m.sNetTotalTaxForeign, new { @id = "sNetTotalTaxForeign", @class = "form-control input-sml", @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.NetTotalTaxForeign)
                        </div>
                    </div>
                    <div class="col-lg-2" id="Foreign6" style="display:none;">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.NetTotalForeignAmount)
                            @Html.TextBoxFor(m => m.sNetTotalForeign, new { @id = "sNetTotalForeign", @class = "form-control input-sml", @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.NetTotalForeign)
                        </div>
                    </div>
                </div>
                <div class="col-lg-12">
                    <div class="col-lg-6">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.Note)
                            @Html.TextBoxFor(m => m.Remark, new { @id = "Remark", @class = "form-control input-sml" })
                            @Html.ValidationMessageFor(m => m.Remark)
                        </div>
                    </div>
                    <div class="col-lg-6">
                        @Html.Label(Resources.Resource.Hints)
                        @Html.TextBoxFor(m => m.Hint, new { @id = "Hint", @class = "form-control input-sml" })
                        @Html.ValidationMessageFor(m => m.Hint)
                    </div>
                </div>
            </div>
            <div class="panel-footer">
                @Html.DevExpress().Button(settings =>
           {
               settings.Name = "buttonCopy";
               settings.Text = Resources.Resource.Copy;
               settings.UseSubmitBehavior = false;
               settings.ClientVisible = false;
               settings.ClientSideEvents.Click = "LoopGrid";
           }).GetHtml()
                @Html.DevExpress().Button(settings =>
               {
                   settings.Name = "btnRecalculat";
                   settings.UseSubmitBehavior = false;
                   settings.ClientVisible = false;
                   settings.ClientSideEvents.Click = "RecalccSum";
               }).GetHtml()
                <button type="button" class="btn btn-primary btn-anim" id="Copy"><i class="fa fa-copy"></i><span class="btn-text">@Resources.Resource.Copy</span> </button>
                <button type="button" class="btn btn-default btn-anim" id="CloseForm"><i class="fa fa-times"></i><span class="btn-text">@Resources.Resource.Close</span></button>
            </div>
        </div>
    </div>
}
<div id="modal-container" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-content">
    </div>
</div>
@Html.TextBoxFor(m => m.DiscountPercentage, new { @id = "DiscountPercentage", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })@*2*@
@Html.TextBoxFor(m => m.NetTotalLocalBeforDiscount, new { @id = "NetTotalLocalBeforDiscount", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalLineDiscountLocal, new { @id = "NetTotalLineDiscountLocal", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalLocalAfterLineDiscount, new { @id = "NetTotalLocalAfterLineDiscount", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalTaxAfterLineDiscountLocal, new { @id = "NetTotalTaxAfterLineDiscountLocal", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalAfterLineDiscountBeforDiscountAllLocal, new { @id = "NetTotalAfterLineDiscountBeforDiscountAllLocal", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalLocalAfterDiscount, new { @id = "NetTotalLocalAfterDiscount", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalTaxLocal, new { @id = "NetTotalTaxLocal", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalLocal, new { @id = "NetTotalLocal", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalForeignBeforDiscount, new { @id = "NetTotalForeignBeforDiscount", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalLineDiscountForeign, new { @id = "NetTotalLineDiscountForeign", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalForeignAfterLineDiscount, new { @id = "NetTotalForeignAfterLineDiscount", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalTaxAfterLineDiscounForeign, new { @id = "NetTotalTaxAfterLineDiscounForeign", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalAfterLineDiscountBeforDiscountAllForeign, new { @id = "NetTotalAfterLineDiscountBeforDiscountAllForeign", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalForeignAfterDiscount, new { @id = "NetTotalForeignAfterDiscount", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalDiscountForeign, new { @id = "NetTotalDiscountForeign", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalTaxForeign, new { @id = "NetTotalTaxForeign", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalForeign, new { @id = "NetTotalForeign", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.TheDecimalPointForTheLocalCurrency, new { @id = "TheDecimalPointForTheLocalCurrency", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TheDecimalPointForTheForeignCurrency, new { @id = "TheDecimalPointForTheForeignCurrency", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.CompanyTransactionKindNo, new { @id = "CompanyTransactionKindNo", @style = "visibility : hidden;" })
@Html.CheckBoxFor(m => m.WorkWithCostCenter, new { @id = "WorkWithCostCenter", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TransactionKindNo, new { @id = "TransactionKindNo", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.CompanyYear, new { @id = "CompanyYear", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.OrignailTaxAccountNumber, new { @id = "OrignailTaxAccountNumber", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.OrignailTaxAccountName, new { @id = "OrignailTaxAccountName", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;" })

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
    $(document).ready(function () {
        var bWorkWithCostCenter = document.getElementById("WorkWithCostCenter").checked;
        var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
        var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;
        document.getElementById("sNetTotalLocalAfterLineDiscount").value = formatMoney(document.getElementById("NetTotalLocalAfterLineDiscount").value, TheDecimalPointForTheLocalCurrency);
        document.getElementById("sNetTotalLocalAfterDiscount").value = formatMoney(document.getElementById("NetTotalLocalAfterDiscount").value, TheDecimalPointForTheLocalCurrency);
        document.getElementById("sNetTotalTaxLocal").value = formatMoney(document.getElementById("NetTotalTaxLocal").value, TheDecimalPointForTheLocalCurrency);
        document.getElementById("sNetTotalLocal").value = formatMoney(document.getElementById("NetTotalLocal").value, TheDecimalPointForTheLocalCurrency);
        document.getElementById("sDiscountPercentage").value = formatMoney(document.getElementById("DiscountPercentage").value, TheDecimalPointForTheLocalCurrency);
        function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
            try {
                decimalCount = Math.abs(decimalCount);
                decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

                const negativeSign = amount < 0 ? "-" : "";

                let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
                let j = (i.length > 3) ? i.length % 3 : 0;

                return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
            } catch (e) {
                console.log(e)
            }
        };
        function validatedate(dateString) {
            var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
            if (dateString.match(dateformat)) {
                var operator = dateString.split('/');
                var datepart = [];
                if (operator.length > 1) {
                    datepart = dateString.split('/');
                }
                var month = parseInt(datepart[1]);
                var day = parseInt(datepart[0]);
                var year = parseInt(datepart[2]);
                var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                if (month == 1 || month > 2) {
                    if (day > ListofDays[month - 1]) {
                        return false;
                    }
                } else if (month == 2) {
                    var leapYear = false;
                    if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                        leapYear = true;
                    }
                    if ((leapYear == false) && (day >= 29)) {
                        return false;
                    } else
                        if ((leapYear == true) && (day > 29)) {
                            return false;
                        }
                }
            }
            else {
                return false;
            }
            return true;
        }
        $(document).on('click', '#CloseForm', function () {
            window.location = "/St_ReturnSaleVoucherLocal/Index";
        });
        $(document).on('click', '#Copy', function () {
            document.getElementById("buttonCopy").click();
        });
        $("#VoucherDate").focus().select();
        $("#VoucherDate").mask("99/99/9999");
        var TaxType = document.getElementById("TaxType").value;
        if (TaxType == 1) {
            if (bWorkWithCostCenter) {
                document.getElementById("BtnTaxCostCenter").disabled = false;
                document.getElementById("BtnClearTaxCostCenter").disabled = false;
                document.getElementById("TaxCostNumber").disabled = false;
            }
        }
        else if (TaxType == 2) {
            if (bWorkWithCostCenter) {
                document.getElementById("BtnTaxCostCenter").disabled = true;
                document.getElementById("BtnClearTaxCostCenter").disabled = true;
                document.getElementById("TaxCostNumber").disabled = true;
            }
        }
        else if (TaxType == 3) {
            if (bWorkWithCostCenter) {
                document.getElementById("BtnTaxCostCenter").disabled = true;
                document.getElementById("BtnClearTaxCostCenter").disabled = true;
                document.getElementById("TaxCostNumber").disabled = true;
            }
        }
        var VoucherCase = document.getElementById("VoucherCase").value;
        if (VoucherCase == 1) {
            document.getElementById("BtnClearCreditAccountNumber").disabled = false;
            document.getElementById("BtnCreditAccountNumber").disabled = false;
            document.getElementById("CreditAccountNumber").disabled = false;
        }
        else if (VoucherCase == 2) {
            document.getElementById("BtnClearCreditAccountNumber").disabled = true;
            document.getElementById("BtnCreditAccountNumber").disabled = true;
            document.getElementById("CreditAccountNumber").disabled = true;
        }
        var SelectedCurrency = $("#CurrencyID").val();
        if (SelectedCurrency != null && SelectedCurrency != '') {
                $.getJSON('@Url.Action("GetCurrencyValueById", "CurrencyValue")', { id: SelectedCurrency }, function (Data) {
                    if (Data != null) {
                        document.getElementById("ConversionFactor").value = (Data).toFixed(TheDecimalPointForTheLocalCurrency);
                        document.getElementById("btnRecalculat").click();
                        if (Data == 0) {
                            Data = 1;
                        };
                        if (Data == 1) {
                            document.getElementById("ConversionFactor").value = (0).toFixed(TheDecimalPointForTheLocalCurrency);
                            document.getElementById("sNetTotalForeignAfterLineDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalDiscountForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sNetTotalForeignAfterDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sNetTotalTaxForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sNetTotalForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalForeignBeforDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalLineDiscountForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalForeignAfterLineDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalTaxAfterLineDiscounForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalAfterLineDiscountBeforDiscountAllForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalForeignAfterDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalTaxForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("Foreign1").style.display = 'none';
                            document.getElementById("Foreign2").style.display = 'none';
                            document.getElementById("Foreign3").style.display = 'none';
                            document.getElementById("Foreign4").style.display = 'none';
                            document.getElementById("Foreign5").style.display = 'none';
                            document.getElementById("Foreign6").style.display = 'none';
                        }
                        else {
                            document.getElementById("Foreign1").style.display = 'block';
                            document.getElementById("Foreign2").style.display = 'block';
                            document.getElementById("Foreign3").style.display = 'block';
                            document.getElementById("Foreign4").style.display = 'block';
                            document.getElementById("Foreign5").style.display = 'block';
                            document.getElementById("Foreign6").style.display = 'block';

                            document.getElementById("sNetTotalForeignAfterLineDiscount").value = formatMoney((document.getElementById("NetTotalLocalAfterLineDiscount").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sNetTotalDiscountForeign").value = formatMoney((document.getElementById("NetTotalDiscountLocal").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalDiscountForeign").value = (document.getElementById("NetTotalDiscountLocal").value / Data).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sNetTotalForeignAfterDiscount").value = formatMoney((document.getElementById("NetTotalLocalAfterDiscount").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sNetTotalTaxForeign").value = formatMoney((document.getElementById("NetTotalTaxLocal").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sNetTotalForeign").value = formatMoney((document.getElementById("NetTotalLocal").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalForeignBeforDiscount").value = formatMoney((document.getElementById("NetTotalLocalBeforDiscount").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalLineDiscountForeign").value = formatMoney((document.getElementById("NetTotalLineDiscountLocal").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalForeignAfterLineDiscount").value = formatMoney((document.getElementById("NetTotalLocalAfterLineDiscount").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalTaxAfterLineDiscounForeign").value = formatMoney((document.getElementById("NetTotalTaxAfterLineDiscountLocal").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalAfterLineDiscountBeforDiscountAllForeign").value = formatMoney((document.getElementById("NetTotalAfterLineDiscountBeforDiscountAllLocal").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalForeignAfterDiscount").value = formatMoney((document.getElementById("NetTotalLocalAfterDiscount").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalTaxForeign").value = formatMoney((document.getElementById("NetTotalTaxLocal").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalForeign").value = formatMoney((document.getElementById("NetTotalLocal").value / Data), TheDecimalPointForTheForeignCurrency);
                        }
                    } else {
                        document.getElementById("Foreign1").style.display = 'none';
                        document.getElementById("Foreign2").style.display = 'none';
                        document.getElementById("Foreign3").style.display = 'none';
                        document.getElementById("Foreign4").style.display = 'none';
                        document.getElementById("Foreign5").style.display = 'none';
                        document.getElementById("Foreign6").style.display = 'none';
                        document.getElementById("ConversionFactor").value = (0).toFixed(TheDecimalPointForTheLocalCurrency);
                        document.getElementById("sNetTotalForeignAfterLineDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("NetTotalDiscountForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("sNetTotalForeignAfterDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("sNetTotalTaxForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("sNetTotalForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("NetTotalForeignBeforDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("NetTotalLineDiscountForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("NetTotalForeignAfterLineDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("NetTotalTaxAfterLineDiscounForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("NetTotalAfterLineDiscountBeforDiscountAllForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("NetTotalForeignAfterDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("NetTotalTaxForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("NetTotalForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                    };
                });
            }
        var StockCode = document.getElementById("StockCode").value;
        var TransactionKindNo = document.getElementById("TransactionKindNo").value;
        if (StockCode != null && StockCode != '') {
            $.getJSON('@Url.Action("GetCompanyTransactionKindNo", "St_ReturnSaleVoucherLocal")', { id: TransactionKindNo, id2: StockCode }, function (Data) {
                if (Data != null) {
                    document.getElementById("CompanyTransactionKindNo").value = Data;
                    var CompanyYear = document.getElementById("CompanyYear").value;
                    var CompanyTransactionKindNo = document.getElementById("CompanyTransactionKindNo").value;
                    if (CompanyTransactionKindNo != null && CompanyTransactionKindNo != '') {
                        $.getJSON('@Url.Action("GetMaxVoucher", "St_ReturnSaleVoucherLocal")', { id: CompanyTransactionKindNo, id2: CompanyYear, id3: StockCode }, function (Data) {

                            if (Data != null) {
                                document.getElementById("VoucherNumber").value = Data;

                            } else {

                            };
                        });
                    }
                    else {
                    }
                } else {

                };
            });
            $.getJSON('@Url.Action("GetWarehouseAccount", "St_ReturnSaleVoucherLocal")', { id: StockCode }, function (Data) {
                if (Data != null) {
                    document.getElementById("DebitAccountNumber").value = Data.SalesReturnAccountNumber;
                    var DebitAccountNumber = Data.SalesReturnAccountNumber;
                    $.getJSON('@Url.Action("GetAccountName", "St_ReturnSaleVoucherLocal")', { id: DebitAccountNumber }, function (Data) {
                        if (Data != null) {
                            document.getElementById("DebitAccountName").value = Data;
                        } else {

                        };
                    });
                } else {

                };
            });
        }
        $('#StockCode').change(function () {
            document.getElementById("DebitAccountNumber").value = '';
            document.getElementById("DebitAccountName").value = '';
            document.getElementById("CreditAccountNumber").value = '';
            document.getElementById("CreditAccountName").value = '';
            var StockCode = document.getElementById("StockCode").value;
            var TransactionKindNo = document.getElementById("TransactionKindNo").value;
            if (StockCode != null && StockCode != '') {
                $.getJSON('@Url.Action("GetCompanyTransactionKindNo", "St_ReturnSaleVoucherLocal")', { id: TransactionKindNo, id2: StockCode }, function (Data) {
                    if (Data != null) {
                        document.getElementById("CompanyTransactionKindNo").value = Data;
                        var CompanyYear = document.getElementById("CompanyYear").value;
                        var CompanyTransactionKindNo = document.getElementById("CompanyTransactionKindNo").value;
                        if (CompanyTransactionKindNo != null && CompanyTransactionKindNo != '') {
                            $.getJSON('@Url.Action("GetMaxVoucher", "St_ReturnSaleVoucherLocal")', { id: CompanyTransactionKindNo, id2: CompanyYear, id3: StockCode }, function (Data) {

                                if (Data != null) {
                                    document.getElementById("VoucherNumber").value = Data;

                                } else {

                                };
                            });
                        }
                        else {
                        }
                    } else {

                    };
                });
                var VoucherCase = document.getElementById("VoucherCase").value;
                if (VoucherCase == 1) {
                    $.getJSON('@Url.Action("GetWarehouseAccount", "St_ReturnSaleVoucherLocal")', { id: StockCode }, function (Data) {
                        if (Data != null) {
                            document.getElementById("CreditAccountNumber").value = Data.SalesRefundFundAccountNumber;
                            var CreditAccountNumber = Data.SalesRefundFundAccountNumber;
                            $.getJSON('@Url.Action("GetAccountName", "St_ReturnSaleVoucherLocal")', { id: CreditAccountNumber }, function (Data) {
                                if (Data != null) {
                                    document.getElementById("CreditAccountName").value = Data;
                                } else {

                                };
                            });
                        } else {

                        };
                    });
                }
                $.getJSON('@Url.Action("GetWarehouseAccount", "St_ReturnSaleVoucherLocal")', { id: StockCode }, function (Data) {
                if (Data != null) {
                    document.getElementById("DebitAccountNumber").value = Data.SalesReturnAccountNumber;
                    var DebitAccountNumber = Data.SalesReturnAccountNumber;
                    $.getJSON('@Url.Action("GetAccountName", "St_ReturnSaleVoucherLocal")', { id: DebitAccountNumber }, function (Data) {
                        if (Data != null) {
                            document.getElementById("DebitAccountName").value = Data;
                        } else {

                        };
                    });
                } else {

                };
            });
            }
        });
        $("#VoucherDate").blur(function () {
            var dDate = document.getElementById("VoucherDate").value;
            if (dDate != null && dDate != '') {
                if (!validatedate(dDate)) {
                    bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                }
                else {
                    var dd = parseInt(dDate.substring(0, 2));
                    if (dd < 10) {
                        dd = '0' + dd;
                    }
                    var mm = parseInt(dDate.substring(3, 5));
                    if (mm < 10) {
                        mm = '0' + mm;
                    }
                    var yyyy = parseInt(dDate.substring(6, 10));
                    dDate = mm + '/' + dd + '/' + yyyy;
                    $.getJSON('@Url.Action("CheckDateIsFreezeDate", "FreezeTransaction")', { id: dDate }, function (Data) {
                        if (Data >= 1) {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThisDateIsFrozen</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                    });
                }
            }
            else {
            }
        });
        $('#TaxType').change(function () {
            document.getElementById("btnRecalculat").click();
            var TaxType = document.getElementById("TaxType").value;
            if (TaxType == 1) {
                if (bWorkWithCostCenter) {
                    document.getElementById("BtnTaxCostCenter").disabled = false;
                    document.getElementById("BtnClearTaxCostCenter").disabled = false;
                    document.getElementById("TaxCostNumber").disabled = false;
                    document.getElementById("TaxCostNumber").value = '';
                    document.getElementById("TaxCostName").value = '';
                }
                document.getElementById("TaxAccountNumber").value = document.getElementById("OrignailTaxAccountNumber").value;
                document.getElementById("TaxAccountName").value = document.getElementById("OrignailTaxAccountName").value;
            }
            else if (TaxType == 2) {
                if (bWorkWithCostCenter) {
                    document.getElementById("BtnTaxCostCenter").disabled = true;
                    document.getElementById("BtnClearTaxCostCenter").disabled = true;
                    document.getElementById("TaxCostNumber").disabled = true;
                    document.getElementById("TaxCostNumber").value = '';
                    document.getElementById("TaxCostName").value = '';
                }
                document.getElementById("TaxAccountNumber").value = '';
                document.getElementById("TaxAccountName").value = '';
            }
            else if (TaxType == 3) {
                if (bWorkWithCostCenter) {
                    document.getElementById("BtnTaxCostCenter").disabled = true;
                    document.getElementById("BtnClearTaxCostCenter").disabled = true;
                    document.getElementById("TaxCostNumber").disabled = true;
                    document.getElementById("TaxCostNumber").value = '';
                    document.getElementById("TaxCostName").value = '';
                }
                document.getElementById("TaxAccountNumber").value = '';
                document.getElementById("TaxAccountName").value = '';
            }
        });
        $('#VoucherCase').change(function () {
            var VoucherCase = document.getElementById("VoucherCase").value;
            if (VoucherCase == 1) {
                var StockCode = document.getElementById("StockCode").value;
                if (StockCode != null && StockCode != '') {
                    $.getJSON('@Url.Action("GetWarehouseAccount", "St_ReturnSaleVoucherLocal")', { id: StockCode }, function (Data) {
                        if (Data != null) {
                            document.getElementById("CreditAccountNumber").value = Data.SalesRefundFundAccountNumber;
                            var CreditAccountNumber = Data.SalesRefundFundAccountNumber;
                            $.getJSON('@Url.Action("GetAccountName", "St_ReturnSaleVoucherLocal")', { id: CreditAccountNumber }, function (Data) {
                                if (Data != null) {
                                    document.getElementById("CreditAccountName").value = Data;
                                } else {

                                };
                            });
                        } else {

                        };
                    });
                }
                document.getElementById("BtnClearCreditAccountNumber").disabled = false;
                document.getElementById("BtnCreditAccountNumber").disabled = false;
                document.getElementById("CreditAccountNumber").disabled = false;
            }
            else if (VoucherCase == 2) {
                document.getElementById("CreditAccountNumber").value = document.getElementById("AccountNumber").value;
                document.getElementById("CreditAccountName").value = document.getElementById("AccountName").value;
                document.getElementById("BtnClearCreditAccountNumber").disabled = true;
                document.getElementById("BtnCreditAccountNumber").disabled = true;
                document.getElementById("CreditAccountNumber").disabled = true;
            }
        });
        $('#tdataTable').on('click', '.modal-close-btn', function () {
            $('#modal-container').modal('hide');
        });
        $(document).on('click', '.js-Pop', function (e) {
            $('#modal-container').removeData('bs.modal');
            e.preventDefault();
            $(this).attr('data-target', '#modal-container');
            $(this).attr('data-toggle', 'modal');

        });
        $('#modal-container').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal');
        });
        $('#CancelModal').on('click', function () {
            return false;
        });
        $('#BtnAccountNumber').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchAcc/AccountNumber';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnClearAccountNumber').on('click', function () {
            document.getElementById("AccountNumber").value = '';
            document.getElementById("AccountName").value = '';
            document.getElementById("SaleID").selectedIndex = "0";
            var VoucherCase = document.getElementById("VoucherCase").value;
            if (VoucherCase == 2) {
                document.getElementById("CreditAccountNumber").value = '';
                document.getElementById("CreditAccountName").value = '';
            }
        });
        $('#BtnCreditAccountNumber').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchAcc/CreditAccNo';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnClearCreditAccountNumber').on('click', function () {
            document.getElementById("CreditAccountNumber").value = '';
            document.getElementById("CreditAccountName").value = '';
        });
        $('#BtnCreditCostCenter').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchCostCenter/CreditCostAccNo';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnClearCreditCostCenter').on('click', function () {
            document.getElementById("CreditCostNumber").value = '';
            document.getElementById("CreditCostName").value = '';
        });
        $('#BtnDebitCostCenter').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchCostCenter/DebitCostAccNo';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnClearDebitCostCenter').on('click', function () {
            document.getElementById("DebitCostNumber").value = '';
            document.getElementById("DebitCostName").value = '';
        });
        $('#BtnTaxCostCenter').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchCostCenter/TaxCostAccNo';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnClearTaxCostCenter').on('click', function () {
            document.getElementById("TaxCostNumber").value = '';
            document.getElementById("TaxCostName").value = '';
        });
        $("#OriginalVoucherNumber").keyup(function (event) {
            if (event.keyCode == 13)
                $("#VoucherDate").focus().select();
        });
        $("#VoucherDate").keyup(function (event) {
            if (event.keyCode == 13)
                $("#AccountNumber").focus().select();
        });
        $("#AccountNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                if (CreditAccountNumber.disabled) {
                    if (bWorkWithCostCenter) {
                        $("#CreditCostNumber").focus().select();
                    }
                    else {
                        $("#NetTotalDiscountLocal").focus().select();
                    }
                }
                else {
                    $("#CreditAccountNumber").focus().select();
                }

            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchAcc/AccountNumber';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }

        });
        $("#CreditAccountNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                if (bWorkWithCostCenter) {
                    $("#CreditCostNumber").focus().select();
                }
                else {
                    $("#Remark").focus().select();
                }
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchAcc/CreditAccNo';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }

        });
        $("#CreditCostNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#DebitCostNumber").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchCostCenter/CreditCostAccNo';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }

        });
        $("#DebitCostNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#TaxCostNumber").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchCostCenter/DebitCostAccNo';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }

        });
        $("#TaxCostNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#NetTotalDiscountLocal").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchCostCenter/TaxCostAccNo';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }

        });
        $("#Remark").keyup(function (event) {
            if (event.keyCode == 13)
                $("#Hint").focus().select();
        });
        $("#Hint").keyup(function (event) {
            if (event.keyCode == 13)
                $("#OriginalVoucherNumber").focus().select();
        });
        $("#NetTotalDiscountLocal").keyup(function (event) {
            if (event.keyCode == 13)
                $("#Remark").focus().select();
        });
        $("#AccountNumber").blur(function () {
            var VoucherCase = document.getElementById("VoucherCase").value;
            var AccountNumber = document.getElementById("AccountNumber").value;
            if (VoucherCase == 2) {
                document.getElementById("CreditAccountNumber").value = document.getElementById("AccountNumber").value;
            }
            if (AccountNumber == '') {
                document.getElementById("AccountName").value = '';
                document.getElementById("SaleID").selectedIndex = "0";
                if (VoucherCase == 2) {
                    document.getElementById("CreditAccountName").value = '';
                }
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckAcountAcc", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("AccountNumber").value = '';
                            document.getElementById("AccountName").value = '';
                            document.getElementById("SaleID").selectedIndex = "0";
                            if (VoucherCase == 2) {
                                document.getElementById("CreditAccountNumber").value = '';
                                document.getElementById("CreditAccountName").value = '';
                            }
                            $("#AccountNumber").focus();
                        }
                        else {
                            if (!Data.StoppedAccount) {
                                document.getElementById("AccountName").value = Data.AccountName;
                                var SelectedValue = $("#AccountNumber").val();
                                if (SelectedValue != null && SelectedValue != '') {
                                    $.getJSON('@Url.Action("GetSaleManID", "ChartOfAccount")', { id: SelectedValue }, function (Data) {
                                        if (Data == 0) {
                                            document.getElementById("SaleID").selectedIndex = "0";
                                        }
                                        else {
                                            document.getElementById("SaleID").value = Data;
                                        }
                                    });
                                }
                                else {
                                    document.getElementById("SaleID").selectedIndex = "0";
                                }
                                if (VoucherCase == 2) {
                                    document.getElementById("CreditAccountName").value = Data.AccountName;
                                }
                            }
                            else {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                document.getElementById("AccountNumber").value = "";
                                document.getElementById("AccountName").value = "";
                                document.getElementById("SaleID").selectedIndex = "0";
                                if (VoucherCase == 2) {
                                    document.getElementById("CreditAccountNumber").value = '';
                                    document.getElementById("CreditAccountName").value = '';
                                }
                                $("#AccountNumber").focus().select();
                            }

                        }
                    });
                }
            }
        });
        $("#CreditAccountNumber").blur(function () {
            var AccountNumber = document.getElementById("CreditAccountNumber").value;
            if (AccountNumber == '') {
                document.getElementById("CreditAccountName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckAcountAcc", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("CreditAccountNumber").value = '';
                            document.getElementById("CreditAccountName").value = '';
                            $("#CreditAccountNumber").focus();
                        }
                        else {
                            if (!Data.StoppedAccount) {
                                document.getElementById("CreditAccountName").value = Data.AccountName;
                            }
                            else {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                document.getElementById("CreditAccountNumber").value = "";
                                document.getElementById("CreditAccountName").value = "";
                                $("#CreditAccountNumber").focus().select();
                            }

                        }
                    });
                }
            }
        });
        $("#DebitCostNumber").blur(function () {
            var CostNumber = document.getElementById("DebitCostNumber").value;
            if (CostNumber == '') {
                document.getElementById("DebitCostName").value = '';
            }
            else {
                if (CostNumber != null && CostNumber != '') {
                    $.getJSON('@Url.Action("CheckCostCenter", "MultiUse")', { id: CostNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheCostCenterDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("DebitCostNumber").value = '';
                            document.getElementById("DebitCostName").value = '';
                            $("#DebitCostNumber").focus();
                        }
                        else {
                            if (!Data.StoppedCost) {
                                document.getElementById("DebitCostName").value = Data.CostName;
                            }
                            else {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheCostCenterIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                document.getElementById("DebitCostNumber").value = "";
                                document.getElementById("DebitCostName").value = "";
                                $("#DebitCostNumber").focus().select();
                            }

                        }
                    });
                }
            }
        });
        $("#CreditCostNumber").blur(function () {
            var CostNumber = document.getElementById("CreditCostNumber").value;
            if (CostNumber == '') {
                document.getElementById("CreditCostName").value = '';
            }
            else {
                if (CostNumber != null && CostNumber != '') {
                    $.getJSON('@Url.Action("CheckCostCenter", "MultiUse")', { id: CostNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheCostCenterDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("CreditCostNumber").value = '';
                            document.getElementById("CreditCostName").value = '';
                            $("#CreditCostNumber").focus();
                        }
                        else {
                            if (!Data.StoppedCost) {
                                document.getElementById("CreditCostName").value = Data.CostName;
                            }
                            else {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheCostCenterIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                document.getElementById("CreditCostNumber").value = "";
                                document.getElementById("CreditCostName").value = "";
                                $("#CreditCostNumber").focus().select();
                            }

                        }
                    });
                }
            }
        });
        $("#TaxCostNumber").blur(function () {
            var CostNumber = document.getElementById("TaxCostNumber").value;
            if (CostNumber == '') {
                document.getElementById("TaxCostName").value = '';
            }
            else {
                if (CostNumber != null && CostNumber != '') {
                    $.getJSON('@Url.Action("CheckCostCenter", "MultiUse")', { id: CostNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheCostCenterDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("TaxCostNumber").value = '';
                            document.getElementById("TaxCostName").value = '';
                            $("#TaxCostNumber").focus();
                        }
                        else {
                            if (!Data.StoppedCost) {
                                document.getElementById("TaxCostName").value = Data.CostName;
                            }
                            else {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheCostCenterIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                document.getElementById("TaxCostNumber").value = "";
                                document.getElementById("TaxCostName").value = "";
                                $("#TaxCostNumber").focus().select();
                            }

                        }
                    });
                }
            }
        });
        $("#NetTotalDiscountLocal").blur(function () {
            if (document.getElementById("NetTotalDiscountLocal").value == "") {
                document.getElementById("NetTotalDiscountLocal").value = "0";
                document.getElementById("DiscountPercentage").value = "0";
                document.getElementById("sDiscountPercentage").value = "0";
                document.getElementById("sDiscountPercentageForeign").value = "0";
            }
            else {
                var NetTotalDiscountLocal = parseFloat(document.getElementById("NetTotalDiscountLocal").value);
                var NetTotalLocalAfterLineDiscount = parseFloat(document.getElementById("NetTotalLocalAfterLineDiscount").value);
                if (NetTotalDiscountLocal > NetTotalLocalAfterLineDiscount) {
                    bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheDiscountValueIsGreaterThanTheActualValue</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                    document.getElementById("NetTotalDiscountLocal").value = 0;
                    document.getElementById("DiscountPercentage").value = 0;
                    document.getElementById("sDiscountPercentage").value = 0;
                    document.getElementById("sDiscountPercentageForeign").value = 0;
                    document.getElementById("btnRecalculat").click();
                }
                else {
                    var DiscountPercentage = 0;
                    if (NetTotalLocalAfterLineDiscount > 0) {
                        DiscountPercentage = (NetTotalDiscountLocal / NetTotalLocalAfterLineDiscount) * 100;
                    }
                    document.getElementById("DiscountPercentage").value = DiscountPercentage;
                    document.getElementById("sDiscountPercentage").value = formatMoney(DiscountPercentage, TheDecimalPointForTheLocalCurrency); //1
                    document.getElementById("sDiscountPercentageForeign").value = formatMoney(DiscountPercentage, TheDecimalPointForTheLocalCurrency); //1
                    document.getElementById("btnRecalculat").click();
                }
            }
        });
        $(document).on('click', '#SaveNewSale', function () {
            if ($("#SalesName").val() == '') {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }

                    }
                });
            }
            else {
                bootbox.confirm({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        confirm: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                            className: 'btn-success'
                        },
                        cancel: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            var dialog = bootbox.dialog({
                                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Saving...</p>',
                                closeButton: false
                            });
                            var dataToSave = {

                                SalesID: $("#SalesID").val(),
                                SalesName: $("#SalesName").val()

                            };
                            $.ajax({
                                type: "POST",
                                url: "/Sale/SaveSale",
                                data: JSON.stringify(dataToSave),
                                contentType: 'application/json',
                                success: function (data) {

                                    dialog.modal('hide');
                                    if (data.Code == 0) {
                                        toastr.error(data.Msg);
                                        bootbox.alert(data.Msg);
                                    }
                                    else if (data.Code == 1) {
                                        $('#modal-container').modal('hide');
                                        toastr.success(data.Msg);
                                        bootbox.alert(data.Msg);
                                        document.getElementById("SalesID").value = data.LastID;
                                        document.getElementById("SalesName").value = '';

                                        $("#SalesName").focus().select();


                                        var SaleID = $('#SaleID');
                                        SaleID.empty();

                                        $.ajax({
                                            method: "GET",
                                            url: "/Sale/GetAllSale",


                                            success: function (data) {
                                                SaleID.append($('<option/>', {
                                                    value: 0,
                                                    text: '@Resources.Resource.SalesMan'
                                                }));


                                                $.each(data, function (id, region) {
                                                    SaleID.append($('<option/>', {
                                                        value: region.SalesID,
                                                        text: region.SalesName
                                                    }));
                                                });

                                                dialog.modal('hide');

                                            },
                                            error: function (xhr, AJAXOptions, thrownError) {
                                                dialog.modal('hide');
                                                alert('Failed to retrieve .');
                                            }
                                        });


                                    }

                                },
                                error: function (data) {
                                    dialog.modal('hide');
                                    toastr.error(data);
                                    bootbox.alert(data.Msg);
                                }
                            });
                        }
                    }
                });
            }
        });
        $('#CurrencyID').change(function () {
            var SelectedCurrency = $("#CurrencyID").val();
            if (SelectedCurrency != null && SelectedCurrency != '') {
                $.getJSON('@Url.Action("GetCurrencyValueById", "CurrencyValue")', { id: SelectedCurrency }, function (Data) {
                    if (Data != null) {
                        document.getElementById("ConversionFactor").value = (Data).toFixed(TheDecimalPointForTheLocalCurrency);
                        document.getElementById("btnRecalculat").click();
                        if (Data == 0) {
                            Data = 1;
                        };
                        if (Data == 1) {
                            document.getElementById("ConversionFactor").value = (0).toFixed(TheDecimalPointForTheLocalCurrency);
                            document.getElementById("sNetTotalForeignAfterLineDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalDiscountForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sNetTotalForeignAfterDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sNetTotalTaxForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sNetTotalForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalForeignBeforDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalLineDiscountForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalForeignAfterLineDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalTaxAfterLineDiscounForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalAfterLineDiscountBeforDiscountAllForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalForeignAfterDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalTaxForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("Foreign1").style.display = 'none';
                            document.getElementById("Foreign2").style.display = 'none';
                            document.getElementById("Foreign3").style.display = 'none';
                            document.getElementById("Foreign4").style.display = 'none';
                            document.getElementById("Foreign5").style.display = 'none';
                            document.getElementById("Foreign6").style.display = 'none';
                        }
                        else {
                            document.getElementById("Foreign1").style.display = 'block';
                            document.getElementById("Foreign2").style.display = 'block';
                            document.getElementById("Foreign3").style.display = 'block';
                            document.getElementById("Foreign4").style.display = 'block';
                            document.getElementById("Foreign5").style.display = 'block';
                            document.getElementById("Foreign6").style.display = 'block';

                            document.getElementById("sNetTotalForeignAfterLineDiscount").value = formatMoney((document.getElementById("NetTotalLocalAfterLineDiscount").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sNetTotalDiscountForeign").value = formatMoney((document.getElementById("NetTotalDiscountLocal").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalDiscountForeign").value = (document.getElementById("NetTotalDiscountLocal").value / Data).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sNetTotalForeignAfterDiscount").value = formatMoney((document.getElementById("NetTotalLocalAfterDiscount").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sNetTotalTaxForeign").value = formatMoney((document.getElementById("NetTotalTaxLocal").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sNetTotalForeign").value = formatMoney((document.getElementById("NetTotalLocal").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalForeignBeforDiscount").value = formatMoney((document.getElementById("NetTotalLocalBeforDiscount").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalLineDiscountForeign").value = formatMoney((document.getElementById("NetTotalLineDiscountLocal").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalForeignAfterLineDiscount").value = formatMoney((document.getElementById("NetTotalLocalAfterLineDiscount").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalTaxAfterLineDiscounForeign").value = formatMoney((document.getElementById("NetTotalTaxAfterLineDiscountLocal").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalAfterLineDiscountBeforDiscountAllForeign").value = formatMoney((document.getElementById("NetTotalAfterLineDiscountBeforDiscountAllLocal").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalForeignAfterDiscount").value = formatMoney((document.getElementById("NetTotalLocalAfterDiscount").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalTaxForeign").value = formatMoney((document.getElementById("NetTotalTaxLocal").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalForeign").value = formatMoney((document.getElementById("NetTotalLocal").value / Data), TheDecimalPointForTheForeignCurrency);
                        }
                    } else {
                        document.getElementById("Foreign1").style.display = 'none';
                        document.getElementById("Foreign2").style.display = 'none';
                        document.getElementById("Foreign3").style.display = 'none';
                        document.getElementById("Foreign4").style.display = 'none';
                        document.getElementById("Foreign5").style.display = 'none';
                        document.getElementById("Foreign6").style.display = 'none';
                        document.getElementById("ConversionFactor").value = (0).toFixed(TheDecimalPointForTheLocalCurrency);
                        document.getElementById("sNetTotalForeignAfterLineDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("NetTotalDiscountForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("sNetTotalForeignAfterDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("sNetTotalTaxForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("sNetTotalForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("NetTotalForeignBeforDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("NetTotalLineDiscountForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("NetTotalForeignAfterLineDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("NetTotalTaxAfterLineDiscounForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("NetTotalAfterLineDiscountBeforDiscountAllForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("NetTotalForeignAfterDiscount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("NetTotalTaxForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("NetTotalForeign").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                    };
                });
            } else {
            }

        });
    });
    </script>
}




