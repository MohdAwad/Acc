@model Acc.ViewModels.OpeningBalanceVM
@{
    ViewBag.Title = @Resources.Resource.OpeningBalance;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .panel-body {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-footer {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-title {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .dt-button {
        display: none !important;
    }

    #TransActionGrid_DXHeadersRow0 {
        font-family: Verdana, Geneva, Tahoma, sans-serif !important;
        font-size: 10pt;
    }

    .dxgvBatchEditNewItem_iOS {
        font-family: Verdana, Geneva, Tahoma, sans-serif !important;
        font-size: 10pt;
    }

    .dxgvControl_iOS {
        width: 100% !important;
    }
</style>

<script>
  var preventEndEditOnLostFocus = false;
  var currentEditedValue;
  var SelectAccount;
  var lastVisibleIndex;
  var FocusedCellColumnIndex = 0;
    var FocusedCellRowIndex = 0;
    function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
        try {
            decimalCount = Math.abs(decimalCount);
            decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

            const negativeSign = amount < 0 ? "-" : "";

            let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
            let j = (i.length > 3) ? i.length % 3 : 0;

            return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
        } catch (e) {
            console.log(e)
        }
    };
    function validatedate(dateString) {
        var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
        if (dateString.match(dateformat)) {
            var operator = dateString.split('/');
            var datepart = [];
            if (operator.length > 1) {
                datepart = dateString.split('/');
            }
            var month = parseInt(datepart[1]);
            var day = parseInt(datepart[0]);
            var year = parseInt(datepart[2]);
            var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
            if (month == 1 || month > 2) {
                if (day > ListofDays[month - 1]) {
                    return false;
                }
            } else if (month == 2) {
                var leapYear = false;
                if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                    leapYear = true;
                }
                if ((leapYear == false) && (day >= 29)) {
                    return false;
                } else
                    if ((leapYear == true) && (day > 29)) {
                        return false;
                    }
            }
        }
        else {
            return false;
        }
        return true;
    }
  var SumDebit = 0;
  var SumCredit = 0;
  var NetTot = 0;
  function CalcSumDebitCredit(s, e) {
      SumDebit = 0;
      SumCredit = 0;
      var Debit = 0;
      var Credit = 0;
      var visibleRowIndices = TransActionGrid.batchEditApi.GetRowVisibleIndices();
      var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
      var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;
      for (var i = 0; i < visibleRowIndices.length; i++) {

          Debit = TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Debit");
          Credit = TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Credit");

          Debit = Number(Debit);
          if (Debit == "NaN") {
              Debit = 0;
          }

          Credit = Number(Credit);
          if (Credit == "NaN") {
              Credit = 0;
          }
          SumDebit = SumDebit + parseFloat(Debit);
          SumCredit = SumCredit + parseFloat(Credit);

          SumCredit = Number(SumCredit.toFixed(TheDecimalPointForTheLocalCurrency));
          SumDebit = Number(SumDebit.toFixed(TheDecimalPointForTheLocalCurrency));
      }
      document.getElementById("TotalDebit").value = SumDebit;
      document.getElementById("TotalCredit").value = SumCredit;
      document.getElementById("NetTOT").value = SumDebit - SumCredit;

      document.getElementById("sTotalDebit").value = formatMoney(SumDebit, TheDecimalPointForTheLocalCurrency);
      document.getElementById("sTotalCredit").value = formatMoney(SumCredit, TheDecimalPointForTheLocalCurrency);
      document.getElementById("sNetTotal").value = formatMoney((SumDebit - SumCredit), TheDecimalPointForTheLocalCurrency);

    }
       function ClearGrid(s, e) {
        TransActionGrid.PerformCallback('clear');
        }

    function LoopGrid(s, e) {
        bootbox.confirm({
            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
            className: 'rubberBand animated',
            buttons: {
                confirm: {
                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                    className: 'btn-success'
                },
                cancel: {
                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                    className: 'btn-danger'
                }
            },
            callback: function (result) {
                if (result) {
                    var dialog = bootbox.dialog({
                        title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                        message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Saving...</p>',
                        closeButton: false
                    });

                    var visibleRowIndices = TransActionGrid.batchEditApi.GetRowVisibleIndices();
                    var TransActionlist = [];
                    for (var i = 0; i < visibleRowIndices.length; i++) {


                        var TransAction = {

                            Debit: TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Debit"),
                            Credit: TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "Credit"),
                            AccountNumber: TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumber"),
                            AccountName: TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountName"),

                            CreditDebitForeign: TransActionGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "CreditDebitForeign"),
                            RowNumber: i


                        };
                        TransActionlist.push(TransAction);

                    }
                    var HeaderData = {

                        VoucherNumber: $("#VoucherNumber").val(),
                        VoucherDate: $("#VoucherDate").val(),

                        TotalCredit: $("#TotalCredit").val(),
                        TotalDebit: $("#TotalDebit").val(),
                        CompanyTransactionKindNo: $("#CompanyTransactionKindID").val(),
                        ConversionFactor: $("#CurrencyNewValue").val(),

                        TransactionKindNo: $("#TransactionKindNo").val()



                    }

                    var dataToSave = {
                        Transaction: TransActionlist,
                        Header: HeaderData,

                        CompanyTransactionKindID: $("#CompanyTransactionKindID").val(),

                        CurrencyNewValue: $("#CurrencyNewValue").val()

                    }
                    $.ajax({
                        type: "POST",
                        url: "/TransAction/UpdateOpeneinBalance",
                        data: JSON.stringify(dataToSave),
                        contentType: 'application/json',
                        success: function (data) {

                            dialog.modal('hide');
                            if (data.Code == 0) {
                                toastr.error(data.Msg);
                                bootbox.alert(data.Msg);
                            }
                            else if (data.Code == 1) {
                                $('#modal-container').modal('hide');
                                toastr.success(data.Msg);
                                bootbox.alert(data.Msg);

                                $('#modal-container').modal('hide');

                            }

                        },
                        error: function (data) {
                            dialog.modal('hide');
                            bootbox.alert(data);
                            toastr.error(data);
                        }

                    });
                }
            }
        });
    }
     function OnInit(s, e) {
        ASPxClientUtils.AttachEventToElement(
            s.GetMainElement(),
            "keydown",
            function (evt) {
            });
     }

     function Grid_BatchEditEndEditing(s, e) {
        var productNameColumn = s.GetColumnByField("AccountNumber");

        if (!e.rowValues.hasOwnProperty(productNameColumn.index))
             return;
         if ((FocusedCellColumnIndex == 0) || (FocusedCellColumnIndex == 1)) {
             var DebitIndex = s.GetColumnByField("Debit").index;
             var DebitValue = e.rowValues[DebitIndex].value;
             var CreditIndex = s.GetColumnByField("Credit").index;
             var CreditValue = e.rowValues[CreditIndex].value;
             if (DebitValue > 0) {
                 s.batchEditApi.SetCellValue(e.visibleIndex, "Credit", 0, null, true);
                 e.rowValues[CreditIndex].value = 0;
                 e.rowValues[CreditIndex].text = "0";
             }
             else if (CreditValue > 0) {
                 e.rowValues[DebitIndex].value = 0;
                 e.rowValues[DebitIndex].text = "0";
             }
         }

        var cellInfo = e.rowValues[productNameColumn.index];
         FocusedCellColumnIndex = 0;
           FocusedCellRowIndex = 0;
    }


     function Grid_BatchEditStartEditing(s, e) {
        FocusedCellColumnIndex = e.focusedColumn.index;
        FocusedCellRowIndex = e.visibleIndex;
        var productNameColumn = s.GetColumnByField("AccountNumber");
        if (!e.rowValues.hasOwnProperty(productNameColumn.index))
            return;
        var cellInfo = e.rowValues[productNameColumn.index];
        lastVisibleIndex = e.visibleIndex;
        currentEditedValue = s.GetRowKey(e.visibleIndex);
         currentKey = s.GetRowKey(e.visibleIndex);
         CalcSumDebitCredit(s, e);
    }

     function OnBeginCallback(s, e) {
        e.customArgs["Reference"] = $("#Reference").val();
    }

     function OnEndCallback(s, e) {
         if (s.cpSuccessFlag)
        {
            alert("All changes were saved");
            window.location = "@Url.Action("Success","Test1")";
        }
    }

     function OnClickPostData(s, e) {

            if (TransActionGrid.batchEditApi.HasChanges())
                TransActionGrid.UpdateEdit();
            else
            TransActionGrid.PerformCallback();
          Alert("dONEEE");

    }
     function Grid_DeleteRowEvent(s, e) {

          CalcSumDebitCredit(s, e);
      }
</script>

@using (Html.BeginForm("Update", "OpeningBalance", FormMethod.Post, new { id = "myForm" }))
{
    <div class="panel card-view">
        <div class="panel-heading" style="background-color: #34495E">
            <div class="pull-left">
                <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.Save - @Resources.Resource.OpeningBalance</h6>
            </div>
            <div class="clearfix"></div>
        </div>
        <div class="panel-body">
            <div class="col-lg-12" style="margin-top:10px;">
                <div class="col-lg-12">
                    <div class="form-group">
                        <div class="col-lg-2">
                            <div class="form-group">
                                @Html.LabelFor(m => m.CompanyTransactionKindID)
                                @if (Resources.Resource.CurLang == "Arb")
                                {
                                    @Html.DropDownListFor(m => m.CompanyTransactionKindID, new SelectList(Model.CompanyTransactionKind, "CompanyTransactionKindID", "ArabicName"), Resources.Resource.TransactionKind, new { @id = "CompanyTransactionKindID", @class = "form-control input-sml", @disabled = "disabled" })


                                }
                                else
                                {
                                    @Html.DropDownListFor(m => m.CompanyTransactionKindID, new SelectList(Model.CompanyTransactionKind, "CompanyTransactionKindID", "EnglishName"), Resources.Resource.TransactionKind, new { @id = "CompanyTransactionKindID", @class = "form-control input-sml", @disabled = "disabled" })
                                }
                            </div>
                        </div>
                        <div class="col-lg-2">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Header.VoucherDate)
                                @Html.TextBoxFor(model => model.Header.VoucherDate, new { @id = "VoucherDate", @class = "form-control input-sml", @Value = Model.Header.VoucherDate.ToString("dd/MM/yyyy"), @readonly = "readonly" })
                            </div>
                        </div>
                        <div class="col-lg-2">
                            <div class="form-group">
                                @Html.LabelFor(m => m.Header.VoucherNumber)
                                @Html.TextBoxFor(m => m.Header.VoucherNumber, new { @id = "VoucherNumber", @class = "form-control input-sml", @readonly = "readonly" })
                                @Html.ValidationMessageFor(m => m.Header.VoucherNumber)
                            </div>
                        </div>
                        <div class="col-lg-2">
                            <div class="form-group">
                                @Html.LabelFor(m => m.TotalDebit)
                                @Html.TextBoxFor(m => m.TotalDebit, new { @id = "sTotalDebit", @class = "form-control  input-sm", @readonly = "readonly" })
                            </div>
                        </div>
                        <div class="col-lg-2">
                            <div class="form-group">
                                @Html.LabelFor(m => m.TotalCredit)
                                @Html.TextBoxFor(m => m.TotalCredit, new { @id = "sTotalCredit", @class = "form-control  input-sm", @readonly = "readonly" })
                            </div>
                        </div>
                        <div class="col-lg-2">
                            <div class="form-group">
                                @Html.LabelFor(m => m.sNetTotal)
                                @Html.TextBoxFor(m => m.sNetTotal, new { @id = "sNetTotal", @class = "form-control  input-sm", @readonly = "readonly" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-12 pre-scrollable">
                    @Html.Action("GridViewTransActionPartial")
                </div>
                @Html.HiddenFor(m => m.CompanyTransactionKindID, new { @id = "CompanyTransactionKindID" })
                @Html.HiddenFor(m => m.Header.CompanyTransactionKindNo, new { @id = "CompanyTransactionKindNo" })
                @Html.HiddenFor(m => m.Header.CompanyYear, new { @id = "CompanyYear" })
                @Html.HiddenFor(m => m.Header.TransactionKindNo, new { @id = "TransactionKindNo" })
            </div>
        </div>
        <div class="panel-footer">
            
            
                @Html.DevExpress().Button(settings =>
                {
                    settings.Name = "buttonSave";
                    settings.Text = Resources.Resource.Update;
                    settings.UseSubmitBehavior = false;
                    settings.ClientVisible = false;
                    settings.ClientSideEvents.Click = "LoopGrid";
                }).GetHtml()
            


            @if (User.IsInRole("AddOpeningBalance") || User.IsInRole("CoOwner"))
            {
                <button type="button" class="btn btn-primary btn-anim" id="Save"><i class="fa fa-save"></i><span class="btn-text">@Resources.Resource.Save</span> </button>
            }
            <button type="submit" class="btn btn-anim" style="background-color:#382D2C" id="SaveToFav"><i class=" fa fa-star"></i><span class="btn-text">@Resources.Resource.AddToFav</span></button>

            @if (User.IsInRole("PrintTransActionTrans") || User.IsInRole("CoOwner"))
            {
                <button type="submit" class="btn btn-warning btn-anim" id="PrintPDF"><i class=" fa fa-print"></i><span class="btn-text">@Resources.Resource.Print</span></button>

            }

            <button type="button" class="btn btn-default btn-anim" id="Close"><i class="fa fa-times"></i><span class="btn-text">@Resources.Resource.Close</span></button>

        </div>
    </div>
}
@Html.TextBoxFor(m => m.Header.TotalDebit, new { @id = "TotalDebit", @class = "form-control input-sml", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.Header.TotalCredit, new { @id = "TotalCredit", @class = "form-control input-sml", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.NetTOT, new { @id = "NetTOT", @class = "form-control input-sml", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TheDecimalPointForTheLocalCurrency, new { @id = "TheDecimalPointForTheLocalCurrency", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TheDecimalPointForTheForeignCurrency, new { @id = "TheDecimalPointForTheForeignCurrency", @style = "visibility : hidden;" })
@Html.HiddenFor(m => m.Header.VoucherNumber, new { @id = "V" })
@Html.HiddenFor(m => m.Header.CompanyTransactionKindNo, new { @id = "C" })
@Html.HiddenFor(m => m.Header.TransactionKindNo, new { @id = "T" })
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
         
            var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
            var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;
            function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
                try {
                    decimalCount = Math.abs(decimalCount);
                    decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

                    const negativeSign = amount < 0 ? "-" : "";

                    let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
                    let j = (i.length > 3) ? i.length % 3 : 0;

                    return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
                } catch (e) {
                    console.log(e)
                }
            };
            document.getElementById("sTotalDebit").value = formatMoney(document.getElementById("TotalDebit").value, TheDecimalPointForTheLocalCurrency);
            document.getElementById("sTotalCredit").value = formatMoney(document.getElementById("TotalCredit").value, TheDecimalPointForTheLocalCurrency);
            document.getElementById("sNetTotal").value = formatMoney(document.getElementById("NetTOT").value, TheDecimalPointForTheLocalCurrency);
            $(document).on('click', '#SaveToFav', function () {

                bootbox.confirm({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        confirm: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                            className: 'btn-success'
                        },
                        cancel: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            var dialog = bootbox.dialog({
                                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Saving...</p>',
                                closeButton: false
                            });

                            var dataToSave = {

                                ScreenName: '@Resources.Resource.OpeningBalance',
                                ScreenUrl: "/OpeningBalance/Update",
                                ScreenType: 0

                            };

                            $.ajax({
                                type: "POST",
                                url: "/FavScreen/AddToFave",
                                data: JSON.stringify(dataToSave),
                                contentType: 'application/json',
                                success: function (data) {

                                    dialog.modal('hide');
                                    if (data.Code == 0) {
                                        toastr.error(data.Msg);
                                    }
                                    else if (data.Code == 1) {bb                        
                                        toastr.success(data.Msg);
                                    }

                                },
                                error: function (data) {
                                    dialog.modal('hide');
                                    toastr.error(data);
                                }

                            });
                        }
                    }
                });
            });
            $(document).on('click', '#PrintPDF', function () {

                var VoucherNumber = $("#VoucherNumber").val();
                var VoucherDate = $("#VoucherDate").val();

                var TotalCredit = $("#TotalCredit").val();
                var TotalDebit = $("#TotalDebit").val();
           

                if (VoucherNumber == '' || VoucherNumber == null) {
                    VoucherNumber = 0;
                }
                if (TotalCredit == '' || TotalCredit == null) {
                    TotalCredit = 0;
                }
                if (TotalDebit == '' || TotalDebit == null) {
                    TotalDebit = 0;
                }
         


                var words = VoucherDate.split('/');
                VoucherDate = words[0] + words[1] + words[2];


                window.open('/PDFReport/OpeningBalancepdf/' + VoucherNumber + "/" + VoucherDate + "/" + TotalCredit + "/" + TotalDebit + "/0", '_blank');
            });

            $(document).on('click', '#Close', function () {
                window.location = "/Transaction/TransDash";
            });
            $(document).on('click', '#Save', function () {
                document.getElementById("buttonSave").click();
            });
        });
    </script>
}



