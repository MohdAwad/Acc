@model Acc.ViewModels.TransActionFilter
@{
    ViewBag.Title = @Resources.Resource.TransActions;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .panel-body {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-footer {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-title {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .dt-button {
        display: none !important;
    }

    table.dataTable th.dt-center {
        font-size: 8pt !important;
        font-family: Verdana, Geneva, Tahoma, sans-serif;
    }

    #BodyStyle {
        font-size: 8pt;
        font-weight: bold;
        font-family: Verdana, Geneva, Tahoma, sans-serif;
    }

    table.dataTable thead .sorting::after, table.dataTable thead .sorting_asc::after, table.dataTable thead .sorting_desc::after {
        display: none !important;
    }
</style>
<div class="panel card-view">
    <div class="panel-heading" style="background-color: #34495E">
        <div class="pull-left">
            <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.TransActions</h6>
        </div>
        <div class="clearfix"></div>
    </div>
    <div class="panel-body">
        <div class="col-lg-12">
            <div class="col-lg-3">
                <div class="form-group">
                    @Html.LabelFor(m => m.CompanyTransactionKindNo)
                    @if (Resources.Resource.CurLang == "Arb")
                    {
                        @Html.DropDownListFor(m => m.CompanyTransactionKindNo, new SelectList(Model.CompanyTransactionKind, "CompanyTransactionKindID", "ArabicName"), Resources.Resource.CompnyTransactionKind, new { @id = "CompanyTransactionKindNo", @class = "form-control input-sml" })

                    }
                    else
                    {
                        @Html.DropDownListFor(m => m.CompanyTransactionKindNo, new SelectList(Model.CompanyTransactionKind, "CompanyTransactionKindID", "EnglishName"), Resources.Resource.CompnyTransactionKind, new { @id = "CompanyTransactionKindNo", @class = "form-control input-sml " })
                    }
                </div>
            </div>

            <div class="col-lg-3">
                <div class="form-group">
                    @Html.LabelFor(m => m.CurrencyID)
                    @if (Resources.Resource.CurLang == "Arb")
                    {
                        @Html.DropDownListFor(m => m.CurrencyID, new SelectList(Model.Currency, "CurrencyID", "ArabicName"), Resources.Resource.Currency, new { @id = "CurrencyID", @class = "form-control input-sml" })
                    }
                    else
                    {
                        @Html.DropDownListFor(m => m.CurrencyID, new SelectList(Model.Currency, "CurrencyID", "EnglishName"), Resources.Resource.Currency, new { @id = "CurrencyID", @class = "form-control input-sml" })
                    }
                </div>
            </div>
            <div class="col-lg-2">
                <div class="form-group">
                    @Html.LabelFor(m => m.VoucherNumber)
                    @Html.TextBoxFor(m => m.VoucherNumber, new { @id = "VoucherNumber", @class = "form-control input-sml" })
                </div>
            </div>
            <div class="col-lg-2">
                <div class="form-group">
                    @Html.LabelFor(m => m.FromDate)
                    @Html.TextBoxFor(model => model.FromDate, new { @id = "FromDate", @class = "form-control input-sml", @Value = Model.FromDate.ToString("dd/MM/yyyy") })
                </div>
            </div>

            <div class="col-lg-2">
                <div class="form-group">
                    @Html.LabelFor(m => m.ToDate)
                    @Html.TextBoxFor(model => model.ToDate, new { @id = "ToDate", @class = "form-control input-sml", @Value = Model.ToDate.ToString("dd/MM/yyyy") })
                </div>
            </div>
        </div>
        <div class="col-lg-12">

        </div>
        <div class="col-lg-12">
            <a class="btn btn-anim btnSearch" id="btnSearch"><i class="fa fa-search"></i><span class="btn-text">@Resources.Resource.Search</span></a>

            @if (User.IsInRole("AddTransActionTrans") || User.IsInRole("CoOwner"))
            {
                <a class="btn btn-primary btn-anim" id="btnSave"> <i class="fa fa-save"></i><span class="btn-text">@Resources.Resource.New</span></a>
            }

            @if (User.IsInRole("ExportTransActionTrans") || User.IsInRole("CoOwner"))
            {
                <a class="btn btn-anim btnExport" id="btnExport"> <i class="fa fa-lock"></i><span class="btn-text">@Resources.Resource.Export</span></a>
            }

            @if (User.IsInRole("UnExportTransActionTrans") || User.IsInRole("CoOwner"))
            {
                <a class="btn btn-success btn-anim" id="btnUnExport"> <i class="fa fa-unlock"></i><span class="btn-text">@Resources.Resource.UnExport</span></a>
            }

            @if (User.IsInRole("PrintTransActionTrans") || User.IsInRole("CoOwner"))
            {
                <button type="button" class="btn btn-warning btn-anim" id="PrintPDFIndex"><i class=" fa fa-print"></i><span class="btn-text">@Resources.Resource.Print</span></button>
            }
            <button type="submit" class="btn btn-anim btnFav" id="SaveToFav"><i class=" fa fa-star"></i><span class="btn-text">@Resources.Resource.AddToFav</span></button>

            <button type="button" class="btn btn-default btn-anim" id="CloseForm"> <i class="fa fa-times"></i><span class="btn-text">@Resources.Resource.Close</span></button>
        </div>
        <div class="col-lg-12">
            <table id="tdataTable" class="table table-hover table-bordered mb-0" width="100%">
                <thead>
                    <tr>
                        <th>@Resources.Resource.TransactionKind</th>
                        <th>@Resources.Resource.VoucherNumber</th>
                        <th>@Resources.Resource.VoucherDate</th>
                        <th>@Resources.Resource.CurrencyID</th>
                        <th>@Resources.Resource.ReceiptAmount</th>
                        <th>@Resources.Resource.ForeignReceiptAmount</th>
                        <th>@Resources.Resource.UserName</th>
                        <th>@Resources.Resource.Export</th>
                        <th>@Resources.Resource.Detail</th>
                        <th>@Resources.Resource.Update</th>
                        <th>@Resources.Resource.Delete</th>
                        <th>@Resources.Resource.Copy</th>
                        <th>@Resources.Resource.Print</th>
                        <th>@Resources.Resource.Attach</th>
                    </tr>
                </thead>
                <tbody id="BodyStyle">
                </tbody>
            </table>
        </div>
    </div>
    <div class="panel-footer">

    </div>
</div>
<div id="modal-container" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-content">
    </div>
</div>
@Html.TextBoxFor(m => m.TheDecimalPointForTheLocalCurrency, new { @id = "TheDecimalPointForTheLocalCurrency", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TheDecimalPointForTheForeignCurrency, new { @id = "TheDecimalPointForTheForeignCurrency", @style = "visibility : hidden;" })
@Html.TextBoxFor(model => model.CompanyYear, new { @id = "CompanyYear", @class = "form-control input-sml", @style = "visibility : hidden;" })
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

<script>
    $(document).ready(function () {

        $(document).on('click', '#PrintPDFIndex', function () {

            var FromDate = $("#FromDate").val();
            var ToDate = $("#ToDate").val();
            var VoucherNumber = $("#VoucherNumber").val();
            var CompanyTransactionKindNo = $("#CompanyTransactionKindNo").val();
            var CurrencyID = $("#CurrencyID").val();



            if (VoucherNumber == '' || VoucherNumber == null) {
                VoucherNumber = "0";
            }

            if (CompanyTransactionKindNo == '' || CompanyTransactionKindNo == null) {
                CompanyTransactionKindNo = 0;
            }

            if (CurrencyID == '' || CurrencyID == null) {
                CurrencyID = 0;
            }




            var words = FromDate.split('/');
            FromDate = words[0] + words[1] + words[2];
            words = ToDate.split('/');
            ToDate = words[0] + words[1] + words[2];



            window.open('/PDFReport/GetHeadersPDF/' + FromDate + "/" + ToDate + "/" + VoucherNumber + "/" + CompanyTransactionKindNo + "/" + CurrencyID + "/0", '_blank');

        });
        $(document).on('click', '#SaveToFav', function () {
            bootbox.confirm({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                className: 'rubberBand animated',
                buttons: {
                    confirm: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                        className: 'btn-success'
                    },
                    cancel: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                        className: 'btn-danger'
                    }
                },
                callback: function (result) {
                    if (result) {
                        var dialog = bootbox.dialog({
                            title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                            message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Saving...</p>',
                            closeButton: false
                        });

                        var dataToSave = {

                            ScreenName: '@Resources.Resource.TransActions',
                            ScreenUrl: "/TransAction/Index",
                            ScreenType: 0

                        };

                        $.ajax({
                            type: "POST",
                            url: "/FavScreen/AddToFave",
                            data: JSON.stringify(dataToSave),
                            contentType: 'application/json',
                            success: function (data) {

                                dialog.modal('hide');
                                if (data.Code == 0) {
                                    toastr.error(data.Msg);
                                }
                                else if (data.Code == 1) {
                                    toastr.success(data.Msg);
                                }

                            },
                            error: function (data) {
                                dialog.modal('hide');
                                toastr.error(data);
                            }

                        });
                    }
                }
            });
        });
        var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
        var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;
        function validatedate(dateString) {
            var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
            if (dateString.match(dateformat)) {
                var operator = dateString.split('/');
                var datepart = [];
                if (operator.length > 1) {
                    datepart = dateString.split('/');
                }
                var month = parseInt(datepart[1]);
                var day = parseInt(datepart[0]);
                var year = parseInt(datepart[2]);
                var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                if (month == 1 || month > 2) {
                    if (day > ListofDays[month - 1]) {
                        return false;
                    }
                } else if (month == 2) {
                    var leapYear = false;
                    if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                        leapYear = true;
                    }
                    if ((leapYear == false) && (day >= 29)) {
                        return false;
                    } else
                        if ((leapYear == true) && (day > 29)) {
                            return false;
                        }
                }
            }
            else {
                return false;
            }
            return true;
        }
        function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
            try {
                decimalCount = Math.abs(decimalCount);
                decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

                const negativeSign = amount < 0 ? "-" : "";

                let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
                let j = (i.length > 3) ? i.length % 3 : 0;

                return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
            } catch (e) {
                console.log(e)
            }
        };
        $(document).on('click', '#CloseForm', function () {
            window.location = "/Transaction/TransDash";
        });
        $("#FromDate").mask("99/99/9999");
        $("#ToDate").mask("99/99/9999");
        $("#VoucherNumber").focus().select();
        $("#VoucherNumber").keyup(function (event) {
            if (event.keyCode == 13)
                $("#FromDate").focus().select();

        });
        $("#FromDate").keyup(function (event) {
            if (event.keyCode == 13)
                $("#ToDate").focus().select();

        });
        $("#ToDate").keyup(function (event) {
            if (event.keyCode == 13)
                $("#VoucherNumber").focus().select();

        });
        $(document).on('click', '#btnSave', function () {
            window.location = "/TransAction/Create";
        });
        $(document).on('click', '#btnExport', function () {
            window.location = "/TransAction/ExportTransaction";
        });
        $(document).on('click', '#btnUnExport', function () {
            window.location = "/TransAction/UnExportTransaction";
        });
        $(document).on('click', '#btnSearch', function () {
            var dDate = document.getElementById("FromDate").value;
            var dToDate = document.getElementById("ToDate").value;
            var CompanyYear = document.getElementById("CompanyYear").value;
            var d1 = dDate.split("/");
            var d2 = dToDate.split("/");

            var From = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);
            var To = new Date(d2[2], parseInt(d2[1]) - 1, d2[0]);

            if (d1[2] > CompanyYear || d1[2] < CompanyYear) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.DateIsNotWithinThisYear</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                if (d2[2] > CompanyYear || d2[2] < CompanyYear) {
                    bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.DateIsNotWithinThisYear</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                }
                else {
                    if (!validatedate(dDate)) {
                        bootbox.alert({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                ok: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                    className: 'btn-primary'
                                }
                            }
                        });
                    }
                    else if (!validatedate(dToDate)) {
                        bootbox.alert({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                ok: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                    className: 'btn-primary'
                                }
                            }
                        });
                    }
                    else {
                        var dialog = bootbox.dialog({
                            title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                            message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                            closeButton: false
                        });
                        $('#tdataTable').DataTable().clear().draw();
                        $('#tdataTable').DataTable().ajax.reload();
                        dialog.modal('hide');
                    }
                }
            }
        });
        var tabelMemRef = $("#tdataTable").DataTable({
            "language": {
                "emptyTable": '@Resources.Resource.EmptyTable',
                "search": '@Resources.Resource.Search',
                "loadingRecords": '@Resources.Resource.LoadingRecords',
                "processing": '@Resources.Resource.Processing',
                "zeroRecords": '@Resources.Resource.ZeroRecords',
                "info": '@Resources.Resource.Info',
                "infoEmpty": '@Resources.Resource.InfoEmpty',
                "lengthMenu": '@Resources.Resource.LengthMenu',
                "infoFiltered": '@Resources.Resource.InfoFiltered',
                "paginate": {
                    "previous": '@Resources.Resource.Previous',
                    "next": '@Resources.Resource.Next',
                    "first": '@Resources.Resource.First',
                    "last": '@Resources.Resource.Last',
                },
                "aria": {
                    "sortAscending": '@Resources.Resource.SortAscending',
                    "sortDescending": '@Resources.Resource.SortDescending'
                }
            },
            "scrollY": "500px",
            "scrollX": true,
            "paging": false,
            "ordering": true,
            "order": [[2, "asc"]],
            "scrollCollapse": true,
            "fixedColumns": true,
            "columnDefs": [
                { "width": 100, "targets": 0, "className": "dt-center" },
                { "width": 50, "targets": 1, "className": "dt-center" },
                { "width": 70, "targets": 2, "className": "dt-center" },
                { "width": 100, "targets": 3, "className": "dt-center" },
                { "width": 50, "targets": 4, "className": "dt-center" },
                { "width": 100, "targets": 5, "className": "dt-center" },
                { "width": 100, "targets": 6, "className": "dt-center" },
                { "width": 100, "targets": 7, "className": "dt-center" },
                { "width": 10, "targets": 8, "className": "dt-center", "orderable": false },
                { "width": 10, "targets": 9, "className": "dt-center", "orderable": false },
                { "width": 10, "targets": 10, "className": "dt-center", "orderable": false },
                { "width": 10, "targets": 11, "className": "dt-center", "orderable": false },
                { "width": 10, "targets": 12, "className": "dt-center", "orderable": false },
                { "width": 10, "targets": 13, "className": "dt-center", "orderable": false }
            ],
            dom: 'Bfrtip',
            buttons: [

            ],


            ajax: {
                "type": "POST",
                url: "/TransAction/GetHeaders",
                "data": function (d) {
                    d.FromDate = $("#FromDate").val();
                    d.ToDate = $("#ToDate").val();
                    d.VoucherNumber = $("#VoucherNumber").val();
                    d.CompanyTransactionKindNo = $("#CompanyTransactionKindNo").val();
                    d.CurrencyID = $("#CurrencyID").val();
                },

                dataSrc: ""
            },



            columns: [
                {

                    data: "CompanyTransactionName"
                },

                {
                    data: "VoucherNumber"

                },
                {
                    data: "VoucherDate",
                    render: function (data, type, r) {
                        return type === 'sort' ? data : moment(data).format('DD/MM/YYYY')
                    }
                },
                {
                    data: "CurrencyName"

                },
                {
                    data: "TotalAmount",
                    render: function (data, type, r) {
                        return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                    }

                },
                {
                    data: "ForeignTotal",
                    render: function (data, type, r) {
                        return (formatMoney(data, TheDecimalPointForTheForeignCurrency))
                    }

                },


                {
                    data: "UserName"

                },
                {
                    data: "Export"
                },
                {
                    data: "VoucherNumber",
                    render: function (data, type, r) {
                        return "<a  class='btn btn-icon-anim btn-square btn-sm js-modify btnDetail'  href='/TransAction/Detail/" + data + "/" + r.CompanyTransactionKindNo + "/" + r.TransactionKindNo + "/" + r.CompanyYear + " '><i class='fa fa-tasks' style='margin-top: 4px;'></i> </a>";
                    }



                },
                {
                    data: "VoucherNumber",
                    render: function (data, type, r) {

                        if ("@(User.IsInRole("UpdateTransActionTrans") || User.IsInRole("CoOwner"))" == "True") {

                            if (r.Exported == 1) {
                                return "<a  class='btn btn-success btn-icon-anim btn-square btn-sm' href='#' id='Exported'><i class='fa fa-edit' style='margin-top: 4px;'></i> </a>";
                            }
                            else if (r.CheckCase) {
                                return "<a  class='btn btn-success btn-icon-anim btn-square btn-sm ' href='#' id='FreezeDate'><i class='fa fa-edit' style='margin-top: 4px;'></i> </a>";
                            }
                            else {
                                return "<a  class='btn btn-success btn-icon-anim btn-square btn-sm' href='/TransAction/Update/" + data + "/" + r.CompanyTransactionKindNo + "/" + r.TransactionKindNo + "/" + r.CompanyYear + " '><i class='fa fa-edit' style='margin-top: 4px;'></i> </a>";

                            }
                        }
                        else {
                            return "";
                        }
                    }

                },

                {
                    data: "VoucherNumber",
                    render: function (data, type, r) {
                        if ("@(User.IsInRole("DeleteTransActionTrans") || User.IsInRole("CoOwner"))" == "True") {

                            if (r.Exported == 1) {
                                return "<a  class='btn  btn-icon-anim btn-square btn-sm btnDelete' href='#' id='Exported'><i class='fa fa-trash-o' style='margin-top: 4px;'></i> </a>";
                            }
                            else if (r.CheckCase) {
                                return "<a  class='btn btn-icon-anim btn-square btnDelete  btn-sm' href='#' id='FreezeDate'><i class='fa fa-trash-o' style='margin-top: 4px;'></i> </a>";
                            }
                            else {
                                return "<a  class='btn  btn-icon-anim btn-square btn-sm js-modify btnDelete'  href='/TransAction/Delete/" + data + "/" + r.CompanyTransactionKindNo + "/" + r.TransactionKindNo + "/" + r.CompanyYear + " '><i class='fa fa-trash-o' style='margin-top: 4px;'></i> </a>";
                            }

                        }
                        else {
                            return "";
                        }
                    }

                },
                {
                    data: "VoucherNumber",
                    render: function (data, type, r) {
                        if ("@(User.IsInRole("CopyTransActionTrans") || User.IsInRole("CoOwner"))" == "True") {

                            return "<a  class='btn btn-primary btn-icon-anim btn-square btn-sm' href='/TransAction/Copy/" + data + "/" + r.CompanyTransactionKindNo + "/" + r.TransactionKindNo + "/" + r.CompanyYear + " '><i class='fa fa-copy' style='margin-top: 4px;'></i> </a>";
                        }


                        else {
                            return "";
                        }
                    }


                },

                {
                    data: "VoucherNumber",
                    render: function (data, type, r) {
                        if ("@(User.IsInRole("PrintTransActionTrans") || User.IsInRole("CoOwner"))" == "True") {

                            return "<a  class='btn btn-warning btn-icon-anim btn-square btn-sm' target='_blank'  href='/PDFReport/JournalVoucherpdf/" + data + "/" + r.CompanyTransactionKindNo + "/" + r.TransactionKindNo + "/" + r.CompanyYear + "/0" +  " '><i class='fa fa-print' style='margin-top: 4px;'></i> </a>";
                        }

                        else {
                            return "";
                        }

                    }
                },
                {


                    data: "VoucherNumber",
                    render: function (data, type, r) {
                        if ("@(User.IsInRole("AttachTransActionTrans") || User.IsInRole("CoOwner"))" == "True") {

                            return "<a  class='btn btn-icon-anim btn-square btn-sm btnAttach'   href='/TransAction/ShowAttach/" + r.CompanyYear + "/" + data + "/" + r.CompanyTransactionKindNo + "/" + r.TransactionKindNo + " '><i class='fa  fa-cloud-upload'  style='margin-top: 4px;'></i> </a>";



                        }
                        else {
                            return "";
                        }
                    }
                }
            ]

        });
        $(document).on("click", "#Exported", function () {
            bootbox.alert({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.MessageExported</h6>',
                className: 'rubberBand animated',
                buttons: {
                    ok: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                        className: 'btn-primary'
                    }
                }
            });
        });
        $(document).on("click", "#FreezeDate", function () {
            bootbox.alert({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThisDateIsFrozen</h6>',
                className: 'rubberBand animated',
                buttons: {
                    ok: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                        className: 'btn-primary'
                    }
                }
            });
        });
        $("#FromDate").blur(function () {
            var dDate = document.getElementById("FromDate").value;
            var CompanyYear = document.getElementById("CompanyYear").value;
            var d1 = dDate.split("/");
            var From = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);
            if (d1[2] > CompanyYear || d1[2] < CompanyYear) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.DateIsNotWithinThisYear</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                if (!validatedate(dDate)) {
                    bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                }
            }

        });
        $("#ToDate").blur(function () {
            var dDate = document.getElementById("ToDate").value;
            var CompanyYear = document.getElementById("CompanyYear").value;
            var d1 = dDate.split("/");
            var To = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);
            if (d1[2] > CompanyYear || d1[2] < CompanyYear) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.DateIsNotWithinThisYear</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                if (!validatedate(dDate)) {
                    bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                }
            }
        });
        $(document).on('click', '#DeleteTrans', function () {
            bootbox.confirm({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                className: 'rubberBand animated',
                buttons: {
                    confirm: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                        className: 'btn-success'
                    },
                    cancel: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                        className: 'btn-danger'
                    }
                },
                callback: function (result) {
                    if (result) {
                        var dialog = bootbox.dialog({
                            title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                            message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Deleting...</p>',
                            closeButton: false
                        });

                        var dataToSave = {

                            VoucherNumber: $("#VoucherNumberDel").val(),
                            TransactionKindNo: $("#TransactionKindNoDel").val(),
                            CompanyYear: $("#CompanyYearDel").val(),
                            CompanyTransactionKindNo: $("#CompanyTransactionKindNoDel").val()


                        };

                        $.ajax({
                            type: "POST",
                            url: "/TransAction/DeleteTransActionTrans",
                            data: JSON.stringify(dataToSave),
                            contentType: 'application/json',
                            success: function (data) {

                                dialog.modal('hide');
                                if (data.Code == 0) {
                                    toastr.error(data.Msg);
                                }
                                else if (data.Code == 1) {
                                    $('#modal-container').modal('hide');
                                    toastr.success(data.Msg);
                                    tabelMemRef.ajax.reload();



                                }

                            },
                            error: function (data) {
                                dialog.modal('hide');
                                toastr.error(data);
                            }

                        });
                    }
                }
            });




        });
        $('#tdataTable').on('click', '.js-delete', function (e) {

            $('#modal-container').removeData('bs.modal');
            e.preventDefault();
            $(this).removeData('bs.modal');
            $(this).attr('data-target', '#modal-container');
            $(this).attr('data-toggle', 'modal');

        });
        $('#tdataTable').on('click', '.js-modify', function (e) {
            $('#modal-container').removeData('bs.modal');
            e.preventDefault();
            $(this).attr('data-target', '#modal-container');
            $(this).attr('data-toggle', 'modal');


        });
        $('#tdataTable').on('click', '.js-reason', function (e) {
            var d = e.target.getAttribute("data-content");

            bootbox.alert(d);



        });
        $('#js-addnew').on('click', function (e) {
            $('#modal-container').removeData('bs.modal');
            e.preventDefault();
            $(this).attr('data-target', '#modal-container');
            $(this).attr('data-toggle', 'modal');
        });
        $('#tdataTable').on('click', '.modal-close-btn', function () {
            $('#modal-container').modal('hide');
        });
        $('#modal-container').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal');
            console.log('modal-containe');
        });
        $('#CancelModal').on('click', function () {
            return false;
        });
        if ("@(User.IsInRole("UpdateTransActionTrans") || User.IsInRole("CoOwner"))" == "False") {
            var column = tabelMemRef.column(9);

            // Toggle the visibility
            column.visible(!column.visible());

        }
        if ("@(User.IsInRole("DeleteTransActionTrans") || User.IsInRole("CoOwner"))" == "False") {
            var column = tabelMemRef.column(10);

            // Toggle the visibility
            column.visible(!column.visible());

        }
        if ("@(User.IsInRole("CopyTransActionTrans") || User.IsInRole("CoOwner"))" == "False") {
            var column = tabelMemRef.column(11);

            // Toggle the visibility
            column.visible(!column.visible());

        }
        if ("@(User.IsInRole("PrintTransActionTrans") || User.IsInRole("CoOwner"))" == "False") {
            var column = tabelMemRef.column(12);

            // Toggle the visibility
            column.visible(!column.visible());

        }
        if ("@(User.IsInRole("AttachTransActionTrans") || User.IsInRole("CoOwner"))" == "False") {
            var column = tabelMemRef.column(13);

            // Toggle the visibility
            column.visible(!column.visible());

        }
    });
</script>
}






