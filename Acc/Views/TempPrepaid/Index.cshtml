@model Acc.ViewModels.TempPrepaidAndRevenueReceivedFilterVM
@{
    ViewBag.Title = @Resources.Resource.PrepaidExpenses;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .panel-body {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-footer {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-title {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .dt-button {
        display: none !important;
    }

    table.dataTable th.dt-center {
        font-size: 8pt !important;
        font-family: Verdana, Geneva, Tahoma, sans-serif;
    }

    #BodyStyle {
        font-size: 8pt;
        font-weight: bold;
        font-family: Verdana, Geneva, Tahoma, sans-serif;
    }

    table.dataTable thead .sorting::after, table.dataTable thead .sorting_asc::after, table.dataTable thead .sorting_desc::after {
        display: none !important;
    }
</style>
<script>
    function GetSelectedExpenseAccountSearch(data) {
        if (data.AccountNumber != null && data.AccountNumber != '') {
            document.getElementById("ExpenseAccountNumber").value = data.AccountNumber;
            document.getElementById("ExpenseAccountName").value = data.AccountName;
        }
        else {
            document.getElementById("ExpenseAccountNumber").value = '';
            document.getElementById("ExpenseAccountName").value = '';
        }

    }
    function GetSelectedPrepaidExpenseAccountSearch(data) {
        if (data.AccountNumber != null && data.AccountNumber != '') {
            document.getElementById("PrepaidExpenseAccountNumber").value = data.AccountNumber;
            document.getElementById("PrepaidExpenseAccountName").value = data.AccountName;
        }
        else {
            document.getElementById("PrepaidExpenseAccountNumber").value = '';
            document.getElementById("PrepaidExpenseAccountName").value = '';
        }

    }

    var ExpenseNumber = [];
    $.getJSON('@Url.Action("GetDefinitionExpense", "MultiUse")', { id: 0 }, function (Data) {
        ExpenseNumber = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].AccountName, value: Data[i].AccountNumber, stop: Data[i].StoppedAccount };
                ExpenseNumber.push(r);
            }
    });
    $(function () {
        $("#ExpenseAccountNumber").autocomplete({
            source: ExpenseNumber,
            select: function (event, ui) {
                document.getElementById("ExpenseAccountNumber").value = ui.item.value;
                document.getElementById("ExpenseAccountName").value = ui.item.label;
            }
        });
    });

    var PrepaidExpenseNumber = [];
    $.getJSON('@Url.Action("GetDefinitionPaidExpense", "MultiUse")', { id: 0 }, function (Data) {
        PrepaidExpenseNumber = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].AccountName, value: Data[i].AccountNumber, stop: Data[i].StoppedAccount };
                PrepaidExpenseNumber.push(r);
            }
    });
    $(function () {
        $("#PrepaidExpenseAccountNumber").autocomplete({
            source: PrepaidExpenseNumber,
            select: function (event, ui) {
                document.getElementById("PrepaidExpenseAccountNumber").value = ui.item.value;
                document.getElementById("PrepaidExpenseAccountName").value = ui.item.label;
            }
        });
    });
</script>
<div class="panel card-view">
    <div class="panel-heading" style="background-color: #34495E">
        <div class="pull-left">
            <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.PrepaidExpenses</h6>
        </div>
        <div class="clearfix"></div>
    </div>
    <div class="panel-body">
        <div class="col-lg-12">
            <div class="col-lg-3">
                <div class="form-group">
                    @Html.LabelFor(m => m.ExpenseAccountNumber)
                    <div class="form-group  input-group">
                        @Html.TextBoxFor(m => m.ExpenseAccountNumber, new { @id = "ExpenseAccountNumber", @class = "form-control input-sml"})
                        <span class="input-group-btn">
                            <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnExpenseAccountNumber">
                                <i class="fa fa-search"></i>
                            </button>
                        </span>
                    </div>
                </div>
            </div>
            <div class="col-lg-3">
                @Html.Label(Resources.Resource.AccountName)
                <div class="form-group input-group">
                    @Html.TextBoxFor(m => m.ExpenseAccountName, new { @id = "ExpenseAccountName", @class = "form-control input-sml", @readonly = "readonly" })
                    <span class="input-group-btn">
                        <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearExpenseAccountNumber">
                            <i class="fa fa-minus-square"></i>
                        </button>
                    </span>
                </div>
            </div>
            <div class="col-lg-3">
                <div class="form-group">
                    @Html.LabelFor(m => m.PrepaidExpenseAccountNumber)
                    <div class="form-group  input-group">
                        @Html.TextBoxFor(m => m.PrepaidExpenseAccountNumber, new { @id = "PrepaidExpenseAccountNumber", @class = "form-control input-sml" })
                        <span class="input-group-btn">
                            <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnPrepaidExpenseAccountNumber">
                                <i class="fa fa-search"></i>
                            </button>
                        </span>
                    </div>
                </div>
            </div>
            <div class="col-lg-3">
                @Html.Label(Resources.Resource.AccountName)
                <div class="form-group input-group">
                    @Html.TextBoxFor(m => m.PrepaidExpenseAccountName, new { @id = "PrepaidExpenseAccountName", @class = "form-control input-sml", @readonly = "readonly" })
                    <span class="input-group-btn">
                        <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearPrepaidExpenseAccountNumber">
                            <i class="fa fa-minus-square"></i>
                        </button>
                    </span>
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <div class="col-lg-2">
                <div class="form-group">
                    @Html.LabelFor(m => m.VoucherNumber)
                    @Html.TextBoxFor(m => m.VoucherNumber, new { @id = "VoucherNumber", @class = "form-control input-sml" })
                </div>
            </div>
            <div class="col-lg-2">
                <div class="form-group">
                    @Html.LabelFor(m => m.FromDate)
                    @Html.TextBoxFor(model => model.FromDate, new { @id = "FromDate", @class = "form-control input-sml", @Value = Model.FromDate.ToString("dd/MM/yyyy") })
                </div>
            </div>
            <div class="col-lg-2">
                <div class="form-group">
                    @Html.LabelFor(m => m.ToDate)
                    @Html.TextBoxFor(model => model.ToDate, new { @id = "ToDate", @class = "form-control input-sml", @Value = Model.ToDate.ToString("dd/MM/yyyy") })
                </div>
            </div>
            <div class="col-lg-2">
                <div class="form-group">
                    @Html.LabelFor(m => m.FromDateFirstPayment)
                    @Html.TextBoxFor(model => model.FromDateFirstPayment, new { @id = "FromDateFirstPayment", @class = "form-control input-sml", @Value = Model.FromDate.ToString("dd/MM/yyyy") })
                </div>
            </div>
            <div class="col-lg-2">
                <div class="form-group">
                    @Html.LabelFor(m => m.ToDateFirstPayment)
                    @Html.TextBoxFor(model => model.ToDateFirstPayment, new { @id = "ToDateFirstPayment", @class = "form-control input-sml", @Value = Model.ToDate.ToString("dd/MM/yyyy") })
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <a class="btn btn-info btn-anim btnSearch" id="btnSearch"> <i class="fa fa-search"></i><span class="btn-text">@Resources.Resource.Search</span></a>
            @if (User.IsInRole("AddTempPrepaid") || User.IsInRole("CoOwner"))
            {

                <a class="btn btn-primary btn-anim" id="btnSave"> <i class="fa fa-save"></i><span class="btn-text">@Resources.Resource.New</span></a>
            }
            @if (User.IsInRole("AccumulativeTempPrepaid") || User.IsInRole("CoOwner"))
            {

                <a class="btn btn-success btn-anim" id="btnCollect"> <i class="fa fa-sort-numeric-asc"></i><span class="btn-text">@Resources.Resource.Collect</span></a>
            }
            @if (User.IsInRole("PrintTempPrepaid") || User.IsInRole("CoOwner"))
            {

                <button type="button" class="btn btn-warning btn-anim" id="PrintPDF"><i class=" fa fa-print"></i><span class="btn-text">@Resources.Resource.Print</span></button>
            }
            <button type="submit" class="btn btn-anim btnFav" id="SaveToFav"><i class=" fa fa-star"></i><span class="btn-text">@Resources.Resource.AddToFav</span></button>

            <button type="button" class="btn btn-default btn-anim" id="CloseForm"> <i class="fa fa-times"></i><span class="btn-text">@Resources.Resource.Close</span></button>
        </div>
        <div class="col-lg-12" style="margin-top:10px;">
            <table id="tdataTable" class="table table-hover table-bordered mb-0" width="100%">
                <thead>
                    <tr>
                        <th>@Resources.Resource.VoucherNumber</th>
                        <th>@Resources.Resource.VoucherDate</th>
                        <th>@Resources.Resource.ExpenseAccountNumber</th>
                        <th>@Resources.Resource.PrepaidExpenseAccountNumber</th>
                        <th>@Resources.Resource.Amount</th>
                        <th>@Resources.Resource.NumberOfPayments</th>
                        <th>@Resources.Resource.DateFirstPayment</th>
                        <th>@Resources.Resource.RemainingPayments</th>
                        <th>@Resources.Resource.RemainingAmount</th>
                        <th>@Resources.Resource.UserName</th>
                        <th>@Resources.Resource.Detail</th>
                        <th>@Resources.Resource.Update</th>
                        <th>@Resources.Resource.Delete</th>
                        <th>@Resources.Resource.Copy</th>
                        <th>@Resources.Resource.Print</th>
                        <th>@Resources.Resource.Attach</th>
                    </tr>
                </thead>
                <tbody id="BodyStyle">
                </tbody>
            </table>
        </div>
    </div>
    <div class="panel-footer">

    </div>
</div>
<div id="modal-container" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-content">
    </div>
</div>
@Html.TextBoxFor(m => m.TheDecimalPointForTheLocalCurrency, new { @id = "TheDecimalPointForTheLocalCurrency", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TheDecimalPointForTheForeignCurrency, new { @id = "TheDecimalPointForTheForeignCurrency", @style = "visibility : hidden;" })
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

<script>
    $(document).ready(function () {
                $(document).on('click', '#SaveToFav', function () {

            bootbox.confirm({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                className: 'rubberBand animated',
                buttons: {
                    confirm: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                        className: 'btn-success'
                    },
                    cancel: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                        className: 'btn-danger'
                    }
                },
                callback: function (result) {
                    if (result) {
                        var dialog = bootbox.dialog({
                            title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                            message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Saving...</p>',
                            closeButton: false
                        });

                        var dataToSave = {

                            ScreenName: '@Resources.Resource.PrepaidExpenses',
                            ScreenUrl: "/TempPrepaid/Index",
                            ScreenType: 0

                        };

                        $.ajax({
                            type: "POST",
                            url: "/FavScreen/AddToFave",
                            data: JSON.stringify(dataToSave),
                            contentType: 'application/json',
                            success: function (data) {

                                dialog.modal('hide');
                                if (data.Code == 0) {
                                    toastr.error(data.Msg);
                                }
                                else if (data.Code == 1) {
                                    toastr.success(data.Msg);
                                }

                            },
                            error: function (data) {
                                dialog.modal('hide');
                                toastr.error(data);
                            }

                        });
                    }
                }
            });
        });


        $(document).on('click', '#PrintPDF', function () {

            var FromDate = $("#FromDate").val();
            var ToDate = $("#ToDate").val();
            var ExpenseAccountNumber = $("#ExpenseAccountNumber").val();
            var PrepaidExpenseAccountNumber = $("#PrepaidExpenseAccountNumber").val();
            var VoucherNumber = $("#VoucherNumber").val();
            var FromDateFirstPayment = $("#FromDateFirstPayment").val();
            var ToDateFirstPayment = $("#ToDateFirstPayment").val();



            if (VoucherNumber == '' || VoucherNumber == null) {
                VoucherNumber = "0";
            }


            if (ExpenseAccountNumber == '' || ExpenseAccountNumber == null) {
                ExpenseAccountNumber = 0;
            }

            if (PrepaidExpenseAccountNumber == '' || PrepaidExpenseAccountNumber == null) {
                PrepaidExpenseAccountNumber = 0;
            }

            if (PrepaidExpenseAccountNumber == '' || PrepaidExpenseAccountNumber == null) {
                PrepaidExpenseAccountNumber = 0;
            }


            var words = FromDate.split('/');
            FromDate = words[0] + words[1] + words[2];
            words = ToDate.split('/');
            ToDate = words[0] + words[1] + words[2];
            words = FromDateFirstPayment.split('/');
            FromDateFirstPayment = words[0] + words[1] + words[2];
            words = ToDateFirstPayment.split('/');
            ToDateFirstPayment = words[0] + words[1] + words[2];



            window.open('/PDFReport/GetPrepaidPDF/' + FromDate + "/" + ToDate + "/" + ExpenseAccountNumber + "/" + PrepaidExpenseAccountNumber + "/" + VoucherNumber + "/" + FromDateFirstPayment + "/" + ToDateFirstPayment + "/0", '_blank');

        });

        var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
        var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;
        function validatedate(dateString) {
            var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
            if (dateString.match(dateformat)) {
                var operator = dateString.split('/');
                var datepart = [];
                if (operator.length > 1) {
                    datepart = dateString.split('/');
                }
                var month = parseInt(datepart[1]);
                var day = parseInt(datepart[0]);
                var year = parseInt(datepart[2]);
                var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                if (month == 1 || month > 2) {
                    if (day > ListofDays[month - 1]) {
                        return false;
                    }
                } else if (month == 2) {
                    var leapYear = false;
                    if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                        leapYear = true;
                    }
                    if ((leapYear == false) && (day >= 29)) {
                        return false;
                    } else
                        if ((leapYear == true) && (day > 29)) {
                            return false;
                        }
                }
            }
            else {
                return false;
            }
            return true;
        }
        function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
            try {
                decimalCount = Math.abs(decimalCount);
                decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

                const negativeSign = amount < 0 ? "-" : "";

                let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
                let j = (i.length > 3) ? i.length % 3 : 0;

                return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
            } catch (e) {
                console.log(e)
            }
        };
        $(document).on('click', '#CloseForm', function () {
            window.location = "/Transaction/TransDash";
        });
        $("#FromDate").mask("99/99/9999");
        $("#ToDate").mask("99/99/9999");
        $("#FromDateFirstPayment").mask("99/99/9999");
        $("#ToDateFirstPayment").mask("99/99/9999");
        $("#ExpenseAccountNumber").focus().select();
        $("#VoucherNumber").keyup(function (event) {
            if (event.keyCode == 13)
                $("#FromDate").focus().select();

        });
        $("#FromDate").keyup(function (event) {
            if (event.keyCode == 13)
                $("#ToDate").focus().select();

        });
        $("#ToDate").keyup(function (event) {
            if (event.keyCode == 13)
                $("#FromDateFirstPayment").focus().select();

        });
        $("#FromDateFirstPayment").keyup(function (event) {
            if (event.keyCode == 13)
                $("#ToDateFirstPayment").focus().select();

        });
        $("#ToDateFirstPayment").keyup(function (event) {
            if (event.keyCode == 13)
                $("#ExpenseAccountNumber").focus().select();

        });
        $(document).on('click', '#btnSave', function () {
            window.location = "/TempPrepaid/Create";
        });
        $(document).on('click', '#btnCollect', function () {
            window.location = "/TempPrepaid/Collection";
        });
        $(document).on('click', '#btnSearch', function () {
            var dDate = document.getElementById("FromDate").value;
            var dToDate = document.getElementById("ToDate").value;
            var dFirstPayment = document.getElementById("FromDateFirstPayment").value;
            var dToFirtstPayment = document.getElementById("ToDateFirstPayment").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else if (!validatedate(dToDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else if (!validatedate(dFirstPayment)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else if (!validatedate(dToFirtstPayment)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                $('#tdataTable').DataTable().clear().draw();
                $('#tdataTable').DataTable().ajax.reload();
                dialog.modal('hide');
            }
        });
        $('#BtnExpenseAccountNumber').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchExpenseAccountNumber/ExpenseAccountNumberSearch';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnPrepaidExpenseAccountNumber').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchPaidExpenseAccountNumber/PrepaidExpenseAccountNumberSearch';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnClearExpenseAccountNumber').on('click', function () {
            document.getElementById("ExpenseAccountNumber").value = '';
            document.getElementById("ExpenseAccountName").value = '';
        });
        $('#BtnClearPrepaidExpenseAccountNumber').on('click', function () {
            document.getElementById("PrepaidExpenseAccountNumber").value = '';
            document.getElementById("PrepaidExpenseAccountName").value = '';
        });
        $(document).on('click', '.js-Pop', function (e) {
            $('#modal-container').removeData('bs.modal');
            e.preventDefault();
            $(this).attr('data-target', '#modal-container');
            $(this).attr('data-toggle', 'modal');

        });
        $('#modal-container').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal');

        });
        $('#CancelModal').on('click', function () {
            return false;
        });
        var tabelMemRef = $("#tdataTable").DataTable({
            "language": {

                "emptyTable": '@Resources.Resource.EmptyTable',
                "search": '@Resources.Resource.Search',
                "loadingRecords": '@Resources.Resource.LoadingRecords',
                "processing": '@Resources.Resource.Processing',
                "zeroRecords": '@Resources.Resource.ZeroRecords',
                "info": '@Resources.Resource.Info',
                "infoEmpty": '@Resources.Resource.InfoEmpty',
                "lengthMenu": '@Resources.Resource.LengthMenu',
                "infoFiltered": '@Resources.Resource.InfoFiltered',
                "paginate": {
                    "previous": '@Resources.Resource.Previous',
                    "next": '@Resources.Resource.Next',
                    "first": '@Resources.Resource.First',
                    "last": '@Resources.Resource.Last',
                },
                "aria": {
                    "sortAscending": '@Resources.Resource.SortAscending',
                    "sortDescending": '@Resources.Resource.SortDescending'
                }
            },
            "scrollY": "500px",
            "scrollX": true,
            "paging": false,
            "ordering": true,
            "order": [[1, "asc"]],
            "scrollCollapse": true,
            "fixedColumns": true,
            "columnDefs": [
                { "width": 50, "targets": 0, "className": "dt-center" },
                { "width": 70, "targets": 1, "className": "dt-center" },
                { "width": 100, "targets": 2, "className": "dt-center" },
                { "width": 100, "targets": 3, "className": "dt-center" },
                { "width": 100, "targets": 4, "className": "dt-center" },
                { "width": 50, "targets": 5, "className": "dt-center" },
                { "width": 70, "targets": 6, "className": "dt-center" },
                { "width": 50, "targets": 7, "className": "dt-center" },
                { "width": 100, "targets": 8, "className": "dt-center" },
                { "width": 100, "targets": 9, "className": "dt-center" },
                { "width": 10, "targets": 10, "className": "dt-center", "orderable": false },
                { "width": 10, "targets": 11, "className": "dt-center", "orderable": false },
                { "width": 10, "targets": 12, "className": "dt-center", "orderable": false },
                { "width": 10, "targets": 13, "className": "dt-center", "orderable": false },
                { "width": 10, "targets": 14, "className": "dt-center", "orderable": false },
                { "width": 10, "targets": 15, "className": "dt-center", "orderable": false }],

                dom: 'Bfrtip',
                buttons: [

                ],


                ajax: {
                    "type": "POST",
                    url: "/TempPrepaid/GetPrepaid",
                    "data": function (d) {
                        d.FromDate = $("#FromDate").val();
                        d.ToDate = $("#ToDate").val();
                        d.ExpenseAccountNumber = $("#ExpenseAccountNumber").val();
                        d.PrepaidExpenseAccountNumber = $("#PrepaidExpenseAccountNumber").val();
                        d.VoucherNumber = $("#VoucherNumber").val();
                        d.FromDateFirstPayment = $("#FromDateFirstPayment").val();
                        d.ToDateFirstPayment = $("#ToDateFirstPayment").val();
                    },

                    dataSrc: ""
                },
                columns: [
                    {
                        data: "VoucherNumber"

                    },
                    {
                        data: "VoucherDate",
                        render: function (data, type, r) {
                            return type === 'sort' ? data : moment(data).format('DD/MM/YYYY')
                        }
                    },
                    {
                        data: "ExpenseAccountName"

                    },
                    {
                        data: "PrepaidExpenseAccountName"

                    },
                    {
                        data: "Total",
                        render: function (data, type, r) {
                            return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                        }

                    },
                    {
                        data: "NumberOfPayments",
                        render: function (data, type, r) {
                            return parseInt(data)
                        }
                    },
                    {
                        data: "DateFirstPayment",
                        render: function (data, type, r) {
                            return type === 'sort' ? data : moment(data).format('DD/MM/YYYY')
                        }
                    },
                    {
                        data: "RemainingPayments",

                        render: function (data, type, r) {
                            return parseInt(data)
                        }

                    },
                    {
                        data: "RemainingAmount",
                        render: function (data, type, r) {
                            return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                        }

                    },
                    {
                        data: "UserName"

                    },
                    {
                        data: "VoucherNumber",
                        render: function (data, type, r) {


                            return "<a  class='btn btn-icon-anim btn-square btn-sm btnDetail'  href='/TempPrepaid/Detail/" + data + "/" + r.CompanyTransactionKindNo + "/" + r.TransactionKindNo + "/" + r.CompanyYear + " '><i class='fa fa-tasks' style='margin-top: 4px;'></i> </a>";

                        }
                    },
                    {

                        data: "VoucherNumber",
                        render: function (data, type, r) {

                            if ("@(User.IsInRole("UpdateTempPrepaid") || User.IsInRole("CoOwner"))" == "True") {
                                if (r.Differences > 0 && r.RemainingPayments == 0) {
                                    return "<a  class='btn btn-success btn-icon-anim btn-square btn-sm' href='#' id='UpdateDifferences'><i class='fa fa-edit' style='margin-top: 4px;'></i> </a>";
                                }
                                else if (r.CheckCase) {
                                    return "<a  class='btn btn-success btn-icon-anim btn-square btn-sm ' href='#' id='FreezeDate'><i class='fa fa-edit' style='margin-top: 4px;'></i> </a>";
                                }
                                else if (r.Differences == 0) {
                                    return "<a  class='btn btn-success btn-icon-anim btn-square btn-sm' href='/TempPrepaid/Update/" + data + "/" + r.CompanyTransactionKindNo + "/" + r.TransactionKindNo + "/" + r.CompanyYear + "'><i class='fa fa-edit' style='margin-top: 4px;'></i> </a>";
                                }
                                else {
                                    return "<a  class='btn btn-success btn-icon-anim btn-square btn-sm' href='/TempPrepaid/UpdateTempPrepaid/" + data + "/" + r.CompanyTransactionKindNo + "/" + r.TransactionKindNo + "/" + r.CompanyYear + "'><i class='fa fa-edit' style='margin-top: 4px;'></i> </a>";
                                }

                            }
                            else {
                                return "";

                            }

                        }

                    },
                    {
                        data: "VoucherNumber",
                        render: function (data, type, r) {
                            if ("@(User.IsInRole("DeleteTempPrepaid") || User.IsInRole("CoOwner"))" == "True") {


                                if (r.Differences > 0 && r.RemainingPayments != 0) {
                                    return "<a  class='btn btn-icon-anim btn-square btn-sm btnDelete'  href='#' id='DeleteDifferences'><i class='fa fa-trash-o' style='margin-top: 4px;'></i> </a>";
                                }
                                else if (r.CheckCase) {
                                    return "<a  class='btn btn-icon-anim btn-square btnDelete  btn-sm' href='#' id='FreezeDate'><i class='fa fa-trash-o' style='margin-top: 4px;'></i> </a>";
                                }
                                else {
                                    return "<a  class='btn bbtn-icon-anim btn-square js-modify btn-sm btnDelete'   href='/TempPrepaid/Delete/" + data + "/" + r.CompanyTransactionKindNo + "/" + r.TransactionKindNo + "/" + r.CompanyYear +  " '><i class='fa fa-trash-o' style='margin-top: 4px;'></i> </a>";
                                }
                            }
                            else {
                                return "";



                            }

                        }

                    },
                    {
                    data: "VoucherNumber",
                    render: function (data, type, r) {

                        if ("@(User.IsInRole("CopyTempPrepaid") || User.IsInRole("CoOwner"))" == "True") {


                            return "<a  class='btn btn-primary btn-icon-anim btn-square btn-sm ' href='/TempPrepaid/Copy/" + data + "/" + r.CompanyTransactionKindNo + "/" + r.TransactionKindNo + "/" + r.CompanyYear +  " '><i class='fa fa-copy' style='margin-top: 4px;'></i> </a>";
                        }

                        else {
                            return "";
                        }


                    }
                },
                {
                    data: "VoucherNumber",
                    render: function (data, type, r) {

                        if ("@(User.IsInRole("PrintTempPrepaid") || User.IsInRole("CoOwner"))" == "True") {
                            return "<a  class='btn btn-warning btn-icon-anim btn-square btn-sm ' target='_blank'  href='/PDFReport/GetTempPrepaidPDF/" + data + "/" + r.CompanyTransactionKindNo + "/" + r.TransactionKindNo + "/" + r.CompanyYear +  " '><i class='fa fa-print' style='margin-top: 4px;'></i> </a>";

                        }
                        else {
                            return "";

                        }


                    }
                    },
                {



                    data: "VoucherNumber",
                    render: function (data, type, r) {
                        if ("@(User.IsInRole("AttachTempPrepaid") || User.IsInRole("CoOwner"))" == "True") {

                            return "<a  class='btn btn-icon-anim btn-square btnAttach btn-sm' href='/TempPrepaid/ShowAttach/" + r.CompanyYear + "/" + data + "/" + r.CompanyTransactionKindNo + "/" + r.TransactionKindNo + " '><i class='fa fa-cloud-upload' style='margin-top: 4px;'></i> </a>";
                        }
                        else {
                            return "";
                        }
                    }
                }
                ]

            });
        $(document).on("click", "#DeleteDifferences", function () {
            bootbox.alert({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.MessageDeleteDifferences</h6>',
                className: 'rubberBand animated',
                buttons: {
                    ok: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                        className: 'btn-primary'
                    }
                }
            });
        });
        $(document).on("click", "#UpdateDifferences", function () {
            bootbox.alert({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.MessageUpdateDifferences</h6>',
                className: 'rubberBand animated',
                buttons: {
                    ok: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                        className: 'btn-primary'
                    }
                }
            });
        });
        $(document).on("click", "#FreezeDate", function () {
            bootbox.alert({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThisDateIsFrozen</h6>',
                className: 'rubberBand animated',
                buttons: {
                    ok: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                        className: 'btn-primary'
                    }
                }
            });
        });
        if ("@(User.IsInRole("UpdateTempPrepaid") || User.IsInRole("CoOwner"))" == "False") {

            var column = tabelMemRef.column(11);

            // Toggle the visibility
            column.visible(!column.visible());
        }

         if ("@(User.IsInRole("DeleteTempPrepaid") || User.IsInRole("CoOwner"))" == "False") {

            var column = tabelMemRef.column(12);

            // Toggle the visibility
            column.visible(!column.visible());
        }

        if ("@(User.IsInRole("CopyTempPrepaid") || User.IsInRole("CoOwner"))" == "False") {

            var column = tabelMemRef.column(13);

            // Toggle the visibility
            column.visible(!column.visible());
        }

        if ("@(User.IsInRole("PrintTempPrepaid") || User.IsInRole("CoOwner"))" == "False") {

            var column = tabelMemRef.column(14);

            // Toggle the visibility
            column.visible(!column.visible());
        }
        if ("@(User.IsInRole("AttachTempPrepaid") || User.IsInRole("CoOwner"))" == "False") {

            var column = tabelMemRef.column(15);

            // Toggle the visibility
            column.visible(!column.visible());
        }
        $("#FromDate").blur(function () {
            var dDate = document.getElementById("FromDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("FromDate").value = '01/01/' + new Date().getFullYear()
            }
        });
        $("#ToDate").blur(function () {
            var dDate = document.getElementById("ToDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("ToDate").value = '01/01/' + new Date().getFullYear()
            }
        });
        $("#FromDateFirstPayment").blur(function () {
            var dDate = document.getElementById("FromDateFirstPayment").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("FromDateFirstPayment").value = '01/01/' + new Date().getFullYear()
            }
        });
        $("#ToDateFirstPayment").blur(function () {
            var dDate = document.getElementById("ToDateFirstPayment").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("ToDateFirstPayment").value = '01/01/' + new Date().getFullYear()
            }
        });


        $("#ExpenseAccountNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#PrepaidExpenseAccountNumber").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchExpenseAccountNumber/ExpenseAccountNumberSearch';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $("#ExpenseAccountNumber").blur(function () {
            var AccountNumber = document.getElementById("ExpenseAccountNumber").value;
            if (AccountNumber == '') {
                document.getElementById("ExpenseAccountName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckDefinitionExpense", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("ExpenseAccountNumber").value = '';
                            document.getElementById("ExpenseAccountName").value = '';
                            $("#ExpenseAccountNumber").focus();
                        }
                        else {
                            document.getElementById("ExpenseAccountName").value = Data.AccountName;

                        }
                    });
                }
            }
        });
        $("#PrepaidExpenseAccountNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#VoucherNumber").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchPaidExpenseAccountNumber/PrepaidExpenseAccountNumberSearch';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $("#PrepaidExpenseAccountNumber").blur(function () {
            var AccountNumber = document.getElementById("PrepaidExpenseAccountNumber").value;
            if (AccountNumber == '') {
                document.getElementById("PrepaidExpenseAccountName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckDefinitionPaidExpense", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("PrepaidExpenseAccountNumber").value = '';
                            document.getElementById("PrepaidExpenseAccountName").value = '';
                            $("#PrepaidExpenseAccountNumber").focus();
                        }
                        else {
                            document.getElementById("PrepaidExpenseAccountName").value = Data.AccountName;

                        }
                    });
                }
            }
        });
    });

</script>
}

