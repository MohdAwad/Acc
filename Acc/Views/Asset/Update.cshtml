@model Acc.ViewModels.AssetVM
@{
    ViewBag.Title = @Resources.Resource.Update;
}
    <style>
        .modal-body {
            font-family: Verdana, Geneva, Tahoma, sans-serif
        }

        .modal-footer {
            font-family: Verdana, Geneva, Tahoma, sans-serif
        }

        .modal-title {
            font-family: Verdana, Geneva, Tahoma, sans-serif
        }
        .modal-lg {
            width: 80%
        }
    </style>
    <script>


   var AccNumber = [];
    $.getJSON('@Url.Action("GetAcountAcc", "MultiUse")', { id: 0 }, function (Data) {
        AccNumber = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].AccountName, value: Data[i].AccountNumber, stop: Data[i].StoppedAccount };
                AccNumber.push(r);
            }
    });
    var DefinitionNumber = [];
    $.getJSON('@Url.Action("GetDefinitionExpense", "MultiUse")', { id: 0 }, function (Data) {
        DefinitionNumber = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].AccountName, value: Data[i].AccountNumber, stop: Data[i].StoppedAccount };
                DefinitionNumber.push(r);
            }
    });
    var ClientNumber = [];
    $.getJSON('@Url.Action("GetClientAccount", "MultiUse")', { id: 0 }, function (Data) {
        ClientNumber = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].AccountName, value: Data[i].AccountNumber, stop: Data[i].StoppedAccount };
                ClientNumber.push(r);
            }
    });
    var CostCenter = [];
    $.getJSON('@Url.Action("GetCostCenter", "MultiUse")', { id: 0 }, function (Data) {
        CostCenter = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].CostName, value: Data[i].CostNumber, stop: Data[i].StoppedAccount };
                CostCenter.push(r);
            }
    });
    $(function () {
        $("#DebitAccountNo").autocomplete({
            source: DefinitionNumber,
            select: function (event, ui) {
                document.getElementById("DebitAccountNo").value = ui.item.value;
                document.getElementById("DebitAccountName").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#CreditAccountNo").autocomplete({
            source: AccNumber,
            select: function (event, ui) {
                document.getElementById("CreditAccountNo").value = ui.item.value;
                document.getElementById("CreditAccountName").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#DebitCostNumber").autocomplete({
            source: CostCenter,
            select: function (event, ui) {
                document.getElementById("DebitCostNumber").value = ui.item.value;
                document.getElementById("DebitCostName").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#SupplierAccountNo").autocomplete({
            source: ClientNumber,
            select: function (event, ui) {
                document.getElementById("SupplierAccountNo").value = ui.item.value;
                document.getElementById("SupplierAccountName").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#DebitCostNo").autocomplete({
            source: CostCenter,
            select: function (event, ui) {
                document.getElementById("DebitCostNo").value = ui.item.value;
                document.getElementById("DebitCostName").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#CreditCostNo").autocomplete({
            source: CostCenter,
            select: function (event, ui) {
                document.getElementById("CreditCostNo").value = ui.item.value;
                document.getElementById("CreditCostName").value = ui.item.label;
            }
        });
    });
    function validatedate(dateString) {
            var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
            if (dateString.match(dateformat)) {
                var operator = dateString.split('/');
                var datepart = [];
                if (operator.length > 1) {
                    datepart = dateString.split('/');
                }
                var month = parseInt(datepart[1]);
                var day = parseInt(datepart[0]);
                var year = parseInt(datepart[2]);
                var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                if (month == 1 || month > 2) {
                    if (day > ListofDays[month - 1]) {
                        return false;
                    }
                } else if (month == 2) {
                    var leapYear = false;
                    if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                        leapYear = true;
                    }
                    if ((leapYear == false) && (day >= 29)) {
                        return false;
                    } else
                        if ((leapYear == true) && (day > 29)) {
                            return false;
                        }
                }
            }
            else {
                return false;
            }
            return true;
        }
    var WorkWithCostCenter = document.getElementById("WorkWithCostCenter").checked;
    $("#ConsStartDate").mask("99/99/9999");
    $("#CombinedtDate").mask("99/99/9999");
    $("#PurchaseInvDate").mask("99/99/9999");
    $("#GuaranteedDate").mask("99/99/9999");
    $("#LastMaintenanceDate").mask("99/99/9999");
    $('#FAssetTypeID').change(function () {
            var SelectedValue = $("#FAssetTypeID").val();
            if (SelectedValue != null && SelectedValue != '') {
                $.getJSON('@Url.Action("GetAssetTypeByID", "AssetType")', { id: SelectedValue }, function (Data) {
                    if (Data != null) {
                        document.getElementById("AssetConsumRatio").value = Data.ConsRatio;
                    } else {
                    };
                });
            } else {
            }

    });
    $('#BtnClearDebitAccountNo').on('click', function () {
        document.getElementById("DebitAccountNo").value = '';
        document.getElementById("DebitAccountName").value = '';
    });
    $('#BtnClearCreditAccountNo').on('click', function () {
        document.getElementById("CreditAccountNo").value = '';
        document.getElementById("CreditAccountName").value = '';
    });
    $('#BtnClearDebitCostNo').on('click', function () {
        document.getElementById("DebitCostName").value = '';
        document.getElementById("DebitCostNo").value = '';
    });
    $('#BtnClearCreditCostNo').on('click', function () {
        document.getElementById("CreditCostNo").value = '';
        document.getElementById("CreditCostName").value = '';
    });
    $('#BtnClearSupplierAccountNo').on('click', function () {
        document.getElementById("SupplierAccountNo").value = '';
        document.getElementById("SupplierAccountName").value = '';
    });
    $("#AssetName").focus().select();
    $("#AssetName").keyup(function (event) {
        if (event.keyCode == 13)
            $("#AssetBarCode").focus().select();
    });
    $("#AssetBarCode").keyup(function (event) {
        if (event.keyCode == 13)
            $("#AssetCost").focus().select();
    });
    $("#AssetCost").keyup(function (event) {
        if (event.keyCode == 13)
            $("#Note").focus().select();
    });
    $("#Note").keyup(function (event) {
        if (event.keyCode == 13)
            $("#AssetConsumRatio").focus().select();
    });
    $("#AssetConsumRatio").keyup(function (event) {
        if (event.keyCode == 13)
            $("#ConsStartDate").focus().select();
    });
    $("#ConsStartDate").keyup(function (event) {
        if (event.keyCode == 13)
            $("#CombinedConsum").focus().select();
    });
    $("#CombinedConsum").keyup(function (event) {
        if (event.keyCode == 13)
            $("#CombinedtDate").focus().select();
    });
    $("#CombinedtDate").keyup(function (event) {
        if (event.keyCode == 13)
            $("#BookValue").focus().select();
    });
    $("#BookValue").keyup(function (event) {
        if (event.keyCode == 13) {
            $("#CreditAccountNo").focus().select();
        }
    });
    $("#PurchaseOrderNo").keyup(function (event) {
        if (event.keyCode == 13)
            $("#PurchaseinvoiceNo").focus().select();
    });
    $("#PurchaseinvoiceNo").keyup(function (event) {
        if (event.keyCode == 13)
            $("#AssetSerialNo").focus().select();
    });
    $("#AssetSerialNo").keyup(function (event) {
        if (event.keyCode == 13)
            $("#PurchaseInvDate").focus().select();
    });
    $("#PurchaseInvDate").keyup(function (event) {
        if (event.keyCode == 13)
            $("#GuaranteedDate").focus().select();
    });
    $("#GuaranteedDate").keyup(function (event) {
        if (event.keyCode == 13)
            $("#LastMaintenanceDate").focus().select();
    });
    $("#GuaranteedDate").keyup(function (event) {
        if (event.keyCode == 13)
            $("#LastMaintenanceDate").focus().select();
    });
    $("#LastMaintenanceDate").keyup(function (event) {
        if (event.keyCode == 13)
            $("#SupplierNote").focus().select();
    });
    $("#SupplierNote").keyup(function (event) {
        if (event.keyCode == 13) {
            document.getElementById("AssetInfoTab").click();
        }
    });
    $(document).on('click', '#SupplierTab', function () {
        $("#PurchaseOrderNo").focus().select();
    });
    $(document).on('click', '#AssetInfoTab', function () {
        $("#AssetName").focus().select();
    });
    function GetDepreciationExpenseNo(data) {

        if (data.AccountNumber != null && data.AccountNumber != '') {
            document.getElementById("DebitAccountNo").value = data.AccountNumber;
            document.getElementById("DebitAccountName").value = data.AccountName;

        }
        else {
            document.getElementById("DebitAccountNo").value = '';
            document.getElementById("DebitAccountName").value = '';
        }

    }
    function GetConsumptionComplexNo(data) {

        if (data.AccountNumber != null && data.AccountNumber != '') {
            document.getElementById("CreditAccountNo").value = data.AccountNumber;
            document.getElementById("CreditAccountName").value = data.AccountName;

        }
        else {
            document.getElementById("CreditAccountNo").value = '';
            document.getElementById("CreditAccountName").value = '';
        }

    }
    function GetSupplierAccountNo(data) {

        if (data.AccountNumber != null && data.AccountNumber != '') {
            document.getElementById("SupplierAccountNo").value = data.AccountNumber;
            document.getElementById("SupplierAccountName").value = data.AccountName;

        }
        else {
            document.getElementById("SupplierAccountNo").value = '';
            document.getElementById("SupplierAccountName").value = '';
        }

    }
    function GetSelectedDebitCostAccNo(data) {

        if (data.CostNumber != null && data.AccNo != '') {
            document.getElementById("DebitCostNo").value = data.CostNumber;
            document.getElementById("DebitCostName").value = data.CostName;
        }
        else {
            document.getElementById("DebitCostNo").value = '';
            document.getElementById("DebitCostName").value = '';
        }

    }
    function GetSelectedCreditCostAccNo(data) {

        if (data.CostNumber != null && data.AccNo != '') {
            document.getElementById("CreditCostNo").value = data.CostNumber;
            document.getElementById("CreditCostName").value = data.CostName;
        }
        else {
            document.getElementById("CreditCostNo").value = '';
            document.getElementById("CreditCostName").value = '';
        }

    }
    $("#ConsStartDate").blur(function () {
            var dDate = document.getElementById("ConsStartDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("ConsStartDate").value = '01/01/' + new Date().getFullYear()
            }
        });
        $("#CombinedtDate").blur(function () {
            var dDate = document.getElementById("CombinedtDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("CombinedtDate").value = '01/01/' + new Date().getFullYear()
            }
        });
        $("#PurchaseInvDate").blur(function () {
            var dDate = document.getElementById("PurchaseInvDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("PurchaseInvDate").value = '01/01/' + new Date().getFullYear()
            }
        });
        $("#GuaranteedDate").blur(function () {
            var dDate = document.getElementById("GuaranteedDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("GuaranteedDate").value = '01/01/' + new Date().getFullYear()
            }
        });
        $("#LastMaintenanceDate").blur(function () {
            var dDate = document.getElementById("LastMaintenanceDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("LastMaintenanceDate").value = '01/01/' + new Date().getFullYear()
            }
        });



          $("#DebitAccountNo").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#DebitCostNo").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchExpenseAccountNumber/DepreciationExpenseNo';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $("#CreditAccountNo").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#CreditCostNo").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchAcc/ConsumptionComplexNo';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $("#DebitCostNo").keyup(function (event) {
            if (event.keyCode == 13) {
                document.getElementById("SupplierTab").click();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchCostCenter/DebitCostAccNo';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $("#CreditCostNo").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#DebitAccountNo").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchCostCenter/CreditCostAccNo';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $("#SupplierAccountNo").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#PurchaseOrderNo").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchClientAccount/SupplierAccountNo';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });

        $("#DebitAccountNo").blur(function () {
            var AccountNumber = document.getElementById("DebitAccountNo").value;
            if (AccountNumber == '') {
                document.getElementById("DebitAccountName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckDefinitionExpense", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("DebitAccountNo").value = '';
                            document.getElementById("DebitAccountName").value = '';
                            $("#DebitAccountNo").focus();
                        }
                        else {
                            document.getElementById("DebitAccountName").value = Data.AccountName;

                        }
                    });
                }
            }
        });
        $("#SupplierAccountNo").blur(function () {
            var AccountNumber = document.getElementById("SupplierAccountNo").value;
            if (AccountNumber == '') {
                document.getElementById("SupplierAccountName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckClientAccount", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("SupplierAccountNo").value = '';
                            document.getElementById("SupplierAccountName").value = '';
                            $("#SupplierAccountNo").focus();
                        }
                        else {
                            document.getElementById("SupplierAccountName").value = Data.AccountName;

                        }
                    });
                }
            }
        });
        $("#CreditAccountNo").blur(function () {
            var AccountNumber = document.getElementById("CreditAccountNo").value;
            if (AccountNumber == '') {
                document.getElementById("CreditAccountName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckAcountAcc", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("CreditAccountNo").value = '';
                            document.getElementById("CreditAccountName").value = '';
                            $("#CreditAccountNo").focus();
                        }
                        else {
                            document.getElementById("CreditAccountName").value = Data.AccountName;

                        }
                    });
                }
            }
        });

        $("#DebitCostNo").blur(function () {
            var AccountNumber = document.getElementById("DebitCostNo").value;
            if (AccountNumber == '') {
                document.getElementById("DebitCostName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("GetCostCenterInfo", "CostCenter")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("DebitCostNo").value = '';
                            document.getElementById("DebitCostName").value = '';
                            $("#DebitCostNo").focus();
                        }
                        else {
                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                document.getElementById("DebitCostName").value = Data.ArabicName;
                            }
                            else {
                                document.getElementById("DebitCostName").value = Data.EnglishName;
                            }

                        }
                    });
                }
            }
        });
        $("#CreditCostNo").blur(function () {
            var AccountNumber = document.getElementById("CreditCostNo").value;
            if (AccountNumber == '') {
                document.getElementById("CreditCostName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("GetCostCenterInfo", "CostCenter")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("CreditCostNo").value = '';
                            document.getElementById("CreditCostName").value = '';
                            $("#CreditCostNo").focus();
                        }
                        else {
                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                document.getElementById("CreditCostName").value = Data.ArabicName;
                            }
                            else {
                                document.getElementById("CreditCostName").value = Data.EnglishName;
                            }

                        }
                    });
                }
            }
        });

    </script>

    <div id="myModal" class="modal fade in" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: block;">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #34495E">
                    <div class="pull-left">
                        <h6 class="modal-title txt-light" style="font-weight:bold">@Resources.Resource.Update</h6>
                    </div>
                    <div class="clearfix"></div>
                </div>
                <div class="modal-body">
                    <ul class="nav nav-tabs">
                        <li class="active">
                            <a href="#AssetInfo" data-toggle="tab" aria-expanded="true">@Resources.Resource.AssetInfo</a>
                        </li>
                        <li class="">
                            <a href="#SupplierInfo" data-toggle="tab" aria-expanded="false">@Resources.Resource.SupplierInfo</a>
                        </li>
                    </ul>
                    <div class="tab-content">
                        <div class="tab-pane fade active in" id="AssetInfo">
                            <br />
                            <div class="col-lg-12">
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.FAssetTypeID)<i class="text-danger">*</i>

                                        @Html.DropDownListFor(m => m.FAssetTypeID, new SelectList(Model.AssetType, "AssetTypeID", "Name"), Resources.Resource.AssetType, new { @id = "FAssetTypeIDUpd", @class = "form-control input-sml" })
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.AssetID)
                                        @Html.TextBoxFor(m => m.AssetID, new { @id = "AssetID", @class = "form-control input-sml", autofocus = "autofocus", @readonly = "readonly" })
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.AssetName)<i class="text-danger">*</i>
                                        @Html.TextBoxFor(m => m.AssetName, new { @id = "AssetName", @class = "form-control input-sml" })
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.AssetBarCode)
                                        @Html.TextBoxFor(m => m.AssetBarCode, new { @id = "AssetBarCode", @class = "form-control input-sml" })
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.AssetCost)
                                        @Html.TextBoxFor(m => m.AssetCost, new { @id = "AssetCost", @class = "form-control input-sml" })
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.Note)
                                        @Html.TextBoxFor(m => m.Note, new { @id = "Note", @class = "form-control input-sml" })
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.AssetConsumRatio)
                                        @Html.TextBoxFor(m => m.AssetConsumRatio, new { @id = "AssetConsumRatio", @class = "form-control input-sml" })
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.ConsStartDate)
                                        @Html.TextBoxFor(model => model.ConsStartDate, new { @id = "ConsStartDate", @class = "form-control input-sml", @Value = Model.ConsStartDate.ToString("dd/MM/yyyy") })
                                        @Html.ValidationMessageFor(m => m.ConsStartDate)
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.CombinedConsum)
                                        @Html.TextBoxFor(m => m.CombinedConsum, new { @id = "CombinedConsum", @class = "form-control input-sml" })
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.CombinedtDate)
                                        @Html.TextBoxFor(model => model.CombinedtDate, new { @id = "CombinedtDate", @class = "form-control input-sml", @Value = Model.CombinedtDate.ToString("dd/MM/yyyy") })
                                        @Html.ValidationMessageFor(m => m.CombinedtDate)
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.BookValue)
                                        @Html.TextBoxFor(m => m.BookValue, new { @id = "BookValue", @class = "form-control input-sml" })
                                    </div>
                                    <div class="form-group">
                                        @Html.CheckBoxFor(m => m.UpdateFinancialInfo, new { @id = "UpdateFinancialInfo" })
                                        @Html.Label(Resources.Resource.UpdateFinancialInfo)
                                    </div>

                                </div>
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        @Html.Label(Resources.Resource.ConsumptionComplexNo)
                                        <div class="form-group  input-group">
                                            @Html.TextBoxFor(m => m.CreditAccountNo, new { @id = "CreditAccountNo", @class = "form-control input-sml" })
                                            <span class="input-group-btn">
                                                <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnCreditAccountNo">
                                                    <i class="fa fa-search"></i>
                                                </button>
                                            </span>
                                            @Html.ValidationMessageFor(m => m.CreditAccountNo)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.Label(Resources.Resource.ConsumptionComplexName)
                                        <div class="form-group  input-group">
                                            @Html.TextBoxFor(m => m.CreditAccountName, new { @id = "CreditAccountName", @class = "form-control input-sml", @readonly = "readonly" })
                                            <span class="input-group-btn">
                                                <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearCreditAccountNo">
                                                    <i class="fa fa-minus-square"></i>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.Label(Resources.Resource.DepreciationExpenseNo)
                                        <div class="form-group  input-group">
                                            @Html.TextBoxFor(m => m.DebitAccountNo, new { @id = "DebitAccountNo", @class = "form-control input-sml" })
                                            <span class="input-group-btn">
                                                <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnDebitAccountNo">
                                                    <i class="fa fa-search"></i>
                                                </button>
                                            </span>
                                            @Html.ValidationMessageFor(m => m.DebitAccountNo)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.Label(Resources.Resource.DepreciationExpenseName)
                                        <div class="form-group  input-group">
                                            @Html.TextBoxFor(m => m.DebitAccountName, new { @id = "DebitAccountName", @class = "form-control input-sml", @readonly = "readonly" })
                                            <span class="input-group-btn">
                                                <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearDebitAccountNo">
                                                    <i class="fa fa-minus-square"></i>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                @if (Model.WorkWithCostCenter)
                                {
                                    <div class="col-lg-3">

                                        <div class="form-group">
                                            @Html.Label(Resources.Resource.ConsumptionComplexCostNo)
                                            <div class="form-group  input-group">
                                                @Html.TextBoxFor(m => m.CreditCostNo, new { @id = "CreditCostNo", @class = "form-control input-sml" })
                                                <span class="input-group-btn">
                                                    <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnCreditCostNo">
                                                        <i class="fa fa-search"></i>
                                                    </button>
                                                </span>
                                                @Html.ValidationMessageFor(m => m.CreditAccountNo)
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.Label(Resources.Resource.ConsumptionComplexCostName)
                                            <div class="form-group  input-group">
                                                @Html.TextBoxFor(m => m.CreditCostName, new { @id = "CreditCostName", @class = "form-control input-sml", @readonly = "readonly" })
                                                <span class="input-group-btn">
                                                    <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearCreditCostNo">
                                                        <i class="fa fa-minus-square"></i>
                                                    </button>
                                                </span>
                                            </div>

                                        </div>
                                        <div class="form-group">
                                            @Html.Label(Resources.Resource.DepreciationExpenseCostNo)
                                            <div class="form-group  input-group">
                                                @Html.TextBoxFor(m => m.DebitCostNo, new { @id = "DebitCostNo", @class = "form-control input-sml" })
                                                <span class="input-group-btn">
                                                    <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnDebitCostNo">
                                                        <i class="fa fa-search"></i>
                                                    </button>
                                                </span>
                                                @Html.ValidationMessageFor(m => m.DebitCostNo)
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.Label(Resources.Resource.DepreciationExpenseCostName)
                                            <div class="form-group  input-group">
                                                @Html.TextBoxFor(m => m.DebitCostName, new { @id = "DebitCostName", @class = "form-control input-sml", @readonly = "readonly" })
                                                <span class="input-group-btn">
                                                    <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearDebitCostNo">
                                                        <i class="fa fa-minus-square"></i>
                                                    </button>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                }

                            </div>
                        </div>
                        <div class="tab-pane fade" id="SupplierInfo">
                            <br />
                            <div class="col-lg-12">
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        @Html.Label(Resources.Resource.SupplierAccountNo)
                                        <div class="form-group  input-group">
                                            @Html.TextBoxFor(m => m.SupplierAccountNo, new { @id = "SupplierAccountNo", @class = "form-control input-sml" })
                                            <span class="input-group-btn">
                                                <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnSupplierAccountNo">
                                                    <i class="fa fa-search"></i>
                                                </button>
                                            </span>
                                            @Html.ValidationMessageFor(m => m.SupplierAccountNo)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.Label(Resources.Resource.SupplierAccountName)
                                        <div class="form-group  input-group">
                                            @Html.TextBoxFor(m => m.SupplierAccountName, new { @id = "SupplierAccountName", @class = "form-control input-sml", @readonly = "readonly" })
                                            <span class="input-group-btn">
                                                <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearSupplierAccountNo">
                                                    <i class="fa fa-minus-square"></i>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.PurchaseOrderNo)
                                        @Html.TextBoxFor(m => m.PurchaseOrderNo, new { @id = "PurchaseOrderNo", @class = "form-control input-sml" })
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.PurchaseinvoiceNo)
                                        @Html.TextBoxFor(m => m.PurchaseinvoiceNo, new { @id = "PurchaseinvoiceNo", @class = "form-control input-sml" })
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.AssetSerialNo)
                                        @Html.TextBoxFor(m => m.AssetSerialNo, new { @id = "AssetSerialNo", @class = "form-control input-sml" })
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.PurchaseInvDate)
                                        @Html.TextBoxFor(model => model.PurchaseInvDate, new { @id = "PurchaseInvDate", @class = "form-control input-sml", @Value = Model.PurchaseInvDate.ToString("dd/MM/yyyy") })
                                        @Html.ValidationMessageFor(m => m.PurchaseInvDate)
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.GuaranteedDate)
                                        @Html.TextBoxFor(model => model.GuaranteedDate, new { @id = "GuaranteedDate", @class = "form-control input-sml", @Value = Model.GuaranteedDate.ToString("dd/MM/yyyy") })
                                        @Html.ValidationMessageFor(m => m.GuaranteedDate)
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.LastMaintenanceDate)
                                        @Html.TextBoxFor(model => model.LastMaintenanceDate, new { @id = "LastMaintenanceDate", @class = "form-control input-sml", @Value = Model.LastMaintenanceDate.ToString("dd/MM/yyyy") })
                                        @Html.ValidationMessageFor(m => m.LastMaintenanceDate)
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(m => m.SupplierNote)
                                        @Html.TextBoxFor(m => m.SupplierNote, new { @id = "SupplierNote", @class = "form-control input-sml" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="col-lg-12">
                        <button type="submit" class="btn btn-success btn-anim" id="Update"> <i class="fa fa-edit"></i><span class="btn-text">@Resources.Resource.Update</span></button>
                        <button type="button" class="btn btn-default btn-anim" data-dismiss="modal" id="Close"><i class="fa fa-times"></i><span class="btn-text">@Resources.Resource.Close</span></button>
                    </div>
                </div>
            </div>
        </div>
        @Html.CheckBoxFor(m => m.WorkWithCostCenter, new { @id = "WorkWithCostCenter", @style = "visibility : hidden;" })
        @Html.TextBoxFor(m => m.CompanyYear, new { @id = "CompanyYear", @style = "visibility : hidden;" })
    </div>






