@model Acc.ViewModels.St_HeaderVM
@{
    ViewBag.Title = @Resources.Resource.Delete;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .panel-body {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-footer {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-title {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .dt-button {
        display: none !important;
    }

    .dt-button {
        display: none !important;
    }

    table.dataTable th.dt-center {
        font-size: 8pt !important;
        font-family: Verdana, Geneva, Tahoma, sans-serif;
    }

    #BodyStyle {
        font-size: 8pt;
        font-weight: bold;
        font-family: Verdana, Geneva, Tahoma, sans-serif;
    }

    table.dataTable thead .sorting::after, table.dataTable thead .sorting_asc::after, table.dataTable thead .sorting_desc::after {
        display: none !important;
    }
</style>
<div style="padding-top: 20px;">
    <div class="panel card-view">
        <div class="panel-heading" style="background-color: #34495E">
            <div class="pull-left">
                <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.Delete - @Resources.Resource.OutVoucher</h6>
            </div>
            <div class="clearfix"></div>
        </div>
        <div class="panel-body">
            <div class="col-lg-12">
                <div class="col-lg-3">
                    @Html.Label(Resources.Resource.Warehouses)<span style="color:red">*</span>
                    <div class="form-group">
                        @if (Resources.Resource.CurLang == "Arb")
                        {
                            @Html.DropDownListFor(m => m.StockCode, new SelectList(Model.St_Warehouse, "StockCode", "ArabicName"), new { @id = "StockCode", @class = "form-control input-sml", @disabled = "disabled" })

                        }
                        else
                        {
                            @Html.DropDownListFor(m => m.StockCode, new SelectList(Model.St_Warehouse, "StockCode", "EnglishName"), new { @id = "StockCode", @class = "form-control input-sml", @disabled = "disabled" })
                        }
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.VoucherNumber)
                        @Html.TextBoxFor(m => m.VoucherNumber, new { @id = "VoucherNumber", @class = "form-control input-sml", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.VoucherDate)
                        @Html.TextBoxFor(model => model.VoucherDate, new { @id = "VoucherDate", @class = "form-control input-sml", @Value = Model.VoucherDate.ToString("dd/MM/yyyy"), data_val = "false", @readonly = "readonly" })
                        @Html.ValidationMessageFor(m => m.VoucherDate)
                    </div>
                </div>
            </div>
            <div class="col-lg-12" style="padding-top:20px;">
                <div class="col-lg-12">
                    <table id="tdataTable" class="table table-hover table-bordered mb-0" width="100%">
                        <thead>
                            <tr>
                                <th>@Resources.Resource.ItemCode</th>
                                <th>@Resources.Resource.ItemName</th>
                                <th>@Resources.Resource.Unit</th>
                                <th>@Resources.Resource.Quantity</th>
                                <th>@Resources.Resource.Price</th>
                                <th>@Resources.Resource.Discount</th>
                                <th>@Resources.Resource.DiscountPercentage</th>
                                <th>@Resources.Resource.PriceAfterLineDisc</th>
                                <th>@Resources.Resource.NetTotal</th>
                            </tr>
                        </thead>

                        <tbody>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="col-lg-12" style="margin-top : 5px">
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.NetTotal)
                        @Html.TextBoxFor(m => m.sNetTotalLocal, new { @id = "sNetTotalLocal", @class = "form-control input-sml", @readonly = "readonly" })
                        @Html.ValidationMessageFor(m => m.NetTotalLocal)
                    </div>
                </div>
                <div class="col-lg-5">
                    <div class="form-group">
                        @Html.Label(Resources.Resource.Note)
                        @Html.TextBoxFor(m => m.Remark, new { @id = "Remark", @class = "form-control input-sml", @readonly = "readonly" })
                        @Html.ValidationMessageFor(m => m.Remark)
                    </div>
                </div>
                <div class="col-lg-5">
                    @Html.Label(Resources.Resource.Hints)
                    @Html.TextBoxFor(m => m.Hint, new { @id = "Hint", @class = "form-control input-sml", @readonly = "readonly" })
                    @Html.ValidationMessageFor(m => m.Hint)
                </div>
            </div>
        </div>
        <div class="panel-footer">
            <button type="submit" class="btn btn-anim btnDelete-lg" id="Delete"> <i class="fa fa-trash-o"></i><span class="btn-text">@Resources.Resource.Delete</span></button>
            <button type="button" class="btn btn-default btn-anim" id="Close"><i class="fa fa-times"></i><span class="btn-text">@Resources.Resource.Close</span></button>
        </div>
    </div>
</div>
@Html.TextBoxFor(m => m.NetTotalDiscountLocal, new { @id = "NetTotalDiscountLocal", @class = "form-control input-sml", @type = "number", @min = 0, @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.DiscountPercentage, new { @id = "DiscountPercentage", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })@*2*@
@Html.TextBoxFor(m => m.NetTotalLocalBeforDiscount, new { @id = "NetTotalLocalBeforDiscount", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalLineDiscountLocal, new { @id = "NetTotalLineDiscountLocal", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalLocalAfterLineDiscount, new { @id = "NetTotalLocalAfterLineDiscount", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalTaxAfterLineDiscountLocal, new { @id = "NetTotalTaxAfterLineDiscountLocal", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalAfterLineDiscountBeforDiscountAllLocal, new { @id = "NetTotalAfterLineDiscountBeforDiscountAllLocal", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalLocalAfterDiscount, new { @id = "NetTotalLocalAfterDiscount", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalTaxLocal, new { @id = "NetTotalTaxLocal", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.NetTotalLocal, new { @id = "NetTotalLocal", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;", @type = "number", @min = 0 })
@Html.TextBoxFor(m => m.TheDecimalPointForTheLocalCurrency, new { @id = "TheDecimalPointForTheLocalCurrency", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.CompanyTransactionKindNo, new { @id = "CompanyTransactionKindNo", @style = "visibility : hidden;" })
@Html.CheckBoxFor(m => m.WorkWithCostCenter, new { @id = "WorkWithCostCenter", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TransactionKindNo, new { @id = "TransactionKindNo", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.CurrencyID, new { @id = "CurrencyID", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.ConversionFactor, new { @id = "ConversionFactor", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.CompanyYear, new { @id = "CompanyYear", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.OrignailTaxAccountNumber, new { @id = "OrignailTaxAccountNumber", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.OrignailTaxAccountName, new { @id = "OrignailTaxAccountName", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.VoucherCase, new { @id = "VoucherCase", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;" })

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
    $(document).ready(function () {
        var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
        function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
            try {
                decimalCount = Math.abs(decimalCount);
                decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

                const negativeSign = amount < 0 ? "-" : "";

                let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
                let j = (i.length > 3) ? i.length % 3 : 0;

                return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
            } catch (e) {
                console.log(e)
            }
        };
         document.getElementById("sNetTotalLocal").value = formatMoney(document.getElementById("NetTotalLocal").value, TheDecimalPointForTheLocalCurrency);
        $(document).on('click', '#Close', function () {
            window.location = "/St_outVoucher/Index";
        });
        var tabelMemRef = $("#tdataTable").DataTable({
            "language": {
                "emptyTable": '@Resources.Resource.EmptyTable',
                "search": '@Resources.Resource.Search',
                "loadingRecords": '@Resources.Resource.LoadingRecords',
                "processing": '@Resources.Resource.Processing',
                "zeroRecords": '@Resources.Resource.ZeroRecords',
                "info": '@Resources.Resource.Info',
                "infoEmpty": '@Resources.Resource.InfoEmpty',
                "lengthMenu": '@Resources.Resource.LengthMenu',
                "infoFiltered": '@Resources.Resource.InfoFiltered',
                "paginate": {
                    "previous": '@Resources.Resource.Previous',
                    "next": '@Resources.Resource.Next',
                    "first": '@Resources.Resource.First',
                    "last": '@Resources.Resource.Last',
                },
                "aria": {
                    "sortAscending": '@Resources.Resource.SortAscending',
                    "sortDescending": '@Resources.Resource.SortDescending'
                }
            },
            "scrollY": "150px",
            "scrollX": true,
            "ordering": false,
            "autoWidth": false,
            "paging": false,
            "searching": false,
            "columnDefs": [
                {
                    "className": "dt-center",
                    "targets": "_all",
                    "orderable": false,

                }],

            dom: 'Bfrtip',


            ajax: {
                "type": "GET",
                url: "/St_OutVoucher/GetItems/@Model.VoucherNumber/@Model.CompanyTransactionKindNo/@Model.TransactionKindNo/@Model.CompanyYear/@Model.StockCode",

                dataSrc: ""
            },
            columns: [
                {
                    data: "ItemCode"

                },
                {
                    data: "ItemName"

                },
                {
                    data: "ItemUnitName"

                },
                {
                    data: "Quantity"

                },

                {
                    data: "PricePieceLocalBeforDiscount",
                    render: function (data, type, r) {
                        return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                    }

                },
                {
                    data: "TotalLineDiscountLocal",
                    render: function (data, type, r) {
                        return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                    }

                },
                {
                    data: "LineDiscountPercentage",
                    render: function (data, type, r) {
                        return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                    }

                },
                {
                    data: "PricePieceLocalAfterLineDiscount",
                    render: function (data, type, r) {
                        return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                    }

                },
                {
                    data: "TotalLocalAfterLineDiscount",
                    render: function (data, type, r) {
                        return (formatMoney(data, TheDecimalPointForTheLocalCurrency))
                    }

                }
            ]

        });
         $(document).on('click', '#Delete', function () {
                bootbox.confirm({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        confirm: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                            className: 'btn-success'
                        },
                        cancel: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                            className: 'btn-danger'
                        }
                    },
                    callback: function (result) {
                        if (result) {
                            var dialog = bootbox.dialog({
                                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Deleting...</p>',
                                closeButton: false
                            });
                            var dataToDelete = {

                                VoucherNumber: $("#VoucherNumber").val(),
                                TransactionKindNo: $("#TransactionKindNo").val(),
                                CompanyYear: $("#CompanyYear").val(),
                                CompanyTransactionKindNo: $("#CompanyTransactionKindNo").val(),
                                StockCode: $("#StockCode").val()
                            };

                            $.ajax({
                                type: "POST",
                                url: "/St_OutVoucher/DeleteSt_OutVoucher",
                                data: JSON.stringify(dataToDelete),
                                contentType: 'application/json',
                                success: function (data) {

                                    dialog.modal('hide');
                                    if (data.Code == 0) {
                                        toastr.error(data.Msg);
                                    }
                                    else if (data.Code == 1) {
                                        $('#modal-container').modal('hide');
                                        toastr.success(data.Msg);
                                        $('#modal-container').modal('hide');
                                        window.location = "/St_OutVoucher/Index";
                                    }

                                },
                                error: function (data) {
                                    dialog.modal('hide');
                                    toastr.error(data);
                                    bootbox.alert(data.Msg);
                                }

                            });
                        }
                    }
                });
            });
    });
    </script>
}