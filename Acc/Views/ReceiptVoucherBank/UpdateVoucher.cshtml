@model Acc.ViewModels.TransactionFixedVM
@{
    ViewBag.Title = @Resources.Resource.Update;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .panel-body {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-footer {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-title {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .dt-button {
        display: none !important;
    }

    #PapersGrid_DXHeadersRow0 {
        font-family: Verdana, Geneva, Tahoma, sans-serif !important;
        font-size: 10pt;
    }

    .dxgvBatchEditNewItem_iOS {
        font-family: Verdana, Geneva, Tahoma, sans-serif !important;
        font-size: 10pt;
    }

    .dxgvControl_iOS {
        width: 100% !important;
    }
    #PapersGrid_col0 {
        width: 55px;
    }
</style>
<link href="~/Content/jquery-ui.css" rel="stylesheet" />
<script>
        var LastStatment = "";
        var SumChequeAmount = 0;
        var preventEndEditOnLostFocus = false;
        var currentEditedValue;
        var SelectAccount;
        var lastVisibleIndex;
        var FocusedCellColumnIndex = 0;
    var FocusedCellRowIndex = 0;
    function GetSelectedBank(data) {
        PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumberThird", data.BankID);
        PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "BankAccountNameJustForFill", data.BankName);
        PapersGrid.batchEditApi.StartEdit(lastVisibleIndex, 4);
    }
    var BankAccounts = [];
     $.getJSON('@Url.Action("GetDrawnBank", "MultiUse")', { id: 0 }, function (Data) {
         BankAccounts = [];
         for (var i = 0, len = Data.length; i < len; i++) {
             var r = { label: Data[i].BankName, value: Data[i].BankID };
             BankAccounts.push(r);
         }
     });
    function AutoCompleteBanks(s, e) {
        $(s.GetInputElement()).autocomplete({
            minLength: 0,
            source: BankAccounts,
            select: function (event, ui) {
                s.SetValue(ui.item.value);
                PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "BankAccountNameJustForFill", ui.item.label);
                PapersGrid.batchEditApi.GetCellValue()
                return false;
            },
            position:
            {
                my: "left top",
                at: "left bottom",
                of: s.GetMainElement()
            }
        });
    }
    function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
        try {
            decimalCount = Math.abs(decimalCount);
            decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

            const negativeSign = amount < 0 ? "-" : "";

            let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
            let j = (i.length > 3) ? i.length % 3 : 0;

            return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
        } catch (e) {
            console.log(e)
        }
    };
    function validatedate(dateString) {
        var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
        if (dateString.match(dateformat)) {
            var operator = dateString.split('/');
            var datepart = [];
            if (operator.length > 1) {
                datepart = dateString.split('/');
            }
            var month = parseInt(datepart[1]);
            var day = parseInt(datepart[0]);
            var year = parseInt(datepart[2]);
            var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
            if (month == 1 || month > 2) {
                if (day > ListofDays[month - 1]) {
                    return false;
                }
            } else if (month == 2) {
                var leapYear = false;
                if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                    leapYear = true;
                }
                if ((leapYear == false) && (day >= 29)) {
                    return false;
                } else
                    if ((leapYear == true) && (day > 29)) {
                        return false;
                    }
            }
        }
        else {
            return false;
        }
        return true;
    }
    function CalcSumDebitCredit(s, e) {
        SumChequeAmount = 0;
        var ChequeAmount = 0;
        var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
        var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;
        var visibleRowIndices = PapersGrid.batchEditApi.GetRowVisibleIndices();
        for (var i = 0; i < visibleRowIndices.length; i++) {
            ChequeAmount = PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeAmount");
            ChequeAmount = Number(ChequeAmount);
            if (ChequeAmount == "NaN") {
                ChequeAmount = 0;
            }
            SumChequeAmount = SumChequeAmount + parseFloat(ChequeAmount);
        }
        document.getElementById("Amount").value = SumChequeAmount;
        if (document.getElementById("Amount").value == '') {
            document.getElementById("Amount").value = 0;
            document.getElementById("sAmount").value = formatMoney(0, TheDecimalPointForTheLocalCurrency);
        }
        var CurrencyAmount = document.getElementById("CurrencyNewValue").value;
        if (CurrencyAmount == 0) {
            CurrencyAmount = 1
        };
        if (CurrencyAmount == 1) {
            $("#ForeignAmount").val((parseFloat(0)).toFixed(TheDecimalPointForTheLocalCurrency));
            document.getElementById("Amount").value = SumChequeAmount;
            $("#sForeignAmount").val(formatMoney(0, TheDecimalPointForTheForeignCurrency));
            $("#sAmount").val(formatMoney(parseFloat($("#Amount").val()), TheDecimalPointForTheLocalCurrency));
        }
        else {
            document.getElementById("Amount").value = SumChequeAmount;
            document.getElementById("ForeignAmount").value = SumChequeAmount / document.getElementById("CurrencyNewValue").value;
            $("#sForeignAmount").val(formatMoney(parseFloat($("#ForeignAmount").val()), TheDecimalPointForTheForeignCurrency));
            $("#sAmount").val(formatMoney(parseFloat($("#Amount").val()), TheDecimalPointForTheLocalCurrency));
        };
    }
    function ClearGrid(s, e) {
            PapersGrid.PerformCallback('clear');
            setTimeout(function () {
                CalcSumDebitCredit(s, e);
            }, 1000);
        }
    function LoopGrid(s, e) {
        var dDate = document.getElementById("VoucherDate").value;
        var CompanyYear = document.getElementById("CompanyYear").value;
            var d1 = dDate.split("/");
            var From = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);
        if (d1[2] > CompanyYear || d1[2] < CompanyYear) {
            bootbox.alert({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.DateIsNotWithinThisYear</h6>',
                className: 'rubberBand animated',
                buttons: {
                    ok: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                        className: 'btn-primary'
                    }
                }
            });
        }
        else {
            if (!validatedate(dDate) && dDate != null && dDate != '') {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else if (dDate != null && dDate != '') {
                var dd = parseInt(dDate.substring(0, 2));
                if (dd < 10) {
                    dd = '0' + dd;
                }
                var mm = parseInt(dDate.substring(3, 5));
                if (mm < 10) {
                    mm = '0' + mm;
                }
                var yyyy = parseInt(dDate.substring(6, 10));
                dDate = mm + '/' + dd + '/' + yyyy;
                $.getJSON('@Url.Action("CheckDateIsFreezeDate", "FreezeTransaction")', { id: dDate }, function (Data) {
                    if (Data >= 1) {
                        bootbox.alert({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThisDateIsFrozen</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                ok: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                    className: 'btn-primary'
                                }
                            }
                        });
                    }
                    else {
                        var iError = 0;
                        var visibleRowIndices = PapersGrid.batchEditApi.GetRowVisibleIndices();
                        for (var i = 0; i < visibleRowIndices.length; i++) {
                            if (PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeDate") == "" || PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeDate") == null) {
                                iError = 2;
                                break;
                            }
                            else if (PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeNumber") == "" || PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeNumber") == null) {
                                iError = 1;
                                break;
                            }
                            else if (PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeAmount") == "" || PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeAmount") == null
                                || PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeAmount") == 0) {
                                iError = 3;
                                break;
                            }
                            else if (PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumberThird") == "" || PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumberThird") == null) {
                                iError = 4;
                                break;
                            }
                        }
                        if (iError == 1) {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillChequeNumber</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                        else if (iError == 2) {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillChequeDate</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                        else if (iError == 3) {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillChequeAmount</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                        else if (iError == 4) {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillDrawnBank</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                        else if ($("#FromAccountNumber").val() == '') {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                        else if ($("#ToAccountNumber").val() == '') {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                        else if ($("#FromCostCenter").val() == '') {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                        else if ($("#ToCostCenter").val() == '') {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                        else if ($("#Amount").val() == '' || $("#Amount").val() == 0) {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                        else {
                            bootbox.confirm({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    confirm: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                        className: 'btn-success'
                                    },
                                    cancel: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                        className: 'btn-danger'
                                    }
                                },
                                callback: function (result) {
                                    if (result) {
                                        var dialog = bootbox.dialog({
                                            title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                            message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Updating...</p>',
                                            closeButton: false
                                        });
                                        var WorkWithCostCenter = document.getElementById("WorkWithCostCenter").checked;
                                        var FromCostCenter = "";
                                        var ToCostCenter = "";
                                        if (WorkWithCostCenter) {
                                            FromCostCenter = $("#FromCostCenter").val();
                                            ToCostCenter = $("#ToCostCenter").val();
                                        }
                                        var Header = {
                                            VoucherNumber: $("#VoucherNumber").val(),
                                            VHI: $("#VHI").val(),
                                            VoucherDate: $("#VoucherDate").val(),
                                            Note: $("#Note").val(),
                                            ConversionFactor: $("#CurrencyNewValue").val()
                                        };
                                        var SaleManNo = "";
                                        if ($("#SaleManNo").val() == "") {
                                            SaleManNo = 0;
                                        }
                                        else {
                                            SaleManNo = $("#SaleManNo").val();
                                        }
                                        var visibleRowIndices = PapersGrid.batchEditApi.GetRowVisibleIndices();
                                        var PaperList = [];
                                        for (var i = 0; i < visibleRowIndices.length; i++) {
                                            var Paper = {
                                                ChequeNumber: PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeNumber"),
                                                ChequeDate: moment(PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeDate")).format('LL'),
                                                ChequeAmount: PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeAmount"),
                                                AccountNumberThird: PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumberThird"),
                                                DrawerName: PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "DrawerName"),
                                                RowNumber: i + 1
                                            };
                                            PaperList.push(Paper);
                                        }
                                        var dataToUpdate = {
                                            Paper: PaperList,
                                            Header: Header,
                                            CompanyTransactionKindID: $("#CompanyTransactionKindID").val(),
                                            FromAccountNumber: $("#FromAccountNumber").val(),
                                            ToAccountNumber: $("#ToAccountNumber").val(),
                                            FromCostCenter: FromCostCenter,
                                            ToCostCenter: ToCostCenter,
                                            Amount: $("#Amount").val(),
                                            CurrencyID: $("#CurrencyID").val(),
                                            SaleManNo: SaleManNo
                                        }
                                        $.ajax({
                                            type: "POST",
                                            url: "/ReceiptVoucherBank/UpdateReceiptVoucherBankUsedPaper",
                                            data: JSON.stringify(dataToUpdate),
                                            contentType: 'application/json',
                                            success: function (data) {

                                                dialog.modal('hide');
                                                if (data.Code == 0) {
                                                    toastr.error(data.Msg);
                                                    bootbox.alert(data.Msg);
                                                }
                                                else if (data.Code == 1) {
                                                    $('#modal-container').modal('hide');
                                                    toastr.success(data.Msg);
                                                    window.open('/PDFReport/GetPapersToReceiptVoucherBankPDF/@Model.Header.VoucherNumber/@Model.Header.CompanyTransactionKindNo/@Model.Header.TransactionKindNo/@Model.Header.CompanyYear', '_blank');
                                                    window.location = "/ReceiptVoucherBank/Index";
                                                    $('#modal-container').modal('hide');
                                                }
                                            },
                                            error: function (data) {
                                                dialog.modal('hide');
                                                toastr.error(data);
                                            }
                                        });
                                    }
                                }
                            });
                        }
                    };
                });
            }
        }
    }
        function OnInit(s, e) {
            ASPxClientUtils.AttachEventToElement(
            s.GetMainElement(),
                "keydown",
                function (evt) {
                    if (evt.keyCode == 113 && FocusedCellColumnIndex == 4) {
                        var dialog = bootbox.dialog({
                            title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                            message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                            closeButton: false
                        });
                        var url = '/MultiUse/SearchDrawnBank/AccountNumber';
                        $.get(url, function (data) {
                            $('#modal-container').html(data);
                            $('#modal-container').modal('show');
                            dialog.modal('hide');
                        })
                    }
                    switch (evt.keyCode) {
                        case 13:
                            if (FocusedCellColumnIndex == 6) {
                                var visibleRowIndices = PapersGrid.batchEditApi.GetRowVisibleIndices();
                                var NameValue = PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[FocusedCellRowIndex], "DrawerName");
                                s.AddNewRow();
                            }
                            break;
                    }
                });
    };
        function Grid_BatchEditEndEditing(s, e) {
            var productNameColumn = s.GetColumnByField("ChequeNumber");
            if (!e.rowValues.hasOwnProperty(productNameColumn.index))
                return;if (FocusedCellColumnIndex == 4) {

                var BankIDIndex = s.GetColumnByField("AccountNumberThird").index;
                 var BankID = e.rowValues[BankIDIndex].value;
                 if (!BankID) {
                    PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "BankAccountNameJustForFill", "");
                }
                else {
                    if (BankID != null && BankID != '') {
                        $.getJSON('@Url.Action("CheckDrawnBank", "DrawnBank")', { id: BankID }, function (Data) {
                            if (Data == "") {
                                PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumberThird", "");
                                PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "BankAccountNameJustForFill", "");
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheBankDoesNotExist</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                FocusedCellColumnIndex = 4;
                            }
                            else {
                                PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumberThird", Data.BankID);
                                PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "BankAccountNameJustForFill", Data.BankName);
                            }
                        });
                    }
                }
            }
            else if (FocusedCellColumnIndex == 6) {
                var NameIndex = s.GetColumnByField("DrawerName").index;
                var NameValue = e.rowValues[NameIndex].value;
                if (NameValue != null) {
                    LastStatment = NameValue;
                }
                else {
                    e.rowValues[NameIndex].value = LastStatment;
                    e.rowValues[NameIndex].text = LastStatment;
                }
            }
            FocusedCellColumnIndex = 0;
            FocusedCellRowIndex = 0;
        }
        function Grid_BatchEditStartEditing(s, e) {
            FocusedCellColumnIndex = e.focusedColumn.index;
            FocusedCellRowIndex = e.visibleIndex;
            var productNameColumn = s.GetColumnByField("ChequeNumber");
            if (!e.rowValues.hasOwnProperty(productNameColumn.index))
                return;
            lastVisibleIndex = e.visibleIndex;
            currentEditedValue = s.GetRowKey(e.visibleIndex);
            currentKey = s.GetRowKey(e.visibleIndex);
            CalcSumDebitCredit(s, e);
        }
        function OnBeginCallback(s, e) {
            e.customArgs["Reference"] = $("#Reference").val();
        }
        function OnEndCallback(s, e) {
            if (s.cpSuccessFlag)
            {
                alert("All changes were saved");
                window.location = "@Url.Action("Success","Test1")";
            }
        }
        function OnClickPostData(s, e) {
            if (PapersGrid.batchEditApi.HasChanges())
                PapersGrid.UpdateEdit();
            else
                PapersGrid.PerformCallback();
            Alert("dONEEE");
        }
        function Grid_DeleteRowEvent(s, e) {
            setTimeout(function () {
                CalcSumDebitCredit(s, e);
            }, 1000);
        }

</script>
@using (Html.BeginForm("Update", "ReceiptVoucherBank", FormMethod.Post, new { id = "myForm" }))
{
    <div style="padding-top:20px;">
        <div class="panel card-view">
            <div class="panel-heading" style="background-color: #34495E">
                <div class="pull-left">
                    <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.Delete - @Resources.Resource.ReceiptVoucherBank</h6>
                </div>
                <div class="clearfix"></div>
            </div>
            <div class="panel-body">
                <div class="col-lg-12">
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.LabelFor(m => m.CompanyTransactionKindID)
                            @Html.TextBoxFor(m => m.CompanyTransactionKindName, new { @id = "CompanyTransactionKindName", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.LabelFor(m => m.CurrencyID)
                            @Html.TextBoxFor(m => m.CurrencyName, new { @id = "CurrencyName", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.CurrencyNewValue)
                            @Html.ValidationMessageFor(m => m.CurrencyNewValue)
                            @Html.TextBoxFor(m => m.CurrencyNewValue, new { @id = "CurrencyNewValue", @class = "form-control input-sml", @readonly = "@readonly" })
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Header.VoucherNumber)
                            @Html.TextBoxFor(m => m.Header.VoucherNumber, new { @id = "VoucherNumber", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Header.VoucherDate)
                            @Html.TextBoxFor(model => model.Header.VoucherDate, new { @id = "VoucherDate", @class = "form-control input-sml", @Value = Model.Header.VoucherDate.ToString("dd/MM/yyyy"), @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.Header.VoucherDate)
                        </div>
                    </div>
                </div>
                <div class="col-lg-12">
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.PaidAccount)
                            @Html.TextBoxFor(m => m.TransactionCredit.AccountNumber, new { @id = "ToAccountNumber", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.AccountName)
                            @Html.TextBoxFor(m => m.AccountCreditName, new { @id = "AccountCreditName", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.FundAccountName)
                            @Html.TextBoxFor(m => m.TransactionDebit.AccountNumber, new { @id = "FromAccountNumber", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.AccountName)
                            @Html.TextBoxFor(m => m.AccountDebitName, new { @id = "AccountDebitName", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-12">
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.LabelFor(m => m.SaleManNo)
                            @Html.TextBoxFor(m => m.SaleManName, new { @id = "SaleManName", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="col-lg-9">
                        @Html.LabelFor(m => m.Header.Note)
                        @Html.TextBoxFor(m => m.Header.Note, new { @id = "Note", @class = "form-control input-sml", @readonly = "readonly" })
                    </div>
                </div>
                @if (Model.WorkWithCostCenter)
                {
                    <div class="col-lg-12">
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.Label(Resources.Resource.PaidCostCenter)
                                @Html.TextBoxFor(m => m.TransactionCredit.CostCenter, new { @id = "ToCostCenter", @class = "form-control input-sml", @readonly = "readonly" })
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.Label(Resources.Resource.CostCenterName)
                                @Html.TextBoxFor(m => m.CostCenterCreditName, new { @id = "CostCenterCreditName", @class = "form-control input-sml", @readonly = "readonly" })
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.Label(Resources.Resource.FundCostName)
                                @Html.TextBoxFor(m => m.TransactionDebit.CostCenter, new { @id = "FromCostCenter", @class = "form-control input-sml", @readonly = "readonly" })
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.Label(Resources.Resource.CostCenterName)
                                @Html.TextBoxFor(m => m.CostCenterDebitName, new { @id = "CostCenterDebitName", @class = "form-control input-sml", @readonly = "readonly" })
                            </div>
                        </div>
                    </div>
                }
                <div class="col-lg-12">
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.TotalAmount)
                            @Html.TextBoxFor(m => m.sAmount, new { @id = "sAmount", @class = "form-control input-sml", @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.Amount)
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.TotalForeign)
                            @Html.TextBoxFor(m => m.sForeignAmount, new { @id = "sForeignAmount", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-12" style="padding-top:20px;">
                    <div class="col-lg-12">
                        @Html.Action("GridViewPapers", new { id = Model.Header.VoucherNumber, id2 = Model.Header.CompanyTransactionKindNo, id3 = Model.Header.TransactionKindNo, id4 = Model.Header.CompanyYear })
                    </div>
                </div>
            </div>
            <div class="panel-footer">
                @Html.DevExpress().Button(settings =>
           {
               settings.Name = "buttonUpdate";
               settings.Text = Resources.Resource.Update;
               settings.ClientSideEvents.Click = "LoopGrid";
               settings.UseSubmitBehavior = false;
               settings.ClientVisible = false;
           }).GetHtml()
                @Html.DevExpress().Button(settings =>
           {
               settings.Name = "btnClear";
               settings.Text = Resources.Resource.CreateNew;
               settings.UseSubmitBehavior = false;
               settings.ClientSideEvents.Click = "ClearGrid";
               settings.ClientVisible = false;
           }).GetHtml()
                <button type="button" class="btn btn-success btn-anim" id="Update"><i class="fa fa-edit"></i><span class="btn-text">@Resources.Resource.Update</span> </button>
                <button type="button" class="btn btn-default btn-anim" id="Close"><i class="fa fa-times"></i><span class="btn-text">@Resources.Resource.Close</span></button>
            </div>
        </div>
    </div>
}
<div id="modal-container" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-content">
    </div>
</div>
@Html.TextBoxFor(m => m.Amount, new { @id = "Amount", @class = "form-control input-sml", @type = "Number", @min = "0", @readonly = "readonly", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.ForeignAmount, new { @id = "ForeignAmount", @class = "form-control input-sml", @type = "Number", @min = "0", @readonly = "readonly", @style = "visibility : hidden;" })
@Html.CheckBoxFor(m => m.WorkWithCostCenter, new { @id = "WorkWithCostCenter", @style = "visibility : hidden;" })
@Html.HiddenFor(m => m.Header.CompanyYear, new { @id = "CompanyYear", @style = "visibility : hidden;" })
@Html.HiddenFor(m => m.CompanyTransactionKindID, new { @id = "CompanyTransactionKindID", @style = "visibility : hidden;" })
@Html.HiddenFor(m => m.CurrencyID, new { @id = "CurrencyID", @style = "visibility : hidden;" })
@Html.HiddenFor(m => m.Header.VHI, new { @id = "VHI", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TheDecimalPointForTheLocalCurrency, new { @id = "TheDecimalPointForTheLocalCurrency", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TheDecimalPointForTheForeignCurrency, new { @id = "TheDecimalPointForTheForeignCurrency", @style = "visibility : hidden;" })
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
            var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;
            function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
                try {
                    decimalCount = Math.abs(decimalCount);
                    decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

                    const negativeSign = amount < 0 ? "-" : "";

                    let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
                    let j = (i.length > 3) ? i.length % 3 : 0;

                    return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
                } catch (e) {
                    console.log(e)
                }
            };
            function validatedate(dateString) {
                var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
                if (dateString.match(dateformat)) {
                    var operator = dateString.split('/');
                    var datepart = [];
                    if (operator.length > 1) {
                        datepart = dateString.split('/');
                    }
                    var month = parseInt(datepart[1]);
                    var day = parseInt(datepart[0]);
                    var year = parseInt(datepart[2]);
                    var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                    if (month == 1 || month > 2) {
                        if (day > ListofDays[month - 1]) {
                            return false;
                        }
                    } else if (month == 2) {
                        var leapYear = false;
                        if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                            leapYear = true;
                        }
                        if ((leapYear == false) && (day >= 29)) {
                            return false;
                        } else
                            if ((leapYear == true) && (day > 29)) {
                                return false;
                            }
                    }
                }
                else {
                    return false;
                }
                return true;
            }
            document.getElementById("sAmount").value = formatMoney(document.getElementById("Amount").value, TheDecimalPointForTheLocalCurrency);
            document.getElementById("sForeignAmount").value = formatMoney(document.getElementById("ForeignAmount").value, TheDecimalPointForTheForeignCurrency);
            $(document).on('click', '#Close', function () {
                window.location = "/ReceiptVoucherBank/Index";
            });
            $(document).on('click', '#Update', function () {
                document.getElementById("buttonUpdate").click();
            });
        });
    </script>
}

