@model Acc.ViewModels.DefinitionAssetSiteVM
@{
    ViewBag.Title = @Resources.Resource.AssetsReport;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/Content/jquery-ui.css" rel="stylesheet" />

<style>
    .panel-body {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-footer {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-title {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .dt-button {
        display: none !important;
    }

    #MemberShipTypeBody1 {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }
</style>
<script>
    function GetDepreciationExpenseNoSearch(data) {

        if (data.AccountNumber != null && data.AccountNumber != '') {
            document.getElementById("DebitAccountNo").value = data.AccountNumber;
            document.getElementById("DebitAccountName").value = data.AccountName;

        }
        else {
            document.getElementById("DebitAccountNo").value = '';
            document.getElementById("DebitAccountName").value = '';
        }

    }
    function GetConsumptionComplexNoSearch(data) {

        if (data.AccountNumber != null && data.AccountNumber != '') {
            document.getElementById("CreditAccountNo").value = data.AccountNumber;
            document.getElementById("CreditAccountName").value = data.AccountName;

        }
        else {
            document.getElementById("CreditAccountNo").value = '';
            document.getElementById("CreditAccountName").value = '';
        }

    }
    var AccNumber = [];
    $.getJSON('@Url.Action("GetAcountAcc", "MultiUse")', { id: 0 }, function (Data) {
        AccNumber = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].AccountName, value: Data[i].AccountNumber, stop: Data[i].StoppedAccount };
                AccNumber.push(r);
            }
    });
    $(function () {
        $("#DebitAccountNo").autocomplete({
            source: AccNumber,
            select: function (event, ui) {
                document.getElementById("DebitAccountNo").value = ui.item.value;
                document.getElementById("DebitAccountName").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#CreditAccountNo").autocomplete({
            source: AccNumber,
            select: function (event, ui) {
                document.getElementById("CreditAccountNo").value = ui.item.value;
                document.getElementById("CreditAccountName").value = ui.item.label;
            }
        });
    });


</script>
<div class="panel card-view">
    <div class="panel-heading" style="background-color: #34495E">
        <div class="pull-left">
            <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.AssetsReport</h6>
        </div>
        <div class="clearfix"></div>
    </div>
    <div class="panel-body">
        <div class="col-lg-12">
            <div class="form-group">
                <div class="col-lg-3">
                    <div class="form-group">
                        @Html.LabelFor(m => m.AssetTypeID)
                        @Html.DropDownListFor(m => m.AssetTypeID, new SelectList(Model.AssetType, "AssetTypeID", "Name"), Resources.Resource.AssetType, new { @id = "AssetTypeID", @class = "form-control input-sml" })
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <div class="col-lg-3">
                @Html.Label(Resources.Resource.ConsumptionComplexNo)
                <div class="form-group  input-group">
                    @Html.TextBoxFor(m => m.CreditAccountNo, new { @id = "CreditAccountNo", @class = "form-control input-sml" })
                    <span class="input-group-btn">
                        <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnCreditAccountNo">
                            <i class="fa fa-search"></i>
                        </button>
                    </span>
                </div>
            </div>
            <div class="col-lg-3">
                @Html.Label(Resources.Resource.AccountName)
                <div class="form-group  input-group">
                    @Html.TextBoxFor(m => m.CreditAccountName, new { @id = "CreditAccountName", @class = "form-control input-sml", @readonly = "readonly" })
                    <span class="input-group-btn">
                        <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearCreditAccountNo">
                            <i class="fa fa-minus-square"></i>
                        </button>
                    </span>
                </div>
            </div>
            <div class="col-lg-3">
                @Html.Label(Resources.Resource.DepreciationExpenseNo)
                <div class="form-group  input-group">
                    @Html.TextBoxFor(m => m.DebitAccountNo, new { @id = "DebitAccountNo", @class = "form-control input-sml" })
                    <span class="input-group-btn">
                        <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnDebitAccountNo">
                            <i class="fa fa-search"></i>
                        </button>
                    </span>
                </div>
            </div>
            <div class="col-lg-3">
                @Html.Label(Resources.Resource.AccountName)
                <div class="form-group  input-group">
                    @Html.TextBoxFor(m => m.DebitAccountName, new { @id = "DebitAccountName", @class = "form-control input-sml", @readonly = "readonly" })
                    <span class="input-group-btn">
                        <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearDebitAccountNo">
                            <i class="fa fa-minus-square"></i>
                        </button>
                    </span>
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <div class="col-lg-3">
                <div class="form-group">
                    @Html.CheckBoxFor(m => m.ApproveConsStartDate, new { @id = "ApproveConsStartDate" }) @Resources.Resource.ApproveConsStartDate / @Html.LabelFor(m => m.FromConsStartDate)
                    @Html.TextBoxFor(model => model.FromConsStartDate, new { @id = "FromConsStartDate", @class = "form-control input-sml", @Value = Model.FromConsStartDate.ToString("dd/MM/yyyy") })
                </div>
            </div>
            <div class="col-lg-3">
                <div class="form-group">
                    @Html.LabelFor(m => m.ToConsStartDate)
                    @Html.TextBoxFor(model => model.ToConsStartDate, new { @id = "ToConsStartDate", @class = "form-control input-sml", @Value = Model.ToConsStartDate.ToString("dd/MM/yyyy") })
                </div>
            </div>
            <div class="col-lg-3">
                <div class="form-group">
                    @Html.CheckBoxFor(m => m.ApproveCombinedtDate, new { @id = "ApproveCombinedtDate" }) @Resources.Resource.ApproveCombinedtDate / @Html.LabelFor(m => m.FromCombinedtDate)
                    @Html.TextBoxFor(model => model.FromCombinedtDate, new { @id = "FromCombinedtDate", @class = "form-control input-sml", @Value = Model.FromCombinedtDate.ToString("dd/MM/yyyy") })
                </div>
            </div>
            <div class="col-lg-3">
                <div class="form-group">
                    @Html.LabelFor(m => m.ToCombinedtDate)
                    @Html.TextBoxFor(model => model.ToCombinedtDate, new { @id = "ToCombinedtDate", @class = "form-control input-sml", @Value = Model.ToCombinedtDate.ToString("dd/MM/yyyy") })
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <div class="form-group">
                <div class="col-md-2" style="text-align: center">

                </div>
                <div class="col-md-2" style="text-align: center">
                    <div class="form-group">
                        @Html.Label(@Resources.Resource.Count)
                        @Html.TextBoxFor(m => m.Count, new { @id = "Count", @class = "form-control input-sml", @style = "text-align: center;font-weight: bold;", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-md-2" style="text-align: center">
                    <div class="form-group">
                        @Html.Label(@Resources.Resource.SumAssetCost)
                        @Html.TextBoxFor(m => m.SumAssetCost, new { @id = "SumAssetCost", @class = "form-control input-sml", @style = "text-align: center;font-weight: bold;", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-md-2" style="text-align: center">
                    <div class="form-group">
                        @Html.Label(@Resources.Resource.SumCombinedConsum)
                        @Html.TextBoxFor(m => m.SumCombinedConsum, new { @id = "SumCombinedConsum", @class = "form-control input-sml", @style = "text-align: center;font-weight: bold;", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-md-2" style="text-align: center">
                    <div class="form-group">
                        @Html.Label(@Resources.Resource.SumBookValue)
                        @Html.TextBoxFor(m => m.SumBookValue, new { @id = "SumBookValue", @class = "form-control input-sml", @style = "text-align: center;font-weight: bold;", @readonly = "readonly" })
                    </div>
                </div>
                <div class="col-md-2" style="text-align: center">

                </div>
            </div>

        </div>
        <div class="col-lg-12">
            <button type="submit" class="btn btn-anim btnSearch" id="reload"><i class=" fa fa-search"></i><span class="btn-text">@Resources.Resource.Search</span></button>
            @if (User.IsInRole("PrintRepAssetsPrintReport") || User.IsInRole("CoOwner"))
            {
                <button type="submit" class="btn btn-warning btn-anim" id="PrintPDF"><i class=" fa fa-print"></i><span class="btn-text">@Resources.Resource.Print</span></button>
            }
            <button type="submit" class="btn btn-anim btnFav" id="AddToFav"><i class=" fa fa-star"></i><span class="btn-text">@Resources.Resource.AddToFav</span></button>
            <button type="button" class="btn btn-default btn-anim" id="CloseForm"><i class="fa fa-times"></i><span class="btn-text">@Resources.Resource.Close</span></button>
        </div>
        <div class="col-lg-12" style="margin-top : 10px">
            <div class="form-group">
                <table id="tdataTable" class="table table-hover table-bordered mb-0" width="100%">
                    <thead>
                        <tr>
                            <th>@Resources.Resource.AssetTypeID</th>
                            <th>@Resources.Resource.AssetID</th>
                            <th>@Resources.Resource.AssetName</th>
                            <th>@Resources.Resource.ConsStartDate</th>
                            <th>@Resources.Resource.AssetCost</th>
                            <th>@Resources.Resource.AssetConsumRatio</th>
                            <th>@Resources.Resource.CombinedConsum</th>
                            <th>@Resources.Resource.BookValue</th>
                            <th>@Resources.Resource.CombinedtDate</th>
                            <th>@Resources.Resource.ConsumptionComplexName</th>
                            <th>@Resources.Resource.DepreciationExpenseName</th>
                            @if (Model.WorkWithCostCenter)
                            {
                                <th>@Resources.Resource.ConsumptionComplexCostName</th>
                                <th>@Resources.Resource.DepreciationExpenseCostName</th>
                            }
                            <th>@Resources.Resource.AssetBarCode</th>
                            <th>@Resources.Resource.AssetSerialNo</th>
                            <th>@Resources.Resource.GuaranteedDate</th>
                            <th>@Resources.Resource.Note</th>
                            <th>@Resources.Resource.AssetAdministration</th>
                            <th>@Resources.Resource.AssetCircle</th>
                            <th>@Resources.Resource.AssetSection</th>
                            <th>@Resources.Resource.AssetSite</th>
                            <th>@Resources.Resource.AssetTrustee</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
    <div class="panel-footer">

    </div>
</div>
<div id="modal-container" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-content">
    </div>
</div>
@Html.CheckBoxFor(m => m.WorkWithCostCenter, new { @id = "WorkWithCostCenter", @style = "visibility : hidden;" })


@Html.TextBoxFor(m => m.TheDecimalPointForTheLocalCurrency, new { @id = "TheDecimalPointForTheLocalCurrency", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TheDecimalPointForTheForeignCurrency, new { @id = "TheDecimalPointForTheForeignCurrency", @style = "visibility : hidden;" })
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
        var WorkWithCostCenter = document.getElementById("WorkWithCostCenter").checked;
    $(document).ready(function () {

        var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
        var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;

        function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
            try {
                decimalCount = Math.abs(decimalCount);
                decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

                const negativeSign = amount < 0 ? "-" : "";

                let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
                let j = (i.length > 3) ? i.length % 3 : 0;

                return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
            } catch (e) {
                console.log(e)
            }
        };
        function validatedate(dateString) {
            var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
            if (dateString.match(dateformat)) {
                var operator = dateString.split('/');
                var datepart = [];
                if (operator.length > 1) {
                    datepart = dateString.split('/');
                }
                var month = parseInt(datepart[1]);
                var day = parseInt(datepart[0]);
                var year = parseInt(datepart[2]);
                var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                if (month == 1 || month > 2) {
                    if (day > ListofDays[month - 1]) {
                        return false;
                    }
                } else if (month == 2) {
                    var leapYear = false;
                    if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                        leapYear = true;
                    }
                    if ((leapYear == false) && (day >= 29)) {
                        return false;
                    } else
                        if ((leapYear == true) && (day > 29)) {
                            return false;
                        }
                }
            }
            else {
                return false;
            }
            return true;
        }
            $(document).on('click', '#AddToFav', function () {

				bootbox.confirm({
					message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
					className: 'rubberBand animated',
					buttons: {
						confirm: {
							label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
							className: 'btn-success'
						},
						cancel: {
							label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
							className: 'btn-danger'
						}
					},
					callback: function (result) {
						if (result) {
							var dialog = bootbox.dialog({
								title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
								message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Saving...</p>',
								closeButton: false
							});

							var dataToSave = {

								ScreenName: '@Resources.Resource.AssetsReport',
                                ScreenUrl: "/Asset/AssetsReport",
								ScreenType: 1

							};

							$.ajax({
								type: "POST",
								url: "/FavScreen/AddToFave",
								data: JSON.stringify(dataToSave),
								contentType: 'application/json',
								success: function (data) {

									dialog.modal('hide');
									if (data.Code == 0) {
										toastr.error(data.Msg);
									}
									else if (data.Code == 1) {
										toastr.success(data.Msg);
									}

								},
								error: function (data) {
									dialog.modal('hide');
									toastr.error(data);
								}

							});
						}
					}
				});


		});

            $(document).on('click', '#PrintPDF', function () {
                        var FromConsStartDate = $("#FromConsStartDate").val();
                        var ToConsStartDate = $("#ToConsStartDate").val();
                        var FromCombinedtDate = $("#FromCombinedtDate").val();
                        var ToCombinedtDate = $("#ToCombinedtDate").val();
                        var DebitAccountNo = $("#DebitAccountNo").val();
                       var CreditAccountNo = $("#CreditAccountNo").val();
                       var AssetTypeID = $("#AssetTypeID").val();
                       var ApproveConsStartDate = $("#ApproveConsStartDate:checked").val();
                       var ApproveCombinedtDate = $("#ApproveCombinedtDate:checked").val();



                if (ApproveConsStartDate) {
                    ApproveConsStartDate = 1
                }
                else {
                    ApproveConsStartDate=0
                }

                 if (ApproveCombinedtDate) {
                     ApproveCombinedtDate = 1

                }
                 else {
                     ApproveCombinedtDate = 0

                }


               if (DebitAccountNo == '' || DebitAccountNo == null) {
                    DebitAccountNo = "0";
                 }

                 if (CreditAccountNo == '' || CreditAccountNo == null) {
                    CreditAccountNo =0;
            }

                 if (AssetTypeID == '' || AssetTypeID == null) {
                    AssetTypeID =0;
                }




                var words = FromConsStartDate.split('/');
                FromConsStartDate = words[0] + words[1] + words[2];
                words= ToConsStartDate.split('/');
                ToConsStartDate = words[0] + words[1] + words[2];

                  words= FromCombinedtDate.split('/');
                  FromCombinedtDate = words[0] + words[1] + words[2];
                  words= ToCombinedtDate.split('/');
                  ToCombinedtDate = words[0] + words[1] + words[2];


            window.open('/PDFReport/GetAssetsReportPDF/' + FromConsStartDate + "/" + ToConsStartDate + "/" + FromCombinedtDate + "/" + ToCombinedtDate + "/" +
                DebitAccountNo + "/" + CreditAccountNo + "/" + AssetTypeID + "/" +
                         ApproveConsStartDate + "/" + ApproveCombinedtDate , '_blank');

			});


        $(document).on('click', '#CloseForm', function () {
            window.location = "/Report/ReportDash";
        });
        $('#ApproveConsStartDate').click(function () {
            document.getElementById('ApproveCombinedtDate').checked = false;
        });
        $('#ApproveCombinedtDate').click(function () {
            document.getElementById('ApproveConsStartDate').checked = false;
        });
        $("#FromConsStartDate").blur(function () {
            var dDate = document.getElementById("FromConsStartDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("FromConsStartDate").value = '01/01/' + new Date().getFullYear()
            }
        });
        $("#ToConsStartDate").blur(function () {
            var dDate = document.getElementById("ToConsStartDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("ToConsStartDate").value = '01/01/' + new Date().getFullYear()
            }
        });
        $("#FromConsStartDate").mask("99/99/9999");
        $("#ToConsStartDate").mask("99/99/9999");
        $("#FromCombinedtDate").blur(function () {
            var dDate = document.getElementById("FromCombinedtDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("FromCombinedtDate").value = '01/01/' + new Date().getFullYear()
            }
        });
        $("#ToCombinedtDate").blur(function () {
            var dDate = document.getElementById("ToCombinedtDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("ToCombinedtDate").value = '01/01/' + new Date().getFullYear()
            }
        });
        $("#FromCombinedtDate").mask("99/99/9999");
        $("#ToCombinedtDate").mask("99/99/9999");
        $("#FromConsStartDate").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#ToConsStartDate").focus().select();
            }

        });
        $("#ToConsStartDate").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#FromCombinedtDate").focus().select();
            }

        });
        $("#FromCombinedtDate").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#ToCombinedtDate").focus().select();
            }

        });
        $("#ToCombinedtDate").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#CreditAccountNo").focus().select();
            }

        });
        $(document).on('click', '#reload', function () {

            var dDate = document.getElementById("FromConsStartDate").value;
            var dToDate = document.getElementById("ToConsStartDate").value;
            var dDate2 = document.getElementById("ToCombinedtDate").value;
            var dToDate2 = document.getElementById("ToCombinedtDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else if (!validatedate(dDate2)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else if (!validatedate(dToDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else if (!validatedate(dToDate2)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                var dialog = bootbox.dialog({
                 title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            tabelMemRef.ajax.reload();
            dialog.modal('hide');

            }
        });
        $("#CreditAccountNo").focus().select();
        $("#CreditAccountNo").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#DebitAccountNo").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchAcc/ConsumptionComplexNoSearch';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $("#DebitAccountNo").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#FromConsStartDate").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchAcc/DepreciationExpenseNoSearch';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $('#BtnDebitAccountNo').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchAcc/DepreciationExpenseNoSearch';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
        });
        $('#BtnCreditAccountNo').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchAcc/ConsumptionComplexNoSearch';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
        });
        $('#BtnClearDebitAccountNo').on('click', function () {
            document.getElementById("DebitAccountNo").value = '';
            document.getElementById("DebitAccountName").value = '';
        });
        $('#BtnClearCreditAccountNo').on('click', function () {
            document.getElementById("CreditAccountNo").value = '';
            document.getElementById("CreditAccountName").value = '';
        });
        $(document).on('click', '.js-Pop', function (e) {
            $('#modal-container').removeData('bs.modal');
            e.preventDefault();
            $(this).attr('data-target', '#modal-container');
            $(this).attr('data-toggle', 'modal');

        });
        $('#modal-container').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal');
        });
        $('#CancelModal').on('click', function () {

            return false;
        });
        $("#DebitAccountNo").blur(function () {
            var AccountNumber = document.getElementById("DebitAccountNo").value;
            if (AccountNumber == '') {
                document.getElementById("DebitAccountName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckAcountAcc", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("DebitAccountNo").value = '';
                            document.getElementById("DebitAccountName").value = '';
                            $("#DebitAccountNo").focus();
                        }
                        else {
                            document.getElementById("DebitAccountName").value = Data.AccountName;

                        }
                    });
                }
            }
        });
        $("#CreditAccountNo").blur(function () {
            var AccountNumber = document.getElementById("CreditAccountNo").value;
            if (AccountNumber == '') {
                document.getElementById("CreditAccountName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckAcountAcc", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("CreditAccountNo").value = '';
                            document.getElementById("CreditAccountName").value = '';
                            $("#CreditAccountNo").focus();
                        }
                        else {
                            document.getElementById("CreditAccountName").value = Data.AccountName;

                        }
                    });
                }
            }
        });

        if (WorkWithCostCenter) {
            var tabelMemRef = $("#tdataTable").DataTable({
                "language": {
                    "emptyTable": '@Resources.Resource.EmptyTable',
                    "search": '@Resources.Resource.Search',
                    "loadingRecords": '@Resources.Resource.LoadingRecords',
                    "processing": '@Resources.Resource.Processing',
                    "zeroRecords": '@Resources.Resource.ZeroRecords',
                    "info": '@Resources.Resource.Info',
                    "infoEmpty": '@Resources.Resource.InfoEmpty',
                    "lengthMenu": '@Resources.Resource.LengthMenu',
                    "infoFiltered": '@Resources.Resource.InfoFiltered',
                    "paginate": {
                        "previous": '@Resources.Resource.Previous',
                        "next": '@Resources.Resource.Next',
                        "first": '@Resources.Resource.First',
                        "last": '@Resources.Resource.Last',
                    },
                    "aria": {
                        "sortAscending": '@Resources.Resource.SortAscending',
                        "sortDescending": '@Resources.Resource.SortDescending'
                    }
                },
                "scrollY": "500px",
                "scrollX": true,
                "ordering": false,
                "autoWidth": false,
                "paging": false,
                "searching": false,
                "columnDefs": [
                    {
                        "targets": [0],
                        "className": "dt-center"
                    },
                    {
                        "targets": [1],
                        "className": "dt-center"
                    },
                    {
                        "targets": [2],
                        "className": "dt-center"
                    },
                    {
                        "targets": [3],
                        "className": "dt-center"
                    },
                    {
                        "targets": [4],
                        "className": "dt-center"
                    },
                    {
                        "targets": [5],
                        "className": "dt-center"
                    },
                    {
                        "targets": [6],
                        "className": "dt-center"
                    },
                    {
                        "targets": [7],
                        "className": "dt-center"
                    },
                    {
                        "targets": [8],
                        "className": "dt-center"
                    },
                    {
                        "targets": [9],
                        "className": "dt-center"
                    },
                    {
                        "targets": [10],
                        "className": "dt-center"
                    },
                    {
                        "targets": [11],
                        "className": "dt-center"
                    },
                    {
                        "targets": [12],
                        "className": "dt-center"
                    },
                    {
                        "targets": [13],
                        "className": "dt-center"
                    },
                    {
                        "targets": [14],
                        "className": "dt-center"
                    },
                    {
                        "targets": [15],
                        "className": "dt-center"
                    },
                    {
                        "targets": [16],
                        "className": "dt-center"
                    },
                    {
                        "targets": [17],
                        "className": "dt-center"
                    },
                    {
                        "targets": [18],
                        "className": "dt-center"
                    },
                    {
                        "targets": [19],
                        "className": "dt-center"
                    },
                    {
                        "targets": [20],
                        "className": "dt-center"
                    },
                    {
                        "targets": [21],
                        "className": "dt-center"
                    }
                ],
                dom: 'Bfrtip',
                buttons: [

                ],
                ajax: {
                    "type": "POST",
                    url: "/Asset/GetAssetsReport",
                    "data": function (d) {
                        d.AssetTypeID = $("#AssetTypeID").val();
                        d.ApproveConsStartDate = $("#ApproveConsStartDate:checked").val();
                        d.ApproveCombinedtDate = $("#ApproveCombinedtDate:checked").val();
                        d.FromConsStartDate = $("#FromConsStartDate").val();
                        d.ToConsStartDate = $("#ToConsStartDate").val();
                        d.FromCombinedtDate = $("#FromCombinedtDate").val();
                        d.ToCombinedtDate = $("#ToCombinedtDate").val();
                        d.DebitAccountNo = $("#DebitAccountNo").val();
                        d.CreditAccountNo = $("#CreditAccountNo").val();
                    },

                    dataSrc: ""

                },
                "footerCallback": function (row, data, start, end, display) {
                    var api = this.api(), data;
                    var intVal = function (i) {
                        return typeof i === 'string' ?
                            i.replace(/[\$,]/g, '') * 1 :
                            typeof i === 'number' ?
                                i : 0;
                    };

                    SumAssetCost = api.column(4).data().reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0);
                    SumCombinedConsum = api.column(6).data().reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0);
                    SumBookValue = api.column(7).data().reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0);
                    var table = $('#tdataTable').DataTable();
                    document.getElementById("Count").value = table.rows().count();
                    document.getElementById("SumAssetCost").value = formatMoney(SumAssetCost, TheDecimalPointForTheLocalCurrency);
                    document.getElementById("SumBookValue").value = formatMoney(SumBookValue, TheDecimalPointForTheLocalCurrency);
                    document.getElementById("SumCombinedConsum").value = formatMoney(SumCombinedConsum, TheDecimalPointForTheLocalCurrency);
                },
                columns: [
                    {
                        data: "AssetTypeName"

                    },
                    {
                        data: "AssetID"

                    },
                    {
                        data: "AssetName"

                    },
                    {
                        data: "ConsStartDate",
                        render: function (data, type, r) {
                            return moment(data).format('DD/MM/YYYY')
                        }

                    },
                    {
                        data: "AssetCost",
                        render: function (data, type, r) {
                            return (formatMoney(data, TheDecimalPointForTheLocalCurrency))

                        }
                    },
                    {
                        data: "AssetConsumRatio"

                    },
                    {
                        data: "CombinedConsum",
                        render: function (data, type, r) {
                            return (formatMoney(data, TheDecimalPointForTheLocalCurrency))

                        }
                    },
                    {
                        data: "BookValue",
                        render: function (data, type, r) {
                            return (formatMoney(data, TheDecimalPointForTheLocalCurrency))

                        }
                    },
                    {
                        data: "CombinedtDate",
                        render: function (data, type, r) {
                            return moment(data).format('DD/MM/YYYY')
                        }

                    },
                    {
                        data: "CreditAccountName"

                    },
                    {
                        data: "DebitAccountName"

                    },
                    {
                        data: "CreditCostName"

                    },
                    {
                        data: "DebitCostName"

                    },
                    {
                        data: "AssetBarCode"
                    },
                    {
                        data: "AssetSerialNo"

                    },
                    {
                        data: "GuaranteedDate",
                        render: function (data, type, r) {
                            return moment(data).format('DD/MM/YYYY')
                        }
                    },
                    {
                        data: "Note"

                    },
                    {
                        data: "AdministrationName"

                    },
                    {
                        data: "CircleName"

                    },
                    {
                        data: "SectionName"

                    },
                    {
                        data: "SiteName"

                    },
                    {
                        data: "TrusteeName"

                    }
                ]

            });
        }
        else {
            var tabelMemRef = $("#tdataTable").DataTable({
                "language": {
                    "emptyTable": '@Resources.Resource.EmptyTable',
                    "search": '@Resources.Resource.Search',
                    "loadingRecords": '@Resources.Resource.LoadingRecords',
                    "processing": '@Resources.Resource.Processing',
                    "zeroRecords": '@Resources.Resource.ZeroRecords',
                    "info": '@Resources.Resource.Info',
                    "infoEmpty": '@Resources.Resource.InfoEmpty',
                    "lengthMenu": '@Resources.Resource.LengthMenu',
                    "infoFiltered": '@Resources.Resource.InfoFiltered',
                    "paginate": {
                        "previous": '@Resources.Resource.Previous',
                        "next": '@Resources.Resource.Next',
                        "first": '@Resources.Resource.First',
                        "last": '@Resources.Resource.Last',
                    },
                    "aria": {
                        "sortAscending": '@Resources.Resource.SortAscending',
                        "sortDescending": '@Resources.Resource.SortDescending'
                    }
                },
                "scrollY": "500px",
                "scrollX": true,
                "ordering": false,
                "autoWidth": false,
                "paging": false,
                "searching": false,
                "columnDefs": [
                    {
                        "targets": [0],
                        "className": "dt-center"
                    },
                    {
                        "targets": [1],
                        "className": "dt-center"
                    },
                    {
                        "targets": [2],
                        "className": "dt-center"
                    },
                    {
                        "targets": [3],
                        "className": "dt-center"
                    },
                    {
                        "targets": [4],
                        "className": "dt-center"
                    },
                    {
                        "targets": [5],
                        "className": "dt-center"
                    },
                    {
                        "targets": [6],
                        "className": "dt-center"
                    },
                    {
                        "targets": [7],
                        "className": "dt-center"
                    },
                    {
                        "targets": [8],
                        "className": "dt-center"
                    },
                    {
                        "targets": [9],
                        "className": "dt-center"
                    },
                    {
                        "targets": [10],
                        "className": "dt-center"
                    },
                    {
                        "targets": [11],
                        "className": "dt-center"
                    },
                    {
                        "targets": [12],
                        "className": "dt-center"
                    },
                    {
                        "targets": [13],
                        "className": "dt-center"
                    },
                    {
                        "targets": [14],
                        "className": "dt-center"
                    },
                    {
                        "targets": [15],
                        "className": "dt-center"
                    },
                    {
                        "targets": [16],
                        "className": "dt-center"
                    },
                    {
                        "targets": [17],
                        "className": "dt-center"
                    },
                    {
                        "targets": [18],
                        "className": "dt-center"
                    },
                    {
                        "targets": [19],
                        "className": "dt-center"
                    }
                ],
                dom: 'Bfrtip',
                buttons: [

                ],
                ajax: {
                    "type": "POST",
                    url: "/Asset/GetAssetsReport",
                    "data": function (d) {
                        d.AssetTypeID = $("#AssetTypeID").val();
                        d.ApproveConsStartDate = $("#ApproveConsStartDate:checked").val();
                        d.ApproveCombinedtDate = $("#ApproveCombinedtDate:checked").val();
                        d.FromConsStartDate = $("#FromConsStartDate").val();
                        d.ToConsStartDate = $("#ToConsStartDate").val();
                        d.FromCombinedtDate = $("#FromCombinedtDate").val();
                        d.ToCombinedtDate = $("#ToCombinedtDate").val();
                        d.DebitAccountNo = $("#DebitAccountNo").val();
                        d.CreditAccountNo = $("#CreditAccountNo").val();
                    },

                    dataSrc: ""

                },
                "footerCallback": function (row, data, start, end, display) {
                    var api = this.api(), data;
                    var intVal = function (i) {
                        return typeof i === 'string' ?
                            i.replace(/[\$,]/g, '') * 1 :
                            typeof i === 'number' ?
                                i : 0;
                    };

                    SumAssetCost = api.column(4).data().reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0);
                    SumCombinedConsum = api.column(6).data().reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0);
                    SumBookValue = api.column(7).data().reduce(function (a, b) {
                        return intVal(a) + intVal(b);
                    }, 0);
                    var table = $('#tdataTable').DataTable();
                    document.getElementById("Count").value = table.rows().count();
                    document.getElementById("SumAssetCost").value = (formatMoney(SumAssetCost, TheDecimalPointForTheLocalCurrency));

                    document.getElementById("SumBookValue").value = (formatMoney(SumBookValue, TheDecimalPointForTheLocalCurrency));
                    document.getElementById("SumCombinedConsum").value = (formatMoney(SumCombinedConsum, TheDecimalPointForTheLocalCurrency));
                },
                columns: [
                    {
                        data: "AssetTypeName"

                    },
                    {
                        data: "AssetID"

                    },
                    {
                        data: "AssetName"

                    },
                    {
                        data: "ConsStartDate",
                        render: function (data, type, r) {
                            return moment(data).format('DD/MM/YYYY')
                        }

                    },
                    {
                        data: "AssetCost",
                        render: function (data, type, r) {
                            return (formatMoney(data, TheDecimalPointForTheLocalCurrency))

                        }
                    },
                    {
                        data: "AssetConsumRatio"

                    },
                    {
                        data: "CombinedConsum",
                        render: function (data, type, r) {
                            return (formatMoney(data, TheDecimalPointForTheLocalCurrency))

                        }
                    },
                    {
                        data: "BookValue",
                        render: function (data, type, r) {
                            return (formatMoney(data, TheDecimalPointForTheLocalCurrency))

                        }
                    },
                    {
                        data: "CombinedtDate",
                        render: function (data, type, r) {
                            return moment(data).format('DD/MM/YYYY')
                        }

                    },
                    {
                        data: "CreditAccountName"

                    },
                    {
                        data: "DebitAccountName"

                    },
                    {
                        data: "AssetBarCode"
                    },
                    {
                        data: "AssetSerialNo"

                    },
                    {
                        data: "GuaranteedDate",
                        render: function (data, type, r) {
                            return moment(data).format('DD/MM/YYYY')
                        }
                    },
                    {
                        data: "Note"

                    },
                    {
                        data: "AdministrationName"

                    },
                    {
                        data: "CircleName"

                    },
                    {
                        data: "SectionName"

                    },
                    {
                        data: "SiteName"

                    },
                    {
                        data: "TrusteeName"

                    }
                ]

            });
        }



    });
</script>
}








