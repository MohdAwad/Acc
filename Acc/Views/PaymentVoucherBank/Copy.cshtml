@model Acc.ViewModels.TransactionFixedVM
@{
    ViewBag.Title = @Resources.Resource.Copy;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
    <style>
        .panel-body {
            font-family: Verdana, Geneva, Tahoma, sans-serif
        }

        .panel-footer {
            font-family: Verdana, Geneva, Tahoma, sans-serif
        }

        .panel-title {
            font-family: Verdana, Geneva, Tahoma, sans-serif
        }

        .dt-button {
            display: none !important;
        }

        #PapersGrid_DXHeadersRow0 {
            font-family: Verdana, Geneva, Tahoma, sans-serif !important;
            font-size: 10pt;
        }

        .dxgvBatchEditNewItem_iOS {
            font-family: Verdana, Geneva, Tahoma, sans-serif !important;
            font-size: 10pt;
        }

        .dxgvControl_iOS {
            width: 100% !important;
        }

        .dxgvHeader_iOS {
            width: 10px
        }
        #PapersGrid_col0 {
            width: 55px;
        }
    </style>
    <script>
    var LastStatment = "";
    var SumDebit = 0;
    var SumCredit = 0;
    var preventEndEditOnLostFocus = false;
    var currentEditedValue;
    var SelectAccount;
    var lastVisibleIndex;
    var FocusedCellColumnIndex = 0;
    var FocusedCellRowIndex = 0;
    function GetSelectedPostdatedCheque(data) {
        PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumberThird", data.BankAccountNumber);
        PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumberSecond", data.PostdatedChequeAccountNumber);
        PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "BankAccountNameJustForFill", data.BankAccountName);
        PapersGrid.batchEditApi.StartEdit(lastVisibleIndex, 4);
    }
    var BankAccounts = [];
     $.getJSON('@Url.Action("GetDefinitionBank", "MultiUse")', { id: 0 }, function (Data) {
         BankAccounts = [];
         for (var i = 0, len = Data.length; i < len; i++) {
             var r = { label: Data[i].BankAccountName, value: Data[i].BankAccountNumber, account: Data[i].PostdatedChequeAccountNumber, stop: Data[i].StoppedAccountPostdatedCheque };
             BankAccounts.push(r);
		}
     });
    function AutoCompleteBanks(s, e) {
        $(s.GetInputElement()).autocomplete({
          minLength: 0,
            source: BankAccounts,
             select: function (event, ui) {
                 if (ui.item.stop == '0') {
                     s.SetValue(ui.item.value);
                     PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "BankAccountNameJustForFill", ui.item.label);
                     PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumberSecond", ui.item.account);
                     PapersGrid.batchEditApi.GetCellValue()
                 }
                 else {
                     bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberIsSuspended</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                     FocusedCellColumnIndex = 4;
                     s.SetValue('');
                     PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "BankAccountNameJustForFill", "");
                     PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumberSecond", "");
                 }
             return false;
             },
             position:
             {
                 my: "left top",
                 at: "left bottom",
                 of: s.GetMainElement()
             }

        });
        }
    var AccNumber = [];
    $.getJSON('@Url.Action("GetAcountAcc", "MultiUse")', { id: 0 }, function (Data) {
        AccNumber = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].AccountName, value: Data[i].AccountNumber, stop: Data[i].StoppedAccount };
                AccNumber.push(r);
            }
    });
    var CostCenter = [];
    $.getJSON('@Url.Action("GetCostCenter", "MultiUse")', { id: 0 }, function (Data) {
        CostCenter = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].CostName, value: Data[i].CostNumber, stop: Data[i].StoppedAccount };
                CostCenter.push(r);
            }
    });
    $(function () {
        $("#FromAccountNumber").autocomplete({
            source: AccNumber,
            select: function (event, ui) {
                document.getElementById("FromAccountNumber").value = ui.item.value;
                document.getElementById("AccountDebitName").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#ToCostCenter").autocomplete({
            source: CostCenter,
            select: function (event, ui) {
                document.getElementById("ToCostCenter").value = ui.item.value;
                document.getElementById("CostCenterCreditName").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#FromCostCenter").autocomplete({
            source: CostCenter,
            select: function (event, ui) {
                document.getElementById("FromCostCenter").value = ui.item.value;
                document.getElementById("CostCenterDebitName").value = ui.item.label;
            }
        });
    });
    function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
        try {
            decimalCount = Math.abs(decimalCount);
            decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

            const negativeSign = amount < 0 ? "-" : "";

            let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
            let j = (i.length > 3) ? i.length % 3 : 0;

            return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
        } catch (e) {
            console.log(e)
        }
    };
    function validatedate(dateString) {
        var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
        if (dateString.match(dateformat)) {
            var operator = dateString.split('/');
            var datepart = [];
            if (operator.length > 1) {
                datepart = dateString.split('/');
            }
            var month = parseInt(datepart[1]);
            var day = parseInt(datepart[0]);
            var year = parseInt(datepart[2]);
            var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
            if (month == 1 || month > 2) {
                if (day > ListofDays[month - 1]) {
                    return false;
                }
            } else if (month == 2) {
                var leapYear = false;
                if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                    leapYear = true;
                }
                if ((leapYear == false) && (day >= 29)) {
                    return false;
                } else
                    if ((leapYear == true) && (day > 29)) {
                        return false;
                    }
            }
        }
        else {
            return false;
        }
        return true;
    }
    function CalcSumDebitCredit(s, e) {
            SumChequeAmount = 0;
            var ChequeAmount = 0;
            var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
            var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;
            var visibleRowIndices = PapersGrid.batchEditApi.GetRowVisibleIndices();
            for (var i = 0; i < visibleRowIndices.length; i++) {
                ChequeAmount = PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeAmount");
                ChequeAmount = Number(ChequeAmount);
                if (ChequeAmount == "NaN") {
                    ChequeAmount = 0;
                }
                SumChequeAmount = SumChequeAmount + parseFloat(ChequeAmount);
            }
            document.getElementById("Amount").value = SumChequeAmount;
            if (document.getElementById("Amount").value == '') {
                document.getElementById("Amount").value = 0;
                document.getElementById("sAmount").value = formatMoney(0, TheDecimalPointForTheLocalCurrency);
            }
            var CurrencyAmount = document.getElementById("CurrencyNewValue").value;
            if (CurrencyAmount == 0) {
                CurrencyAmount = 1
            };
            if (CurrencyAmount == 1) {
                $("#ForeignAmount").val((parseFloat(0)).toFixed(TheDecimalPointForTheLocalCurrency));
                document.getElementById("Amount").value = SumChequeAmount;
                $("#sForeignAmount").val(formatMoney(0, TheDecimalPointForTheForeignCurrency));
                $("#sAmount").val(formatMoney(parseFloat($("#Amount").val()), TheDecimalPointForTheLocalCurrency));
            }
            else {
                document.getElementById("Amount").value = SumChequeAmount;
                document.getElementById("ForeignAmount").value = SumChequeAmount / document.getElementById("CurrencyNewValue").value;
                $("#sForeignAmount").val(formatMoney(parseFloat($("#ForeignAmount").val()), TheDecimalPointForTheForeignCurrency));
                $("#sAmount").val(formatMoney(parseFloat($("#Amount").val()), TheDecimalPointForTheLocalCurrency));
            };
        }
    function ClearGrid(s, e) {
        PapersGrid.PerformCallback('clear');
        setTimeout(function () {
            CalcSumDebitCredit(s, e);
        }, 1000);
    }
    function LoopGrid(s, e) {
            var dDate = document.getElementById("VoucherDate").value;
            var WorkWithCostCenter = document.getElementById("WorkWithCostCenter").checked;
            var CurrentYear = document.getElementById("CompanyYear").value;
            var d1 = dDate.split("/");
            var From = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);
            var iError = 0;
            var visibleRowIndices = PapersGrid.batchEditApi.GetRowVisibleIndices();
            for (var i = 0; i < visibleRowIndices.length; i++) {
                if (PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeDate") == "" || PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeDate") == null) {
                    iError = 2;
                    break;
                }
                else if (PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeNumber") == "" || PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeNumber") == null) {
                    iError = 1;
                    break;
                }
                else if (PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeAmount") == "" || PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeAmount") == null
                    || PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeAmount") == 0) {
                    iError = 3;
                    break;
                }
                else if (PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumberThird") == "" || PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumberThird") == null) {
                    iError = 4;
                    break;
                }
                else if (PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumberThird") != "" || PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumberThird") != null) {
                    $.getJSON('@Url.Action("CheckAccountInfo", "ChartOfAccount")', { id: PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumberThird") }, function (Data) {
                        if (Data.StoppedAccount) {
                            iError = 5;
                        }
                    });
                    if (iError == 5) {
                        break;
                    }
                }
                else if (PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumberSecond") != "" || PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumberSecond") != null) {
                    $.getJSON('@Url.Action("CheckAccountInfo", "ChartOfAccount")', { id: PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumberSecond") }, function (Data) {
                        if (Data.StoppedAccount) {
                            iError = 6;
                        }
                    });
                    if (iError == 6) {
                        break;
                    }
                }
            }
            var FromAccountNumber = document.getElementById("FromAccountNumber").value;
            if (FromAccountNumber != null && FromAccountNumber != '') {
                $.getJSON('@Url.Action("CheckAccountInfo", "ChartOfAccount")', { id: FromAccountNumber }, function (Data) {
                    if (Data.StoppedAccount) {
                        iError = 7;
                    }
                });
            }
            var FromCostCenter = document.getElementById("FromCostCenter").value;
            if (FromCostCenter != null && FromCostCenter != '') {
                $.getJSON('@Url.Action("CheckCostCenterInfo", "CostCenter")', { id: FromCostCenter }, function (Data) {
                    if (Data.StoppedCost) {
                        iError = 8;
                    }
                });
            }
            var ToCostCenter = document.getElementById("ToCostCenter").value;
            if (ToCostCenter != null && ToCostCenter != '') {
                $.getJSON('@Url.Action("CheckCostCenterInfo", "CostCenter")', { id: ToCostCenter }, function (Data) {
                    if (Data.StoppedCost) {
                        iError = 9;
                    }
                });
            }
            if (d1[2] > CurrentYear || d1[2] < CurrentYear) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.DateIsNotWithinThisYear</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                if (!validatedate(dDate) && dDate != null && dDate != '') {
                    bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                }
                else if (dDate != null && dDate != '') {
                    var dd = parseInt(dDate.substring(0, 2));
                    if (dd < 10) {
                        dd = '0' + dd;
                    }
                    var mm = parseInt(dDate.substring(3, 5));
                    if (mm < 10) {
                        mm = '0' + mm;
                    }
                    var yyyy = parseInt(dDate.substring(6, 10));
                    dDate = mm + '/' + dd + '/' + yyyy;
                    $.getJSON('@Url.Action("CheckDateIsFreezeDate", "FreezeTransaction")', { id: dDate }, function (Data) {
                        if (Data >= 1) {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThisDateIsFrozen</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                        else {
                            if (iError == 1) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillChequeNumber</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if (iError == 2) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillChequeDate</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if (iError == 3) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillChequeAmount</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if (iError == 4) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillDrawnToBank</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if (iError == 5) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheDrawnBankAccountNumberIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if (iError == 6) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThePostdatedAccountNumberIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if (iError == 7) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThePaidToAccountNumberIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if (iError == 8) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThePaidToCostCenterIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if (iError == 9) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThePostdatedCostCenterIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if ($("#FromAccountNumber").val() == '') {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if (WorkWithCostCenter && $("#FromCostCenter").val() == '') {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if (WorkWithCostCenter && $("#ToCostCenter").val() == '') {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if ($("#Amount").val() == '' || $("#Amount").val() == 0) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else {
                                bootbox.confirm({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        confirm: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                            className: 'btn-success'
                                        },
                                        cancel: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                            className: 'btn-danger'
                                        }
                                    },
                                    callback: function (result) {
                                        if (result) {
                                            var dialog = bootbox.dialog({
                                                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Copying...</p>',
                                                closeButton: false
                                            });
                                            var FromCostCenter = "";
                                            var ToCostCenter = "";
                                            if (WorkWithCostCenter) {
                                                FromCostCenter = $("#FromCostCenter").val();
                                                ToCostCenter = $("#ToCostCenter").val();
                                            }
                                            var Header = {
                                                VoucherNumber: $("#VoucherNumber").val(),
                                                VoucherDate: $("#VoucherDate").val(),
                                                Note: $("#Note").val(),
                                                ConversionFactor: $("#CurrencyNewValue").val()
                                            };
                                            var visibleRowIndices = PapersGrid.batchEditApi.GetRowVisibleIndices();
                                            var PaperList = [];
                                            for (var i = 0; i < visibleRowIndices.length; i++) {
                                                var Paper = {
                                                    ChequeNumber: PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeNumber"),
                                                    ChequeDate: moment(PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeDate")).format('LL'),
                                                    ChequeAmount: PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "ChequeAmount"),
                                                    AccountNumberThird: PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumberThird"),
                                                    AccountNumberSecond: PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumberSecond"),
                                                    DrawerName: PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[i], "DrawerName"),
                                                    RowNumber: i + 1
                                                };
                                                PaperList.push(Paper);
                                            }
                                            var dataToSave = {
                                                Paper: PaperList,
                                                Header: Header,
                                                CompanyTransactionKindID: $("#CompanyTransactionKindID").val(),
                                                FromAccountNumber: $("#FromAccountNumber").val(),
                                                FromCostCenter: FromCostCenter,
                                                ToCostCenter: ToCostCenter,
                                                Amount: $("#Amount").val(),
                                                CurrencyID: $("#CurrencyID").val(),
                                                Sirs: $("#Sirs:checked").val(),
                                                Mr: $("#Mr:checked").val(),
                                                Mrs: $("#Mrs:checked").val(),
                                                Co: $("#Co:checked").val(),
                                                First: $("#First:checked").val()

                                            }
                                            $.ajax({
                                                type: "POST",
                                                url: "/PaymentVoucherBank/SavePaymentVoucherBank",
                                                data: JSON.stringify(dataToSave),
                                                contentType: 'application/json',
                                                success: function (data) {

                                                    dialog.modal('hide');
                                                    if (data.Code == 0) {
                                                        toastr.error(data.Msg);
                                                    }
                                                    else if (data.Code == 1) {
                                                        $('#modal-container').modal('hide');
                                                        toastr.success(data.Msg);
                                                        $('#modal-container').modal('hide');
                                                        bootbox.confirm({
                                                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.DoYouWantToUploadAttachments</h6>',
                                                            className: 'rubberBand animated',
                                                            buttons: {
                                                                confirm: {
                                                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                                                    className: 'btn-success'
                                                                },
                                                                cancel: {
                                                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                                                    className: 'btn-danger'
                                                                }
                                                            },
                                                            callback: function (result) {
                                                                if (result) {
                                                                    window.open('/PaymentVoucherBank/ShowAttach/' + data.Year + '/' + data.VoucherNumber + '/' + data.CompanyTransactionKindNo + '/' + data.TransactionKindNo, '_blank');
                                                                    bootbox.confirm({
                                                                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.DoYouWantToPrint</h6>',
                                                                        className: 'rubberBand animated',
                                                                        buttons: {
                                                                            confirm: {
                                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                                                                className: 'btn-success'
                                                                            },
                                                                            cancel: {
                                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                                                                className: 'btn-danger'
                                                                            }
                                                                        },
                                                                        callback: function (result) {
                                                                            if (result) {
                                                                                window.open('/PDFReport/GetPapersToPaymentVoucherBankPDF/' + data.VoucherNumber + '/' + data.CompanyTransactionKindNo + '/' + data.TransactionKindNo + '/' + data.Year, '_blank');
                                                                                window.location = "/PaymentVoucherBank/Index";

                                                                            }
                                                                            else {
                                                                                window.location = "/PaymentVoucherBank/Index";

                                                                            }
                                                                        }
                                                                    });

                                                                }
                                                                else {

                                                                    bootbox.confirm({
                                                                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.DoYouWantToPrint</h6>',
                                                                        className: 'rubberBand animated',
                                                                        buttons: {
                                                                            confirm: {
                                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                                                                className: 'btn-success'
                                                                            },
                                                                            cancel: {
                                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                                                                className: 'btn-danger'
                                                                            }
                                                                        },
                                                                        callback: function (result) {
                                                                            if (result) {
                                                                                window.open('/PDFReport/GetPapersToPaymentVoucherBankPDF/' + data.VoucherNumber + '/' + data.CompanyTransactionKindNo + '/' + data.TransactionKindNo + '/' + data.Year, '_blank');
                                                                                window.location = "/PaymentVoucherBank/Index";

                                                                            }
                                                                            else {
                                                                                window.location = "/PaymentVoucherBank/Index";

                                                                            }
                                                                        }
                                                                    });

                                                                }
                                                            }
                                                        });

                                                    }
                                                },
                                                error: function (data) {
                                                    dialog.modal('hide');
                                                    toastr.error(data);
                                                }
                                            });
                                        }
                                    }
                                });
                            }
                        };
                    });
                }
            }

        }
    function OnInit(s, e)
    {
            ASPxClientUtils.AttachEventToElement(
            s.GetMainElement(),
                "keydown",
                function (evt) {
                    if (evt.keyCode == 113 && FocusedCellColumnIndex == 4) {
                        var dialog = bootbox.dialog({
                            title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                            message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                            closeButton: false
                        });
                        var url = '/MultiUse/SearchBankAccountNumber/PostdatedAccountNumberSecond';
                        $.get(url, function (data) {
                            $('#modal-container').html(data);
                            $('#modal-container').modal('show');
                            dialog.modal('hide');
                        })
                    }
                    switch (evt.keyCode) {
                        case 13:
                            if (FocusedCellColumnIndex == 7) {
                                var visibleRowIndices = PapersGrid.batchEditApi.GetRowVisibleIndices();
                                var NameValue = PapersGrid.batchEditApi.GetCellValue(visibleRowIndices[FocusedCellRowIndex], "DrawerName");
                                s.AddNewRow();
                            }
                            break;
                    }
                });
        };
    function Grid_BatchEditEndEditing(s, e)
    {
            var productNameColumn = s.GetColumnByField("ChequeNumber");
            if (!e.rowValues.hasOwnProperty(productNameColumn.index))
            return;
             if (FocusedCellColumnIndex == 4) {
                 var AccountNumberIndex = s.GetColumnByField("AccountNumberThird").index;
                var AccountNumber = e.rowValues[AccountNumberIndex].value;
                 if (!AccountNumber) {
                    PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "BankAccountNameJustForFill", "");
                    PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumberSecond", "");
                }
                else {
                    if (AccountNumber != null && AccountNumber != '') {
                        $.getJSON('@Url.Action("CheckBankAccountNumber", "DefinitionBank")', { id: AccountNumber }, function (Data) {
                            if (Data == "") {
                                PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumberThird", "");
                                PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumberSecond", "");
                                PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "BankAccountNameJustForFill", "");
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                FocusedCellColumnIndex = 4;
                            }
                            else {
                                if (Data.StoppedAccountPostdatedCheque) {
                                    PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumberThird", "");
                                    PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumberSecond", "");
                                    PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "BankAccountNameJustForFill", "");
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                FocusedCellColumnIndex = 4;
                                }
                                else {
                                    PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumberThird", Data.BankAccountNumber);
                                    PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumberSecond", Data.PostdatedChequeAccountNumber);
                                    PapersGrid.batchEditApi.SetCellValue(lastVisibleIndex, "BankAccountNameJustForFill", Data.BankAccountName);
                                }


                            }
                        });
                    }
                }
            }
            else if (FocusedCellColumnIndex == 7) {
                var NameIndex = s.GetColumnByField("DrawerName").index;
                var NameValue = e.rowValues[NameIndex].value;
                if (NameValue != null) {
                    LastStatment = NameValue;
                }
                else {
                    e.rowValues[NameIndex].value = LastStatment;
                    e.rowValues[NameIndex].text = LastStatment;
                }
            }
            FocusedCellColumnIndex = 0;
            FocusedCellRowIndex = 0;
        }
    function Grid_BatchEditStartEditing(s, e)
    {
            FocusedCellColumnIndex = e.focusedColumn.index;
            FocusedCellRowIndex = e.visibleIndex;
            var productNameColumn = s.GetColumnByField("ChequeNumber");
            if (!e.rowValues.hasOwnProperty(productNameColumn.index))
                return;
            lastVisibleIndex = e.visibleIndex;
            currentEditedValue = s.GetRowKey(e.visibleIndex);
            currentKey = s.GetRowKey(e.visibleIndex);
            CalcSumDebitCredit(s, e);
        }
    function OnBeginCallback(s, e)
    {
            e.customArgs["Reference"] = $("#Reference").val();
        }
    function OnEndCallback(s, e)
    {
            if (s.cpSuccessFlag)
            {
                alert("All changes were saved");
                window.location = "@Url.Action("Success","Test1")";
            }
        }
    function OnClickPostData(s, e)
    {
            if (PapersGrid.batchEditApi.HasChanges())
                PapersGrid.UpdateEdit();
            else
                PapersGrid.PerformCallback();
            Alert("dONEEE");
        }
    function Grid_DeleteRowEvent(s, e)
    {
            setTimeout(function () {
                CalcSumDebitCredit(s, e);
            }, 1000);
        }
    function GetSelectedDataPaymentChequeVoucher(data) {
        if (data.AccountNumber != null && data.AccountNumber != '') {
            document.getElementById("FromAccountNumber").value = data.AccountNumber;
            document.getElementById("AccountDebitName").value = data.AccountName;
        }
        else {
            document.getElementById("FromAccountNumber").value = '';
            document.getElementById("AccountDebitName").value = '';
        }

    }
    function GetSelectedDataFromCostCenter(data) {

        if (data.CostNumber != null && data.CostNumber != '') {
            document.getElementById("FromCostCenter").value = data.CostNumber;
            document.getElementById("CostCenterDebitName").value = data.CostName;

        }
        else {
            document.getElementById("FromCostCenter").value = '';
            document.getElementById("CostCenterDebitName").value = '';
        }
    }
    function GetSelectedDataToCostCenter(data) {

        if (data.CostNumber != null && data.CostNumber != '') {
            document.getElementById("ToCostCenter").value = data.CostNumber;
            document.getElementById("CostCenterCreditName").value = data.CostName;

        }
        else {
            document.getElementById("ToCostCenter").value = '';
            document.getElementById("CostCenterCreditName").value = '';
        }
    }
    </script>

@using (Html.BeginForm("Copy", " PaymentVoucherBank", FormMethod.Post, new { id = "myForm" }))
{
<div style="padding-top:20px;">
    <div class="panel card-view">
        <div class="panel-heading" style="background-color: #34495E">
            <div class="pull-left">
                <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.Copy - @Resources.Resource.PaymentVoucherBank</h6>
            </div>
            <div class="clearfix"></div>
        </div>
        <div class="panel-body">
            <div class="col-lg-12">
                <div class="col-lg-3">
                    @Html.LabelFor(m => m.CompanyTransactionKindID)<span style="color:red">*</span>
                    <div class="form-group">
                        @if (Resources.Resource.CurLang == "Arb")
                        {
                            @Html.DropDownListFor(m => m.CompanyTransactionKindID, new SelectList(Model.CompanyTransactionKind, "CompanyTransactionKindID", "ArabicName"), new { @id = "CompanyTransactionKindID", @class = "form-control input-sml" })

                        }
                        else
                        {
                            @Html.DropDownListFor(m => m.CompanyTransactionKindID, new SelectList(Model.CompanyTransactionKind, "CompanyTransactionKindID", "EnglishName"), new { @id = "CompanyTransactionKindID", @class = "form-control input-sml" })
                        }
                    </div>
                  </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.LabelFor(m => m.CurrencyID)
                            @if (Resources.Resource.CurLang == "Arb")
                            {
                                @Html.DropDownListFor(m => m.CurrencyID, new SelectList(Model.Currency, "CurrencyID", "ArabicName"), new { @id = "CurrencyID", @class = "form-control input-sml" })
                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.CurrencyID, new SelectList(Model.Currency, "CurrencyID", "EnglishName"), new { @id = "CurrencyID", @class = "form-control input-sml" })
                            }
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.CurrencyNewValue)
                            @Html.ValidationMessageFor(m => m.CurrencyNewValue)
                            @Html.TextBoxFor(m => m.CurrencyNewValue, new { @id = "CurrencyNewValue", @class = "form-control input-sml", @readonly = "@readonly" })
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Header.VoucherNumber)
                            @Html.TextBoxFor(m => m.Header.VoucherNumber, new { @id = "VoucherNumber", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Header.VoucherDate)
                            @Html.TextBoxFor(model => model.Header.VoucherDate, new { @id = "VoucherDate", @class = "form-control input-sml", @Value = Model.Header.VoucherDate.ToString("dd/MM/yyyy"), data_val = "false" })
                            @Html.ValidationMessageFor(m => m.Header.VoucherDate)
                        </div>
                    </div>
                </div>
                <div class="col-lg-12">
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.PaidToAccount) <span style="color:red">*</span>
                            <div class="form-group  input-group">
                                @Html.TextBoxFor(m => m.TransactionDebit.AccountNumber, new { @id = "FromAccountNumber", @class = "form-control input-sml" })
                                <span class="input-group-btn">
                                    <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnFromAccount">
                                        <i class="fa fa-search"></i>
                                    </button>
                                </span>
                                @Html.ValidationMessageFor(m => m.TransactionCredit.AccountNumber)
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.AccountName)
                            <div class="form-group input-group">
                                @Html.TextBoxFor(m => m.AccountDebitName, new { @id = "AccountDebitName", @class = "form-control input-sml", @readonly = "readonly" })
                                <span class="input-group-btn">
                                    <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearFromAccount">
                                        <i class="fa fa-minus-square"></i>
                                    </button>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-6">
                        @Html.LabelFor(m => m.Header.Note)
                        @Html.TextBoxFor(m => m.Header.Note, new { @id = "Note", @class = "form-control input-sml" })
                        @Html.ValidationMessageFor(m => m.Header.Note)
                    </div>
                </div>
                @if (Model.WorkWithCostCenter)
                {
                    <div class="col-lg-12">
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.Label(Resources.Resource.PaidToCostCenter) <span style="color:red">*</span>
                                <div class="form-group input-group">
                                    @Html.TextBoxFor(m => m.TransactionDebit.CostCenter, new { @id = "FromCostCenter", @class = "form-control input-sml" })
                                    <span class="input-group-btn">
                                        <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnFromCostCenter">
                                            <i class="fa fa-search"></i>
                                        </button>
                                    </span>
                                    @Html.ValidationMessageFor(m => m.TransactionDebit.CostCenter)
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.Label(Resources.Resource.CostCenterName)
                                <div class="form-group input-group">
                                    @Html.TextBoxFor(m => m.CostCenterDebitName, new { @id = "CostCenterDebitName", @class = "form-control input-sml", @readonly = "readonly" })
                                    <span class="input-group-btn">
                                        <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearFromCostCenter">
                                            <i class="fa fa-minus-square"></i>
                                        </button>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.Label(Resources.Resource.PostdatedCostCenter)  <span style="color:red">*</span>
                                <div class="form-group input-group">
                                    @Html.TextBoxFor(m => m.TransactionCredit.CostCenter, new { @id = "ToCostCenter", @class = "form-control input-sml" })
                                    <span class="input-group-btn">
                                        <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnToCostCenter">
                                            <i class="fa fa-search"></i>
                                        </button>
                                    </span>
                                    @Html.ValidationMessageFor(m => m.TransactionCredit.CostCenter)
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.Label(Resources.Resource.CostCenterName)
                                <div class="form-group input-group">
                                    @Html.TextBoxFor(m => m.CostCenterCreditName, new { @id = "CostCenterCreditName", @class = "form-control input-sml", @readonly = "readonly" })
                                    <span class="input-group-btn">
                                        <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearToCostCenter">
                                            <i class="fa fa-minus-square"></i>
                                        </button>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                <div class="col-lg-12">
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.TotalAmount)
                            @Html.TextBoxFor(m => m.sAmount, new { @id = "sAmount", @class = "form-control input-sml", @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.Amount)
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.TotalForeign)
                            @Html.TextBoxFor(m => m.sForeignAmount, new { @id = "sForeignAmount", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="col-lg-1" style="padding-top:20px;">
                        <label style="font-size :smaller">
                            @Html.CheckBoxFor(m => m.Sirs, new { @id = "Sirs" }) @Resources.Resource.Sirs
                        </label>
                    </div>
                    <div class="col-lg-1" style="padding-top:20px;">
                        <label style="font-size :smaller">
                            @Html.CheckBoxFor(m => m.Mr, new { @id = "Mr" }) @Resources.Resource.Mr
                        </label>
                    </div>
                    <div class="col-lg-1" style="padding-top:20px;">
                        <label style="font-size :smaller">
                            @Html.CheckBoxFor(m => m.Mrs, new { @id = "Mrs" }) @Resources.Resource.Mrs
                        </label>
                    </div>
                    <div class="col-lg-1" style="padding-top:20px;">
                        <label style="font-size :smaller">
                            @Html.CheckBoxFor(m => m.Co, new { @id = "Co" }) @Resources.Resource.Co
                        </label>
                    </div>
                    <div class="col-lg-3" style="padding-top:20px;">
                        <label style="font-size :smaller">
                            @Html.CheckBoxFor(m => m.First, new { @id = "First" }) @Resources.Resource.FirstBeneficiary
                        </label>
                    </div>
                </div>
                <div class="col-lg-12" style="padding-top:20px;">
                    <div class="col-lg-12">
                        @Html.Action("GridViewPapersCopy", new { id = Model.Header.VoucherNumber, id2 = Model.Header.CompanyTransactionKindNo, id3 = Model.Header.TransactionKindNo, id4 = Model.Header.CompanyYear })
                    </div>
                </div>
            </div>
            <div class="panel-footer">
                @Html.DevExpress().Button(settings =>
           {
               settings.Name = "buttonCopy";
               settings.Text = Resources.Resource.Save;
               settings.UseSubmitBehavior = false;
               settings.ClientVisible = false;
               settings.ClientSideEvents.Click = "LoopGrid";
           }).GetHtml()
                <button type="button" class="btn btn-primary btn-anim" id="Copy"><i class="fa fa-copy"></i><span class="btn-text">@Resources.Resource.Copy</span> </button>
                <button type="button" class="btn btn-default btn-anim" id="Close"><i class="fa fa-times"></i><span class="btn-text">@Resources.Resource.Close</span></button>
            </div>
        </div>
    </div>

    }
    <div id="modal-container" class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-content">
        </div>
    </div>
    @Html.TextBoxFor(m => m.Amount, new { @id = "Amount", @class = "form-control input-sml", @type = "Number", @min = "0", @readonly = "readonly", @style = "visibility : hidden;" })
    @Html.TextBoxFor(m => m.ForeignAmount, new { @id = "ForeignAmount", @class = "form-control input-sml", @type = "Number", @min = "0", @readonly = "readonly", @style = "visibility : hidden;" })
    @Html.CheckBoxFor(m => m.WorkWithCostCenter, new { @id = "WorkWithCostCenter", @style = "visibility : hidden;" })
    @Html.HiddenFor(m => m.Header.CompanyYear, new { @id = "CompanyYear", @style = "visibility : hidden;" })
    @Html.HiddenFor(m => m.CompanyTransactionKindID, new { @id = "CompanyTransactionKindID", @style = "visibility : hidden;" })
    @Html.TextBoxFor(m => m.TheDecimalPointForTheLocalCurrency, new { @id = "TheDecimalPointForTheLocalCurrency", @style = "visibility : hidden;" })
    @Html.TextBoxFor(m => m.TheDecimalPointForTheForeignCurrency, new { @id = "TheDecimalPointForTheForeignCurrency", @style = "visibility : hidden;" })
    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")

<script>
    $(document).ready(function () {
        var bWorkWithCostCenter = document.getElementById("WorkWithCostCenter").checked;
        var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
        var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;
        function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
            try {
                decimalCount = Math.abs(decimalCount);
                decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

                const negativeSign = amount < 0 ? "-" : "";

                let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
                let j = (i.length > 3) ? i.length % 3 : 0;

                return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
            } catch (e) {
                console.log(e)
            }
        };
        function validatedate(dateString) {
            var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
            if (dateString.match(dateformat)) {
                var operator = dateString.split('/');
                var datepart = [];
                if (operator.length > 1) {
                    datepart = dateString.split('/');
                }
                var month = parseInt(datepart[1]);
                var day = parseInt(datepart[0]);
                var year = parseInt(datepart[2]);
                var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                if (month == 1 || month > 2) {
                    if (day > ListofDays[month - 1]) {
                        return false;
                    }
                } else if (month == 2) {
                    var leapYear = false;
                    if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                        leapYear = true;
                    }
                    if ((leapYear == false) && (day >= 29)) {
                        return false;
                    } else
                        if ((leapYear == true) && (day > 29)) {
                            return false;
                        }
                }
            }
            else {
                return false;
            }
            return true;
        }
        document.getElementById("sAmount").value = formatMoney(document.getElementById("Amount").value, TheDecimalPointForTheLocalCurrency);
        document.getElementById("sForeignAmount").value = formatMoney(document.getElementById("ForeignAmount").value, TheDecimalPointForTheForeignCurrency);
        $(document).on('click', '#Copy', function () {
            document.getElementById("buttonCopy").click();
        });
        var SelectedValue = $("#CompanyTransactionKindID").val();
        var VoucherDate = document.getElementById("VoucherDate").value;
        var CurrentYear = document.getElementById("CompanyYear").value;
        var mm = parseInt(VoucherDate.substring(3, 5));
        if (mm < 10) {
            mm = '0' + mm;
        }
        if (SelectedValue != null && SelectedValue != '') {
            $.getJSON('@Url.Action("GetMaxVHIForAcc", "TransAction")', { id: SelectedValue, id2: mm, id3: CurrentYear }, function (Data) {

                if (Data != null) {
                    document.getElementById("VoucherNumber").value = Data;

                } else {


                };
            });
        }
        else {
        }
        $(document).on('click', '#Close', function () {
            window.location = "/PaymentVoucherBank/Index";
        });
        $('#Sirs').click(function () {
            document.getElementById('Mr').checked = false;
            document.getElementById('Mrs').checked = false;
            document.getElementById('Co').checked = false;
            document.getElementById('First').checked = false;
        });
        $('#Mr').click(function () {
            document.getElementById('Sirs').checked = false;
            document.getElementById('Mrs').checked = false;
            document.getElementById('Co').checked = false;
            document.getElementById('First').checked = false;
        });
        $('#Mrs').click(function () {
            document.getElementById('Sirs').checked = false;
            document.getElementById('Mr').checked = false;
            document.getElementById('Co').checked = false;
            document.getElementById('First').checked = false;
        });
        $('#Co').click(function () {
            document.getElementById('Sirs').checked = false;
            document.getElementById('Mrs').checked = false;
            document.getElementById('Mr').checked = false;
            document.getElementById('First').checked = false;
        });
        $('#First').click(function () {
            document.getElementById('Sirs').checked = false;
            document.getElementById('Mrs').checked = false;
            document.getElementById('Co').checked = false;
            document.getElementById('Mr').checked = false;
        });
        $("#VoucherDate").focus().select();
        $("#VoucherDate").mask("99/99/9999");
        $('#BtnFromAccount').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchAcc/PaymentChequeVoucherAccountNumber';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnFromCostCenter').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchCostCenter/FromCostCenter';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnToCostCenter').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchCostCenter/ToCostCenter';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnClearFromAccount').on('click', function () {
            document.getElementById("FromAccountNumber").value = '';
            document.getElementById("AccountDebitName").value = '';
        });
        $('#BtnClearFromCostCenter').on('click', function () {
            document.getElementById("FromCostCenter").value = '';
            document.getElementById("CostCenterDebitName").value = '';
        });
        $('#BtnClearToCostCenter').on('click', function () {
            document.getElementById("ToCostCenter").value = '';
            document.getElementById("CostCenterCreditName").value = '';
        });
        $('#CurrencyID').change(function () {
            var SelectedCurrency = $("#CurrencyID").val();
            if (SelectedCurrency != null && SelectedCurrency != '') {
                $.getJSON('@Url.Action("GetCurrencyValueById", "CurrencyValue")', { id: SelectedCurrency }, function (Data) {
                    if (Data != null) {
                        document.getElementById("CurrencyNewValue").value = (Data).toFixed(TheDecimalPointForTheLocalCurrency);
                        if (Data == 0) {
                            Data = 1;
                        };
                        if (Data == 1) {
                            document.getElementById("CurrencyNewValue").value = (0).toFixed(TheDecimalPointForTheLocalCurrency);
                            document.getElementById("ForeignAmount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sForeignAmount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        }
                        else {
                            document.getElementById("ForeignAmount").value = (document.getElementById("Amount").value / Data).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sForeignAmount").value = formatMoney((document.getElementById("Amount").value / Data), TheDecimalPointForTheForeignCurrency);
                        }
                    } else {
                        document.getElementById("CurrencyNewValue").value = (0).toFixed(TheDecimalPointForTheLocalCurrency);
                        document.getElementById("ForeignAmount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("sForeignAmount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                    };
                });
            } else {
            }

        });
        $('#CompanyTransactionKindID').change(function () {
            var SelectedValue = $("#CompanyTransactionKindID").val();
            var VoucherDate = document.getElementById("VoucherDate").value;
            var CurrentYear = document.getElementById("CompanyYear").value;
            var mm = parseInt(VoucherDate.substring(3, 5));
            if (mm < 10) {
                mm = '0' + mm;
            }
            if (SelectedValue != null && SelectedValue != '') {
                $.getJSON('@Url.Action("GetMaxVHIForAcc", "TransAction")', { id: SelectedValue, id2: mm, id3: CurrentYear }, function (Data) {

                    if (Data != null) {
                        document.getElementById("VoucherNumber").value = Data;

                    } else {


                    };
                });
            } else {
            }
        });
        $("#VoucherDate").keyup(function (event) {
            if (event.keyCode == 13)
                $("#FromAccountNumber").focus().select();

        });
        $("#Note").keyup(function (event) {
            if (event.keyCode == 13)
                $("#FromCostCenter").focus().select();
        });
        $('#tdataTable').on('click', '.modal-close-btn', function () {
            $('#modal-container').modal('hide');
        });
        $(document).on('click', '.js-Pop', function (e) {
            $('#modal-container').removeData('bs.modal');
            e.preventDefault();
            $(this).attr('data-target', '#modal-container');
            $(this).attr('data-toggle', 'modal');

        });
        $('#modal-container').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal');
        });
        $('#CancelModal').on('click', function () {

            return false;
        });
        $("#VoucherDate").blur(function () {
           var dDate = document.getElementById("VoucherDate").value;
            var CurrentYear = document.getElementById("CompanyYear").value;
            var d1 = dDate.split("/");
            var From = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);
            if (d1[2] > CurrentYear || d1[2] < CurrentYear) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.DateIsNotWithinThisYear</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }

            else {
                if (dDate != null && dDate != '') {
                    if (!validatedate(dDate)) {
                        bootbox.alert({
                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                            className: 'rubberBand animated',
                            buttons: {
                                ok: {
                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                    className: 'btn-primary'
                                }
                            }
                        });
                    }
                    else {
                        var dd = parseInt(dDate.substring(0, 2));
                        if (dd < 10) {
                            dd = '0' + dd;
                        }
                        var mm = parseInt(dDate.substring(3, 5));
                        if (mm < 10) {
                            mm = '0' + mm;
                        }
                        var yyyy = parseInt(dDate.substring(6, 10));
                        dDate = mm + '/' + dd + '/' + yyyy;
                        $.getJSON('@Url.Action("CheckDateIsFreezeDate", "FreezeTransaction")', { id: dDate }, function (Data) {
                            if (Data >= 1) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThisDateIsFrozen</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                        });
                        var SelectedValue = $("#CompanyTransactionKindID").val();
                        var VoucherDate = document.getElementById("VoucherDate").value;
                        var CurrentYear = document.getElementById("CompanyYear").value;
                        var mm = parseInt(VoucherDate.substring(3, 5));
                        if (mm < 10) {
                            mm = '0' + mm;
                        }
                        if (SelectedValue != null && SelectedValue != '') {
                            $.getJSON('@Url.Action("GetMaxVHIForAcc", "TransAction")', { id: SelectedValue, id2: mm, id3: CurrentYear }, function (Data) {

                                if (Data != null) {
                                    document.getElementById("VoucherNumber").value = Data;

                                } else {
                                };
                            });
                        }
                        else {
                        }
                    }
                }
                else {
                }
            }

        });
        $("#FromAccountNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#Note").focus().select();
            }
            else if (event.keyCode == 113) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchAcc/PaymentChequeVoucherAccountNumber';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $("#ToCostCenter").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#VoucherDate").focus().select();
            }
            else if (event.keyCode == 113) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchCostCenter/ToCostCenter';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $("#FromCostCenter").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#ToCostCenter").focus().select();
            }
            else if (event.keyCode == 113) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchCostCenter/FromCostCenter';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $("#FromAccountNumber").blur(function () {
            var AccountNumber = document.getElementById("FromAccountNumber").value;
            if (AccountNumber == '') {
                document.getElementById("AccountDebitName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckAcountAcc", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("FromAccountNumber").value = '';
                            document.getElementById("AccountDebitName").value = '';
                            $("#FromAccountNumber").focus();
                        }
                        else {
                            document.getElementById("AccountDebitName").value = Data.AccountName;

                        }
                    });
                }
            }
        });
        $("#ToCostCenter").blur(function () {
            var AccountNumber = document.getElementById("ToCostCenter").value;
            if (AccountNumber == '') {
                document.getElementById("CostCenterCreditName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("GetCostCenterInfo", "CostCenter")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("ToCostCenter").value = '';
                            document.getElementById("CostCenterCreditName").value = '';
                            $("#ToCostCenter").focus();
                        }
                        else {
                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                document.getElementById("CostCenterCreditName").value = Data.ArabicName;
                            }
                            else {
                                document.getElementById("CostCenterCreditName").value = Data.EnglishName;
                            }

                        }
                    });
                }
            }
        });
        $("#FromCostCenter").blur(function () {
            var AccountNumber = document.getElementById("FromCostCenter").value;
            if (AccountNumber == '') {
                document.getElementById("CostCenterDebitName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("GetCostCenterInfo", "CostCenter")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("FromCostCenter").value = '';
                            document.getElementById("CostCenterDebitName").value = '';
                            $("#FromCostCenter").focus();
                        }
                        else {
                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                document.getElementById("CostCenterDebitName").value = Data.ArabicName;
                            }
                            else {
                                document.getElementById("CostCenterDebitName").value = Data.EnglishName;
                            }

                        }
                    });
                }
            }
        });
    });
</script>
    }




