@model Acc.ViewModels.HeaderServiceBillVM
@{
    ViewBag.Title = @Resources.Resource.Save;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .panel-body {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-footer {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-title {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .dt-button {
        display: none !important;
    }

    #ServiceBillGridView_DXHeadersRow0 {
        font-family: Verdana, Geneva, Tahoma, sans-serif !important;
        font-size: 10pt;
    }

    .dxgvBatchEditNewItem_iOS {
        font-family: Verdana, Geneva, Tahoma, sans-serif !important;
        font-size: 10pt;
    }

    .dxgvControl_iOS {
        width: 100% !important;
    }
</style>
<link href="~/Content/jquery-ui.css" rel="stylesheet" />
<script>
    function GetSelectedAccount(data) {
        if (data.AccountNumber != null && data.AccountNumber != '') {
              document.getElementById("AccountNumber").value = data.AccountNumber;
              document.getElementById("AccountName").value = data.AccountName;
        }
        else {
            document.getElementById("AccountNumber").value = '';
           document.getElementById("AccountName").value = '';
        }
    }
    function GetSelectedCreditAccNo(data) {
        if (data.AccountNumber != null && data.AccountNumber != '') {
            document.getElementById("CreditAccountNumber").value = data.AccountNumber;
            document.getElementById("CreditAccountName").value = data.AccountName;
        }
        else {
            document.getElementById("CreditAccountNumber").value = '';
            document.getElementById("CreditAccountName").value = '';
        }
    }
    function GetSelectedCreditCostAccNo(data) {
        if (data.CostNumber != null && data.CostNumber != '') {
            document.getElementById("CreditCostNumber").value = data.CostNumber;
           document.getElementById("CreditCostName").value = data.CostName;
        }
        else {
            document.getElementById("CreditCostNumber").value = '';
            document.getElementById("CreditCostName").value = '';
        }
    }
    function GetSelectedTaxCostAccNo(data) {
        if (data.CostNumber != null && data.CostNumber != '') {
            document.getElementById("TaxCostNumber").value = data.CostNumber;
            document.getElementById("TaxCostName").value = data.CostName;
        }
        else {
            document.getElementById("TaxCostNumber").value = '';
            document.getElementById("TaxCostName").value = '';
        }
    }
    function GetSelectedDebitAccNo(data) {
        ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumber", data.AccountNumber);
        ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "AccountName", data.AccountName);
        ServiceBillGridView.batchEditApi.StartEdit(lastVisibleIndex, 5);

    }
    function GetSelectedDebitCostAccNo(data) {
        ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "CostNumber", data.CostNumber);
        ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "CostName", data.CostName);
        ServiceBillGridView.batchEditApi.StartEdit(lastVisibleIndex, 7);
    }
    var preventEndEditOnLostFocus = false;
    var currentEditedValue;
    var SelectAccount;
    var lastVisibleIndex;
    var FocusedCellColumnIndex = 0;
    var FocusedCellRowIndex = 0;
    function GetSelectedService(data) {
        ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "ServiceNo", data.ServiceID);
        ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "ServiceName", data.ServiceName);
        ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "Price", data.SalePrice);
        ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "Tax", data.TaxPercentage);
        ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "ServiceNot", data.Note);
        ServiceBillGridView.batchEditApi.StartEdit(lastVisibleIndex, 1);
    }
    var Services = [];
    var AccountInfo = [];
    var CostInfo = [];
    $.getJSON('@Url.Action("GetPurchaseAcountAcc", "MultiUse")', { id: 0 }, function (Data) {
             AccountInfo = [];
           for (var i = 0, len = Data.length; i < len; i++) {

               var r = { label: Data[i].AccountName, value: Data[i].AccountNumber, stop: Data[i].StoppedAccount };
		     AccountInfo.push(r);
		}
     });
    $.getJSON('@Url.Action("GetCostCenter", "MultiUse")', { id: 0 }, function (Data) {
             CostInfo = [];
           for (var i = 0, len = Data.length; i < len; i++) {

               var r = { label: Data[i].CostName, value: Data[i].CostNumber, stop: Data[i].StoppedCost };
		     CostInfo.push(r);
		}
     });
    $.getJSON('@Url.Action("GetAllServices", "MultiUse")', { id: 0 }, function (Data) {
         Services = [];
         for (var i = 0, len = Data.length; i < len; i++) {
             var r = { label: Data[i].ServiceName, value: Data[i].ServiceID, Price: Data[i].SalePrice, Tax: Data[i].TaxPercentage, sNote: Data[i].Note};
             Services.push(r);
         }
    });
       var AccNumber = [];
    $.getJSON('@Url.Action("GetAcountAcc", "MultiUse")', { id: 0 }, function (Data) {
        AccNumber = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].AccountName, value: Data[i].AccountNumber, stop: Data[i].StoppedAccount };
                AccNumber.push(r);
            }
    });
      var ClientNumber = [];
    $.getJSON('@Url.Action("GetClientAccount", "MultiUse")', { id: 0 }, function (Data) {
        ClientNumber = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].AccountName, value: Data[i].AccountNumber, stop: Data[i].StoppedAccount };
                ClientNumber.push(r);
            }
    });

    $(function () {
        $("#AccountNumber").autocomplete({
            source: ClientNumber,
            select: function (event, ui) {
                document.getElementById("AccountNumber").value = ui.item.value;
                document.getElementById("AccountName").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#CreditAccountNumber").autocomplete({
            source: AccNumber,
            select: function (event, ui) {
                document.getElementById("CreditAccountNumber").value = ui.item.value;
                document.getElementById("CreditAccountName").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#TaxCostNumber").autocomplete({
            source: CostInfo,
            select: function (event, ui) {
                document.getElementById("TaxCostNumber").value = ui.item.value;
                document.getElementById("TaxCostName").value = ui.item.label;
            }
        });
    });
    $(function () {
        $("#CreditCostNumber").autocomplete({
            source: CostInfo,
            select: function (event, ui) {
                document.getElementById("CreditCostNumber").value = ui.item.value;
                document.getElementById("CreditCostName").value = ui.item.label;
            }
        });
    });

    function AutoCompleteServices(s, e) {
        $(s.GetInputElement()).autocomplete({
          minLength: 0,
            source: Services,
             select: function (event, ui) {
                 s.SetValue(ui.item.value);
                 ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "ServiceName", ui.item.label);
                 ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "Price", ui.item.Price);
                 ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "Tax", ui.item.Tax);
                 ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "ServiceNot", ui.item.sNote);
                 ServiceBillGridView.batchEditApi.GetCellValue()
             return false;
             },
             position:
             {
                 my: "left top",
                 at: "left bottom",
                 of: s.GetMainElement()
             }
        });
    }
    function AutoCompleteAccount(s, e) {
         $(s.GetInputElement()).autocomplete({
          minLength: 0,
           source: AccountInfo,
             select: function (event, ui) {
                 if (ui.item.stop == '0') {
                     s.SetValue(ui.item.value);
                     ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "AccountName", ui.item.label);
                     ServiceBillGridView.batchEditApi.GetCellValue()
                 }
                 else {
                     bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberIsSuspended</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                     FocusedCellColumnIndex = 3;
                     s.SetValue('');
                     ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "AccountName", "");
                 }
             return false;
             },
             position:
             {
                 my: "left top",
                 at: "left bottom",
                 of: s.GetMainElement()
             }

        });
    }
    function AutoCompleteCostCenter(s, e) {
         $(s.GetInputElement()).autocomplete({
          minLength: 0,
           source: CostInfo,
             select: function (event, ui) {
                 if (ui.item.stop == '0') {
                     s.SetValue(ui.item.value);
                     ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "CostName", ui.item.label);
                     ServiceBillGridView.batchEditApi.GetCellValue()
                 }
                 else {
                     bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheCostCenterIsSuspended</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                     FocusedCellColumnIndex = 5;
                     s.SetValue('');
                     ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "CostName", "");
                 }

             return false;
             },


             position:
             {
                 my: "left top",
                 at: "left bottom",
                 of: s.GetMainElement()
             }

        });
    }
    function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
        try {
            decimalCount = Math.abs(decimalCount);
            decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

            const negativeSign = amount < 0 ? "-" : "";

            let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
            let j = (i.length > 3) ? i.length % 3 : 0;

            return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
        } catch (e) {
            console.log(e)
        }
    };
    function validatedate(dateString) {
        var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
        if (dateString.match(dateformat)) {
            var operator = dateString.split('/');
            var datepart = [];
            if (operator.length > 1) {
                datepart = dateString.split('/');
            }
            var month = parseInt(datepart[1]);
            var day = parseInt(datepart[0]);
            var year = parseInt(datepart[2]);
            var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
            if (month == 1 || month > 2) {
                if (day > ListofDays[month - 1]) {
                    return false;
                }
            } else if (month == 2) {
                var leapYear = false;
                if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                    leapYear = true;
                }
                if ((leapYear == false) && (day >= 29)) {
                    return false;
                } else
                    if ((leapYear == true) && (day > 29)) {
                        return false;
                    }
            }
        }
        else {
            return false;
        }
        return true;
    }
    var SumTotalLocal = 0;
    var SumForeignPrice = 0;
    var NetTot = 0;
    function RecalccSum() {
        SumTotalLocal = 0;
        SumForeignPrice = 0;
        var Price = 0;
        var ForeignPrice = 0;
        var DisCount = 0;
        var Qty = 0;
        var TotalLocal = 0;
        var TotalForeign = 0;
        var LineTax = 0;
        var SumTotalTax = 0;
        var TaxPrec = 0;
        var headerDiscount = 0;
        var CurrencyAmount = document.getElementById("CurrencyNewValue").value;
        var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
        var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;
        var visibleRowIndices = ServiceBillGridView.batchEditApi.GetRowVisibleIndices();
        var NoTax = $("#NoTax:checked").val();
        for (var i = 0; i < visibleRowIndices.length; i++) {
            Price = ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "Price");
            Qty = ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "Qty");
            TaxPrec = ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "Tax");
            TaxPrec = TaxPrec / 100;
            if (NoTax) {
                TaxPrec = 0;
            }
            Price = Number(Price);
            if (Price == "NaN") {
                Price = 0;
            }
            if (CurrencyAmount == 0) {
                CurrencyAmount = 1
            };
            if (CurrencyAmount == 1) {
                ForeignPrice = 0;
            }
            else {
                ForeignPrice = Price / CurrencyAmount;
            }

            DisCount = ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "LocalDiscount");
            ServiceBillGridView.batchEditApi.SetCellValue(visibleRowIndices[i], "ForeignPrice", ForeignPrice);
            if (CurrencyAmount == 1) {
                ServiceBillGridView.batchEditApi.SetCellValue(visibleRowIndices[i], "ForeignDiscount", 0);
            }
            else {
                ServiceBillGridView.batchEditApi.SetCellValue(visibleRowIndices[i], "ForeignDiscount", DisCount / CurrencyAmount);
            }
            TotalLocal = (Price * Qty) - DisCount;
            LineTax = TotalLocal * TaxPrec;
            if (CurrencyAmount == 1) {
                TotalForeign = 0;
            }
            else {
                TotalForeign = (ForeignPrice * Qty) - (DisCount / CurrencyAmount);
            }
            ServiceBillGridView.batchEditApi.SetCellValue(visibleRowIndices[i], "TotalLocal", TotalLocal);
            ServiceBillGridView.batchEditApi.SetCellValue(visibleRowIndices[i], "TotalForeign", TotalForeign);
            SumTotalLocal = SumTotalLocal + TotalLocal;
            SumForeignPrice = SumForeignPrice + TotalForeign;
            SumTotalTax = SumTotalTax + LineTax;
        }
        NetTot = SumTotalLocal + SumTotalTax;
        headerDiscount = $("#Discount").val();
        if (headerDiscount > 0)
        {
            var DisCValue = 0;
            SumTotalTax = 0;
            var SumTotalAfterDisc = 0;
            headerDiscount = headerDiscount / SumTotalLocal;
            for (var i = 0; i < visibleRowIndices.length; i++) {
                HeadeLineDisc = 0;
                Price = ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "Price");
                Qty = ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "Qty");
                TaxPrec = ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "Tax");
                TaxPrec = TaxPrec / 100;
                if (NoTax) {
                    TaxPrec = 0;
                }
                Price = Number(Price);
                if (Price == "NaN") {
                    Price = 0;
                }
                DisCount = ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "LocalDiscount");
                TotalLocal = (Price * Qty) - DisCount;
                SumTotalAfterDisc = SumTotalAfterDisc + ((TotalLocal - (TotalLocal * headerDiscount)));
                LineTax = (TotalLocal - (TotalLocal * headerDiscount)) * TaxPrec;
                SumTotalTax = SumTotalTax + LineTax;
            }
            NetTot = SumTotalAfterDisc + SumTotalTax;
        }
        headerDiscount = headerDiscount / SumTotalLocal;
        document.getElementById("Total").value = (SumTotalLocal - $("#Discount").val()).toFixed(TheDecimalPointForTheLocalCurrency);
        document.getElementById("Tax").value = SumTotalTax.toFixed(TheDecimalPointForTheLocalCurrency);
        document.getElementById("NetTotal").value = NetTot.toFixed(TheDecimalPointForTheLocalCurrency);
        if (CurrencyAmount == 1) {
            document.getElementById("ForeignAmount").value = '0.00';
            document.getElementById("ForeignAmountTax").value = '0.00';
            document.getElementById("NetTotalForeignAmount").value = '0.00';
            document.getElementById("sForeignAmount").value = '0.00';
            document.getElementById("sNetTotalForeignAmount").value = '0.00';
            document.getElementById("sForeignAmountTax").value = '0.00';
        }
        else {
            document.getElementById("ForeignAmount").value = SumTotalLocal / CurrencyAmount;
            document.getElementById("ForeignAmountTax").value = SumTotalTax / CurrencyAmount;
            document.getElementById("NetTotalForeignAmount").value = NetTot / CurrencyAmount;
            document.getElementById("sForeignAmount").value = formatMoney((SumTotalLocal / CurrencyAmount), TheDecimalPointForTheForeignCurrency);
            document.getElementById("sNetTotalForeignAmount").value = formatMoney((NetTot / CurrencyAmount), TheDecimalPointForTheForeignCurrency);
            document.getElementById("sForeignAmountTax").value = formatMoney((SumTotalTax / CurrencyAmount), TheDecimalPointForTheForeignCurrency);
        }
        document.getElementById("sTotal").value = formatMoney((SumTotalLocal - $("#Discount").val()), TheDecimalPointForTheLocalCurrency);
        document.getElementById("sTax").value = formatMoney(SumTotalTax, TheDecimalPointForTheLocalCurrency);
        document.getElementById("sNetTotal").value = formatMoney(NetTot, TheDecimalPointForTheLocalCurrency);

    }
    function ClearGrid(s, e) {
        ServiceBillGridView.PerformCallback('clear');
        setTimeout(function () {
            RecalccSum();
        }, 1000);
    }
    function SaveGridData(s, e) {
        var WorkWithCostCenter = document.getElementById("WorkWithCostCenter").checked;
        var dDate = document.getElementById("BillDate").value;
        var CurrentYear = document.getElementById("CurrentYear").value;
        var d1 = dDate.split("/");
        var From = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);
        RecalccSum();
        var NoTax = $("#NoTax:checked").val();
        var iError = 0;
        var visibleRowIndices = ServiceBillGridView.batchEditApi.GetRowVisibleIndices();
        for (var i = 0; i < visibleRowIndices.length; i++) {
            if (ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "ServiceNo") == "" || ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "ServiceNo") == null) {
                iError = 1;
                break;
            }
            if (ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "ServiceName") == "" || ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "ServiceName") == null) {
                iError = 2;
                break;
            }
            else if (ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumber") == "" || ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumber") == null) {
                iError = 3;
                break;
            }
            else if (WorkWithCostCenter && ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "CostNumber") == "" || ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "CostNumber") == null) {
                iError = 4;
                break;
            }
        }
        if (d1[2] > CurrentYear || d1[2] < CurrentYear) {
            bootbox.alert({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.DateIsNotWithinThisYear</h6>',
                className: 'rubberBand animated',
                buttons: {
                    ok: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                        className: 'btn-primary'
                    }
                }
            });
        }
        else {
            if (WorkWithCostCenter) {
                if (!validatedate(dDate) && dDate != null && dDate != '') {
                    bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                }
                else if (dDate != null && dDate != '') {
                    var dd = parseInt(dDate.substring(0, 2));
                    if (dd < 10) {
                        dd = '0' + dd;
                    }
                    var mm = parseInt(dDate.substring(3, 5));
                    if (mm < 10) {
                        mm = '0' + mm;
                    }
                    var yyyy = parseInt(dDate.substring(6, 10));
                    dDate = mm + '/' + dd + '/' + yyyy;
                    $.getJSON('@Url.Action("CheckDateIsFreezeDate", "FreezeTransaction")', { id: dDate }, function (Data) {
                        if (Data >= 1) {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThisDateIsFrozen</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                        else {
                            if (iError == 1) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillService</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if (iError == 2) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillService</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if (iError == 3) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillAccountNumber</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if (iError == 4) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillCostCenter</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if ($("#CreditAccountNumber").val() == '') {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if (!NoTax && $("#TaxCostNumber").val() == '') {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if ($("#CreditCostNumber").val() == '') {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if ($("#NetTotal").val() == '' || $("#NetTotal").val() == 0) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else {
                                bootbox.confirm({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        confirm: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                            className: 'btn-success'
                                        },
                                        cancel: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                            className: 'btn-danger'
                                        }
                                    },
                                    callback: function (result) {
                                        if (result) {
                                            var dialog = bootbox.dialog({
                                                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Saving...</p>',
                                                closeButton: false
                                            });
                                            var visibleRowIndices = ServiceBillGridView.batchEditApi.GetRowVisibleIndices();
                                            var TransActionlist = [];
                                            for (var i = 0; i < visibleRowIndices.length; i++) {
                                                var TransAction = {
                                                    ServiceNo: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "ServiceNo"),
                                                    ServiceName: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "ServiceName"),
                                                    Price: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "Price"),
                                                    ForeignPrice: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "ForeignPrice"),
                                                    Qty: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "Qty"),
                                                    LocalDiscount: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "LocalDiscount"),
                                                    ForeignDiscount: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "ForeignDiscount"),
                                                    TotalLocal: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalLocal"),
                                                    TotalForeign: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalForeign"),
                                                    Tax: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "Tax"),
                                                    Note: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "Note"),
                                                    ServiceNot: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "ServiceNot"),
                                                    AccountNumber: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumber"),
                                                    CostNumber: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "CostNumber"),
                                                    RowNumber: i
                                                };
                                                TransActionlist.push(TransAction);

                                            }

                                            var HeaderData = {
                                                CompanyTransactionKindID: $("#CompanyTransactionKindID").val(),
                                                BillDate: $("#BillDate").val(),
                                                CurrencyID: $("#CurrencyID").val(),
                                                CurrencyNewValue: $("#CurrencyNewValue").val(),
                                                AccountNumber: $("#AccountNumber").val(),
                                                NoTax: $("#NoTax:checked").val(),
                                                CreditAccountNumber: $("#CreditAccountNumber").val(),
                                                TaxAccountNumber: $("#TaxAccountNumber").val(),
                                                CreditCostNumber: $("#CreditCostNumber").val(),
                                                TaxCostNumber: $("#TaxCostNumber").val(),
                                                Note: $("#Note").val(),
                                                Discount: $("#Discount").val(),
                                                Tax: $("#Tax").val(),
                                                Total: $("#Total").val(),
                                                NetTotal: $("#NetTotal").val(),
                                                ForeignAmount: $("#ForeignAmount").val(),
                                                ForeignAmountTax: $("#ForeignAmountTax").val(),
                                                NetTotalForeignAmount: $("#NetTotalForeignAmount").val()
                                            }
                                            var dataToSave = {
                                                TransActionServiceBill: TransActionlist,
                                                HeaderServiceBill: HeaderData,
                                            }
                                            $.ajax({
                                                type: "POST",
                                                url: "/ServiceBill/SaveNewMultiPurchaseServiceBill",
                                                data: JSON.stringify(dataToSave),
                                                contentType: 'application/json',
                                                success: function (data) {
                                                    dialog.modal('hide');
                                                    if (data.Code == 0) {
                                                        toastr.error(data.Msg);
                                                    }
                                                    else if (data.Code == 1) {
                                                        $('#modal-container').modal('hide');
                                                        toastr.success(data.Msg);
                                                        document.getElementById("Clear").click();
                                                        bootbox.confirm({
                                                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.DoYouWantToUploadAttachments</h6>',
                                                            className: 'rubberBand animated',
                                                            buttons: {
                                                                confirm: {
                                                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                                                    className: 'btn-success'
                                                                },
                                                                cancel: {
                                                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                                                    className: 'btn-danger'
                                                                }
                                                            },
                                                            callback: function (result) {
                                                                if (result) {
                                                                    window.open('/ServiceBill/ShowAttach/' + data.Year + '/' + data.VoucherNumber + '/' + data.CompanyTransactionKindNo + '/' + data.TransactionKindNo, '_blank');
                                                                    bootbox.confirm({
                                                                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.DoYouWantToPrint</h6>',
                                                                        className: 'rubberBand animated',
                                                                        buttons: {
                                                                            confirm: {
                                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                                                                className: 'btn-success'
                                                                            },
                                                                            cancel: {
                                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                                                                className: 'btn-danger'
                                                                            }
                                                                        },
                                                                        callback: function (result) {
                                                                            if (result) {
                                                                                window.open('/PDFReport/DetailServiceBill/' + data.VoucherNumber + '/' + data.CompanyTransactionKindNo + '/' + data.TransactionKindNo + '/' + data.Year, '_blank');
                                                                            }
                                                                        }
                                                                    });

                                                                }

                                                                else {
                                                                    bootbox.confirm({
                                                                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.DoYouWantToPrint</h6>',
                                                                        className: 'rubberBand animated',
                                                                        buttons: {
                                                                            confirm: {
                                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                                                                className: 'btn-success'
                                                                            },
                                                                            cancel: {
                                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                                                                className: 'btn-danger'
                                                                            }
                                                                        },
                                                                        callback: function (result) {
                                                                            if (result) {
                                                                                window.open('/PDFReport/DetailServiceBill/' + data.VoucherNumber + '/' + data.CompanyTransactionKindNo + '/' + data.TransactionKindNo+ '/' + data.Year, '_blank');
                                                                            }
                                                                        }
                                                                    });

                                                                }
                                                            }

                                                        });


                                                    }
                                                },
                                                error: function (data) {
                                                    dialog.modal('hide');
                                                    toastr.error(data);
                                                }
                                            });
                                        }
                                    }
                                });
                            }
                        };
                    });
                }
            }
            else {
                if (!validatedate(dDate) && dDate != null && dDate != '') {
                    bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                }
                else if (dDate != null && dDate != '') {
                    var dd = parseInt(dDate.substring(0, 2));
                    if (dd < 10) {
                        dd = '0' + dd;
                    }
                    var mm = parseInt(dDate.substring(3, 5));
                    if (mm < 10) {
                        mm = '0' + mm;
                    }
                    var yyyy = parseInt(dDate.substring(6, 10));
                    dDate = mm + '/' + dd + '/' + yyyy;
                    $.getJSON('@Url.Action("CheckDateIsFreezeDate", "FreezeTransaction")', { id: dDate }, function (Data) {
                        if (Data >= 1) {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThisDateIsFrozen</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                        else {
                            if (iError == 1) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillService</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if (iError == 2) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillService</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if (iError == 3) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillAccountNumber</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if ($("#CreditAccountNumber").val() == '') {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else if ($("#NetTotal").val() == '' || $("#NetTotal").val() == 0) {
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleasefillalRequiredfields</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                            }
                            else {
                                bootbox.confirm({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        confirm: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                            className: 'btn-success'
                                        },
                                        cancel: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                            className: 'btn-danger'
                                        }
                                    },
                                    callback: function (result) {
                                        if (result) {
                                            var dialog = bootbox.dialog({
                                                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                                                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Saving...</p>',
                                                closeButton: false
                                            });
                                            var visibleRowIndices = ServiceBillGridView.batchEditApi.GetRowVisibleIndices();
                                            var TransActionlist = [];
                                            for (var i = 0; i < visibleRowIndices.length; i++) {
                                                var TransAction = {
                                                    ServiceNo: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "ServiceNo"),
                                                    ServiceName: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "ServiceName"),
                                                    Price: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "Price"),
                                                    ForeignPrice: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "ForeignPrice"),
                                                    Qty: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "Qty"),
                                                    LocalDiscount: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "LocalDiscount"),
                                                    ForeignDiscount: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "ForeignDiscount"),
                                                    TotalLocal: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalLocal"),
                                                    TotalForeign: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "TotalForeign"),
                                                    Tax: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "Tax"),
                                                    Note: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "Note"),
                                                    ServiceNot: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "ServiceNot"),
                                                    AccountNumber: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "AccountNumber"),
                                                    CostNumber: ServiceBillGridView.batchEditApi.GetCellValue(visibleRowIndices[i], "CostNumber"),
                                                    RowNumber: i
                                                };
                                                TransActionlist.push(TransAction);

                                            }
                                            var HeaderData = {
                                                CompanyTransactionKindID: $("#CompanyTransactionKindID").val(),
                                                BillDate: $("#BillDate").val(),
                                                CurrencyID: $("#CurrencyID").val(),
                                                CurrencyNewValue: $("#CurrencyNewValue").val(),
                                                AccountNumber: $("#AccountNumber").val(),
                                                NoTax: $("#NoTax:checked").val(),
                                                CreditAccountNumber: $("#CreditAccountNumber").val(),
                                                TaxAccountNumber: $("#TaxAccountNumber").val(),
                                                CreditCostNumber: "",
                                                TaxCostNumber: "",
                                                Note: $("#Note").val(),
                                                Discount: $("#Discount").val(),
                                                Tax: $("#Tax").val(),
                                                Total: $("#Total").val(),
                                                NetTotal: $("#NetTotal").val(),
                                                ForeignAmount: $("#ForeignAmount").val(),
                                                ForeignAmountTax: $("#ForeignAmountTax").val(),
                                                NetTotalForeignAmount: $("#NetTotalForeignAmount").val()
                                            }
                                            var dataToSave = {
                                                TransActionServiceBill: TransActionlist,
                                                HeaderServiceBill: HeaderData,
                                            }
                                            $.ajax({
                                                type: "POST",
                                                url: "/ServiceBill/SaveNewMultiPurchaseServiceBill",
                                                data: JSON.stringify(dataToSave),
                                                contentType: 'application/json',
                                                success: function (data) {
                                                    dialog.modal('hide');
                                                    if (data.Code == 0) {
                                                        toastr.error(data.Msg);
                                                    }
                                                    else if (data.Code == 1) {
                                                        $('#modal-container').modal('hide');
                                                        toastr.success(data.Msg);
                                                        document.getElementById("Clear").click();
                                                        bootbox.confirm({
                                                            message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.DoYouWantToUploadAttachments</h6>',
                                                            className: 'rubberBand animated',
                                                            buttons: {
                                                                confirm: {
                                                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                                                    className: 'btn-success'
                                                                },
                                                                cancel: {
                                                                    label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                                                    className: 'btn-danger'
                                                                }
                                                            },
                                                            callback: function (result) {
                                                                if (result) {
                                                                    window.open('/ServiceBill/ShowAttach/' + data.Year + '/' + data.VoucherNumber + '/' + data.CompanyTransactionKindNo + '/' + data.TransactionKindNo, '_blank');
                                                                    bootbox.confirm({
                                                                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.DoYouWantToPrint</h6>',
                                                                        className: 'rubberBand animated',
                                                                        buttons: {
                                                                            confirm: {
                                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                                                                className: 'btn-success'
                                                                            },
                                                                            cancel: {
                                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                                                                className: 'btn-danger'
                                                                            }
                                                                        },
                                                                        callback: function (result) {
                                                                            if (result) {
                                                                                window.open('/PDFReport/DetailServiceBill/' + data.VoucherNumber + '/' + data.CompanyTransactionKindNo + '/' + data.TransactionKindNo+ '/' + data.Year, '_blank');
                                                                            }
                                                                        }
                                                                    });

                                                                }

                                                                else {
                                                                    bootbox.confirm({
                                                                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.DoYouWantToPrint</h6>',
                                                                        className: 'rubberBand animated',
                                                                        buttons: {
                                                                            confirm: {
                                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                                                                                className: 'btn-success'
                                                                            },
                                                                            cancel: {
                                                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                                                                                className: 'btn-danger'
                                                                            }
                                                                        },
                                                                        callback: function (result) {
                                                                            if (result) {
                                                                                window.open('/PDFReport/DetailServiceBill/' + data.VoucherNumber + '/' + data.CompanyTransactionKindNo + '/' + data.TransactionKindNo + '/' + data.Year, '_blank');
                                                                            }
                                                                        }
                                                                    });

                                                                }
                                                            }

                                                        });


                                                    }
                                                },
                                                error: function (data) {
                                                    dialog.modal('hide');
                                                    toastr.error(data);
                                                }
                                            });
                                        }
                                    }
                                });
                            }
                        };
                    });
                }

            }
        }

    }
    function OnInit(s, e) {
        AdjustSize();
        ASPxClientUtils.AttachEventToElement(window, "resize", function (evt) {
            AdjustSize();
        });
        ASPxClientUtils.AttachEventToElement(
            s.GetMainElement(),
            "keydown",
            function (evt) {
                if (evt.keycode == 113 && FocusedCellColumnIndex == 1) {
                    var dialog = bootbox.dialog({
                        title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                        message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                        closeButton: false
                    });
                    var url = '/MultiUse/SearchService/GetService';
                    $.get(url, function (data) {
                        $('#modal-container').html(data);
                        $('#modal-container').modal('show');
                        dialog.modal('hide');
                    })
                }
                if (evt.KeyCode == 113 && FocusedCellColumnIndex == 3) {
                    var dialog = bootbox.dialog({
                        title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                        message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                        closeButton: false
                    });
                    var url = '/MultiUse/SearchPurchasesAcc/DebitAccNo';
                    $.get(url, function (data) {
                        $('#modal-container').html(data);
                        $('#modal-container').modal('show');
                        dialog.modal('hide');
                    })

                };
                if (evt.ctrlKey && FocusedCellColumnIndex == 5) {
                    var dialog = bootbox.dialog({
                        title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                        message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                        closeButton: false
                    });
                    var url = '/MultiUse/SearchCostCenter/DebitCostAccNo';
                    $.get(url, function (data) {
                        $('#modal-container').html(data);
                        $('#modal-container').modal('show');
                        dialog.modal('hide');
                    })

                };
                switch (evt.keyCode) {
                    case 13:
                        if (FocusedCellColumnIndex == 14) {
                            s.AddNewRow();
                        }
                        break;
                }
            });
    };
    function OnEndCallback(s, e) {
        AdjustSize();
    }
    function AdjustSize() {
        var height = document.documentElement.clientHeight;
        ServiceBillGridView.SetHeight(height);
    }
    function Grid_BatchEditEndEditing(s, e) {
        if ((FocusedCellColumnIndex == 1)) {

            var ServiceNoIndex = s.GetColumnByField("ServiceNo").index;
            var ServiceNoValue = e.rowValues[ServiceNoIndex].value;

            if (ServiceNoValue == null || ServiceNoValue == '') {
                return;
            }
            else {
                var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
                var url = '/Service/CheckServiceByID/' + ServiceNoValue;
                $.get(url, function (data) {
                    if (data == "") {
                        s.batchEditApi.SetCellValue(e.visibleIndex, "ServiceNo", "");
                        s.batchEditApi.SetCellValue(e.visibleIndex, "ServiceName", "");
                        s.batchEditApi.SetCellValue(e.visibleIndex, "Price", "0");
                        s.batchEditApi.SetCellValue(e.visibleIndex, "Tax", "0");
                        s.batchEditApi.SetCellValue(e.visibleIndex, "ServiceNot", "");

                        bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheServiceDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        s.batchEditApi.StartEdit(e.visibleIndex, 1);
                        dialog.modal('hide');
                    }
                    else {
                        if ('@Resources.Resource.CurLang' == 'Arb') {
                            s.batchEditApi.SetCellValue(e.visibleIndex, "ServiceName", data.ArabicName, null, true);
                        }
                        else {
                            s.batchEditApi.SetCellValue(e.visibleIndex, "ServiceName", data.EnglishName, null, true);
                        }
                        s.batchEditApi.SetCellValue(e.visibleIndex, "Price", data.SalePrice);
                        s.batchEditApi.SetCellValue(e.visibleIndex, "Tax", data.TaxPercentage, null, true);
                        s.batchEditApi.SetCellValue(e.visibleIndex, "ServiceNot", data.Note, null, true);
                        s.batchEditApi.StartEdit(e.visibleIndex, 3);
                        dialog.modal('hide');
                    }
                });
            }

        }
        else if (FocusedCellColumnIndex == 3) {

            var AccountNumberIndex = s.GetColumnByField("AccountNumber").index;
                var AccountNumber = e.rowValues[AccountNumberIndex].value;
                if (!AccountNumber) {
                    ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "AccountName", "");
                }
                else {
                    if (AccountNumber != null && AccountNumber != '') {
                        $.getJSON('@Url.Action("CheckAccountInfo", "ChartOfAccount")', { id: AccountNumber }, function (Data) {
                            if (Data == "") {
                                ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumber", "");
                                ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "AccountName", "");
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                FocusedCellColumnIndex = 3;
                            }
                            else {
                                if (Data.StoppedAccount) {
                                    ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumber", "");
                                ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "AccountName", "");
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberIsSuspended</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                FocusedCellColumnIndex = 3;
                                }
                                else {
                                    ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "AccountNumber", Data.AccountNumber);
                                    ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "AccountName", Data.AccountName);
                                }


                            }
                        });
                    }
                }
            }
        else if (FocusedCellColumnIndex == 5) {
            var CostCenterIndex = s.GetColumnByField("CostNumber").index;
                var CostCenter = e.rowValues[CostCenterIndex].value;
                if (!CostCenter) {
                    ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "CostName", "");
                }
                else {
                    if (CostCenter != null && CostCenter != '') {
                        $.getJSON('@Url.Action("CheckCostCenterInfo", "CostCenter")', { id: CostCenter }, function (Data) {
                            if (Data == "") {
                                ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "CostNumber", "");
                                ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "CostName", "");
                                bootbox.alert({
                                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheCostCenterDoesNotExist</h6>',
                                    className: 'rubberBand animated',
                                    buttons: {
                                        ok: {
                                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                            className: 'btn-primary'
                                        }
                                    }
                                });
                                FocusedCellColumnIndex = 5;
                            }
                            else {
                                if (Data.StoppedCost) {
                                    ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "CostNumber", "");
                                    ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "CostName", "");
                                    bootbox.alert({
                                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheCostCenterIsSuspended</h6>',
                                        className: 'rubberBand animated',
                                        buttons: {
                                            ok: {
                                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                                className: 'btn-primary'
                                            }
                                        }
                                    });
                                    FocusedCellColumnIndex = 5;
                                }
                                else {
                                    ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "CostNumber", Data.CostNumber);
                                    ServiceBillGridView.batchEditApi.SetCellValue(lastVisibleIndex, "CostName", Data.CostName);
                                }

                            }
                        });
                    }
                }
            }
        window.setTimeout(function () {
            RecalccSum();
        }, 0);
        FocusedCellColumnIndex = 0;
        FocusedCellRowIndex = 0;
    }
    function Grid_BatchEditStartEditing(s, e) {
        FocusedCellColumnIndex = e.focusedColumn.index;
        FocusedCellRowIndex = e.visibleIndex;
        var productNameColumn = s.GetColumnByField("ServiceNo");
        if (!e.rowValues.hasOwnProperty(productNameColumn.index))
            return;
        var cellInfo = e.rowValues[productNameColumn.index];
         lastVisibleIndex = e.visibleIndex;
         currentEditedValue = s.GetRowKey(e.visibleIndex);
         if ((FocusedCellColumnIndex == 3))
         {
             var ServiceNoIndex = s.GetColumnByField("ServiceNo").index;
             var ServiceNoValue = e.rowValues[ServiceNoIndex].value;
             var ServiceNameIndex = s.GetColumnByField("ServiceName").index;
             var ServiceNameValue = e.rowValues[ServiceNameIndex].value;
             if (ServiceNoValue == null || ServiceNoValue == '' ) {
                 window.setTimeout(function () {
                     ServiceBillGridView.batchEditApi.StartEdit(e.visibleIndex, 1);
                 }, 0);
             }
         }
     }
    function OnBeginCallback(s, e) {
        e.customArgs["Reference"] = $("#Reference").val();
    }
    function OnClickPostData(s, e) {
        if (ServiceBillGridView.batchEditApi.HasChanges())
            ServiceBillGridView.UpdateEdit();
        else
            ServiceBillGridView.PerformCallback();
          Alert("dONEEE");
    }
    function Grid_DeleteRowEvent(s, e) {
         setTimeout(function () {
             RecalccSum();
         }, 1000);
      }
    function OnChangesCanceling(s, e) {
        if (s.batchEditApi.HasChanges())
            setTimeout(function () {
                s.Refresh();
            }, 0);
    }
</script>
<div id="modal-container" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-content">
    </div>
</div>
@using (Html.BeginForm("NewMultiPurchase", "ServiceBill", FormMethod.Post, new { id = "myForm" }))
{
    <div style="padding-top: 20px;">
        <div class="panel card-view">
            <div class="panel-heading" style="background-color: #34495E">
                <div class="pull-left">
                    <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.Save - @Resources.Resource.PurchaseForMultipleAccounts</h6>
                </div>
                <div class="clearfix"></div>
            </div>
            <div class="panel-body">
                <div class="col-lg-12">
                    <div class="col-lg-3">
                        @Html.LabelFor(m => m.CompanyTransactionKindID)<span style="color:red">*</span>
                        <div class="form-group">
                            @if (Resources.Resource.CurLang == "Arb")
                            {
                                @Html.DropDownListFor(m => m.CompanyTransactionKindID, new SelectList(Model.CompanyTransactionKind, "CompanyTransactionKindID", "ArabicName"), new { @id = "CompanyTransactionKindID", @class = "form-control input-sml" })

                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.CompanyTransactionKindID, new SelectList(Model.CompanyTransactionKind, "CompanyTransactionKindID", "EnglishName"), new { @id = "CompanyTransactionKindID", @class = "form-control input-sml" })
                            }
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.LabelFor(m => m.CurrencyID)
                            @if (Resources.Resource.CurLang == "Arb")
                            {
                                @Html.DropDownListFor(m => m.CurrencyID, new SelectList(Model.Currency, "CurrencyID", "ArabicName"), new { @id = "CurrencyID", @class = "form-control input-sml" })
                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.CurrencyID, new SelectList(Model.Currency, "CurrencyID", "EnglishName"), new { @id = "CurrencyID", @class = "form-control input-sml" })
                            }
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.CurrencyNewValue)
                            @Html.ValidationMessageFor(m => m.CurrencyNewValue)
                            @Html.TextBoxFor(m => m.CurrencyNewValue, new { @id = "CurrencyNewValue", @class = "form-control input-sml", @readonly = "@readonly" })
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.BillID)
                            @Html.TextBoxFor(m => m.BillID, new { @id = "BillID", @class = "form-control input-sml", @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.BillID)
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.BillDate)
                            @Html.TextBoxFor(model => model.BillDate, new { @id = "BillDate", @class = "form-control input-sml", @Value = Model.BillDate.ToString("dd/MM/yyyy"), data_val = "false" })
                        </div>
                    </div>
                </div>
                <div class="col-lg-12">
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.AccountNumber)
                            <div class="form-group  input-group">
                                @Html.TextBoxFor(m => m.AccountNumber, new { @id = "AccountNumber", @class = "form-control input-sml" })
                                <span class="input-group-btn">
                                    <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnAccNo">
                                        <i class="fa fa-search"></i>
                                    </button>
                                </span>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.AccountName)
                            <div class="form-group input-group">
                                @Html.TextBoxFor(m => m.AccountName, new { @id = "AccountName", @class = "form-control input-sml", @readonly = "readonly" })
                                <span class="input-group-btn">
                                    <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearAccNo">
                                        <i class="fa fa-minus-square"></i>
                                    </button>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-12">
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.CreditAccountNumber) <span style="color:red">*</span>
                            <div class="form-group input-group">
                                @Html.TextBoxFor(m => m.CreditAccountNumber, new { @id = "CreditAccountNumber", @class = "form-control input-sml" })
                                <span class="input-group-btn">
                                    <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnCreditAccNo">
                                        <i class="fa fa-search"></i>
                                    </button>
                                </span>
                                @Html.ValidationMessageFor(m => m.CreditAccountNumber)
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.AccountName)
                            <div class="form-group input-group">
                                @Html.TextBoxFor(m => m.CreditAccountName, new { @id = "CreditAccountName", @class = "form-control input-sml", @readonly = "readonly" })
                                <span class="input-group-btn">
                                    <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearCreditAccNo">
                                        <i class="fa fa-minus-square"></i>
                                    </button>
                                </span>
                            </div>
                        </div>
                    </div>
                    @if (Model.WorkWithCostCenter)
                    {
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.Label(Resources.Resource.CreditCostNumber) <span style="color:red">*</span>
                                <div class="form-group input-group">
                                    @Html.TextBoxFor(m => m.CreditCostNumber, new { @id = "CreditCostNumber", @class = "form-control input-sml" })
                                    <span class="input-group-btn">
                                        <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnCreditCostAccNo">
                                            <i class="fa fa-search"></i>
                                        </button>
                                    </span>
                                    @Html.ValidationMessageFor(m => m.CreditCostNumber)
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.Label(Resources.Resource.CostCenterName)
                                <div class="form-group input-group">
                                    @Html.TextBoxFor(m => m.CreditCostName, new { @id = "CreditCostName", @class = "form-control input-sml", @readonly = "readonly" })
                                    <span class="input-group-btn">
                                        <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearCreditCostAccNo">
                                            <i class="fa fa-minus-square"></i>
                                        </button>
                                    </span>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="col-lg-12">
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.CheckBoxFor(m => m.NoTax, new { @id = "NoTax" }) @Html.Label(Resources.Resource.NoTax, new { @style = "color : red" }) / @Html.Label(Resources.Resource.TaxAccountNumber)
                            @Html.TextBoxFor(m => m.TaxAccountNumber, new { @id = "TaxAccountNumber", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="col-lg-3">
                        <div class="form-group">
                            @Html.Label(Resources.Resource.AccountName)
                            @Html.TextBoxFor(m => m.TaxAccountName, new { @id = "TaxAccountName", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                    @if (Model.WorkWithCostCenter)
                    {
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.Label(Resources.Resource.TaxCostCenter) <span style="color:red">*</span>
                                <div class="form-group input-group">
                                    @Html.TextBoxFor(m => m.TaxCostNumber, new { @id = "TaxCostNumber", @class = "form-control input-sml" })
                                    <span class="input-group-btn">
                                        <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnTaxCostAccNo">
                                            <i class="fa fa-search"></i>
                                        </button>
                                    </span>
                                    @Html.ValidationMessageFor(m => m.TaxCostNumber)
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                @Html.Label(Resources.Resource.CostCenterName)
                                <div class="form-group input-group">
                                    @Html.TextBoxFor(m => m.TaxCostName, new { @id = "TaxCostName", @class = "form-control input-sml", @readonly = "readonly" })
                                    <span class="input-group-btn">
                                        <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearTaxCostAccNo">
                                            <i class="fa fa-minus-square"></i>
                                        </button>
                                    </span>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="col-lg-12">
                    <div class="col-lg-6">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Note)
                            @Html.TextBoxFor(m => m.Note, new { @id = "Note", @class = "form-control input-sml" })
                            @Html.ValidationMessageFor(m => m.Note)
                        </div>
                    </div>
                </div>
                <div class="col-lg-12" style="padding-top:20px;">
                    <div class="col-lg-12">
                        @Html.Action("MultiServiceGridViewPartial", new { id = 0, id2 = 0, id3 = 0 })
                    </div>
                </div>
                <div class="col-lg-12" style="margin-top : 5px">
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Discount)
                            @Html.TextBoxFor(m => m.Discount, new { @id = "Discount", @class = "form-control input-sml", @type = "number", @min = 0 })
                            @Html.ValidationMessageFor(m => m.Discount)
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Total)
                            @Html.TextBoxFor(m => m.sTotal, new { @id = "sTotal", @class = "form-control input-sml", @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.Total)
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Tax)
                            @Html.TextBoxFor(m => m.sTax, new { @id = "sTax", @class = "form-control input-sml", @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.Tax)
                        </div>
                    </div>
                    <div class="col-lg-2">
                        <div class="form-group">
                            @Html.LabelFor(m => m.NetTotal)
                            @Html.TextBoxFor(m => m.sNetTotal, new { @id = "sNetTotal", @class = "form-control input-sml", @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.NetTotal)
                        </div>
                    </div>
                </div>
                <div class="col-lg-12" style="margin-top : 5px">
                    <div class="col-lg-2" id="Foreign1" style="display:none;">
                        <div class="form-group">
                            @Html.LabelFor(m => m.ForeignAmount)
                            @Html.TextBoxFor(m => m.sForeignAmount, new { @id = "sForeignAmount", @class = "form-control input-sml", @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.Total)
                        </div>
                    </div>
                    <div class="col-lg-2" id="Foreign2" style="display:none;">
                        <div class="form-group">
                            @Html.LabelFor(m => m.ForeignAmountTax)
                            @Html.TextBoxFor(m => m.sForeignAmountTax, new { @id = "sForeignAmountTax", @class = "form-control input-sml", @readonly = "readonly" })
                            @Html.ValidationMessageFor(m => m.ForeignAmountTax)
                        </div>
                    </div>
                    <div class="col-lg-2" id="Foreign3" style="display:none;">
                        <div class="form-group">
                            @Html.LabelFor(m => m.NetTotalForeignAmount)
                            @Html.TextBoxFor(m => m.sNetTotalForeignAmount, new { @id = "sNetTotalForeignAmount", @class = "form-control input-sml", @readonly = "readonly" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="panel-footer">
                @Html.DevExpress().Button(settings =>
           {
               settings.Name = "buttonSave";
               settings.Text = Resources.Resource.Save;
               settings.UseSubmitBehavior = false;
               settings.ClientVisible = false;
               settings.ClientSideEvents.Click = "SaveGridData";
           }).GetHtml()
                @Html.DevExpress().Button(settings =>
           {
               settings.Name = "btnClear";
               settings.Text = Resources.Resource.CreateNew;
               settings.UseSubmitBehavior = false;
               settings.ClientVisible = false;
               settings.ClientSideEvents.Click = "ClearGrid";
           }).GetHtml()
                @Html.DevExpress().Button(settings =>
               {
                   settings.Name = "btnRecalculat";
                   settings.UseSubmitBehavior = false;
                   settings.ClientVisible = false;
                   settings.ClientSideEvents.Click = "RecalccSum";
               }).GetHtml()
                <button type="button" class="btn btn-primary btn-anim" id="Save"><i class="fa fa-save"></i><span class="btn-text">@Resources.Resource.Save</span> </button>
                <button type="button" class="btn btn-warning btn-anim" id="Clear"><i class="fa fa-refresh"></i><span class="btn-text">@Resources.Resource.Clear</span> </button>
                <button type="button" class="btn btn-default btn-anim" id="Close"><i class="fa fa-times"></i><span class="btn-text">@Resources.Resource.Close</span></button>
            </div>
        </div>
    </div>
}
@Html.TextBoxFor(m => m.Total, new { @id = "Total", @class = "form-control input-sml", @type = "Number", @min = "0", @readonly = "readonly", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.Tax, new { @id = "Tax", @class = "form-control input-sml", @type = "Number", @min = "0", @readonly = "readonly", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.CurrentYear, new { @id = "CurrentYear", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.NetTotal, new { @id = "NetTotal", @class = "form-control input-sml", @type = "Number", @min = "0", @readonly = "readonly", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.OrignailTaxAccountNumber, new { @id = "OrignailTaxAccountNumber", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.OrignailTaxAccountName, new { @id = "OrignailTaxAccountName", @class = "form-control input-sml", @readonly = "readonly", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.ForeignAmount, new { @id = "ForeignAmount", @class = "form-control input-sml", @type = "Number", @min = "0", @readonly = "readonly", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.ForeignAmountTax, new { @id = "ForeignAmountTax", @class = "form-control input-sml", @type = "Number", @min = "0", @readonly = "readonly", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.NetTotalForeignAmount, new { @id = "NetTotalForeignAmount", @class = "form-control input-sml", @type = "Number", @min = "0", @readonly = "readonly", @style = "visibility : hidden;" })
@Html.CheckBoxFor(m => m.WorkWithCostCenter, new { @id = "WorkWithCostCenter", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TheDecimalPointForTheLocalCurrency, new { @id = "TheDecimalPointForTheLocalCurrency", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TheDecimalPointForTheForeignCurrency, new { @id = "TheDecimalPointForTheForeignCurrency", @style = "visibility : hidden;" })

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
    $(document).ready(function () {
        var bWorkWithCostCenter = document.getElementById("WorkWithCostCenter").checked;
        var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;
        function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
            try {
                decimalCount = Math.abs(decimalCount);
                decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

                const negativeSign = amount < 0 ? "-" : "";

                let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
                let j = (i.length > 3) ? i.length % 3 : 0;

                return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
            } catch (e) {
                console.log(e)
            }
        };
        function validatedate(dateString) {
            var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
            if (dateString.match(dateformat)) {
                var operator = dateString.split('/');
                var datepart = [];
                if (operator.length > 1) {
                    datepart = dateString.split('/');
                }
                var month = parseInt(datepart[1]);
                var day = parseInt(datepart[0]);
                var year = parseInt(datepart[2]);
                var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                if (month == 1 || month > 2) {
                    if (day > ListofDays[month - 1]) {
                        return false;
                    }
                } else if (month == 2) {
                    var leapYear = false;
                    if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                        leapYear = true;
                    }
                    if ((leapYear == false) && (day >= 29)) {
                        return false;
                    } else
                        if ((leapYear == true) && (day > 29)) {
                            return false;
                        }
                }
            }
            else {
                return false;
            }
            return true;
        }
        $("#BillDate").blur(function () {
            var dDate = document.getElementById("BillDate").value;
             var CurrentYear = document.getElementById("CurrentYear").value;
            var d1 = dDate.split("/");
            var From = new Date(d1[2], parseInt(d1[1]) - 1, d1[0]);
            if (d1[2] > CurrentYear || d1[2] < CurrentYear) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.DateIsNotWithinThisYear</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                 if (dDate != null && dDate != '') {
                if (!validatedate(dDate)) {
                    bootbox.alert({
                        message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                        className: 'rubberBand animated',
                        buttons: {
                            ok: {
                                label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                className: 'btn-primary'
                            }
                        }
                    });
                }
                else {
                    var dd = parseInt(dDate.substring(0, 2));
                    if (dd < 10) {
                        dd = '0' + dd;
                    }
                    var mm = parseInt(dDate.substring(3, 5));
                    if (mm < 10) {
                        mm = '0' + mm;
                    }
                    var yyyy = parseInt(dDate.substring(6, 10));
                    dDate = mm + '/' + dd + '/' + yyyy;
                    $.getJSON('@Url.Action("CheckDateIsFreezeDate", "FreezeTransaction")', { id: dDate }, function (Data) {
                        if (Data >= 1) {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.ThisDateIsFrozen</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                        }
                    });
                }
            }
            else {
            }
            }

        });
        $(document).on('click', '#Clear', function () {
            document.getElementById("btnClear").click();
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1;
            var yyyy = today.getFullYear();
            if (dd < 10) {
                dd = '0' + dd;
            }
            if (mm < 10) {
                mm = '0' + mm;
            }
            var today = dd + '/' + mm + '/' + yyyy;
            document.getElementById("CompanyTransactionKindID").selectedIndex = "0";
            document.getElementById("CurrencyID").selectedIndex = "0";
            var SelectedCurrency = $("#CurrencyID").val();
            if (SelectedCurrency != null && SelectedCurrency != '') {
                $.getJSON('@Url.Action("GetCurrencyValueById", "CurrencyValue")', { id: SelectedCurrency }, function (Data) {
                    if (Data != null) {
                        document.getElementById("CurrencyNewValue").value = (Data).toFixed(TheDecimalPointForTheLocalCurrency);
                    }
                    else {
                        document.getElementById("CurrencyNewValue").value = (0).toFixed(TheDecimalPointForTheLocalCurrency);
                    };
                });
            }
            else {
            }
            document.getElementById("Foreign1").style.display = 'none';
            document.getElementById("Foreign2").style.display = 'none';
            document.getElementById("Foreign3").style.display = 'none';
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1;
            var yyyy = today.getFullYear();
            if (dd < 10) {
                dd = '0' + dd;
            }
            if (mm < 10) {
                mm = '0' + mm;
            }
            var today = dd + '/' + mm + '/' + yyyy;
            document.getElementById("BillDate").value = today;
            document.getElementById("Discount").value = (0).toFixed(TheDecimalPointForTheLocalCurrency);
            document.getElementById("Total").value = (0).toFixed(TheDecimalPointForTheLocalCurrency);
            document.getElementById("NetTotal").value = (0).toFixed(TheDecimalPointForTheLocalCurrency);
            document.getElementById("Tax").value = (0).toFixed(TheDecimalPointForTheLocalCurrency);
            document.getElementById("sTotal").value = (0).toFixed(TheDecimalPointForTheLocalCurrency);
            document.getElementById("sNetTotal").value = (0).toFixed(TheDecimalPointForTheLocalCurrency);
            document.getElementById("sTax").value = (0).toFixed(TheDecimalPointForTheLocalCurrency);
            document.getElementById("ForeignAmount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
            document.getElementById("ForeignAmountTax").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
            document.getElementById("NetTotalForeignAmount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
            document.getElementById("sForeignAmount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
            document.getElementById("sForeignAmountTax").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
            document.getElementById("sNetTotalForeignAmount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
            document.getElementById("CreditAccountNumber").value = '';
            document.getElementById("CreditAccountName").value = '';
            document.getElementById("TaxAccountNumber").value = document.getElementById("OrignailTaxAccountNumber").value;
            document.getElementById("TaxAccountName").value = document.getElementById("OrignailTaxAccountName").value;
            document.getElementById("AccountNumber").value = '';
            document.getElementById("AccountName").value = '';
            document.getElementById("Note").value = '';
            if (bWorkWithCostCenter) {
                document.getElementById("CreditCostNumber").value = '';
                document.getElementById("TaxCostNumber").value = '';
                document.getElementById("TaxCostName").value = '';
                document.getElementById("CreditCostName").value = '';
            }
            document.getElementById('NoTax').checked = false;
            document.getElementById("BtnTaxCostAccNo").disabled = false;
            var SelectedValue = $("#CompanyTransactionKindID").val();
            var VoucherDate = document.getElementById("BillDate").value;
            var CurrentYear = document.getElementById("CurrentYear").value;
            var mm = parseInt(VoucherDate.substring(3, 5));
            if (mm < 10) {
                mm = '0' + mm;
            }
            if (SelectedValue != null && SelectedValue != '') {
                $.getJSON('@Url.Action("GetMaxVHIForAcc", "TransAction")', { id: SelectedValue, id2: mm, id3: CurrentYear }, function (Data) {

                    if (Data != null) {
                        document.getElementById("BillID").value = Data;

                    } else {


                    };
                });
            }
            else {
            }
        });
        $(document).on('click', '#Save', function () {
            document.getElementById("buttonSave").click();
        });
        $(document).on('click', '#Close', function () {
            window.location = "/ServiceBill/Index";
        });
        var SelectedValue = $("#CompanyTransactionKindID").val();
        var VoucherDate = document.getElementById("BillDate").value;
        var CurrentYear = document.getElementById("CurrentYear").value;
        var mm = parseInt(VoucherDate.substring(3, 5));
        if (mm < 10) {
            mm = '0' + mm;
        }
        if (SelectedValue != null && SelectedValue != '') {
            $.getJSON('@Url.Action("GetMaxVHIForAcc", "TransAction")', { id: SelectedValue, id2: mm , id3 : CurrentYear}, function (Data) {

                if (Data != null) {
                    document.getElementById("BillID").value = Data;

                } else {
                };
            });
        }
        else {
        }
        $('#CurrencyID').change(function () {
            var SelectedCurrency = $("#CurrencyID").val();
            if (SelectedCurrency != null && SelectedCurrency != '') {
                $.getJSON('@Url.Action("GetCurrencyValueById", "CurrencyValue")', { id: SelectedCurrency }, function (Data) {
                    if (Data != null) {
                        document.getElementById("CurrencyNewValue").value = (Data).toFixed(TheDecimalPointForTheLocalCurrency);
                        document.getElementById("btnRecalculat").click();
                        if (Data == 0) {
                            Data = 1;
                        };
                        if (Data == 1) {
                            document.getElementById("CurrencyNewValue").value = (0).toFixed(TheDecimalPointForTheLocalCurrency);
                            document.getElementById("ForeignAmount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sForeignAmount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("ForeignAmountTax").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sForeignAmountTax").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalForeignAmount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sNetTotalForeignAmount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("Foreign1").style.display = 'none';
                            document.getElementById("Foreign2").style.display = 'none';
                            document.getElementById("Foreign3").style.display = 'none';
                        }
                        else {
                            document.getElementById("Foreign1").style.display = 'block';
                            document.getElementById("Foreign2").style.display = 'block';
                            document.getElementById("Foreign3").style.display = 'block';
                            document.getElementById("ForeignAmount").value = (document.getElementById("Total").value / Data).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sForeignAmount").value = formatMoney((document.getElementById("Total").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("ForeignAmountTax").value = (document.getElementById("Tax").value / Data).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sForeignAmountTax").value = formatMoney((document.getElementById("Tax").value / Data), TheDecimalPointForTheForeignCurrency);
                            document.getElementById("NetTotalForeignAmount").value = (document.getElementById("NetTotal").value / Data).toFixed(TheDecimalPointForTheForeignCurrency);
                            document.getElementById("sNetTotalForeignAmount").value = formatMoney((document.getElementById("NetTotal").value / Data), TheDecimalPointForTheForeignCurrency);
                        }
                    } else {
                        document.getElementById("Foreign1").style.display = 'none';
                        document.getElementById("Foreign2").style.display = 'none';
                        document.getElementById("Foreign3").style.display = 'none';
                        document.getElementById("CurrencyNewValue").value = (0).toFixed(TheDecimalPointForTheLocalCurrency);
                        document.getElementById("ForeignAmount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("sForeignAmount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("ForeignAmountTax").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("sForeignAmountTax").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("NetTotalForeignAmount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                        document.getElementById("sNetTotalForeignAmount").value = (0).toFixed(TheDecimalPointForTheForeignCurrency);
                    };
                });
            } else {
            }

        });
        $('#CompanyTransactionKindID').change(function () {
            var SelectedValue = $("#CompanyTransactionKindID").val();
            var VoucherDate = document.getElementById("BillDate").value;
            var CurrentYear = document.getElementById("CurrentYear").value;
            var mm = parseInt(VoucherDate.substring(3, 5));
            if (mm < 10) {
                mm = '0' + mm;
            }
            if (SelectedValue != null && SelectedValue != '') {
                $.getJSON('@Url.Action("GetMaxVHIForAcc", "TransAction")', { id: SelectedValue, id2: mm , id3: CurrentYear}, function (Data) {

                    if (Data != null) {
                        document.getElementById("BillID").value = Data;

                    } else {


                    };
                });
            } else {
            }
        });
        $('#NoTax').on('change', function (e) {
            var NoTax = $("#NoTax:checked").val();
            document.getElementById("btnRecalculat").click();
            if (NoTax) {
                if (bWorkWithCostCenter) {
                    document.getElementById("BtnTaxCostAccNo").disabled = true;
                    document.getElementById("TaxCostNumber").value = '';
                    document.getElementById("TaxCostName").value = '';
                }
                document.getElementById("TaxAccountNumber").value = '';
                document.getElementById("TaxAccountName").value = '';
            }
            else {
                if (bWorkWithCostCenter) {
                    document.getElementById("BtnTaxCostAccNo").disabled = false;
                    document.getElementById("TaxCostNumber").value = '';
                    document.getElementById("TaxCostName").value = '';
                }
                document.getElementById("TaxAccountNumber").value = document.getElementById("OrignailTaxAccountNumber").value;
                document.getElementById("TaxAccountName").value = document.getElementById("OrignailTaxAccountName").value;
            }
        });
        $('#Discount').on('change', function (e) {
            document.getElementById("btnRecalculat").click();
        });
        $("#Discount").blur(function () {
            if (document.getElementById("Discount").value == "") {
                document.getElementById("Discount").value = "0";
            }
            document.getElementById("btnRecalculat").click();
        });
        $("#BillDate").focus().select();
        $("#BillDate").mask("99/99/9999");
        $("#BillDate").keyup(function (event) {
            if (event.keyCode == 13)
                $("#AccountNumber").focus().select();
        });
        $("#Note").keyup(function (event) {
            if (event.keyCode == 13)
                $("#Discount").focus().select();
        });
        $("#Discount").keyup(function (event) {
            if (event.keyCode == 13)
                $("#BillDate").focus().select();
        });
        $('#BtnAccNo').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchClientAccount/AccountNumber';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnCreditAccNo').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchAcc/CreditAccNo';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnCreditCostAccNo').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchCostCenter/CreditCostAccNo';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnTaxCostAccNo').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchCostCenter/TaxCostAccNo';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnClearAccNo').on('click', function () {
            document.getElementById("AccountNumber").value = '';
            document.getElementById("AccountName").value = '';
        });
        $('#BtnClearCreditAccNo').on('click', function () {
            document.getElementById("CreditAccountNumber").value = '';
            document.getElementById("CreditAccountName").value = '';
        });
        $('#BtnClearCreditCostAccNo').on('click', function () {
            document.getElementById("CreditCostNumber").value = '';
            document.getElementById("CreditCostName").value = '';
        });
        $('#BtnClearTaxCostAccNo').on('click', function () {
            document.getElementById("TaxCostNumber").value = '';
            document.getElementById("TaxCostName").value = '';
        });
        $('#tdataTable').on('click', '.modal-close-btn', function () {
            $('#modal-container').modal('hide');
        });
        $(document).on('click', '.js-Pop', function (e) {
            $('#modal-container').removeData('bs.modal');
            e.preventDefault();
            $(this).attr('data-target', '#modal-container');
            $(this).attr('data-toggle', 'modal');

        });
        $('#modal-container').on('hidden.bs.modal', function () {
            $(this).removeData('bs.modal');
        });
        $('#CancelModal').on('click', function () {
            return false;
        });




        $("#AccountNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#CreditAccountNumber").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchClientAccount/AccountNumber';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $("#CreditAccountNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#CreditCostNumber").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchAcc/CreditAccNo';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $("#CreditCostNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#TaxCostNumber").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchCostCenter/CreditCostAccNo';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });
        $("#TaxCostNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#Note").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchCostCenter/TaxCostAccNo';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });

        $("#AccountNumber").blur(function () {
            var AccountNumber = document.getElementById("AccountNumber").value;
            if (AccountNumber == '') {
                document.getElementById("AccountName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckClientAccount", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("AccountNumber").value = '';
                            document.getElementById("AccountName").value = '';
                            $("#AccountNumber").focus();
                        }
                        else {
                            document.getElementById("AccountName").value = Data.AccountName;

                        }
                    });
                }
            }
        });
        $("#CreditAccountNumber").blur(function () {
            var AccountNumber = document.getElementById("CreditAccountNumber").value;
            if (AccountNumber == '') {
                document.getElementById("CreditAccountName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckAcountAcc", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("CreditAccountNumber").value = '';
                            document.getElementById("CreditAccountName").value = '';
                            $("#CreditAccountNumber").focus();
                        }
                        else {
                            document.getElementById("CreditAccountName").value = Data.AccountName;

                        }
                    });
                }
            }
        });

        $("#CreditCostNumber").blur(function () {
            var AccountNumber = document.getElementById("CreditCostNumber").value;
            if (AccountNumber == '') {
                document.getElementById("CreditCostName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("GetCostCenterInfo", "CostCenter")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("CreditCostNumber").value = '';
                            document.getElementById("CreditCostName").value = '';
                            $("#CreditCostNumber").focus();
                        }
                        else {
                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                document.getElementById("CreditCostName").value = Data.ArabicName;
                            }
                            else {
                                document.getElementById("CreditCostName").value = Data.EnglishName;
                            }

                        }
                    });
                }
            }
        });
        $("#TaxCostNumber").blur(function () {
            var AccountNumber = document.getElementById("TaxCostNumber").value;
            if (AccountNumber == '') {
                document.getElementById("TaxCostName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("GetCostCenterInfo", "CostCenter")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("TaxCostNumber").value = '';
                            document.getElementById("TaxCostName").value = '';
                            $("#TaxCostNumber").focus();
                        }
                        else {
                            if ('@Resources.Resource.CurLang' == 'Arb') {
                                document.getElementById("TaxCostName").value = Data.ArabicName;
                            }
                            else {
                                document.getElementById("TaxCostName").value = Data.EnglishName;
                            }

                        }
                    });
                }
            }
        });



    });
</script>
}






