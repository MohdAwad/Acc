@model Acc.ViewModels.TransReportVM
@{
    ViewBag.Title = @Resources.Resource.SearchForTrans;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/Content/jquery-ui.css" rel="stylesheet" />

<style>
    .panel-body {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-footer {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .panel-title {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }

    .dt-button {
        display: none !important;
    }

    #MemberShipTypeBody1 {
        font-family: Verdana, Geneva, Tahoma, sans-serif
    }
</style>
<script>
    function GetSelectedAccount(data) {
          if (data.AccountNumber != null && data.AccountNumber != '') {
              document.getElementById("AccountNumber").value = data.AccountNumber;
            if (@Resources.Resource.CurLang= "Arb") {
                document.getElementById("AccountName").value = data.AccountName;
            }
            else {
                document.getElementById("AccountName").value = data.AccountName;
            }
        }
        else {
            document.getElementById("AccountNumber").value = '';
            document.getElementById("AccountName").value = '';
        }
    }
       var AccNumber = [];
    $.getJSON('@Url.Action("GetAcountAcc", "MultiUse")', { id: 0 }, function (Data) {
        AccNumber = [];
            for (var i = 0, len = Data.length; i < len; i++) {
                var r = { label: Data[i].AccountName, value: Data[i].AccountNumber, stop: Data[i].StoppedAccount };
                AccNumber.push(r);
            }
    });
    $(function () {
        $("#AccountNumber").autocomplete({
            source: AccNumber,
            select: function (event, ui) {
                document.getElementById("AccountNumber").value = ui.item.value;
                document.getElementById("AccountName").value = ui.item.label;
            }
        });
    });

</script>
<div class="panel card-view">
    <div class="panel-heading" style="background-color: #34495E">
        <div class="pull-left">
            <h6 class="panel-title txt-light" style="font-weight:bold">@Resources.Resource.SearchForTrans</h6>
        </div>
        <div class="clearfix"></div>
    </div>
    <div class="panel-body">
        <div class="col-lg-12">
            <div class="form-group">
                <div class="col-lg-3">
                    @Html.CheckBoxFor(m => m.ByAcc, new { @id = "ByAcc" }) @Html.Label(Resources.Resource.ByAcc)
                    <div class="form-group  input-group">
                        @Html.TextBoxFor(m => m.AccountNumber, new { @id = "AccountNumber", @class = "form-control input-sml"})
                        <span class="input-group-btn">
                            <button class="btn btn-default btn-icon-anim btn-square" type="button" id="BtnAccNo">
                                <i class="fa fa-search"></i>
                            </button>
                        </span>
                    </div>
                </div>
                <div class="col-lg-4">
                    @Html.Label(Resources.Resource.Name)
                    <div class="form-group input-group">
                        @Html.TextBoxFor(m => m.AccountName, new { @id = "AccountName", @class = "form-control input-sml", @readonly = "readonly" })
                        <span class="input-group-btn">
                            <button class="btn btn-danger btn-icon-anim btn-square" type="button" id="BtnClearAccNo">
                                <i class="fa fa-minus-square"></i>
                            </button>
                        </span>
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.CheckBoxFor(m => m.ByDate, new { @id = "ByDate" }) @Html.Label(Resources.Resource.ByDate) / @Html.LabelFor(m => m.FromDate)
                        @Html.TextBoxFor(model => model.FromDate, new { @id = "FromDate", @class = "form-control input-sml", @Value = Model.FromDate.ToString("dd/MM/yyyy") })
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.LabelFor(m => m.ToDate)
                        @Html.TextBoxFor(model => model.ToDate, new { @id = "ToDate", @class = "form-control input-sml", @Value = Model.ToDate.ToString("dd/MM/yyyy") })
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <div class="form-group">
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.CheckBoxFor(m => m.ByValue, new { @id = "ByValue" }) @Html.Label(Resources.Resource.ByValue) / @Html.LabelFor(m => m.FromValue)
                        @Html.TextBoxFor(m => m.FromValue, new { @id = "FromValue", @class = "form-control input-sml", @type = "number" })
                    </div>
                </div>
                <div class="col-lg-2">
                    <div class="form-group">
                        @Html.LabelFor(m => m.ToValue)
                        @Html.TextBoxFor(m => m.ToValue, new { @id = "ToValue", @class = "form-control input-sml", @type = "number" })
                    </div>
                </div>

                <div class="col-lg-3">
                    <div class="form-group">
                        @Html.LabelFor(model => model.DebitCredit)
                        @Html.DropDownListFor(m => m.DebitCredit, new List<SelectListItem>
                                                         {
                                                          new SelectListItem{ Text=Resources.Resource.DebitTransAction, Value = "0",Selected=true },
                                                          new SelectListItem{ Text=Resources.Resource. CreditTransAction, Value = "1",Selected=false }
                                                            }, new { @id = "DebitCredit", @class = "form-control  input-sm" })
                        @Html.ValidationMessageFor(model => model.DebitCredit, "", new { @class = "text-danger" })

                    </div>
                </div>
                <div class="col-md-5">
                    <div class="form-group">
                        @Html.CheckBoxFor(m => m.ByNote, new { @id = "ByNote" }) @Html.Label(Resources.Resource.ByNote)
                        @Html.TextBoxFor(m => m.Note, new { @id = "Note", @class = "form-control input-sml" })
                        @Html.ValidationMessageFor(m => m.Note)
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <button type="submit" class="btn btn-anim btnSearch" id="reload"><i class=" fa fa-search"></i><span class="btn-text">@Resources.Resource.Search</span></button>
            @if (User.IsInRole("PrintRepSearchForTrans") || User.IsInRole("CoOwner"))
            {
                <button type="submit" class="btn btn-warning btn-anim" id="PrintPDF"><i class=" fa fa-print"></i><span class="btn-text">@Resources.Resource.Print</span></button>
            }
            <button type="submit" class="btn btn-anim btnFav" id="AddToFav"><i class=" fa fa-star"></i><span class="btn-text">@Resources.Resource.AddToFav</span></button>
            <button type="button" class="btn btn-default btn-anim" id="CloseForm"><i class="fa fa-times"></i><span class="btn-text">@Resources.Resource.Close</span></button>
        </div>
        <div class="col-lg-12" style="margin-top : 10px">
            <table id="tdataTable" class="table table-hover table-bordered mb-0" width="100%">
                <thead>
                    <tr>
                        <th>@Resources.Resource.Date</th>
                        <th>@Resources.Resource.TransNo</th>
                        <th>@Resources.Resource.Name</th>
                        <th>@Resources.Resource.AccountNumber</th>
                        <th>@Resources.Resource.AccountName</th>
                        <th>@Resources.Resource.Ammount</th>
                        <th>@Resources.Resource.Note</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
    <div class="panel-footer">

    </div>
</div>
<div id="modal-container" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-content">
    </div>
</div>

@Html.TextBoxFor(m => m.TheDecimalPointForTheLocalCurrency, new { @id = "TheDecimalPointForTheLocalCurrency", @style = "visibility : hidden;" })
@Html.TextBoxFor(m => m.TheDecimalPointForTheForeignCurrency, new { @id = "TheDecimalPointForTheForeignCurrency", @style = "visibility : hidden;" })

@section scripts{
    @Scripts.Render("~/bundles/jqueryval");
<script>
    $(document).ready(function () {
        var TheDecimalPointForTheLocalCurrency = document.getElementById("TheDecimalPointForTheLocalCurrency").value;
        var TheDecimalPointForTheForeignCurrency = document.getElementById("TheDecimalPointForTheForeignCurrency").value;

        function validatedate(dateString) {
            var dateformat = /(((0|1)[0-9]|2[0-9]|3[0-1])\/(0[1-9]|1[0-2])\/((19|20)\d\d))$/;
            if (dateString.match(dateformat)) {
                var operator = dateString.split('/');
                var datepart = [];
                if (operator.length > 1) {
                    datepart = dateString.split('/');
                }
                var month = parseInt(datepart[1]);
                var day = parseInt(datepart[0]);
                var year = parseInt(datepart[2]);
                var ListofDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
                if (month == 1 || month > 2) {
                    if (day > ListofDays[month - 1]) {
                        return false;
                    }
                } else if (month == 2) {
                    var leapYear = false;
                    if ((year % 4 == 0) && ((!(year % 100 == 0)) || (year % 400 == 0))) {
                        leapYear = true;
                    }
                    if ((leapYear == false) && (day >= 29)) {
                        return false;
                    } else
                        if ((leapYear == true) && (day > 29)) {
                            return false;
                        }
                }
            }
            else {
                return false;
            }
            return true;
        }
        function formatMoney(amount, decimalCount, decimal = ".", thousands = ",") {
            try {
                decimalCount = Math.abs(decimalCount);
                decimalCount = isNaN(decimalCount) ? decimalCount : decimalCount;

                const negativeSign = amount < 0 ? "-" : "";

                let i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
                let j = (i.length > 3) ? i.length % 3 : 0;

                return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
            } catch (e) {
                console.log(e)
            }
        };

        $(document).on('click', '#AddToFav', function () {

            bootbox.confirm({
                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.AreYouSure</h6>',
                className: 'rubberBand animated',
                buttons: {
                    confirm: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Yes</span>',
                        className: 'btn-success'
                    },
                    cancel: {
                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.No</span>',
                        className: 'btn-danger'
                    }
                },
                callback: function (result) {
                    if (result) {
                        var dialog = bootbox.dialog({
                            title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                            message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.Saving...</p>',
                            closeButton: false
                        });

                        var dataToSave = {

                            ScreenName: '@Resources.Resource.SearchForTrans',
                            ScreenUrl: "/Report/SearchForTrans",
                            ScreenType: 1

                        };

                        $.ajax({
                            type: "POST",
                            url: "/FavScreen/AddToFave",
                            data: JSON.stringify(dataToSave),
                            contentType: 'application/json',
                            success: function (data) {

                                dialog.modal('hide');
                                if (data.Code == 0) {
                                    toastr.error(data.Msg);
                                }
                                else if (data.Code == 1) {
                                    toastr.success(data.Msg);
                                }

                            },
                            error: function (data) {
                                dialog.modal('hide');
                                toastr.error(data);
                            }

                        });
                    }
                }
            });


        });

        $(document).on('click', '#PrintPDF', function () {
            var FromDate = $("#FromDate").val();
            var ToDate = $("#ToDate").val();
            var AccountNumber = $("#AccountNumber").val();
            var DebitCredit = $("#DebitCredit").val();
            var FromValue = $("#FromValue").val();
            var ToValue = $("#ToValue").val();
            var Note = $("#Note").val();

            var ByAcc = $("#ByAcc:checked").val();
            var ByDate = $("#ByDate:checked").val();
            var ByValue = $("#ByValue:checked").val();
            var ByNote = $("#ByNote:checked").val();

            if (ByAcc) { ByAcc = 1 } else { ByAcc = 0 }
            if (ByDate) { ByDate = 1 } else { ByDate = 0 }
            if (ByValue) { ByValue = 1 } else { ByValue = 0 }
            if (ByNote) { ByNote = 1 } else { ByNote = 0 }


            if (Note == '' || Note == null) {
                Note = "0";
            }
            if (AccountNumber == '' || AccountNumber == null) {
                AccountNumber = "0";
            }

            var words = FromDate.split('/');
            FromDate = words[0] + words[1] + words[2];
            words = ToDate.split('/');
            ToDate = words[0] + words[1] + words[2];






            window.open('/PDFReport/GetTransActionPDF/' + FromDate + "/" + ToDate + "/" + AccountNumber + "/" + DebitCredit + "/" + FromValue + "/" + ToValue + "/" + Note + "/" + ByAcc + "/" +
                ByDate + "/" + ByValue + "/" + ByNote, '_blank');







        });

        $(document).on('click', '#CloseForm', function () {
            window.location = "/Report/ReportDash";
        });
        $("#FromDate").blur(function () {
            var dDate = document.getElementById("FromDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("FromDate").value = '01/01/' + new Date().getFullYear()
            }
        });
        $("#ToDate").blur(function () {
            var dDate = document.getElementById("ToDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
                document.getElementById("ToDate").value = '01/01/' + new Date().getFullYear()
            }
        });
        $("#FromDate").mask("99/99/9999");
        $("#ToDate").mask("99/99/9999");
        $("#FromDate").focus().select();
        $("#FromDate").keyup(function (event) {
            if (event.keyCode == 13)
                $("#ToDate").focus().select();
        });
        $("#ToDate").keyup(function (event) {
            if (event.keyCode == 13)
                $("#FromValue").focus().select();
        });
        $("#FromValue").keyup(function (event) {
            if (event.keyCode == 13)
                $("#ToValue").focus().select();
        });
        $("#ToValue").keyup(function (event) {
            if (event.keyCode == 13)
                $("#Note").focus().select();
        });
        $("#Note").keyup(function (event) {
            if (event.keyCode == 13)
                $("#AccountNumber").focus().select();
        });
        $("#AccountNumber").keyup(function (event) {
            if (event.keyCode == 13) {
                $("#FromDate").focus().select();
            }
            else if (event.keyCode == 17) {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                var url = '/MultiUse/SearchAcc/SearchFromAccountNumber';
                $.get(url, function (data) {
                    $('#modal-container').html(data);
                    $('#modal-container').modal('show');
                    dialog.modal('hide');
                })
            }
        });

        $(document).on('click', '#reload', function () {
            var dDate = document.getElementById("FromDate").value;
            var dToDate = document.getElementById("ToDate").value;
            if (!validatedate(dDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else if (!validatedate(dToDate)) {
                bootbox.alert({
                    message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.InvalidDate</h6>',
                    className: 'rubberBand animated',
                    buttons: {
                        ok: {
                            label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                            className: 'btn-primary'
                        }
                    }
                });
            }
            else {
                var dialog = bootbox.dialog({
                    title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                    message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                    closeButton: false
                });
                tabelMemRef.ajax.reload();
                dialog.modal('hide');
            }
        });
        var tabelMemRef = $("#tdataTable").DataTable({
            "language": {
                "emptyTable": '@Resources.Resource.EmptyTable',
                "search": '@Resources.Resource.Search',
                "loadingRecords": '@Resources.Resource.LoadingRecords',
                "processing": '@Resources.Resource.Processing',
                "zeroRecords": '@Resources.Resource.ZeroRecords',
                "info": '@Resources.Resource.Info',
                "infoEmpty": '@Resources.Resource.InfoEmpty',
                "lengthMenu": '@Resources.Resource.LengthMenu',
                "infoFiltered": '@Resources.Resource.InfoFiltered',
                "paginate": {
                    "previous": '@Resources.Resource.Previous',
                    "next": '@Resources.Resource.Next',
                    "first": '@Resources.Resource.First',
                    "last": '@Resources.Resource.Last',
                },
                "aria": {
                    "sortAscending": '@Resources.Resource.SortAscending',
                    "sortDescending": '@Resources.Resource.SortDescending'
                }
            },
            "scrollY": "500px",
            "scrollX": true,
            "ordering": false,
            "autoWidth": false,
            "paging": false,
            "searching": false,
            "columnDefs": [
                { "width": 70, "targets": 0, "className": "dt-center" },
                { "width": 100, "targets": 1, "className": "dt-center" },
                { "targets": 2, "className": "dt-center" },
                { "width": 100, "targets": 3, "className": "dt-center" },
                { "targets": 4, "className": "dt-center" },
                { "width": 100, "targets": 5, "className": "dt-center" },
                { "targets": 6, "className": "dt-center" }
            ],
            dom: 'Bfrtip',
            buttons: [
            ],
            fnDrawCallback: function () {
                $('[data-toggle="popover"]').popover();
            }
            ,
            ajax: {
                "type": "POST",
                url: "/Report/GetTransAction",
                "data": function (d) {
                    d.FromDate = $("#FromDate").val();
                    d.ToDate = $("#ToDate").val();
                    d.AccountNumber = $("#AccountNumber").val();
                    d.DebitCredit = $("#DebitCredit").val();
                    d.FromValue = $("#FromValue").val();
                    d.ToValue = $("#ToValue").val();
                    d.Note = $("#Note").val();

                    d.ByAcc = $("#ByAcc:checked").val();
                    d.ByDate = $("#ByDate:checked").val();
                    d.ByValue = $("#ByValue:checked").val();
                    d.ByNote = $("#ByNote:checked").val();



                },
                dataSrc: ""
            },
            columns: [
                {
                    data: "VoucherDate",
                    render: function (data, type, r) {
                        return moment(data).format('DD/MM/YYYY')
                    }

                },
                {
                    data: "VoucherNumber"

                }
                ,
                {
                    data: "TransName"

                }
                ,
                {
                    data: "AccountNumber"

                }
                ,
                {
                    data: "ArabicName"

                }, {
                    data: "Value",
                    render: function (data, type, r) {

                        return (formatMoney(data,TheDecimalPointForTheLocalCurrency))

                    }
                },



                {
                    data: "Note"

                }



            ]


        });

        $('#BtnAccNo').on('click', function () {
            var dialog = bootbox.dialog({
                title: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.PleaseWait...</h6>',
                message: '<p style="font-family: Verdana, Geneva, Tahoma, sans-serif"><i class="fa fa-spin fa-spinner"></i> @Resources.Resource.PreparingData...</p>',
                closeButton: false
            });
            var url = '/MultiUse/SearchAcc/SearchFromAccountNumber';
            $.get(url, function (data) {
                $('#modal-container').html(data);
                $('#modal-container').modal('show');
                dialog.modal('hide');
            })
        });
        $('#BtnClearAccNo').on('click', function () {
            document.getElementById("AccountNumber").value = '';
            document.getElementById("AccountName").value = '';
        });
        $("#AccountNumber").blur(function () {
            var AccountNumber = document.getElementById("AccountNumber").value;
            if (AccountNumber == '') {
                document.getElementById("AccountName").value = '';
            }
            else {
                if (AccountNumber != null && AccountNumber != '') {
                    $.getJSON('@Url.Action("CheckAcountAcc", "MultiUse")', { id: AccountNumber }, function (Data) {
                        if (Data == "") {
                            bootbox.alert({
                                message: '<h6 style="font-family: Verdana, Geneva, Tahoma, sans-serif"> @Resources.Resource.TheAccountNumberDoesNotExist</h6>',
                                className: 'rubberBand animated',
                                buttons: {
                                    ok: {
                                        label: '<span style="font-family: Verdana, Geneva, Tahoma, sans-serif">@Resources.Resource.Ok</span>',
                                        className: 'btn-primary'
                                    }
                                }
                            });
                            document.getElementById("AccountNumber").value = '';
                            document.getElementById("AccountName").value = '';
                            $("#AccountNumber").focus();
                        }
                        else {
                            document.getElementById("AccountName").value = Data.AccountName;

                        }
                    });
                }
            }
        });
    });

</script>

}




